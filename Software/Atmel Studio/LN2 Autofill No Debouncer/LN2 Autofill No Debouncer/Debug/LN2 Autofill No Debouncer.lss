
LN2 Autofill No Debouncer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000259c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  00006378  00002378  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000022f  00802800  00802800  0000259c  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00002638  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006f3d  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003463  00000000  00000000  0000987d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000264a  00000000  00000000  0000cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000548  00000000  00000000  0000f32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002008  00000000  00000000  0000f874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c91  00000000  00000000  0001187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  0001250d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_17>
      48:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	c0 01       	movw	r24, r0
      a2:	de 01       	movw	r26, r28
      a4:	b5 02       	muls	r27, r21
      a6:	eb 02       	muls	r30, r27
      a8:	23 03       	mulsu	r18, r19
      aa:	5b 03       	fmul	r21, r19
      ac:	7c 03       	fmul	r23, r20
      ae:	ab 03       	fmulsu	r18, r19

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	2a e2       	ldi	r18, 0x2A	; 42
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	af 32       	cpi	r26, 0x2F	; 47
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 dd 06 	call	0xdba	; 0xdba <main>
      d0:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:
	If the thermistor is cold (high resistance) or unplugged, then this
	message is displayed on the screen.
----------------------------------------------------------------------*/
void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 2b 08 	call	0x1056	; 0x1056 <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	68 e7       	ldi	r22, 0x78	; 120
      e2:	73 e6       	ldi	r23, 0x63	; 99
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	67 e8       	ldi	r22, 0x87	; 135
      ee:	73 e6       	ldi	r23, 0x63	; 99
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f8:	8d e8       	ldi	r24, 0x8D	; 141
      fa:	90 e2       	ldi	r25, 0x20	; 32
      fc:	01 97       	sbiw	r24, 0x01	; 1
      fe:	f1 f7       	brne	.-4      	; 0xfc <handle_button+0x4>
     100:	00 00       	nop
----------------------------------------------------------------------*/
void handle_button(void)
{

	_delay_ms(10);
	switch (button_pushed) {
     102:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     106:	82 30       	cpi	r24, 0x02	; 2
     108:	e9 f1       	breq	.+122    	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
     10a:	18 f4       	brcc	.+6      	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	41 f0       	breq	.+16     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
     110:	ba c0       	rjmp	.+372    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
     112:	83 30       	cpi	r24, 0x03	; 3
     114:	09 f4       	brne	.+2      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
     116:	68 c0       	rjmp	.+208    	; 0x1e8 <__EEPROM_REGION_LENGTH__+0xe8>
     118:	84 30       	cpi	r24, 0x04	; 4
     11a:	09 f4       	brne	.+2      	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
     11c:	8a c0       	rjmp	.+276    	; 0x232 <__EEPROM_REGION_LENGTH__+0x132>
     11e:	b3 c0       	rjmp	.+358    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
		case BLUEBUTTON:
			if (!BLUEBUTTONCLOSED) {
     120:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     124:	80 fd       	sbrc	r24, 0
     126:	b1 c0       	rjmp	.+354    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				return;
			}
			if (BLUVALVEOPEN) {				// See valves.h
     128:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     12c:	88 23       	and	r24, r24
     12e:	24 f4       	brge	.+8      	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
				CLOSEVALVE(BLUVALVE);
     130:	80 e8       	ldi	r24, 0x80	; 128
     132:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     136:	11 c0       	rjmp	.+34     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
			} else if (BLUENABLED && BLUTHERMWARM) {
     138:	8c e0       	ldi	r24, 0x0C	; 12
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     140:	88 23       	and	r24, r24
     142:	59 f0       	breq	.+22     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
     144:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     148:	80 ff       	sbrs	r24, 0
     14a:	07 c0       	rjmp	.+14     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
				OPENVALVE(BLUVALVE);
     14c:	80 e8       	ldi	r24, 0x80	; 128
     14e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     152:	e7 e0       	ldi	r30, 0x07	; 7
     154:	f8 e2       	ldi	r31, 0x28	; 40
     156:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     158:	17 86       	std	Z+15, r1	; 0x0f
			}
			if (BLUENABLED && !BLUTHERMWARM) {
     15a:	8c e0       	ldi	r24, 0x0C	; 12
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     162:	88 23       	and	r24, r24
     164:	39 f0       	breq	.+14     	; 0x174 <__EEPROM_REGION_LENGTH__+0x74>
     166:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     16a:	80 fd       	sbrc	r24, 0
     16c:	03 c0       	rjmp	.+6      	; 0x174 <__EEPROM_REGION_LENGTH__+0x74>
				disp_coldtherm();
     16e:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     172:	89 c0       	rjmp	.+274    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
			} else if ((screen_value == SCRVALVES)) {
     174:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	09 f0       	breq	.+2      	; 0x17e <__EEPROM_REGION_LENGTH__+0x7e>
     17c:	84 c0       	rjmp	.+264    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
				display(SCRVALVES);
     17e:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     182:	81 c0       	rjmp	.+258    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
			}
			break;

		case REDBUTTON:
			if (!REDBUTTONCLOSED) {
     184:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     188:	81 fd       	sbrc	r24, 1
     18a:	7f c0       	rjmp	.+254    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				return;
			}
			if (REDVALVEOPEN) {				// See valves.h
     18c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     190:	86 ff       	sbrs	r24, 6
     192:	04 c0       	rjmp	.+8      	; 0x19c <__EEPROM_REGION_LENGTH__+0x9c>
				CLOSEVALVE(REDVALVE);
     194:	80 e4       	ldi	r24, 0x40	; 64
     196:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     19a:	11 c0       	rjmp	.+34     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
			} else if (REDENABLED && REDTHERMWARM) {
     19c:	8d e0       	ldi	r24, 0x0D	; 13
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     1a4:	88 23       	and	r24, r24
     1a6:	59 f0       	breq	.+22     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
     1a8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1ac:	81 ff       	sbrs	r24, 1
     1ae:	07 c0       	rjmp	.+14     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
				OPENVALVE(REDVALVE);
     1b0:	80 e4       	ldi	r24, 0x40	; 64
     1b2:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     1b6:	e7 e0       	ldi	r30, 0x07	; 7
     1b8:	f8 e2       	ldi	r31, 0x28	; 40
     1ba:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1bc:	10 8a       	std	Z+16, r1	; 0x10
			}
			if (REDENABLED && !REDTHERMWARM) {
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     1c6:	88 23       	and	r24, r24
     1c8:	39 f0       	breq	.+14     	; 0x1d8 <__EEPROM_REGION_LENGTH__+0xd8>
     1ca:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1ce:	81 fd       	sbrc	r24, 1
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <__EEPROM_REGION_LENGTH__+0xd8>
				disp_coldtherm();
     1d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1d6:	57 c0       	rjmp	.+174    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
			} else if ((screen_value == SCRVALVES)) {
     1d8:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	09 f0       	breq	.+2      	; 0x1e2 <__EEPROM_REGION_LENGTH__+0xe2>
     1e0:	52 c0       	rjmp	.+164    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
				display(SCRVALVES);
     1e2:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     1e6:	4f c0       	rjmp	.+158    	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
			}
			break;

		case BUFFERBUTTON:
			if (!BUFBUTTONCLOSED) {
     1e8:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     1ec:	82 fd       	sbrc	r24, 2
     1ee:	4d c0       	rjmp	.+154    	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				return;
			}
			if (BUFVALVEOPEN) {				// See valves.h
     1f0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1f4:	85 ff       	sbrs	r24, 5
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <__EEPROM_REGION_LENGTH__+0x100>
				CLOSEVALVE(BUFVALVE);
     1f8:	80 e2       	ldi	r24, 0x20	; 32
     1fa:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1fe:	0b c0       	rjmp	.+22     	; 0x216 <__EEPROM_REGION_LENGTH__+0x116>
			} else if (BUFTHERMWARM) {
     200:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     204:	82 ff       	sbrs	r24, 2
     206:	07 c0       	rjmp	.+14     	; 0x216 <__EEPROM_REGION_LENGTH__+0x116>
				OPENVALVE(BUFVALVE);
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     20e:	e7 e0       	ldi	r30, 0x07	; 7
     210:	f8 e2       	ldi	r31, 0x28	; 40
     212:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     214:	11 8a       	std	Z+17, r1	; 0x11
			}
			if (!BUFTHERMWARM) {
     216:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     21a:	82 fd       	sbrc	r24, 2
     21c:	03 c0       	rjmp	.+6      	; 0x224 <__EEPROM_REGION_LENGTH__+0x124>
				disp_coldtherm();
     21e:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     222:	31 c0       	rjmp	.+98     	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
			} else if ((screen_value == SCRVALVES)) {
     224:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	69 f5       	brne	.+90     	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
				display(SCRVALVES);
     22c:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     230:	2a c0       	rjmp	.+84     	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
			}
			break;

		case SUPPLYBUTTON:
			if (!SUPBUTTONCLOSED) {
     232:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     236:	83 fd       	sbrc	r24, 3
     238:	28 c0       	rjmp	.+80     	; 0x28a <__EEPROM_REGION_LENGTH__+0x18a>
				return;
			}
			if (SUPVALVEOPEN) {						// See buttons.h
     23a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     23e:	84 ff       	sbrs	r24, 4
     240:	04 c0       	rjmp	.+8      	; 0x24a <__EEPROM_REGION_LENGTH__+0x14a>
				CLOSEVALVE(SUPVALVE);
     242:	80 e1       	ldi	r24, 0x10	; 16
     244:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     248:	18 c0       	rjmp	.+48     	; 0x27a <__EEPROM_REGION_LENGTH__+0x17a>
     24a:	94 e5       	ldi	r25, 0x54	; 84
     24c:	28 e5       	ldi	r18, 0x58	; 88
     24e:	84 e1       	ldi	r24, 0x14	; 20
     250:	91 50       	subi	r25, 0x01	; 1
     252:	20 40       	sbci	r18, 0x00	; 0
     254:	80 40       	sbci	r24, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
     258:	00 c0       	rjmp	.+0      	; 0x25a <__EEPROM_REGION_LENGTH__+0x15a>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <__EEPROM_REGION_LENGTH__+0x15c>
			} else {
				_delay_ms(2000);
				if (SUPBUTTONCLOSED) {
     25c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     260:	83 fd       	sbrc	r24, 3
     262:	0b c0       	rjmp	.+22     	; 0x27a <__EEPROM_REGION_LENGTH__+0x17a>
					OPENVALVE(SUPVALVE);
     264:	80 e1       	ldi	r24, 0x10	; 16
     266:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
					status.opentime_SUP = 0;
     26a:	10 92 15 28 	sts	0x2815, r1	; 0x802815 <status+0xe>
					if ((screen_value == SCRVALVES)) {
     26e:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	11 f4       	brne	.+4      	; 0x27a <__EEPROM_REGION_LENGTH__+0x17a>
						display(SCRVALVES);
     276:	0e 94 af 01 	call	0x35e	; 0x35e <display>
					}
				}
			}
			if ((screen_value == SCRVALVES)) {
     27a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	11 f4       	brne	.+4      	; 0x286 <__EEPROM_REGION_LENGTH__+0x186>
				display(SCRVALVES);
     282:	0e 94 af 01 	call	0x35e	; 0x35e <display>

		default:
			break;
	}

	button_pushed = FALSE;
     286:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
     28a:	08 95       	ret

0000028c <init_BUTTONS>:
}

void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     28c:	e0 e2       	ldi	r30, 0x20	; 32
     28e:	f4 e0       	ldi	r31, 0x04	; 4
     290:	8f e0       	ldi	r24, 0x0F	; 15
     292:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     294:	8b e0       	ldi	r24, 0x0B	; 11
     296:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     298:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     29a:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     29c:	83 8b       	std	Z+19, r24	; 0x13

	// Valve ports set to output
	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
     29e:	e0 e4       	ldi	r30, 0x40	; 64
     2a0:	f4 e0       	ldi	r31, 0x04	; 4
     2a2:	80 ef       	ldi	r24, 0xF0	; 240
     2a4:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
     2a6:	81 83       	std	Z+1, r24	; 0x01
     2a8:	08 95       	ret

000002aa <__vector_34>:
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/

ISR(PORTB_PORT_vect)
{
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	8f 93       	push	r24

	if (PORTB.INTFLAGS & PIN0_bm) {			// Blue pushbutton
     2b6:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2ba:	80 ff       	sbrs	r24, 0
     2bc:	06 c0       	rjmp	.+12     	; 0x2ca <__vector_34+0x20>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     2c4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2c8:	1f c0       	rjmp	.+62     	; 0x308 <__vector_34+0x5e>
	} else if (PORTB.INTFLAGS & PIN1_bm) {	// Red pushbutton
     2ca:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2ce:	81 ff       	sbrs	r24, 1
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <__vector_34+0x34>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     2d8:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2dc:	15 c0       	rjmp	.+42     	; 0x308 <__vector_34+0x5e>
	} else if (PORTB.INTFLAGS & PIN2_bm) {	// Buffer pushbutton
     2de:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2e2:	82 ff       	sbrs	r24, 2
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <__vector_34+0x4a>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     2e6:	84 e0       	ldi	r24, 0x04	; 4
     2e8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2f2:	0a c0       	rjmp	.+20     	; 0x308 <__vector_34+0x5e>
	} else if (PORTB.INTFLAGS & PIN3_bm) {	// Supply pushbutton
     2f4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2f8:	83 ff       	sbrs	r24, 3
     2fa:	06 c0       	rjmp	.+12     	; 0x308 <__vector_34+0x5e>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     2fc:	88 e0       	ldi	r24, 0x08	; 8
     2fe:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     302:	84 e0       	ldi	r24, 0x04	; 4
     304:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}

}
     308:	8f 91       	pop	r24
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     314:	4a e0       	ldi	r20, 0x0A	; 10
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	0e 94 45 11 	call	0x228a	; 0x228a <eeprom_read_block>
     320:	08 95       	ret

00000322 <update_VERSION>:
}

void update_VERSION(void)
{
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	2b 97       	sbiw	r28, 0x0b	; 11
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     330:	8b e0       	ldi	r24, 0x0B	; 11
     332:	e7 e9       	ldi	r30, 0x97	; 151
     334:	f3 e6       	ldi	r31, 0x63	; 99
     336:	de 01       	movw	r26, r28
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     342:	4a e0       	ldi	r20, 0x0A	; 10
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <eeprom_update_block>
}
     352:	2b 96       	adiw	r28, 0x0b	; 11
     354:	cd bf       	out	0x3d, r28	; 61
     356:	de bf       	out	0x3e, r29	; 62
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	aa 97       	sbiw	r28, 0x2a	; 42
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	88 30       	cpi	r24, 0x08	; 8
     370:	91 05       	cpc	r25, r1
     372:	08 f0       	brcs	.+2      	; 0x376 <display+0x18>
     374:	1f c2       	rjmp	.+1086   	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
     376:	fc 01       	movw	r30, r24
     378:	e0 5b       	subi	r30, 0xB0	; 176
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     380:	8f e0       	ldi	r24, 0x0F	; 15
     382:	e2 ea       	ldi	r30, 0xA2	; 162
     384:	f3 e6       	ldi	r31, 0x63	; 99
     386:	de 01       	movw	r26, r28
     388:	11 96       	adiw	r26, 0x01	; 1
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	8a 95       	dec	r24
     390:	e1 f7       	brne	.-8      	; 0x38a <display+0x2c>
			get_VERSION(status.version);
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	98 e2       	ldi	r25, 0x28	; 40
     396:	0e 94 8a 01 	call	0x314	; 0x314 <get_VERSION>
			strcpy(line2, "   ");
     39a:	80 e2       	ldi	r24, 0x20	; 32
     39c:	90 e2       	ldi	r25, 0x20	; 32
     39e:	8e 8b       	std	Y+22, r24	; 0x16
     3a0:	9f 8b       	std	Y+23, r25	; 0x17
     3a2:	80 e2       	ldi	r24, 0x20	; 32
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	88 8f       	std	Y+24, r24	; 0x18
     3a8:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     3aa:	67 e0       	ldi	r22, 0x07	; 7
     3ac:	78 e2       	ldi	r23, 0x28	; 40
     3ae:	ce 01       	movw	r24, r28
     3b0:	46 96       	adiw	r24, 0x16	; 22
     3b2:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <strcat>
			screen_value = SCRVERSION;
     3b6:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
     3ba:	10 c2       	rjmp	.+1056   	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     3bc:	80 e1       	ldi	r24, 0x10	; 16
     3be:	e1 eb       	ldi	r30, 0xB1	; 177
     3c0:	f3 e6       	ldi	r31, 0x63	; 99
     3c2:	de 01       	movw	r26, r28
     3c4:	11 96       	adiw	r26, 0x01	; 1
     3c6:	01 90       	ld	r0, Z+
     3c8:	0d 92       	st	X+, r0
     3ca:	8a 95       	dec	r24
     3cc:	e1 f7       	brne	.-8      	; 0x3c6 <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     3ce:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3d2:	84 ff       	sbrs	r24, 4
     3d4:	0a c0       	rjmp	.+20     	; 0x3ea <display+0x8c>
				strcpy(line2, " O  ");
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	e1 ec       	ldi	r30, 0xC1	; 193
     3da:	f3 e6       	ldi	r31, 0x63	; 99
     3dc:	de 01       	movw	r26, r28
     3de:	56 96       	adiw	r26, 0x16	; 22
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	8a 95       	dec	r24
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <display+0x82>
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     3ea:	85 e0       	ldi	r24, 0x05	; 5
     3ec:	e6 ec       	ldi	r30, 0xC6	; 198
     3ee:	f3 e6       	ldi	r31, 0x63	; 99
     3f0:	de 01       	movw	r26, r28
     3f2:	56 96       	adiw	r26, 0x16	; 22
     3f4:	01 90       	ld	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	8a 95       	dec	r24
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     3fc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     400:	85 ff       	sbrs	r24, 5
     402:	0e c0       	rjmp	.+28     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				strcat(line2, " O  ");
     404:	de 01       	movw	r26, r28
     406:	56 96       	adiw	r26, 0x16	; 22
     408:	0d 90       	ld	r0, X+
     40a:	00 20       	and	r0, r0
     40c:	e9 f7       	brne	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40e:	11 97       	sbiw	r26, 0x01	; 1
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	e1 ec       	ldi	r30, 0xC1	; 193
     414:	f3 e6       	ldi	r31, 0x63	; 99
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	8a 95       	dec	r24
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	1f c0       	rjmp	.+62     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			} else if (status.maxopen_BUF) {
     420:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
     424:	88 23       	and	r24, r24
     426:	71 f0       	breq	.+28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				strcat(line2, " T  ");
     428:	de 01       	movw	r26, r28
     42a:	56 96       	adiw	r26, 0x16	; 22
     42c:	0d 90       	ld	r0, X+
     42e:	00 20       	and	r0, r0
     430:	e9 f7       	brne	.-6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	85 e0       	ldi	r24, 0x05	; 5
     436:	eb ec       	ldi	r30, 0xCB	; 203
     438:	f3 e6       	ldi	r31, 0x63	; 99
     43a:	01 90       	ld	r0, Z+
     43c:	0d 92       	st	X+, r0
     43e:	8a 95       	dec	r24
     440:	e1 f7       	brne	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     442:	0d c0       	rjmp	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			} else {
				strcat(line2, " C  ");
     444:	de 01       	movw	r26, r28
     446:	56 96       	adiw	r26, 0x16	; 22
     448:	0d 90       	ld	r0, X+
     44a:	00 20       	and	r0, r0
     44c:	e9 f7       	brne	.-6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	85 e0       	ldi	r24, 0x05	; 5
     452:	e6 ec       	ldi	r30, 0xC6	; 198
     454:	f3 e6       	ldi	r31, 0x63	; 99
     456:	01 90       	ld	r0, Z+
     458:	0d 92       	st	X+, r0
     45a:	8a 95       	dec	r24
     45c:	e1 f7       	brne	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			}
			if (!REDENABLED) {					// eeprom.h
     45e:	8d e0       	ldi	r24, 0x0D	; 13
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     466:	81 11       	cpse	r24, r1
     468:	0e c0       	rjmp	.+28     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				strcat(line2, " X  ");
     46a:	de 01       	movw	r26, r28
     46c:	56 96       	adiw	r26, 0x16	; 22
     46e:	0d 90       	ld	r0, X+
     470:	00 20       	and	r0, r0
     472:	e9 f7       	brne	.-6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	e0 ed       	ldi	r30, 0xD0	; 208
     47a:	f3 e6       	ldi	r31, 0x63	; 99
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	8a 95       	dec	r24
     482:	e1 f7       	brne	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     484:	31 c0       	rjmp	.+98     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			} else if (REDVALVEOPEN) {			// valves.h
     486:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     48a:	86 ff       	sbrs	r24, 6
     48c:	0e c0       	rjmp	.+28     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
				strcat(line2, " O  ");
     48e:	de 01       	movw	r26, r28
     490:	56 96       	adiw	r26, 0x16	; 22
     492:	0d 90       	ld	r0, X+
     494:	00 20       	and	r0, r0
     496:	e9 f7       	brne	.-6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     498:	11 97       	sbiw	r26, 0x01	; 1
     49a:	85 e0       	ldi	r24, 0x05	; 5
     49c:	e1 ec       	ldi	r30, 0xC1	; 193
     49e:	f3 e6       	ldi	r31, 0x63	; 99
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a8:	1f c0       	rjmp	.+62     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			} else if (status.maxopen_RED) {
     4aa:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
     4ae:	88 23       	and	r24, r24
     4b0:	71 f0       	breq	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				strcat(line2, " T  ");
     4b2:	de 01       	movw	r26, r28
     4b4:	56 96       	adiw	r26, 0x16	; 22
     4b6:	0d 90       	ld	r0, X+
     4b8:	00 20       	and	r0, r0
     4ba:	e9 f7       	brne	.-6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4bc:	11 97       	sbiw	r26, 0x01	; 1
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	eb ec       	ldi	r30, 0xCB	; 203
     4c2:	f3 e6       	ldi	r31, 0x63	; 99
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			} else {
				strcat(line2, " C  ");
     4ce:	de 01       	movw	r26, r28
     4d0:	56 96       	adiw	r26, 0x16	; 22
     4d2:	0d 90       	ld	r0, X+
     4d4:	00 20       	and	r0, r0
     4d6:	e9 f7       	brne	.-6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d8:	11 97       	sbiw	r26, 0x01	; 1
     4da:	85 e0       	ldi	r24, 0x05	; 5
     4dc:	e6 ec       	ldi	r30, 0xC6	; 198
     4de:	f3 e6       	ldi	r31, 0x63	; 99
     4e0:	01 90       	ld	r0, Z+
     4e2:	0d 92       	st	X+, r0
     4e4:	8a 95       	dec	r24
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			}
			if (!BLUENABLED) {
     4e8:	8c e0       	ldi	r24, 0x0C	; 12
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     4f0:	81 11       	cpse	r24, r1
     4f2:	0c c0       	rjmp	.+24     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
				strcat(line2, " X");
     4f4:	fe 01       	movw	r30, r28
     4f6:	76 96       	adiw	r30, 0x16	; 22
     4f8:	01 90       	ld	r0, Z+
     4fa:	00 20       	and	r0, r0
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	98 e5       	ldi	r25, 0x58	; 88
     504:	80 83       	st	Z, r24
     506:	91 83       	std	Z+1, r25	; 0x01
     508:	12 82       	std	Z+2, r1	; 0x02
     50a:	2b c0       	rjmp	.+86     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			} else if (BLUVALVEOPEN) {			// valves.h
     50c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     510:	88 23       	and	r24, r24
     512:	64 f4       	brge	.+24     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				strcat(line2, " O");
     514:	fe 01       	movw	r30, r28
     516:	76 96       	adiw	r30, 0x16	; 22
     518:	01 90       	ld	r0, Z+
     51a:	00 20       	and	r0, r0
     51c:	e9 f7       	brne	.-6      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     51e:	31 97       	sbiw	r30, 0x01	; 1
     520:	80 e2       	ldi	r24, 0x20	; 32
     522:	9f e4       	ldi	r25, 0x4F	; 79
     524:	80 83       	st	Z, r24
     526:	91 83       	std	Z+1, r25	; 0x01
     528:	12 82       	std	Z+2, r1	; 0x02
     52a:	1b c0       	rjmp	.+54     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			} else if (status.maxopen_BLU) {
     52c:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
     530:	88 23       	and	r24, r24
     532:	61 f0       	breq	.+24     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
				strcat(line2, " T");
     534:	fe 01       	movw	r30, r28
     536:	76 96       	adiw	r30, 0x16	; 22
     538:	01 90       	ld	r0, Z+
     53a:	00 20       	and	r0, r0
     53c:	e9 f7       	brne	.-6      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     53e:	31 97       	sbiw	r30, 0x01	; 1
     540:	80 e2       	ldi	r24, 0x20	; 32
     542:	94 e5       	ldi	r25, 0x54	; 84
     544:	80 83       	st	Z, r24
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	12 82       	std	Z+2, r1	; 0x02
     54a:	0b c0       	rjmp	.+22     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			} else {
				strcat(line2, " C");
     54c:	fe 01       	movw	r30, r28
     54e:	76 96       	adiw	r30, 0x16	; 22
     550:	01 90       	ld	r0, Z+
     552:	00 20       	and	r0, r0
     554:	e9 f7       	brne	.-6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	80 e2       	ldi	r24, 0x20	; 32
     55a:	93 e4       	ldi	r25, 0x43	; 67
     55c:	80 83       	st	Z, r24
     55e:	91 83       	std	Z+1, r25	; 0x01
     560:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     568:	39 c1       	rjmp	.+626    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     56a:	8d e0       	ldi	r24, 0x0D	; 13
     56c:	e5 ed       	ldi	r30, 0xD5	; 213
     56e:	f3 e6       	ldi	r31, 0x63	; 99
     570:	de 01       	movw	r26, r28
     572:	11 96       	adiw	r26, 0x01	; 1
     574:	01 90       	ld	r0, Z+
     576:	0d 92       	st	X+, r0
     578:	8a 95       	dec	r24
     57a:	e1 f7       	brne	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			if (status.next_fill < 2) {
     57c:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <status+0x15>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	98 f4       	brcc	.+38     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
				sprintf(line2, "%d minute", status.next_fill);
     584:	1f 92       	push	r1
     586:	8f 93       	push	r24
     588:	82 ee       	ldi	r24, 0xE2	; 226
     58a:	93 e6       	ldi	r25, 0x63	; 99
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	ce 01       	movw	r24, r28
     592:	46 96       	adiw	r24, 0x16	; 22
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	12 c0       	rjmp	.+36     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     5aa:	1f 92       	push	r1
     5ac:	8f 93       	push	r24
     5ae:	8c ee       	ldi	r24, 0xEC	; 236
     5b0:	93 e6       	ldi	r25, 0x63	; 99
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	ce 01       	movw	r24, r28
     5b8:	46 96       	adiw	r24, 0x16	; 22
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     5d4:	03 c1       	rjmp	.+518    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     5d6:	8e e0       	ldi	r24, 0x0E	; 14
     5d8:	e7 ef       	ldi	r30, 0xF7	; 247
     5da:	f3 e6       	ldi	r31, 0x63	; 99
     5dc:	de 01       	movw	r26, r28
     5de:	11 96       	adiw	r26, 0x01	; 1
     5e0:	01 90       	ld	r0, Z+
     5e2:	0d 92       	st	X+, r0
     5e4:	8a 95       	dec	r24
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
			if (FILLINTERVAL == 1) {			// eeprom.h
     5e8:	8a e0       	ldi	r24, 0x0A	; 10
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	99 f4       	brne	.+38     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
				sprintf(line2, "%d minute", FILLINTERVAL);
     5f4:	1f 92       	push	r1
     5f6:	8f 93       	push	r24
     5f8:	82 ee       	ldi	r24, 0xE2	; 226
     5fa:	93 e6       	ldi	r25, 0x63	; 99
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	ce 01       	movw	r24, r28
     602:	46 96       	adiw	r24, 0x16	; 22
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	12 c0       	rjmp	.+36     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     61a:	1f 92       	push	r1
     61c:	8f 93       	push	r24
     61e:	8c ee       	ldi	r24, 0xEC	; 236
     620:	93 e6       	ldi	r25, 0x63	; 99
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	ce 01       	movw	r24, r28
     628:	46 96       	adiw	r24, 0x16	; 22
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     644:	cb c0       	rjmp	.+406    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     646:	8e e0       	ldi	r24, 0x0E	; 14
     648:	e5 e0       	ldi	r30, 0x05	; 5
     64a:	f4 e6       	ldi	r31, 0x64	; 100
     64c:	de 01       	movw	r26, r28
     64e:	11 96       	adiw	r26, 0x01	; 1
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	8a 95       	dec	r24
     656:	e1 f7       	brne	.-8      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
			if (MAXOPENTIME < 2) {				// eeprom.h
     658:	8b e0       	ldi	r24, 0x0B	; 11
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	98 f4       	brcc	.+38     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
				sprintf(line2, "%d minute", MAXOPENTIME);
     664:	1f 92       	push	r1
     666:	8f 93       	push	r24
     668:	82 ee       	ldi	r24, 0xE2	; 226
     66a:	93 e6       	ldi	r25, 0x63	; 99
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	ce 01       	movw	r24, r28
     672:	46 96       	adiw	r24, 0x16	; 22
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	12 c0       	rjmp	.+36     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     68a:	1f 92       	push	r1
     68c:	8f 93       	push	r24
     68e:	8c ee       	ldi	r24, 0xEC	; 236
     690:	93 e6       	ldi	r25, 0x63	; 99
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	ce 01       	movw	r24, r28
     698:	46 96       	adiw	r24, 0x16	; 22
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     6ae:	84 e0       	ldi	r24, 0x04	; 4
     6b0:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     6b4:	93 c0       	rjmp	.+294    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     6b6:	8d e0       	ldi	r24, 0x0D	; 13
     6b8:	e3 e1       	ldi	r30, 0x13	; 19
     6ba:	f4 e6       	ldi	r31, 0x64	; 100
     6bc:	de 01       	movw	r26, r28
     6be:	11 96       	adiw	r26, 0x01	; 1
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	8a 95       	dec	r24
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
			sprintf(line2, "%d kPa", status.pressure);
     6c8:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <status+0x1a>
     6cc:	1f 92       	push	r1
     6ce:	8f 93       	push	r24
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	94 e6       	ldi	r25, 0x64	; 100
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	ce 01       	movw	r24, r28
     6da:	46 96       	adiw	r24, 0x16	; 22
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
			screen_value = SCRPRESSURE;
     6e4:	85 e0       	ldi	r24, 0x05	; 5
     6e6:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	72 c0       	rjmp	.+228    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     6f8:	8c e0       	ldi	r24, 0x0C	; 12
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     700:	88 23       	and	r24, r24
     702:	99 f0       	breq	.+38     	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
				strcpy(line1, "BLUE is ENABLED");
     704:	80 e1       	ldi	r24, 0x10	; 16
     706:	e7 e2       	ldi	r30, 0x27	; 39
     708:	f4 e6       	ldi	r31, 0x64	; 100
     70a:	de 01       	movw	r26, r28
     70c:	11 96       	adiw	r26, 0x01	; 1
     70e:	01 90       	ld	r0, Z+
     710:	0d 92       	st	X+, r0
     712:	8a 95       	dec	r24
     714:	e1 f7       	brne	.-8      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
				strcpy(line2, "Push to disable");
     716:	80 e1       	ldi	r24, 0x10	; 16
     718:	e7 e3       	ldi	r30, 0x37	; 55
     71a:	f4 e6       	ldi	r31, 0x64	; 100
     71c:	de 01       	movw	r26, r28
     71e:	56 96       	adiw	r26, 0x16	; 22
     720:	01 90       	ld	r0, Z+
     722:	0d 92       	st	X+, r0
     724:	8a 95       	dec	r24
     726:	e1 f7       	brne	.-8      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     728:	12 c0       	rjmp	.+36     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
			} else {
				strcpy(line1, "Blue is DISABLED");
     72a:	81 e1       	ldi	r24, 0x11	; 17
     72c:	e7 e4       	ldi	r30, 0x47	; 71
     72e:	f4 e6       	ldi	r31, 0x64	; 100
     730:	de 01       	movw	r26, r28
     732:	11 96       	adiw	r26, 0x01	; 1
     734:	01 90       	ld	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	8a 95       	dec	r24
     73a:	e1 f7       	brne	.-8      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
				strcpy(line2, "Push to enable");
     73c:	8f e0       	ldi	r24, 0x0F	; 15
     73e:	e8 e5       	ldi	r30, 0x58	; 88
     740:	f4 e6       	ldi	r31, 0x64	; 100
     742:	de 01       	movw	r26, r28
     744:	56 96       	adiw	r26, 0x16	; 22
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	8a 95       	dec	r24
     74c:	e1 f7       	brne	.-8      	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     754:	43 c0       	rjmp	.+134    	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     756:	8d e0       	ldi	r24, 0x0D	; 13
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     75e:	88 23       	and	r24, r24
     760:	99 f0       	breq	.+38     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
				strcpy(line1, "RED is ENABLED");
     762:	8f e0       	ldi	r24, 0x0F	; 15
     764:	e7 e6       	ldi	r30, 0x67	; 103
     766:	f4 e6       	ldi	r31, 0x64	; 100
     768:	de 01       	movw	r26, r28
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
				strcpy(line2, "Push to disable");
     774:	80 e1       	ldi	r24, 0x10	; 16
     776:	e7 e3       	ldi	r30, 0x37	; 55
     778:	f4 e6       	ldi	r31, 0x64	; 100
     77a:	de 01       	movw	r26, r28
     77c:	56 96       	adiw	r26, 0x16	; 22
     77e:	01 90       	ld	r0, Z+
     780:	0d 92       	st	X+, r0
     782:	8a 95       	dec	r24
     784:	e1 f7       	brne	.-8      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
     786:	12 c0       	rjmp	.+36     	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
			} else {
				strcpy(line1, "RED is DISABLED");
     788:	80 e1       	ldi	r24, 0x10	; 16
     78a:	e6 e7       	ldi	r30, 0x76	; 118
     78c:	f4 e6       	ldi	r31, 0x64	; 100
     78e:	de 01       	movw	r26, r28
     790:	11 96       	adiw	r26, 0x01	; 1
     792:	01 90       	ld	r0, Z+
     794:	0d 92       	st	X+, r0
     796:	8a 95       	dec	r24
     798:	e1 f7       	brne	.-8      	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
				strcpy(line2, "Push to enable");
     79a:	8f e0       	ldi	r24, 0x0F	; 15
     79c:	e8 e5       	ldi	r30, 0x58	; 88
     79e:	f4 e6       	ldi	r31, 0x64	; 100
     7a0:	de 01       	movw	r26, r28
     7a2:	56 96       	adiw	r26, 0x16	; 22
     7a4:	01 90       	ld	r0, Z+
     7a6:	0d 92       	st	X+, r0
     7a8:	8a 95       	dec	r24
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     7b2:	14 c0       	rjmp	.+40     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>

		default:
			strcpy(line1, "default");
     7b4:	88 e0       	ldi	r24, 0x08	; 8
     7b6:	e6 e8       	ldi	r30, 0x86	; 134
     7b8:	f4 e6       	ldi	r31, 0x64	; 100
     7ba:	de 01       	movw	r26, r28
     7bc:	11 96       	adiw	r26, 0x01	; 1
     7be:	01 90       	ld	r0, Z+
     7c0:	0d 92       	st	X+, r0
     7c2:	8a 95       	dec	r24
     7c4:	e1 f7       	brne	.-8      	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
			strcpy(line2, "overrun");
     7c6:	88 e0       	ldi	r24, 0x08	; 8
     7c8:	ee e8       	ldi	r30, 0x8E	; 142
     7ca:	f4 e6       	ldi	r31, 0x64	; 100
     7cc:	de 01       	movw	r26, r28
     7ce:	56 96       	adiw	r26, 0x16	; 22
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
			screen_value = SCRVERSION;			// encoder.h
     7d8:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	be 01       	movw	r22, r28
     7e0:	6f 5f       	subi	r22, 0xFF	; 255
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
	writestr_OLED(0, line2, 2);
     7ea:	42 e0       	ldi	r20, 0x02	; 2
     7ec:	be 01       	movw	r22, r28
     7ee:	6a 5e       	subi	r22, 0xEA	; 234
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
}
     7f8:	aa 96       	adiw	r28, 0x2a	; 42
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	81 11       	cpse	r24, r1
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	8c e0       	ldi	r24, 0x0C	; 12
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_update_byte>
	encoder_sensed = FALSE;
     81a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     824:	08 95       	ret

00000826 <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     826:	8d e0       	ldi	r24, 0x0D	; 13
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	81 11       	cpse	r24, r1
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	8d e0       	ldi	r24, 0x0D	; 13
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_update_byte>
	encoder_sensed = FALSE;
     83c:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     840:	87 e0       	ldi	r24, 0x07	; 7
     842:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     846:	08 95       	ret

00000848 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	65 97       	sbiw	r28, 0x15	; 21
     856:	cd bf       	out	0x3d, r28	; 61
     858:	de bf       	out	0x3e, r29	; 62

	char strbuf[21];

	PORTC.INTFLAGS = PIN1_bm;					// Clear interrupt flag
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     860:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	encoder_value = FILLINTERVAL;				// eeprom.h
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     86c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	99 f4       	brne	.+38     	; 0x89a <change_FILLINT+0x52>
		sprintf(strbuf, "%d minute", encoder_value);
     874:	1f 92       	push	r1
     876:	8f 93       	push	r24
     878:	82 ee       	ldi	r24, 0xE2	; 226
     87a:	93 e6       	ldi	r25, 0x63	; 99
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	ce 01       	movw	r24, r28
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	12 c0       	rjmp	.+36     	; 0x8be <change_FILLINT+0x76>
	} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     89a:	1f 92       	push	r1
     89c:	8f 93       	push	r24
     89e:	8c ee       	ldi	r24, 0xEC	; 236
     8a0:	93 e6       	ldi	r25, 0x63	; 99
     8a2:	9f 93       	push	r25
     8a4:	8f 93       	push	r24
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	9f 93       	push	r25
     8ac:	8f 93       	push	r24
     8ae:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	66 e9       	ldi	r22, 0x96	; 150
     8c2:	74 e6       	ldi	r23, 0x64	; 100
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     8ca:	42 e0       	ldi	r20, 0x02	; 2
     8cc:	be 01       	movw	r22, r28
     8ce:	6f 5f       	subi	r22, 0xFF	; 255
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8d8:	58 c0       	rjmp	.+176    	; 0x98a <change_FILLINT+0x142>
		if (encoder_sensed == ENCODERA) {
     8da:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     8de:	87 30       	cpi	r24, 0x07	; 7
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <change_FILLINT+0x9c>
     8e2:	53 c0       	rjmp	.+166    	; 0x98a <change_FILLINT+0x142>
			if ((ENCODERACLOSED && !ENCODERBCLOSED) || (!ENCODERACLOSED && ENCODERBCLOSED)) {
     8e4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     8e8:	82 fd       	sbrc	r24, 2
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <change_FILLINT+0xac>
     8ec:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     8f0:	83 fd       	sbrc	r24, 3
     8f2:	08 c0       	rjmp	.+16     	; 0x904 <change_FILLINT+0xbc>
     8f4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     8f8:	82 ff       	sbrs	r24, 2
     8fa:	0d c0       	rjmp	.+26     	; 0x916 <change_FILLINT+0xce>
     8fc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     900:	83 fd       	sbrc	r24, 3
     902:	09 c0       	rjmp	.+18     	; 0x916 <change_FILLINT+0xce>
				encoder_value++;
     904:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = 1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     914:	08 c0       	rjmp	.+16     	; 0x926 <change_FILLINT+0xde>
			} else {
				encoder_value--;
     916:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     91a:	81 50       	subi	r24, 0x01	; 1
     91c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = -1;
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
			}
			if (encoder_value <= 1) {
     926:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	20 f4       	brcc	.+8      	; 0x936 <change_FILLINT+0xee>
				encoder_value = 2;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
     934:	05 c0       	rjmp	.+10     	; 0x940 <change_FILLINT+0xf8>
			} else if (encoder_value == 255) {
     936:	8f 3f       	cpi	r24, 0xFF	; 255
     938:	19 f4       	brne	.+6      	; 0x940 <change_FILLINT+0xf8>
				encoder_value = 254;
     93a:	8e ef       	ldi	r24, 0xFE	; 254
     93c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     940:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     944:	1f 92       	push	r1
     946:	8f 93       	push	r24
     948:	8c ee       	ldi	r24, 0xEC	; 236
     94a:	93 e6       	ldi	r25, 0x63	; 99
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	8e 01       	movw	r16, r28
     952:	0f 5f       	subi	r16, 0xFF	; 255
     954:	1f 4f       	sbci	r17, 0xFF	; 255
     956:	1f 93       	push	r17
     958:	0f 93       	push	r16
     95a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
			writestr_OLED(0, "Push to set intv", 1);
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	66 e9       	ldi	r22, 0x96	; 150
     962:	74 e6       	ldi	r23, 0x64	; 100
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     96a:	42 e0       	ldi	r20, 0x02	; 2
     96c:	b8 01       	movw	r22, r16
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
			PORTC.INTFLAGS = PIN2_bm;			// Clear interrupt flag
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
			encoder_sensed = FALSE;
     97a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     98a:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     98e:	85 30       	cpi	r24, 0x05	; 5
     990:	09 f0       	breq	.+2      	; 0x994 <change_FILLINT+0x14c>
     992:	a3 cf       	rjmp	.-186    	; 0x8da <change_FILLINT+0x92>
			writestr_OLED(0, strbuf, 2);
			PORTC.INTFLAGS = PIN2_bm;			// Clear interrupt flag
			encoder_sensed = FALSE;
		}
	}
	PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     99a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     99e:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     9a2:	8a e0       	ldi	r24, 0x0A	; 10
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     9aa:	8b e0       	ldi	r24, 0x0B	; 11
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     9b2:	18 2f       	mov	r17, r24
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     9bc:	18 17       	cp	r17, r24
     9be:	30 f0       	brcs	.+12     	; 0x9cc <change_FILLINT+0x184>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     9c0:	6f ef       	ldi	r22, 0xFF	; 255
     9c2:	68 0f       	add	r22, r24
     9c4:	8b e0       	ldi	r24, 0x0B	; 11
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_update_byte>
	}

	display(SCRFILLINT);
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	0e 94 af 01 	call	0x35e	; 0x35e <display>

}
     9d2:	65 96       	adiw	r28, 0x15	; 21
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	65 97       	sbiw	r28, 0x15	; 21
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	PORTC.INTFLAGS = PIN1_bm;				// Clear interrupt flag
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     9f6:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	encoder_value = MAXOPENTIME;			// eeprom.h
     9fa:	8b e0       	ldi	r24, 0x0B	; 11
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     a02:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	99 f4       	brne	.+38     	; 0xa30 <change_MAXOPENTIME+0x4e>
		sprintf(strbuf, "%d minute", encoder_value);
     a0a:	1f 92       	push	r1
     a0c:	8f 93       	push	r24
     a0e:	82 ee       	ldi	r24, 0xE2	; 226
     a10:	93 e6       	ldi	r25, 0x63	; 99
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	12 c0       	rjmp	.+36     	; 0xa54 <change_MAXOPENTIME+0x72>
	} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     a30:	1f 92       	push	r1
     a32:	8f 93       	push	r24
     a34:	8c ee       	ldi	r24, 0xEC	; 236
     a36:	93 e6       	ldi	r25, 0x63	; 99
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	9f 93       	push	r25
     a42:	8f 93       	push	r24
     a44:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	67 ea       	ldi	r22, 0xA7	; 167
     a58:	74 e6       	ldi	r23, 0x64	; 100
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     a60:	42 e0       	ldi	r20, 0x02	; 2
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>

	while (encoder_sensed != ENCODERBUTTON) {
     a6e:	79 c0       	rjmp	.+242    	; 0xb62 <change_MAXOPENTIME+0x180>
		if (encoder_sensed == ENCODERA) {
     a70:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     a74:	87 30       	cpi	r24, 0x07	; 7
     a76:	09 f0       	breq	.+2      	; 0xa7a <change_MAXOPENTIME+0x98>
     a78:	74 c0       	rjmp	.+232    	; 0xb62 <change_MAXOPENTIME+0x180>
			if ((ENCODERACLOSED && !ENCODERBCLOSED) || (!ENCODERACLOSED && ENCODERBCLOSED)) {
     a7a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a7e:	82 fd       	sbrc	r24, 2
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <change_MAXOPENTIME+0xa8>
     a82:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a86:	83 fd       	sbrc	r24, 3
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <change_MAXOPENTIME+0xb8>
     a8a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a8e:	82 ff       	sbrs	r24, 2
     a90:	0d c0       	rjmp	.+26     	; 0xaac <change_MAXOPENTIME+0xca>
     a92:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a96:	83 fd       	sbrc	r24, 3
     a98:	09 c0       	rjmp	.+18     	; 0xaac <change_MAXOPENTIME+0xca>
				encoder_value++;
     a9a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <change_MAXOPENTIME+0xda>
			} else {
				encoder_value--;
     aac:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = -1;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
			}
			if (encoder_value <= 0) {
     abc:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     ac0:	81 11       	cpse	r24, r1
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <change_MAXOPENTIME+0xea>
				encoder_value = 1;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <change_MAXOPENTIME+0xf4>
			} else if (encoder_value == 255) {
     acc:	8f 3f       	cpi	r24, 0xFF	; 255
     ace:	19 f4       	brne	.+6      	; 0xad6 <change_MAXOPENTIME+0xf4>
				encoder_value = 254;
     ad0:	8e ef       	ldi	r24, 0xFE	; 254
     ad2:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}

			if (encoder_value >= FILLINTERVAL) {
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     ade:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <encoder_value>
     ae2:	98 17       	cp	r25, r24
     ae4:	18 f0       	brcs	.+6      	; 0xaec <change_MAXOPENTIME+0x10a>
				encoder_value = FILLINTERVAL - 1;
     ae6:	81 50       	subi	r24, 0x01	; 1
     ae8:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			if (encoder_value == 1) {
     aec:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	99 f4       	brne	.+38     	; 0xb1a <change_MAXOPENTIME+0x138>
				sprintf(strbuf, "%d minute", encoder_value);
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	82 ee       	ldi	r24, 0xE2	; 226
     afa:	93 e6       	ldi	r25, 0x63	; 99
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	12 c0       	rjmp	.+36     	; 0xb3e <change_MAXOPENTIME+0x15c>
			} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     b1a:	1f 92       	push	r1
     b1c:	8f 93       	push	r24
     b1e:	8c ee       	ldi	r24, 0xEC	; 236
     b20:	93 e6       	ldi	r25, 0x63	; 99
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	67 ea       	ldi	r22, 0xA7	; 167
     b42:	74 e6       	ldi	r23, 0x64	; 100
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);			
     b4a:	42 e0       	ldi	r20, 0x02	; 2
     b4c:	be 01       	movw	r22, r28
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
			PORTC.INTFLAGS = PIN2_bm;		// Clear interrupt flag
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
			encoder_sensed = FALSE;
     b5e:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     b62:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b66:	85 30       	cpi	r24, 0x05	; 5
     b68:	09 f0       	breq	.+2      	; 0xb6c <change_MAXOPENTIME+0x18a>
     b6a:	82 cf       	rjmp	.-252    	; 0xa70 <change_MAXOPENTIME+0x8e>
			writestr_OLED(0, strbuf, 2);			
			PORTC.INTFLAGS = PIN2_bm;		// Clear interrupt flag
			encoder_sensed = FALSE;
		}
	}
	PORTC.INTFLAGS = PIN1_bm;				// Clear interrupt flag
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     b72:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     b76:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     b7a:	8b e0       	ldi	r24, 0x0B	; 11
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	0e 94 af 01 	call	0x35e	; 0x35e <display>

}
     b88:	65 96       	adiw	r28, 0x15	; 21
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <init_ENCODER>:
{
	
	// Rotary Encoder
//	PORTC.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
//	PORTC.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// ENCA
	PORTC.PIN2CTRL = PORT_ISC_BOTHEDGES_gc;	// ENCA
     b94:	e0 e4       	ldi	r30, 0x40	; 64
     b96:	f4 e0       	ldi	r31, 0x04	; 4
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	82 8b       	std	Z+18, r24	; 0x12
//	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;							// ENCB
//	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
	PORTC.PIN1CTRL = PORT_ISC_FALLING_gc;	// PUSH
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	81 8b       	std	Z+17, r24	; 0x11
     ba0:	08 95       	ret

00000ba2 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     ba2:	8c e0       	ldi	r24, 0x0C	; 12
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     baa:	88 23       	and	r24, r24
     bac:	79 f0       	breq	.+30     	; 0xbcc <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     bae:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     bb2:	88 23       	and	r24, r24
     bb4:	5c f0       	brlt	.+22     	; 0xbcc <start_FILL+0x2a>
     bb6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     bba:	80 ff       	sbrs	r24, 0
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     bc4:	e7 e0       	ldi	r30, 0x07	; 7
     bc6:	f8 e2       	ldi	r31, 0x28	; 40
     bc8:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     bca:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     bcc:	8d e0       	ldi	r24, 0x0D	; 13
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     bd4:	88 23       	and	r24, r24
     bd6:	79 f0       	breq	.+30     	; 0xbf6 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     bd8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     bdc:	86 fd       	sbrc	r24, 6
     bde:	0b c0       	rjmp	.+22     	; 0xbf6 <start_FILL+0x54>
     be0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     be4:	81 ff       	sbrs	r24, 1
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     bee:	e7 e0       	ldi	r30, 0x07	; 7
     bf0:	f8 e2       	ldi	r31, 0x28	; 40
     bf2:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     bf4:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     bf6:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	11 f4       	brne	.+4      	; 0xc02 <start_FILL+0x60>
		display(SCRVALVES);
     bfe:	0e 94 af 01 	call	0x35e	; 0x35e <display>
	}
	status.next_fill = FILLINTERVAL;
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     c0a:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <status+0x15>
     c0e:	08 95       	ret

00000c10 <handle_encoder>:
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{

	if (display_off) {
     c10:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <display_off>
     c14:	88 23       	and	r24, r24
     c16:	29 f0       	breq	.+10     	; 0xc22 <handle_encoder+0x12>
		display(screen_value);
     c18:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     c1c:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     c20:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     c22:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     c26:	87 30       	cpi	r24, 0x07	; 7
     c28:	89 f5       	brne	.+98     	; 0xc8c <handle_encoder+0x7c>
		if ((ENCODERACLOSED && !ENCODERBCLOSED) || (!ENCODERACLOSED && ENCODERBCLOSED)) {
     c2a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c2e:	82 fd       	sbrc	r24, 2
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <handle_encoder+0x2a>
     c32:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c36:	83 fd       	sbrc	r24, 3
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <handle_encoder+0x3a>
     c3a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c3e:	82 ff       	sbrs	r24, 2
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <handle_encoder+0x4c>
     c42:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c46:	83 fd       	sbrc	r24, 3
     c48:	09 c0       	rjmp	.+18     	; 0xc5c <handle_encoder+0x4c>
			encoder_value++;
     c4a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <handle_encoder+0x5c>
		} else {
			encoder_value--;
     c5c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = -1;
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
		}
		screen_value = (screen_value + encoder_change);
     c6c:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <encoder_change>
     c70:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     c74:	89 0f       	add	r24, r25
		if (screen_value < 0) {
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     c76:	87 70       	andi	r24, 0x07	; 7
     c78:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		}
		PORTC.INTFLAGS = PIN2_bm;			// Clear interrupt flag
     c7c:	94 e0       	ldi	r25, 0x04	; 4
     c7e:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = FALSE;
     c82:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		display(screen_value);
     c86:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     c8a:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {
     c8c:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     c90:	85 30       	cpi	r24, 0x05	; 5
     c92:	11 f5       	brne	.+68     	; 0xcd8 <handle_encoder+0xc8>
		switch (screen_value) {
     c94:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     c98:	84 30       	cpi	r24, 0x04	; 4
     c9a:	89 f0       	breq	.+34     	; 0xcbe <handle_encoder+0xae>
     c9c:	28 f4       	brcc	.+10     	; 0xca8 <handle_encoder+0x98>
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <handle_encoder+0xa2>
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	49 f0       	breq	.+18     	; 0xcb8 <handle_encoder+0xa8>
     ca6:	13 c0       	rjmp	.+38     	; 0xcce <handle_encoder+0xbe>
     ca8:	86 30       	cpi	r24, 0x06	; 6
     caa:	61 f0       	breq	.+24     	; 0xcc4 <handle_encoder+0xb4>
     cac:	87 30       	cpi	r24, 0x07	; 7
     cae:	69 f0       	breq	.+26     	; 0xcca <handle_encoder+0xba>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <handle_encoder+0xbe>
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     cb2:	0e 94 d1 05 	call	0xba2	; 0xba2 <start_FILL>
				break;
     cb6:	0b c0       	rjmp	.+22     	; 0xcce <handle_encoder+0xbe>
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     cb8:	0e 94 24 04 	call	0x848	; 0x848 <change_FILLINT>
				break;
     cbc:	08 c0       	rjmp	.+16     	; 0xcce <handle_encoder+0xbe>
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     cbe:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <change_MAXOPENTIME>
				break;
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <handle_encoder+0xbe>
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     cc4:	0e 94 02 04 	call	0x804	; 0x804 <change_DISABLEBLU>
				break;
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <handle_encoder+0xbe>
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     cca:	0e 94 13 04 	call	0x826	; 0x826 <change_DISABLERED>
				break;
			default:
				break;
		}
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = FALSE;
     cd4:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
     cd8:	08 95       	ret

00000cda <__vector_24>:
	PC1 is the encoder pushbutton
	PC2 is ENCODER A signal
	PC3 is ENCODER B signal
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	8f 93       	push	r24
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     ce6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     cea:	81 ff       	sbrs	r24, 1
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <__vector_24+0x1c>
//		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
		encoder_sensed = ENCODERBUTTON;
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <__vector_24+0x2a>
	} else if (PORTC.INTFLAGS & PIN2_bm) {	// Encoder rotary
     cf6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     cfa:	82 ff       	sbrs	r24, 2
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__vector_24+0x2a>
		} else {
			encoder_value--;
			encoder_change = -1;
		}
*/
		encoder_sensed = ENCODERA;
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
	}
}
     d04:	8f 91       	pop	r24
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <init_STATUS>:

}


void init_STATUS()
{
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29

	status.next_buftank_fill = BIGFILLINTERVAL;
     d14:	c7 e0       	ldi	r28, 0x07	; 7
     d16:	d8 e2       	ldi	r29, 0x28	; 40
     d18:	8c e0       	ldi	r24, 0x0C	; 12
     d1a:	8e 8b       	std	Y+22, r24	; 0x16
	status.next_fill = FILLINTERVAL;
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
     d24:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     d26:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     d28:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     d2a:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     d2c:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     d2e:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     d30:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     d32:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     d34:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     d36:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     d38:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     d3a:	0e 94 77 08 	call	0x10ee	; 0x10ee <read_PRESSURE>
     d3e:	8a 8f       	std	Y+26, r24	; 0x1a

}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <init_PORTS>:

void init_PORTS(void)
{

	// Unused pins
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d46:	e0 e0       	ldi	r30, 0x00	; 0
     d48:	f4 e0       	ldi	r31, 0x04	; 4
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d4e:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d50:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7f4450>
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d54:	e0 e6       	ldi	r30, 0x60	; 96
     d56:	f4 e0       	ldi	r31, 0x04	; 4
     d58:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d5a:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d5c:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d5e:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d60:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d62:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d64:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d66:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d68:	e0 ea       	ldi	r30, 0xA0	; 160
     d6a:	f4 e0       	ldi	r31, 0x04	; 4
     d6c:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d6e:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d70:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d72:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d74:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d76:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d78:	80 8b       	std	Z+16, r24	; 0x10
     d7a:	08 95       	ret

00000d7c <init>:
void init_STATUS(void);

void init(void)
{

	hour_flag = FALSE;
     d7c:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
	minute_flag = FALSE;
     d80:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>
	seconds = 0;
     d84:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     d88:	0e 94 a3 06 	call	0xd46	; 0xd46 <init_PORTS>
	init_USART();
     d8c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <init_USART>
	init_BUTTONS();
     d90:	0e 94 46 01 	call	0x28c	; 0x28c <init_BUTTONS>
	init_ENCODER();
     d94:	0e 94 ca 05 	call	0xb94	; 0xb94 <init_ENCODER>
	init_TWI();
     d98:	0e 94 48 0a 	call	0x1490	; 0x1490 <init_TWI>
	init_RTC();
     d9c:	0e 94 ce 09 	call	0x139c	; 0x139c <init_RTC>
	init_ADC();
     da0:	0e 94 4c 08 	call	0x1098	; 0x1098 <init_ADC>
	init_STATUS();
     da4:	0e 94 88 06 	call	0xd10	; 0xd10 <init_STATUS>
	init_OLED(0);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 12 07 	call	0xe24	; 0xe24 <init_OLED>
	update_VERSION();
     dae:	0e 94 91 01 	call	0x322	; 0x322 <update_VERSION>
	display(SCRVERSION);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	0e 94 af 01 	call	0x35e	; 0x35e <display>
     db8:	08 95       	ret

00000dba <main>:
#include "init.h"

int main(void)
{

	init();
     dba:	0e 94 be 06 	call	0xd7c	; 0xd7c <init>
	sei();
     dbe:	78 94       	sei
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     dc0:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     dc4:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     dc6:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     dca:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     dce:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     dd0:	0e 94 08 06 	call	0xc10	; 0xc10 <handle_encoder>
		}
		if (hour_flag) {		// Things to do once an hour
     dd4:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <hour_flag>
     dd8:	81 11       	cpse	r24, r1
			handle_hour();		// See rtc.c
     dda:	0e 94 cf 08 	call	0x119e	; 0x119e <handle_hour>
		}
		if (minute_flag) {		// Things to do once a minute
     dde:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <minute_flag>
     de2:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     de4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <handle_minute>
		}
		if (tick) {				// Things to do once a second
     de8:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     dec:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     dee:	0e 94 36 09 	call	0x126c	; 0x126c <handle_ticks>
//			button_pushed = scan_buttons();
		}
		if (recv0_buf.done) {	// Serial communication received
     df2:	80 91 2a 29 	lds	r24, 0x292A	; 0x80292a <recv0_buf+0xff>
     df6:	88 23       	and	r24, r24
     df8:	19 f3       	breq	.-58     	; 0xdc0 <main+0x6>
			handle_serial();	// See usart.c
     dfa:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <handle_serial>
     dfe:	e0 cf       	rjmp	.-64     	; 0xdc0 <main+0x6>

00000e00 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	d6 2f       	mov	r29, r22
     e06:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <start_TWI>
	write_TWI(type);
     e0e:	8d 2f       	mov	r24, r29
     e10:	0e 94 8d 0a 	call	0x151a	; 0x151a <write_TWI>
	write_TWI(byteToSend);
     e14:	8c 2f       	mov	r24, r28
     e16:	0e 94 8d 0a 	call	0x151a	; 0x151a <write_TWI>
	stop_TWI();
     e1a:	0e 94 89 0a 	call	0x1512	; 0x1512 <stop_TWI>

}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     e24:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     e26:	e0 e0       	ldi	r30, 0x00	; 0
     e28:	f4 e0       	ldi	r31, 0x04	; 4
     e2a:	90 e8       	ldi	r25, 0x80	; 128
     e2c:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	a6 e4       	ldi	r26, 0x46	; 70
     e32:	b0 e1       	ldi	r27, 0x10	; 16
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <init_OLED+0x10>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     e3a:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     e3c:	81 11       	cpse	r24, r1
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
     e40:	cc e3       	ldi	r28, 0x3C	; 60
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
     e44:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     e46:	4a e2       	ldi	r20, 0x2A	; 42
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	8c 2f       	mov	r24, r28
     e4c:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     e50:	41 e7       	ldi	r20, 0x71	; 113
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	8c 2f       	mov	r24, r28
     e56:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     e5a:	4c e5       	ldi	r20, 0x5C	; 92
     e5c:	60 e4       	ldi	r22, 0x40	; 64
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e64:	48 e2       	ldi	r20, 0x28	; 40
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	8c 2f       	mov	r24, r28
     e6a:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     e6e:	48 e0       	ldi	r20, 0x08	; 8
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	8c 2f       	mov	r24, r28
     e74:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e78:	4a e2       	ldi	r20, 0x2A	; 42
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	8c 2f       	mov	r24, r28
     e7e:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e82:	49 e7       	ldi	r20, 0x79	; 121
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	8c 2f       	mov	r24, r28
     e88:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     e8c:	45 ed       	ldi	r20, 0xD5	; 213
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	8c 2f       	mov	r24, r28
     e92:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     e96:	40 e7       	ldi	r20, 0x70	; 112
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	8c 2f       	mov	r24, r28
     e9c:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     ea0:	48 e7       	ldi	r20, 0x78	; 120
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	8c 2f       	mov	r24, r28
     ea6:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     eaa:	48 e0       	ldi	r20, 0x08	; 8
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	8c 2f       	mov	r24, r28
     eb0:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     eb4:	46 e0       	ldi	r20, 0x06	; 6
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     ebe:	42 e7       	ldi	r20, 0x72	; 114
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	8c 2f       	mov	r24, r28
     ec4:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	60 e4       	ldi	r22, 0x40	; 64
     ecc:	8c 2f       	mov	r24, r28
     ece:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     ed2:	4a e2       	ldi	r20, 0x2A	; 42
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	8c 2f       	mov	r24, r28
     ed8:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     edc:	49 e7       	ldi	r20, 0x79	; 121
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	8c 2f       	mov	r24, r28
     ee2:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     ee6:	4a ed       	ldi	r20, 0xDA	; 218
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	8c 2f       	mov	r24, r28
     eec:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	8c 2f       	mov	r24, r28
     ef6:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     efa:	4c ed       	ldi	r20, 0xDC	; 220
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	8c 2f       	mov	r24, r28
     f00:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	8c 2f       	mov	r24, r28
     f0a:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     f0e:	41 e8       	ldi	r20, 0x81	; 129
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	8c 2f       	mov	r24, r28
     f14:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	8c 2f       	mov	r24, r28
     f1e:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     f22:	49 ed       	ldi	r20, 0xD9	; 217
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	8c 2f       	mov	r24, r28
     f28:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     f2c:	41 ef       	ldi	r20, 0xF1	; 241
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	8c 2f       	mov	r24, r28
     f32:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     f36:	4b ed       	ldi	r20, 0xDB	; 219
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	8c 2f       	mov	r24, r28
     f3c:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     f40:	40 e4       	ldi	r20, 0x40	; 64
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	8c 2f       	mov	r24, r28
     f46:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     f4a:	48 e7       	ldi	r20, 0x78	; 120
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8c 2f       	mov	r24, r28
     f50:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     f54:	48 e2       	ldi	r20, 0x28	; 40
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	8c 2f       	mov	r24, r28
     f5a:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	8c 2f       	mov	r24, r28
     f64:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     f68:	40 e8       	ldi	r20, 0x80	; 128
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	8c 2f       	mov	r24, r28
     f6e:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     f72:	4c e0       	ldi	r20, 0x0C	; 12
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	8c 2f       	mov	r24, r28
     f78:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
     f7c:	ba e6       	ldi	r27, 0x6A	; 106
     f7e:	24 e0       	ldi	r18, 0x04	; 4
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	b1 50       	subi	r27, 0x01	; 1
     f84:	20 40       	sbci	r18, 0x00	; 0
     f86:	80 40       	sbci	r24, 0x00	; 0
     f88:	e1 f7       	brne	.-8      	; 0xf82 <init_OLED+0x15e>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     f8c:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     f90:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>

}
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	e2 97       	sbiw	r28, 0x32	; 50
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     fb0:	91 e1       	ldi	r25, 0x11	; 17
     fb2:	e8 eb       	ldi	r30, 0xB8	; 184
     fb4:	f4 e6       	ldi	r31, 0x64	; 100
     fb6:	de 01       	movw	r26, r28
     fb8:	92 96       	adiw	r26, 0x22	; 34
     fba:	01 90       	ld	r0, Z+
     fbc:	0d 92       	st	X+, r0
     fbe:	9a 95       	dec	r25
     fc0:	e1 f7       	brne	.-8      	; 0xfba <writestr_OLED+0x22>

	if (displaynumber == 0) {
     fc2:	81 11       	cpse	r24, r1
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
     fc6:	0c e3       	ldi	r16, 0x3C	; 60
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
     fca:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	7c 01       	movw	r14, r24
     fd2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <strcpy>
	if (strlen(strbuf) > 16) {
     fd6:	f7 01       	movw	r30, r14
     fd8:	01 90       	ld	r0, Z+
     fda:	00 20       	and	r0, r0
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <writestr_OLED+0x40>
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	ee 19       	sub	r30, r14
     fe2:	ff 09       	sbc	r31, r15
     fe4:	71 97       	sbiw	r30, 0x11	; 17
     fe6:	08 f0       	brcs	.+2      	; 0xfea <writestr_OLED+0x52>
		strbuf[16] = '\0';
     fe8:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     fea:	be 01       	movw	r22, r28
     fec:	6e 5d       	subi	r22, 0xDE	; 222
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <strcat>

	if (lineno == 1) {
     ff8:	11 30       	cpi	r17, 0x01	; 1
     ffa:	39 f4       	brne	.+14     	; 0x100a <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	80 2f       	mov	r24, r16
    1002:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1006:	10 e0       	ldi	r17, 0x00	; 0
    1008:	12 c0       	rjmp	.+36     	; 0x102e <writestr_OLED+0x96>
	strcat(strbuf, blanks);		// pad with blanks

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    100a:	40 ec       	ldi	r20, 0xC0	; 192
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 2f       	mov	r24, r16
    1010:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
    1014:	f8 cf       	rjmp	.-16     	; 0x1006 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1016:	e1 e0       	ldi	r30, 0x01	; 1
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	ec 0f       	add	r30, r28
    101c:	fd 1f       	adc	r31, r29
    101e:	e1 0f       	add	r30, r17
    1020:	f1 1d       	adc	r31, r1
    1022:	40 81       	ld	r20, Z
    1024:	60 e4       	ldi	r22, 0x40	; 64
    1026:	80 2f       	mov	r24, r16
    1028:	0e 94 00 07 	call	0xe00	; 0xe00 <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    102c:	1f 5f       	subi	r17, 0xFF	; 255
    102e:	10 31       	cpi	r17, 0x10	; 16
    1030:	90 f3       	brcs	.-28     	; 0x1016 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    103a:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
	display_off = FALSE;
    103e:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <display_off>

}
    1042:	e2 96       	adiw	r28, 0x32	; 50
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	08 95       	ret

00001056 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	1f 92       	push	r1
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1064:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1072:	42 e0       	ldi	r20, 0x02	; 2
    1074:	be 01       	movw	r22, r28
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	81 2f       	mov	r24, r17
    107c:	0e 94 cc 07 	call	0xf98	; 0xf98 <writestr_OLED>
	timerOLED = 0;
    1080:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    1084:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
	display_off = TRUE;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <display_off>

}
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	08 95       	ret

00001098 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
    109e:	e0 e0       	ldi	r30, 0x00	; 0
    10a0:	f6 e0       	ldi	r31, 0x06	; 6
    10a2:	80 81       	ld	r24, Z
    10a4:	84 60       	ori	r24, 0x04	; 4
    10a6:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    10a8:	a0 ea       	ldi	r26, 0xA0	; 160
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	8c 91       	ld	r24, X
    10ae:	80 63       	ori	r24, 0x30	; 48
    10b0:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    10b2:	a2 e0       	ldi	r26, 0x02	; 2
    10b4:	b6 e0       	ldi	r27, 0x06	; 6
    10b6:	8c 91       	ld	r24, X
    10b8:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    10ba:	8c 91       	ld	r24, X
    10bc:	80 64       	ori	r24, 0x40	; 64
    10be:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    10c0:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    10c4:	80 81       	ld	r24, Z
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    10ca:	e8 e0       	ldi	r30, 0x08	; 8
    10cc:	f6 e0       	ldi	r31, 0x06	; 6
    10ce:	80 81       	ld	r24, Z
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <init_ADC+0x40>
		asm("nop");
    10d6:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    10d8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    10dc:	80 fd       	sbrc	r24, 0
    10de:	fb cf       	rjmp	.-10     	; 0x10d6 <init_ADC+0x3e>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    10e0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    10e4:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    10e8:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <status+0x1a>
    10ec:	08 95       	ret

000010ee <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	cf 93       	push	r28

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    10f8:	c1 2c       	mov	r12, r1
    10fa:	d1 2c       	mov	r13, r1
    10fc:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <read_PRESSURE+0x4a>
		ADC0_COMMAND |= ADC_STCONV_bm;
    1102:	e8 e0       	ldi	r30, 0x08	; 8
    1104:	f6 e0       	ldi	r31, 0x06	; 6
    1106:	80 81       	ld	r24, Z
    1108:	81 60       	ori	r24, 0x01	; 1
    110a:	80 83       	st	Z, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <read_PRESSURE+0x22>
			asm("nop");
    110e:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1110:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    1114:	80 fd       	sbrc	r24, 0
    1116:	fb cf       	rjmp	.-10     	; 0x110e <read_PRESSURE+0x20>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1118:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__floatunsisf>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c7 01       	movw	r24, r14
    112c:	b6 01       	movw	r22, r12
    112e:	0e 94 49 0c 	call	0x1892	; 0x1892 <__addsf3>
    1132:	6b 01       	movw	r12, r22
    1134:	7c 01       	movw	r14, r24
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    1136:	cf 5f       	subi	r28, 0xFF	; 255
    1138:	ca 30       	cpi	r28, 0x0A	; 10
    113a:	18 f3       	brcs	.-58     	; 0x1102 <read_PRESSURE+0x14>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e2       	ldi	r20, 0x20	; 32
    1142:	51 e4       	ldi	r21, 0x41	; 65
    1144:	c7 01       	movw	r24, r14
    1146:	b6 01       	movw	r22, r12
    1148:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__divsf3>
    114c:	2e e5       	ldi	r18, 0x5E	; 94
    114e:	3a eb       	ldi	r19, 0xBA	; 186
    1150:	49 e5       	ldi	r20, 0x59	; 89
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__mulsf3>
    1158:	2f e1       	ldi	r18, 0x1F	; 31
    115a:	35 e8       	ldi	r19, 0x85	; 133
    115c:	45 ec       	ldi	r20, 0xC5	; 197
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 48 0c 	call	0x1890	; 0x1890 <__subsf3>
    1164:	6b 01       	movw	r12, r22
    1166:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	0e 94 b5 0c 	call	0x196a	; 0x196a <__cmpsf2>
    1172:	88 23       	and	r24, r24
    1174:	1c f4       	brge	.+6      	; 0x117c <read_PRESSURE+0x8e>
		value = 0.0;
    1176:	c1 2c       	mov	r12, r1
    1178:	d1 2c       	mov	r13, r1
    117a:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	0e 94 49 0c 	call	0x1892	; 0x1892 <__addsf3>
    118c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__fixunssfsi>
    1190:	86 2f       	mov	r24, r22

}
    1192:	cf 91       	pop	r28
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	08 95       	ret

0000119e <handle_hour>:
	dewar. Normally, this isn't the case at LCO.
----------------------------------------------------------------------*/
void handle_hour(void)
{

	hour_flag = FALSE;
    119e:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
    11a2:	08 95       	ret

000011a4 <handle_minute>:
/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
	Checks if a buffer dewar timeout has occurred.
----------------------------------------------------------------------*/
void handle_minute(void)
{
    11a4:	cf 93       	push	r28

	if (++minutes >= 60) {
    11a6:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <minutes>
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <minutes>
    11b0:	8c 33       	cpi	r24, 0x3C	; 60
    11b2:	28 f0       	brcs	.+10     	; 0x11be <handle_minute+0x1a>
		hour_flag = TRUE;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <hour_flag>
		minutes = 0;
    11ba:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <minutes>
	}

	minute_flag = FALSE;
    11be:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>

	if (BLUVALVEOPEN) {
    11c2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11c6:	88 23       	and	r24, r24
    11c8:	8c f4       	brge	.+34     	; 0x11ec <handle_minute+0x48>
		status.opentime_BLU++;
    11ca:	e7 e0       	ldi	r30, 0x07	; 7
    11cc:	f8 e2       	ldi	r31, 0x28	; 40
    11ce:	c3 85       	ldd	r28, Z+11	; 0x0b
    11d0:	cf 5f       	subi	r28, 0xFF	; 255
    11d2:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    11d4:	8b e0       	ldi	r24, 0x0B	; 11
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
    11dc:	c8 17       	cp	r28, r24
    11de:	30 f0       	brcs	.+12     	; 0x11ec <handle_minute+0x48>
			CLOSEVALVE(BLUVALVE);
    11e0:	80 e8       	ldi	r24, 0x80	; 128
    11e2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    11ec:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11f0:	86 ff       	sbrs	r24, 6
    11f2:	11 c0       	rjmp	.+34     	; 0x1216 <handle_minute+0x72>
		status.opentime_RED++;
    11f4:	e7 e0       	ldi	r30, 0x07	; 7
    11f6:	f8 e2       	ldi	r31, 0x28	; 40
    11f8:	c4 85       	ldd	r28, Z+12	; 0x0c
    11fa:	cf 5f       	subi	r28, 0xFF	; 255
    11fc:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    11fe:	8b e0       	ldi	r24, 0x0B	; 11
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
    1206:	c8 17       	cp	r28, r24
    1208:	30 f0       	brcs	.+12     	; 0x1216 <handle_minute+0x72>
			CLOSEVALVE(REDVALVE);
    120a:	80 e4       	ldi	r24, 0x40	; 64
    120c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    1216:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    121a:	85 ff       	sbrs	r24, 5
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <handle_minute+0xa0>
		status.opentime_BUF++;
    121e:	e7 e0       	ldi	r30, 0x07	; 7
    1220:	f8 e2       	ldi	r31, 0x28	; 40
    1222:	85 85       	ldd	r24, Z+13	; 0x0d
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    1228:	84 31       	cpi	r24, 0x14	; 20
    122a:	60 f0       	brcs	.+24     	; 0x1244 <handle_minute+0xa0>
			CLOSEVALVE(BUFVALVE);
    122c:	e0 e4       	ldi	r30, 0x40	; 64
    122e:	f4 e0       	ldi	r31, 0x04	; 4
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    1234:	80 e1       	ldi	r24, 0x10	; 16
    1236:	86 83       	std	Z+6, r24	; 0x06
			status.maxopen_BUF = TRUE;
    1238:	e7 e0       	ldi	r30, 0x07	; 7
    123a:	f8 e2       	ldi	r31, 0x28	; 40
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	81 8b       	std	Z+17, r24	; 0x11
			status.next_buftank_fill = BIGFILLINTERVAL;
    1240:	8c e0       	ldi	r24, 0x0C	; 12
    1242:	86 8b       	std	Z+22, r24	; 0x16
		}
	}

	if (SUPVALVEOPEN) {
    1244:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1248:	84 ff       	sbrs	r24, 4
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <handle_minute+0xb2>
		status.opentime_SUP++;				// Increment supply dewar valve time
    124c:	e7 e0       	ldi	r30, 0x07	; 7
    124e:	f8 e2       	ldi	r31, 0x28	; 40
    1250:	86 85       	ldd	r24, Z+14	; 0x0e
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    1256:	e7 e0       	ldi	r30, 0x07	; 7
    1258:	f8 e2       	ldi	r31, 0x28	; 40
    125a:	85 89       	ldd	r24, Z+21	; 0x15
    125c:	81 50       	subi	r24, 0x01	; 1
    125e:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    1260:	81 11       	cpse	r24, r1
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <handle_minute+0xc4>
		start_FILL();						// See encoder.c
    1264:	0e 94 d1 05 	call	0xba2	; 0xba2 <start_FILL>
	}
}
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <handle_ticks>:
	it has timed out. Get a new LN2 gas pressure reading.
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    126c:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {		// seconds incremented in ISR
    1270:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1274:	8c 33       	cpi	r24, 0x3C	; 60
    1276:	28 f0       	brcs	.+10     	; 0x1282 <handle_ticks+0x16>
		minute_flag = TRUE;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <minute_flag>
		seconds = 0;
    127e:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

	status.pressure = read_PRESSURE();				// LN2 pressure
    1282:	0e 94 77 08 	call	0x10ee	; 0x10ee <read_PRESSURE>
    1286:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <status+0x1a>

//	handle_button();

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    128a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    128e:	88 23       	and	r24, r24
    1290:	f4 f4       	brge	.+60     	; 0x12ce <handle_ticks+0x62>
    1292:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1296:	80 fd       	sbrc	r24, 0
    1298:	1a c0       	rjmp	.+52     	; 0x12ce <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    129a:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <status+0x13>
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	30 f0       	brcs	.+12     	; 0x12ae <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    12a2:	80 e8       	ldi	r24, 0x80	; 128
    12a4:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    12a8:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <status+0x13>
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    12b4:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	49 f4       	brne	.+18     	; 0x12ce <handle_ticks+0x62>
    12bc:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12c0:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12c4:	89 2b       	or	r24, r25
    12c6:	19 f0       	breq	.+6      	; 0x12ce <handle_ticks+0x62>
			display(SCRVALVES);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 af 01 	call	0x35e	; 0x35e <display>
		}
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    12ce:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    12d2:	86 ff       	sbrs	r24, 6
    12d4:	1e c0       	rjmp	.+60     	; 0x1312 <handle_ticks+0xa6>
    12d6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12da:	81 fd       	sbrc	r24, 1
    12dc:	1a c0       	rjmp	.+52     	; 0x1312 <handle_ticks+0xa6>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    12de:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x14>
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	30 f0       	brcs	.+12     	; 0x12f2 <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    12e6:	80 e4       	ldi	r24, 0x40	; 64
    12e8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    12ec:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x14>
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    12f8:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	49 f4       	brne	.+18     	; 0x1312 <handle_ticks+0xa6>
    1300:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1304:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1308:	89 2b       	or	r24, r25
    130a:	19 f0       	breq	.+6      	; 0x1312 <handle_ticks+0xa6>
			display(SCRVALVES);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	0e 94 af 01 	call	0x35e	; 0x35e <display>
		}
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    1312:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1316:	85 ff       	sbrs	r24, 5
    1318:	2a c0       	rjmp	.+84     	; 0x136e <handle_ticks+0x102>
    131a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    131e:	82 fd       	sbrc	r24, 2
    1320:	26 c0       	rjmp	.+76     	; 0x136e <handle_ticks+0x102>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    1322:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x12>
    1326:	85 30       	cpi	r24, 0x05	; 5
    1328:	90 f0       	brcs	.+36     	; 0x134e <handle_ticks+0xe2>
			CLOSEVALVE(BUFVALVE);
    132a:	e0 e4       	ldi	r30, 0x40	; 64
    132c:	f4 e0       	ldi	r31, 0x04	; 4
    132e:	80 e2       	ldi	r24, 0x20	; 32
    1330:	86 83       	std	Z+6, r24	; 0x06
			status.overfill_BUF = 0;
    1332:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <status+0x12>
    1336:	24 e5       	ldi	r18, 0x54	; 84
    1338:	88 e5       	ldi	r24, 0x58	; 88
    133a:	94 e1       	ldi	r25, 0x14	; 20
    133c:	21 50       	subi	r18, 0x01	; 1
    133e:	80 40       	sbci	r24, 0x00	; 0
    1340:	90 40       	sbci	r25, 0x00	; 0
    1342:	e1 f7       	brne	.-8      	; 0x133c <handle_ticks+0xd0>
    1344:	00 c0       	rjmp	.+0      	; 0x1346 <handle_ticks+0xda>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <handle_ticks+0xdc>
			_delay_ms(2000);
			CLOSEVALVE(SUPVALVE);
    1348:	80 e1       	ldi	r24, 0x10	; 16
    134a:	86 83       	std	Z+6, r24	; 0x06
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <handle_ticks+0xe8>
		} else {
			status.overfill_BUF++;
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1354:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	49 f4       	brne	.+18     	; 0x136e <handle_ticks+0x102>
    135c:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1360:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1364:	89 2b       	or	r24, r25
    1366:	19 f0       	breq	.+6      	; 0x136e <handle_ticks+0x102>
			display(SCRVALVES);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	0e 94 af 01 	call	0x35e	; 0x35e <display>
			status.supply_button_time = 0;
		}
	}
*/

	if (timerOLED) {
    136e:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1372:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	81 f0       	breq	.+32     	; 0x139a <handle_ticks+0x12e>
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    137a:	8b 30       	cpi	r24, 0x0B	; 11
    137c:	91 05       	cpc	r25, r1
    137e:	40 f0       	brcs	.+16     	; 0x1390 <handle_ticks+0x124>
			clear_OLED(0);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 2b 08 	call	0x1056	; 0x1056 <clear_OLED>
			timerOLED = 0;
    1386:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    138a:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
    138e:	08 95       	ret
		} else {
			timerOLED++;
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    1396:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
    139a:	08 95       	ret

0000139c <init_RTC>:
{

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    139c:	e0 e6       	ldi	r30, 0x60	; 96
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    13a2:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    13a4:	98 ed       	ldi	r25, 0xD8	; 216
    13a6:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13a8:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <init_RTC+0x12>
		asm("nop");
    13ac:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    13ae:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    13b2:	86 fd       	sbrc	r24, 6
    13b4:	fb cf       	rjmp	.-10     	; 0x13ac <init_RTC+0x10>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    13b6:	e0 e6       	ldi	r30, 0x60	; 96
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    13bc:	8b 7f       	andi	r24, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    13be:	98 ed       	ldi	r25, 0xD8	; 216
    13c0:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13c2:	84 8f       	std	Z+28, r24	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    13c4:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    13c6:	81 60       	ori	r24, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    13c8:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13ca:	84 8f       	std	Z+28, r24	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <init_RTC+0x34>
		asm("nop");
    13ce:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    13d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    13d4:	81 11       	cpse	r24, r1
    13d6:	fb cf       	rjmp	.-10     	; 0x13ce <init_RTC+0x32>
		asm("nop");
	}

	RTC.PER = 511;			// 1 sec period for overflow interrupts
    13d8:	e0 e4       	ldi	r30, 0x40	; 64
    13da:	f1 e0       	ldi	r31, 0x01	; 1
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	82 87       	std	Z+10, r24	; 0x0a
    13e2:	93 87       	std	Z+11, r25	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    13e8:	85 81       	ldd	r24, Z+5	; 0x05
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    13ee:	81 eb       	ldi	r24, 0xB1	; 177
    13f0:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	82 83       	std	Z+2, r24	; 0x02
    13f8:	08 95       	ret

000013fa <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    140e:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    1418:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    142a:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <ticks_TCB0>
    142e:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    1432:	25 e0       	ldi	r18, 0x05	; 5
    1434:	3d e0       	ldi	r19, 0x0D	; 13
    1436:	ac 01       	movw	r20, r24
    1438:	42 9f       	mul	r20, r18
    143a:	c0 01       	movw	r24, r0
    143c:	43 9f       	mul	r20, r19
    143e:	90 0d       	add	r25, r0
    1440:	52 9f       	mul	r21, r18
    1442:	90 0d       	add	r25, r0
    1444:	11 24       	eor	r1, r1
    1446:	e0 e8       	ldi	r30, 0x80	; 128
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	84 87       	std	Z+12, r24	; 0x0c
    144c:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    1452:	80 83       	st	Z, r24
    1454:	08 95       	ret

00001456 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    1456:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    145a:	08 95       	ret

0000145c <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    1470:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1474:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <ticks_TCB0>
    147e:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <ticks_TCB0+0x1>

}
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0f 90       	pop	r0
    148c:	1f 90       	pop	r1
    148e:	18 95       	reti

00001490 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    1490:	e0 ea       	ldi	r30, 0xA0	; 160
    1492:	f8 e0       	ldi	r31, 0x08	; 8
    1494:	8b e0       	ldi	r24, 0x0B	; 11
    1496:	86 83       	std	Z+6, r24	; 0x06
    1498:	83 81       	ldd	r24, Z+3	; 0x03
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	83 83       	std	Z+3, r24	; 0x03
    149e:	85 81       	ldd	r24, Z+5	; 0x05
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	85 83       	std	Z+5, r24	; 0x05
    14a4:	08 95       	ret

000014a6 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    14a6:	61 30       	cpi	r22, 0x01	; 1
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	81 60       	ori	r24, 0x01	; 1
    14b2:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    14b8:	88 0f       	add	r24, r24
    14ba:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	start_TCB0(1);
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 15 0a 	call	0x142a	; 0x142a <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14c6:	0b c0       	rjmp	.+22     	; 0x14de <start_TWI+0x38>
		if (ticks_TCB0 > 10) {
    14c8:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    14cc:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    14d0:	0b 97       	sbiw	r24, 0x0b	; 11
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <start_TWI+0x36>
			stop_TCB0();
    14d4:	0e 94 2b 0a 	call	0x1456	; 0x1456 <stop_TCB0>
			return(TWITIMEOUT);
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    14dc:	00 00       	nop
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14de:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14e2:	80 7c       	andi	r24, 0xC0	; 192
    14e4:	89 f3       	breq	.-30     	; 0x14c8 <start_TWI+0x22>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    14e6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    14ea:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14ee:	82 fd       	sbrc	r24, 2
    14f0:	0c c0       	rjmp	.+24     	; 0x150a <start_TWI+0x64>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    14f2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14f6:	83 fd       	sbrc	r24, 3
    14f8:	0a c0       	rjmp	.+20     	; 0x150e <start_TWI+0x68>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    14fa:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14fe:	89 2f       	mov	r24, r25
    1500:	80 71       	andi	r24, 0x10	; 16
    1502:	94 ff       	sbrs	r25, 4
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <start_TWI+0x6a>
		return(TWINODEVICE);
    1506:	85 e0       	ldi	r24, 0x05	; 5
    1508:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    150e:	82 e0       	ldi	r24, 0x02	; 2
		return(TWINODEVICE);
	}

	return(0);

}
    1510:	08 95       	ret

00001512 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    1512:	87 e0       	ldi	r24, 0x07	; 7
    1514:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    1518:	08 95       	ret

0000151a <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    151a:	01 c0       	rjmp	.+2      	; 0x151e <write_TWI+0x4>
		asm("nop");
    151c:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    151e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1522:	96 ff       	sbrs	r25, 6
    1524:	fb cf       	rjmp	.-10     	; 0x151c <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    1526:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 15 0a 	call	0x142a	; 0x142a <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1532:	0b c0       	rjmp	.+22     	; 0x154a <write_TWI+0x30>
		asm("nop");
    1534:	00 00       	nop
		if (ticks_TCB0 > 50) {
    1536:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    153a:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    153e:	c3 97       	sbiw	r24, 0x33	; 51
    1540:	20 f0       	brcs	.+8      	; 0x154a <write_TWI+0x30>
			stop_TCB0();
    1542:	0e 94 2b 0a 	call	0x1456	; 0x1456 <stop_TCB0>
			return(TWITIMEOUT);
    1546:	84 e0       	ldi	r24, 0x04	; 4
    1548:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    154a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    154e:	86 ff       	sbrs	r24, 6
    1550:	f1 cf       	rjmp	.-30     	; 0x1534 <write_TWI+0x1a>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    1552:	0e 94 2b 0a 	call	0x1456	; 0x1456 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    1556:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    155a:	89 2f       	mov	r24, r25
    155c:	80 71       	andi	r24, 0x10	; 16
    155e:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    1560:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    1562:	08 95       	ret

00001564 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    1564:	e0 e0       	ldi	r30, 0x00	; 0
    1566:	f4 e0       	ldi	r31, 0x04	; 4
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    156c:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    156e:	e0 e0       	ldi	r30, 0x00	; 0
    1570:	f8 e0       	ldi	r31, 0x08	; 8
    1572:	2d e6       	ldi	r18, 0x6D	; 109
    1574:	35 e0       	ldi	r19, 0x05	; 5
    1576:	20 87       	std	Z+8, r18	; 0x08
    1578:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    157a:	95 81       	ldd	r25, Z+5	; 0x05
    157c:	90 68       	ori	r25, 0x80	; 128
    157e:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    1580:	96 81       	ldd	r25, Z+6	; 0x06
    1582:	90 64       	ori	r25, 0x40	; 64
    1584:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    1586:	96 81       	ldd	r25, Z+6	; 0x06
    1588:	90 68       	ori	r25, 0x80	; 128
    158a:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    158c:	10 92 2c 29 	sts	0x292C, r1	; 0x80292c <recv0_buf+0x101>
	send0_buf.length = 0;
    1590:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <send0_buf+0x101>
	recv0_buf.nxfrd = 0;
    1594:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <recv0_buf+0x100>
	send0_buf.nxfrd = 0;
    1598:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	recv0_buf.done = FALSE;				// Ready to receive data
    159c:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
	send0_buf.done = TRUE;				// No data to send
    15a0:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    15a4:	08 95       	ret

000015a6 <send_USART>:
		This copies the data array into the send0_buf data buffer and enables
		"transmit data register empty" interrupt (DREIE). The USART0_DRE_vect
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
    15a6:	dc 01       	movw	r26, r24
	uint8_t i;
	send0_buf.length = nbytes;
    15a8:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <send0_buf+0x101>
	send0_buf.nxfrd = 0;
    15ac:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	send0_buf.done = FALSE;
    15b0:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <send0_buf+0xff>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <send_USART+0x22>
		send0_buf.data[i] = *data++;
    15b8:	e9 2f       	mov	r30, r25
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8c 91       	ld	r24, X
    15be:	e3 5d       	subi	r30, 0xD3	; 211
    15c0:	f6 4d       	sbci	r31, 0xD6	; 214
    15c2:	80 83       	st	Z, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15c4:	9f 5f       	subi	r25, 0xFF	; 255
		send0_buf.data[i] = *data++;
    15c6:	11 96       	adiw	r26, 0x01	; 1
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15c8:	96 17       	cp	r25, r22
    15ca:	b0 f3       	brcs	.-20     	; 0x15b8 <send_USART+0x12>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    15cc:	e0 e0       	ldi	r30, 0x00	; 0
    15ce:	f8 e0       	ldi	r31, 0x08	; 8
    15d0:	85 81       	ldd	r24, Z+5	; 0x05
    15d2:	80 62       	ori	r24, 0x20	; 32
    15d4:	85 83       	std	Z+5, r24	; 0x05
    15d6:	08 95       	ret

000015d8 <handle_serial>:

LN2,C,SUP,T,BUF,X,RED,C,BLU,111,NXT,222,MAX,333,INT,100,PRES,H,TBUF,H,TRED,H,TBLU

------------------------------------------------------------------------------*/
void handle_serial(void)
{
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	c3 5a       	subi	r28, 0xA3	; 163
    15f2:	d1 09       	sbc	r29, r1
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	de bf       	out	0x3e, r29	; 62

	const char fmt0[] = "%c%c%c%c,%d,NXT,%d,MAX,%d,INT,%d,PRES,%c,TBUF,%c,TRED,%c,TBLU\r";
    15f8:	8f e3       	ldi	r24, 0x3F	; 63
    15fa:	e9 ec       	ldi	r30, 0xC9	; 201
    15fc:	f4 e6       	ldi	r31, 0x64	; 100
    15fe:	de 01       	movw	r26, r28
    1600:	11 96       	adiw	r26, 0x01	; 1
    1602:	01 90       	ld	r0, Z+
    1604:	0d 92       	st	X+, r0
    1606:	8a 95       	dec	r24
    1608:	e1 f7       	brne	.-8      	; 0x1602 <handle_serial+0x2a>
	char strbuf[100], supvalve, bufvalve, redvalve, bluvalve, bufther, redther, bluther;
	uint8_t nextfill, maxopen, fillint, pressure;

	recv0_buf.done = FALSE;
    160a:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
    160e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1612:	84 ff       	sbrs	r24, 4
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <handle_serial+0x48>
		supvalve = 'O';
    1616:	0f 2e       	mov	r0, r31
    1618:	ff e4       	ldi	r31, 0x4F	; 79
    161a:	ff 2e       	mov	r15, r31
    161c:	f0 2d       	mov	r31, r0
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <handle_serial+0x50>
	} else {
		supvalve = 'C';
    1620:	0f 2e       	mov	r0, r31
    1622:	f3 e4       	ldi	r31, 0x43	; 67
    1624:	ff 2e       	mov	r15, r31
    1626:	f0 2d       	mov	r31, r0
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
    1628:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
    162c:	81 11       	cpse	r24, r1
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <handle_serial+0x6a>
		bufvalve = 'T';
	} else if (BUFVALVEOPEN) {
    1630:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1634:	85 ff       	sbrs	r24, 5
    1636:	0a c0       	rjmp	.+20     	; 0x164c <handle_serial+0x74>
		bufvalve = 'O';
    1638:	0f 2e       	mov	r0, r31
    163a:	ff e4       	ldi	r31, 0x4F	; 79
    163c:	ef 2e       	mov	r14, r31
    163e:	f0 2d       	mov	r31, r0
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <handle_serial+0x7c>
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
		bufvalve = 'T';
    1642:	0f 2e       	mov	r0, r31
    1644:	f4 e5       	ldi	r31, 0x54	; 84
    1646:	ef 2e       	mov	r14, r31
    1648:	f0 2d       	mov	r31, r0
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <handle_serial+0x7c>
	} else if (BUFVALVEOPEN) {
		bufvalve = 'O';
	} else {
		bufvalve = 'C';
    164c:	0f 2e       	mov	r0, r31
    164e:	f3 e4       	ldi	r31, 0x43	; 67
    1650:	ef 2e       	mov	r14, r31
    1652:	f0 2d       	mov	r31, r0
	}

	// Red CCD vent valve
	if (!REDENABLED) {
    1654:	8d e0       	ldi	r24, 0x0D	; 13
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
    165c:	88 23       	and	r24, r24
    165e:	69 f0       	breq	.+26     	; 0x167a <handle_serial+0xa2>
		redvalve = 'X';
	} else if (status.maxopen_RED) {
    1660:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
    1664:	81 11       	cpse	r24, r1
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <handle_serial+0xac>
		redvalve = 'T';
	} else if (REDVALVEOPEN) {
    1668:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    166c:	86 ff       	sbrs	r24, 6
    166e:	0f c0       	rjmp	.+30     	; 0x168e <handle_serial+0xb6>
		redvalve = 'O';
    1670:	0f 2e       	mov	r0, r31
    1672:	ff e4       	ldi	r31, 0x4F	; 79
    1674:	df 2e       	mov	r13, r31
    1676:	f0 2d       	mov	r31, r0
    1678:	0e c0       	rjmp	.+28     	; 0x1696 <handle_serial+0xbe>
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
		redvalve = 'X';
    167a:	0f 2e       	mov	r0, r31
    167c:	f8 e5       	ldi	r31, 0x58	; 88
    167e:	df 2e       	mov	r13, r31
    1680:	f0 2d       	mov	r31, r0
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <handle_serial+0xbe>
	} else if (status.maxopen_RED) {
		redvalve = 'T';
    1684:	0f 2e       	mov	r0, r31
    1686:	f4 e5       	ldi	r31, 0x54	; 84
    1688:	df 2e       	mov	r13, r31
    168a:	f0 2d       	mov	r31, r0
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <handle_serial+0xbe>
	} else if (REDVALVEOPEN) {
		redvalve = 'O';
	} else {
		redvalve = 'C';
    168e:	0f 2e       	mov	r0, r31
    1690:	f3 e4       	ldi	r31, 0x43	; 67
    1692:	df 2e       	mov	r13, r31
    1694:	f0 2d       	mov	r31, r0
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
    1696:	8c e0       	ldi	r24, 0x0C	; 12
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
    169e:	88 23       	and	r24, r24
    16a0:	69 f0       	breq	.+26     	; 0x16bc <handle_serial+0xe4>
		bluvalve = 'X';
	} else if (status.maxopen_BLU) {
    16a2:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
    16a6:	81 11       	cpse	r24, r1
    16a8:	0e c0       	rjmp	.+28     	; 0x16c6 <handle_serial+0xee>
		bluvalve = 'T';
	} else if (BLUVALVEOPEN) {
    16aa:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    16ae:	88 23       	and	r24, r24
    16b0:	7c f4       	brge	.+30     	; 0x16d0 <handle_serial+0xf8>
		bluvalve = 'O';
    16b2:	0f 2e       	mov	r0, r31
    16b4:	ff e4       	ldi	r31, 0x4F	; 79
    16b6:	af 2e       	mov	r10, r31
    16b8:	f0 2d       	mov	r31, r0
    16ba:	0e c0       	rjmp	.+28     	; 0x16d8 <handle_serial+0x100>
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
		bluvalve = 'X';
    16bc:	0f 2e       	mov	r0, r31
    16be:	f8 e5       	ldi	r31, 0x58	; 88
    16c0:	af 2e       	mov	r10, r31
    16c2:	f0 2d       	mov	r31, r0
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <handle_serial+0x100>
	} else if (status.maxopen_BLU) {
		bluvalve = 'T';
    16c6:	0f 2e       	mov	r0, r31
    16c8:	f4 e5       	ldi	r31, 0x54	; 84
    16ca:	af 2e       	mov	r10, r31
    16cc:	f0 2d       	mov	r31, r0
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <handle_serial+0x100>
	} else if (BLUVALVEOPEN) {
		bluvalve = 'O';
	} else {
		bluvalve = 'C';
    16d0:	0f 2e       	mov	r0, r31
    16d2:	f3 e4       	ldi	r31, 0x43	; 67
    16d4:	af 2e       	mov	r10, r31
    16d6:	f0 2d       	mov	r31, r0
	}

	// Fill interval
	fillint = FILLINTERVAL;		// Read from EEPROM
    16d8:	8a e0       	ldi	r24, 0x0A	; 10
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>
    16e0:	b8 2e       	mov	r11, r24

	// Next fill in
	nextfill = status.next_fill;
    16e2:	07 e0       	ldi	r16, 0x07	; 7
    16e4:	18 e2       	ldi	r17, 0x28	; 40
    16e6:	f8 01       	movw	r30, r16
    16e8:	c5 88       	ldd	r12, Z+21	; 0x15

	// Max open time
	maxopen = MAXOPENTIME;		// Read from EEPROM
    16ea:	8b e0       	ldi	r24, 0x0B	; 11
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_byte>

	// Pressure
	pressure = status.pressure;
    16f2:	f8 01       	movw	r30, r16
    16f4:	92 8d       	ldd	r25, Z+26	; 0x1a

	// BUF thermistor
	if (BUFTHERMWARM) {
    16f6:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16fa:	22 ff       	sbrs	r18, 2
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <handle_serial+0x12a>
		bufther = 'H';
    16fe:	28 e4       	ldi	r18, 0x48	; 72
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <handle_serial+0x12c>
	} else {
		bufther = 'C';
    1702:	23 e4       	ldi	r18, 0x43	; 67
	}

	// Red thermistor
	if (REDTHERMWARM) {
    1704:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1708:	31 ff       	sbrs	r19, 1
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <handle_serial+0x138>
		redther = 'H';
    170c:	38 e4       	ldi	r19, 0x48	; 72
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <handle_serial+0x13a>
	} else {
		redther = 'C';
    1710:	33 e4       	ldi	r19, 0x43	; 67
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
    1712:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1716:	40 ff       	sbrs	r20, 0
    1718:	02 c0       	rjmp	.+4      	; 0x171e <handle_serial+0x146>
		bluther = 'H';
    171a:	48 e4       	ldi	r20, 0x48	; 72
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <handle_serial+0x148>
	} else {
		bluther = 'C';
    171e:	43 e4       	ldi	r20, 0x43	; 67
	}

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
    1720:	1f 92       	push	r1
    1722:	4f 93       	push	r20
    1724:	1f 92       	push	r1
    1726:	3f 93       	push	r19
    1728:	1f 92       	push	r1
    172a:	2f 93       	push	r18
    172c:	1f 92       	push	r1
    172e:	9f 93       	push	r25
    1730:	1f 92       	push	r1
    1732:	bf 92       	push	r11
    1734:	1f 92       	push	r1
    1736:	8f 93       	push	r24
    1738:	1f 92       	push	r1
    173a:	cf 92       	push	r12
    173c:	1f 92       	push	r1
    173e:	af 92       	push	r10
    1740:	1f 92       	push	r1
    1742:	df 92       	push	r13
    1744:	1f 92       	push	r1
    1746:	ef 92       	push	r14
    1748:	1f 92       	push	r1
    174a:	ff 92       	push	r15
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	9f 93       	push	r25
    1752:	8f 93       	push	r24
    1754:	cf 96       	adiw	r24, 0x3f	; 63
    1756:	9f 93       	push	r25
    1758:	8f 93       	push	r24
    175a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <sprintf>
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(1);					// 1 ms ticks
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 15 0a 	call	0x142a	; 0x142a <start_TCB0>
	while (!send0_buf.done) {
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	08 c0       	rjmp	.+16     	; 0x177c <handle_serial+0x1a4>
		if (ticks_TCB0 > 1000) {	// See timers.h
    176c:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1770:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1774:	89 3e       	cpi	r24, 0xE9	; 233
    1776:	93 40       	sbci	r25, 0x03	; 3
    1778:	90 f4       	brcc	.+36     	; 0x179e <handle_serial+0x1c6>
			return;
		}
		asm("nop");
    177a:	00 00       	nop

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(1);					// 1 ms ticks
	while (!send0_buf.done) {
    177c:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <send0_buf+0xff>
    1780:	88 23       	and	r24, r24
    1782:	a1 f3       	breq	.-24     	; 0x176c <handle_serial+0x194>
			return;
		}
		asm("nop");
	}

	send_USART((uint8_t*) strbuf, strlen(strbuf));
    1784:	ce 01       	movw	r24, r28
    1786:	80 5c       	subi	r24, 0xC0	; 192
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	fc 01       	movw	r30, r24
    178c:	01 90       	ld	r0, Z+
    178e:	00 20       	and	r0, r0
    1790:	e9 f7       	brne	.-6      	; 0x178c <handle_serial+0x1b4>
    1792:	31 97       	sbiw	r30, 0x01	; 1
    1794:	bf 01       	movw	r22, r30
    1796:	68 1b       	sub	r22, r24
    1798:	79 0b       	sbc	r23, r25
    179a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <send_USART>

}
    179e:	cd 55       	subi	r28, 0x5D	; 93
    17a0:	df 4f       	sbci	r29, 0xFF	; 255
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	08 95       	ret

000017bc <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    17d2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    17d6:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <recv0_buf+0x101>
    17da:	9f 3f       	cpi	r25, 0xFF	; 255
    17dc:	b1 f0       	breq	.+44     	; 0x180a <__DATA_REGION_LENGTH__+0xa>
		if ((char) c == '\r') {
    17de:	8d 30       	cpi	r24, 0x0D	; 13
    17e0:	51 f4       	brne	.+20     	; 0x17f6 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    17e2:	e0 91 2c 29 	lds	r30, 0x292C	; 0x80292c <recv0_buf+0x101>
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	e5 5d       	subi	r30, 0xD5	; 213
    17ea:	f7 4d       	sbci	r31, 0xD7	; 215
    17ec:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <recv0_buf+0xff>
    17f4:	0a c0       	rjmp	.+20     	; 0x180a <__DATA_REGION_LENGTH__+0xa>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    17f6:	ac e2       	ldi	r26, 0x2C	; 44
    17f8:	b9 e2       	ldi	r27, 0x29	; 41
    17fa:	ec 91       	ld	r30, X
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	9e 0f       	add	r25, r30
    1800:	9c 93       	st	X, r25
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	e5 5d       	subi	r30, 0xD5	; 213
    1806:	f7 4d       	sbci	r31, 0xD7	; 215
    1808:	80 83       	st	Z, r24
		}
	}
}
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	bf 91       	pop	r27
    1810:	af 91       	pop	r26
    1812:	9f 91       	pop	r25
    1814:	8f 91       	pop	r24
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	ef 93       	push	r30
    1838:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    183a:	c0 e0       	ldi	r28, 0x00	; 0
    183c:	d8 e0       	ldi	r29, 0x08	; 8
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	8f 7d       	andi	r24, 0xDF	; 223
    1842:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    1844:	ad e2       	ldi	r26, 0x2D	; 45
    1846:	ba e2       	ldi	r27, 0x2A	; 42
    1848:	ec 91       	ld	r30, X
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	8e 0f       	add	r24, r30
    184e:	8c 93       	st	X, r24
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	e3 5d       	subi	r30, 0xD3	; 211
    1854:	f6 4d       	sbci	r31, 0xD6	; 214
    1856:	80 81       	ld	r24, Z
    1858:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    185a:	90 91 2e 2a 	lds	r25, 0x2A2E	; 0x802a2e <send0_buf+0x101>
    185e:	8c 91       	ld	r24, X
    1860:	98 13       	cpse	r25, r24
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    186c:	e0 e0       	ldi	r30, 0x00	; 0
    186e:	f8 e0       	ldi	r31, 0x08	; 8
    1870:	85 81       	ldd	r24, Z+5	; 0x05
    1872:	80 62       	ori	r24, 0x20	; 32
    1874:	85 83       	std	Z+5, r24	; 0x05
	}
}
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	bf 91       	pop	r27
    1880:	af 91       	pop	r26
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__subsf3>:
    1890:	50 58       	subi	r21, 0x80	; 128

00001892 <__addsf3>:
    1892:	bb 27       	eor	r27, r27
    1894:	aa 27       	eor	r26, r26
    1896:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__addsf3x>
    189a:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__fp_round>
    189e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscA>
    18a2:	38 f0       	brcs	.+14     	; 0x18b2 <__addsf3+0x20>
    18a4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_pscB>
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <__addsf3+0x20>
    18aa:	39 f4       	brne	.+14     	; 0x18ba <__addsf3+0x28>
    18ac:	9f 3f       	cpi	r25, 0xFF	; 255
    18ae:	19 f4       	brne	.+6      	; 0x18b6 <__addsf3+0x24>
    18b0:	26 f4       	brtc	.+8      	; 0x18ba <__addsf3+0x28>
    18b2:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__fp_nan>
    18b6:	0e f4       	brtc	.+2      	; 0x18ba <__addsf3+0x28>
    18b8:	e0 95       	com	r30
    18ba:	e7 fb       	bst	r30, 7
    18bc:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_inf>

000018c0 <__addsf3x>:
    18c0:	e9 2f       	mov	r30, r25
    18c2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_split3>
    18c6:	58 f3       	brcs	.-42     	; 0x189e <__addsf3+0xc>
    18c8:	ba 17       	cp	r27, r26
    18ca:	62 07       	cpc	r22, r18
    18cc:	73 07       	cpc	r23, r19
    18ce:	84 07       	cpc	r24, r20
    18d0:	95 07       	cpc	r25, r21
    18d2:	20 f0       	brcs	.+8      	; 0x18dc <__addsf3x+0x1c>
    18d4:	79 f4       	brne	.+30     	; 0x18f4 <__addsf3x+0x34>
    18d6:	a6 f5       	brtc	.+104    	; 0x1940 <__addsf3x+0x80>
    18d8:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_zero>
    18dc:	0e f4       	brtc	.+2      	; 0x18e0 <__addsf3x+0x20>
    18de:	e0 95       	com	r30
    18e0:	0b 2e       	mov	r0, r27
    18e2:	ba 2f       	mov	r27, r26
    18e4:	a0 2d       	mov	r26, r0
    18e6:	0b 01       	movw	r0, r22
    18e8:	b9 01       	movw	r22, r18
    18ea:	90 01       	movw	r18, r0
    18ec:	0c 01       	movw	r0, r24
    18ee:	ca 01       	movw	r24, r20
    18f0:	a0 01       	movw	r20, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	ff 27       	eor	r31, r31
    18f6:	59 1b       	sub	r21, r25
    18f8:	99 f0       	breq	.+38     	; 0x1920 <__addsf3x+0x60>
    18fa:	59 3f       	cpi	r21, 0xF9	; 249
    18fc:	50 f4       	brcc	.+20     	; 0x1912 <__addsf3x+0x52>
    18fe:	50 3e       	cpi	r21, 0xE0	; 224
    1900:	68 f1       	brcs	.+90     	; 0x195c <__addsf3x+0x9c>
    1902:	1a 16       	cp	r1, r26
    1904:	f0 40       	sbci	r31, 0x00	; 0
    1906:	a2 2f       	mov	r26, r18
    1908:	23 2f       	mov	r18, r19
    190a:	34 2f       	mov	r19, r20
    190c:	44 27       	eor	r20, r20
    190e:	58 5f       	subi	r21, 0xF8	; 248
    1910:	f3 cf       	rjmp	.-26     	; 0x18f8 <__addsf3x+0x38>
    1912:	46 95       	lsr	r20
    1914:	37 95       	ror	r19
    1916:	27 95       	ror	r18
    1918:	a7 95       	ror	r26
    191a:	f0 40       	sbci	r31, 0x00	; 0
    191c:	53 95       	inc	r21
    191e:	c9 f7       	brne	.-14     	; 0x1912 <__addsf3x+0x52>
    1920:	7e f4       	brtc	.+30     	; 0x1940 <__addsf3x+0x80>
    1922:	1f 16       	cp	r1, r31
    1924:	ba 0b       	sbc	r27, r26
    1926:	62 0b       	sbc	r22, r18
    1928:	73 0b       	sbc	r23, r19
    192a:	84 0b       	sbc	r24, r20
    192c:	ba f0       	brmi	.+46     	; 0x195c <__addsf3x+0x9c>
    192e:	91 50       	subi	r25, 0x01	; 1
    1930:	a1 f0       	breq	.+40     	; 0x195a <__addsf3x+0x9a>
    1932:	ff 0f       	add	r31, r31
    1934:	bb 1f       	adc	r27, r27
    1936:	66 1f       	adc	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	c2 f7       	brpl	.-16     	; 0x192e <__addsf3x+0x6e>
    193e:	0e c0       	rjmp	.+28     	; 0x195c <__addsf3x+0x9c>
    1940:	ba 0f       	add	r27, r26
    1942:	62 1f       	adc	r22, r18
    1944:	73 1f       	adc	r23, r19
    1946:	84 1f       	adc	r24, r20
    1948:	48 f4       	brcc	.+18     	; 0x195c <__addsf3x+0x9c>
    194a:	87 95       	ror	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	b7 95       	ror	r27
    1952:	f7 95       	ror	r31
    1954:	9e 3f       	cpi	r25, 0xFE	; 254
    1956:	08 f0       	brcs	.+2      	; 0x195a <__addsf3x+0x9a>
    1958:	b0 cf       	rjmp	.-160    	; 0x18ba <__addsf3+0x28>
    195a:	93 95       	inc	r25
    195c:	88 0f       	add	r24, r24
    195e:	08 f0       	brcs	.+2      	; 0x1962 <__addsf3x+0xa2>
    1960:	99 27       	eor	r25, r25
    1962:	ee 0f       	add	r30, r30
    1964:	97 95       	ror	r25
    1966:	87 95       	ror	r24
    1968:	08 95       	ret

0000196a <__cmpsf2>:
    196a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_cmp>
    196e:	08 f4       	brcc	.+2      	; 0x1972 <__cmpsf2+0x8>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	08 95       	ret

00001974 <__divsf3>:
    1974:	0e 94 ce 0c 	call	0x199c	; 0x199c <__divsf3x>
    1978:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__fp_round>
    197c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_pscB>
    1980:	58 f0       	brcs	.+22     	; 0x1998 <__divsf3+0x24>
    1982:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscA>
    1986:	40 f0       	brcs	.+16     	; 0x1998 <__divsf3+0x24>
    1988:	29 f4       	brne	.+10     	; 0x1994 <__divsf3+0x20>
    198a:	5f 3f       	cpi	r21, 0xFF	; 255
    198c:	29 f0       	breq	.+10     	; 0x1998 <__divsf3+0x24>
    198e:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_inf>
    1992:	51 11       	cpse	r21, r1
    1994:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_szero>
    1998:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__fp_nan>

0000199c <__divsf3x>:
    199c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_split3>
    19a0:	68 f3       	brcs	.-38     	; 0x197c <__divsf3+0x8>

000019a2 <__divsf3_pse>:
    19a2:	99 23       	and	r25, r25
    19a4:	b1 f3       	breq	.-20     	; 0x1992 <__divsf3+0x1e>
    19a6:	55 23       	and	r21, r21
    19a8:	91 f3       	breq	.-28     	; 0x198e <__divsf3+0x1a>
    19aa:	95 1b       	sub	r25, r21
    19ac:	55 0b       	sbc	r21, r21
    19ae:	bb 27       	eor	r27, r27
    19b0:	aa 27       	eor	r26, r26
    19b2:	62 17       	cp	r22, r18
    19b4:	73 07       	cpc	r23, r19
    19b6:	84 07       	cpc	r24, r20
    19b8:	38 f0       	brcs	.+14     	; 0x19c8 <__divsf3_pse+0x26>
    19ba:	9f 5f       	subi	r25, 0xFF	; 255
    19bc:	5f 4f       	sbci	r21, 0xFF	; 255
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	44 1f       	adc	r20, r20
    19c4:	aa 1f       	adc	r26, r26
    19c6:	a9 f3       	breq	.-22     	; 0x19b2 <__divsf3_pse+0x10>
    19c8:	35 d0       	rcall	.+106    	; 0x1a34 <__divsf3_pse+0x92>
    19ca:	0e 2e       	mov	r0, r30
    19cc:	3a f0       	brmi	.+14     	; 0x19dc <__divsf3_pse+0x3a>
    19ce:	e0 e8       	ldi	r30, 0x80	; 128
    19d0:	32 d0       	rcall	.+100    	; 0x1a36 <__divsf3_pse+0x94>
    19d2:	91 50       	subi	r25, 0x01	; 1
    19d4:	50 40       	sbci	r21, 0x00	; 0
    19d6:	e6 95       	lsr	r30
    19d8:	00 1c       	adc	r0, r0
    19da:	ca f7       	brpl	.-14     	; 0x19ce <__divsf3_pse+0x2c>
    19dc:	2b d0       	rcall	.+86     	; 0x1a34 <__divsf3_pse+0x92>
    19de:	fe 2f       	mov	r31, r30
    19e0:	29 d0       	rcall	.+82     	; 0x1a34 <__divsf3_pse+0x92>
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	bb 1f       	adc	r27, r27
    19ea:	26 17       	cp	r18, r22
    19ec:	37 07       	cpc	r19, r23
    19ee:	48 07       	cpc	r20, r24
    19f0:	ab 07       	cpc	r26, r27
    19f2:	b0 e8       	ldi	r27, 0x80	; 128
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <__divsf3_pse+0x56>
    19f6:	bb 0b       	sbc	r27, r27
    19f8:	80 2d       	mov	r24, r0
    19fa:	bf 01       	movw	r22, r30
    19fc:	ff 27       	eor	r31, r31
    19fe:	93 58       	subi	r25, 0x83	; 131
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	3a f0       	brmi	.+14     	; 0x1a12 <__divsf3_pse+0x70>
    1a04:	9e 3f       	cpi	r25, 0xFE	; 254
    1a06:	51 05       	cpc	r21, r1
    1a08:	78 f0       	brcs	.+30     	; 0x1a28 <__divsf3_pse+0x86>
    1a0a:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_inf>
    1a0e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_szero>
    1a12:	5f 3f       	cpi	r21, 0xFF	; 255
    1a14:	e4 f3       	brlt	.-8      	; 0x1a0e <__divsf3_pse+0x6c>
    1a16:	98 3e       	cpi	r25, 0xE8	; 232
    1a18:	d4 f3       	brlt	.-12     	; 0x1a0e <__divsf3_pse+0x6c>
    1a1a:	86 95       	lsr	r24
    1a1c:	77 95       	ror	r23
    1a1e:	67 95       	ror	r22
    1a20:	b7 95       	ror	r27
    1a22:	f7 95       	ror	r31
    1a24:	9f 5f       	subi	r25, 0xFF	; 255
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__divsf3_pse+0x78>
    1a28:	88 0f       	add	r24, r24
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	97 f9       	bld	r25, 7
    1a32:	08 95       	ret
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	ba 07       	cpc	r27, r26
    1a46:	20 f0       	brcs	.+8      	; 0x1a50 <__divsf3_pse+0xae>
    1a48:	62 1b       	sub	r22, r18
    1a4a:	73 0b       	sbc	r23, r19
    1a4c:	84 0b       	sbc	r24, r20
    1a4e:	ba 0b       	sbc	r27, r26
    1a50:	ee 1f       	adc	r30, r30
    1a52:	88 f7       	brcc	.-30     	; 0x1a36 <__divsf3_pse+0x94>
    1a54:	e0 95       	com	r30
    1a56:	08 95       	ret

00001a58 <__fixunssfsi>:
    1a58:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__fp_splitA>
    1a5c:	88 f0       	brcs	.+34     	; 0x1a80 <__fixunssfsi+0x28>
    1a5e:	9f 57       	subi	r25, 0x7F	; 127
    1a60:	98 f0       	brcs	.+38     	; 0x1a88 <__fixunssfsi+0x30>
    1a62:	b9 2f       	mov	r27, r25
    1a64:	99 27       	eor	r25, r25
    1a66:	b7 51       	subi	r27, 0x17	; 23
    1a68:	b0 f0       	brcs	.+44     	; 0x1a96 <__fixunssfsi+0x3e>
    1a6a:	e1 f0       	breq	.+56     	; 0x1aa4 <__fixunssfsi+0x4c>
    1a6c:	66 0f       	add	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	1a f0       	brmi	.+6      	; 0x1a7c <__fixunssfsi+0x24>
    1a76:	ba 95       	dec	r27
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__fixunssfsi+0x14>
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <__fixunssfsi+0x4c>
    1a7c:	b1 30       	cpi	r27, 0x01	; 1
    1a7e:	91 f0       	breq	.+36     	; 0x1aa4 <__fixunssfsi+0x4c>
    1a80:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__fp_zero>
    1a84:	b1 e0       	ldi	r27, 0x01	; 1
    1a86:	08 95       	ret
    1a88:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_zero>
    1a8c:	67 2f       	mov	r22, r23
    1a8e:	78 2f       	mov	r23, r24
    1a90:	88 27       	eor	r24, r24
    1a92:	b8 5f       	subi	r27, 0xF8	; 248
    1a94:	39 f0       	breq	.+14     	; 0x1aa4 <__fixunssfsi+0x4c>
    1a96:	b9 3f       	cpi	r27, 0xF9	; 249
    1a98:	cc f3       	brlt	.-14     	; 0x1a8c <__fixunssfsi+0x34>
    1a9a:	86 95       	lsr	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b3 95       	inc	r27
    1aa2:	d9 f7       	brne	.-10     	; 0x1a9a <__fixunssfsi+0x42>
    1aa4:	3e f4       	brtc	.+14     	; 0x1ab4 <__fixunssfsi+0x5c>
    1aa6:	90 95       	com	r25
    1aa8:	80 95       	com	r24
    1aaa:	70 95       	com	r23
    1aac:	61 95       	neg	r22
    1aae:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab4:	08 95       	ret

00001ab6 <__floatunsisf>:
    1ab6:	e8 94       	clt
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <__floatsisf+0x12>

00001aba <__floatsisf>:
    1aba:	97 fb       	bst	r25, 7
    1abc:	3e f4       	brtc	.+14     	; 0x1acc <__floatsisf+0x12>
    1abe:	90 95       	com	r25
    1ac0:	80 95       	com	r24
    1ac2:	70 95       	com	r23
    1ac4:	61 95       	neg	r22
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	99 23       	and	r25, r25
    1ace:	a9 f0       	breq	.+42     	; 0x1afa <__floatsisf+0x40>
    1ad0:	f9 2f       	mov	r31, r25
    1ad2:	96 e9       	ldi	r25, 0x96	; 150
    1ad4:	bb 27       	eor	r27, r27
    1ad6:	93 95       	inc	r25
    1ad8:	f6 95       	lsr	r31
    1ada:	87 95       	ror	r24
    1adc:	77 95       	ror	r23
    1ade:	67 95       	ror	r22
    1ae0:	b7 95       	ror	r27
    1ae2:	f1 11       	cpse	r31, r1
    1ae4:	f8 cf       	rjmp	.-16     	; 0x1ad6 <__floatsisf+0x1c>
    1ae6:	fa f4       	brpl	.+62     	; 0x1b26 <__floatsisf+0x6c>
    1ae8:	bb 0f       	add	r27, r27
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <__floatsisf+0x36>
    1aec:	60 ff       	sbrs	r22, 0
    1aee:	1b c0       	rjmp	.+54     	; 0x1b26 <__floatsisf+0x6c>
    1af0:	6f 5f       	subi	r22, 0xFF	; 255
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	8f 4f       	sbci	r24, 0xFF	; 255
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	16 c0       	rjmp	.+44     	; 0x1b26 <__floatsisf+0x6c>
    1afa:	88 23       	and	r24, r24
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <__floatsisf+0x48>
    1afe:	96 e9       	ldi	r25, 0x96	; 150
    1b00:	11 c0       	rjmp	.+34     	; 0x1b24 <__floatsisf+0x6a>
    1b02:	77 23       	and	r23, r23
    1b04:	21 f0       	breq	.+8      	; 0x1b0e <__floatsisf+0x54>
    1b06:	9e e8       	ldi	r25, 0x8E	; 142
    1b08:	87 2f       	mov	r24, r23
    1b0a:	76 2f       	mov	r23, r22
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <__floatsisf+0x5e>
    1b0e:	66 23       	and	r22, r22
    1b10:	71 f0       	breq	.+28     	; 0x1b2e <__floatsisf+0x74>
    1b12:	96 e8       	ldi	r25, 0x86	; 134
    1b14:	86 2f       	mov	r24, r22
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	2a f0       	brmi	.+10     	; 0x1b26 <__floatsisf+0x6c>
    1b1c:	9a 95       	dec	r25
    1b1e:	66 0f       	add	r22, r22
    1b20:	77 1f       	adc	r23, r23
    1b22:	88 1f       	adc	r24, r24
    1b24:	da f7       	brpl	.-10     	; 0x1b1c <__floatsisf+0x62>
    1b26:	88 0f       	add	r24, r24
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	97 f9       	bld	r25, 7
    1b2e:	08 95       	ret

00001b30 <__fp_cmp>:
    1b30:	99 0f       	add	r25, r25
    1b32:	00 08       	sbc	r0, r0
    1b34:	55 0f       	add	r21, r21
    1b36:	aa 0b       	sbc	r26, r26
    1b38:	e0 e8       	ldi	r30, 0x80	; 128
    1b3a:	fe ef       	ldi	r31, 0xFE	; 254
    1b3c:	16 16       	cp	r1, r22
    1b3e:	17 06       	cpc	r1, r23
    1b40:	e8 07       	cpc	r30, r24
    1b42:	f9 07       	cpc	r31, r25
    1b44:	c0 f0       	brcs	.+48     	; 0x1b76 <__fp_cmp+0x46>
    1b46:	12 16       	cp	r1, r18
    1b48:	13 06       	cpc	r1, r19
    1b4a:	e4 07       	cpc	r30, r20
    1b4c:	f5 07       	cpc	r31, r21
    1b4e:	98 f0       	brcs	.+38     	; 0x1b76 <__fp_cmp+0x46>
    1b50:	62 1b       	sub	r22, r18
    1b52:	73 0b       	sbc	r23, r19
    1b54:	84 0b       	sbc	r24, r20
    1b56:	95 0b       	sbc	r25, r21
    1b58:	39 f4       	brne	.+14     	; 0x1b68 <__fp_cmp+0x38>
    1b5a:	0a 26       	eor	r0, r26
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <__fp_cmp+0x46>
    1b5e:	23 2b       	or	r18, r19
    1b60:	24 2b       	or	r18, r20
    1b62:	25 2b       	or	r18, r21
    1b64:	21 f4       	brne	.+8      	; 0x1b6e <__fp_cmp+0x3e>
    1b66:	08 95       	ret
    1b68:	0a 26       	eor	r0, r26
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <__fp_cmp+0x3e>
    1b6c:	a1 40       	sbci	r26, 0x01	; 1
    1b6e:	a6 95       	lsr	r26
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	81 1d       	adc	r24, r1
    1b74:	81 1d       	adc	r24, r1
    1b76:	08 95       	ret

00001b78 <__fp_inf>:
    1b78:	97 f9       	bld	r25, 7
    1b7a:	9f 67       	ori	r25, 0x7F	; 127
    1b7c:	80 e8       	ldi	r24, 0x80	; 128
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	08 95       	ret

00001b84 <__fp_nan>:
    1b84:	9f ef       	ldi	r25, 0xFF	; 255
    1b86:	80 ec       	ldi	r24, 0xC0	; 192
    1b88:	08 95       	ret

00001b8a <__fp_pscA>:
    1b8a:	00 24       	eor	r0, r0
    1b8c:	0a 94       	dec	r0
    1b8e:	16 16       	cp	r1, r22
    1b90:	17 06       	cpc	r1, r23
    1b92:	18 06       	cpc	r1, r24
    1b94:	09 06       	cpc	r0, r25
    1b96:	08 95       	ret

00001b98 <__fp_pscB>:
    1b98:	00 24       	eor	r0, r0
    1b9a:	0a 94       	dec	r0
    1b9c:	12 16       	cp	r1, r18
    1b9e:	13 06       	cpc	r1, r19
    1ba0:	14 06       	cpc	r1, r20
    1ba2:	05 06       	cpc	r0, r21
    1ba4:	08 95       	ret

00001ba6 <__fp_round>:
    1ba6:	09 2e       	mov	r0, r25
    1ba8:	03 94       	inc	r0
    1baa:	00 0c       	add	r0, r0
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <__fp_round+0xc>
    1bae:	88 23       	and	r24, r24
    1bb0:	52 f0       	brmi	.+20     	; 0x1bc6 <__fp_round+0x20>
    1bb2:	bb 0f       	add	r27, r27
    1bb4:	40 f4       	brcc	.+16     	; 0x1bc6 <__fp_round+0x20>
    1bb6:	bf 2b       	or	r27, r31
    1bb8:	11 f4       	brne	.+4      	; 0x1bbe <__fp_round+0x18>
    1bba:	60 ff       	sbrs	r22, 0
    1bbc:	04 c0       	rjmp	.+8      	; 0x1bc6 <__fp_round+0x20>
    1bbe:	6f 5f       	subi	r22, 0xFF	; 255
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	08 95       	ret

00001bc8 <__fp_split3>:
    1bc8:	57 fd       	sbrc	r21, 7
    1bca:	90 58       	subi	r25, 0x80	; 128
    1bcc:	44 0f       	add	r20, r20
    1bce:	55 1f       	adc	r21, r21
    1bd0:	59 f0       	breq	.+22     	; 0x1be8 <__fp_splitA+0x10>
    1bd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd4:	71 f0       	breq	.+28     	; 0x1bf2 <__fp_splitA+0x1a>
    1bd6:	47 95       	ror	r20

00001bd8 <__fp_splitA>:
    1bd8:	88 0f       	add	r24, r24
    1bda:	97 fb       	bst	r25, 7
    1bdc:	99 1f       	adc	r25, r25
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <__fp_splitA+0x20>
    1be0:	9f 3f       	cpi	r25, 0xFF	; 255
    1be2:	79 f0       	breq	.+30     	; 0x1c02 <__fp_splitA+0x2a>
    1be4:	87 95       	ror	r24
    1be6:	08 95       	ret
    1be8:	12 16       	cp	r1, r18
    1bea:	13 06       	cpc	r1, r19
    1bec:	14 06       	cpc	r1, r20
    1bee:	55 1f       	adc	r21, r21
    1bf0:	f2 cf       	rjmp	.-28     	; 0x1bd6 <__fp_split3+0xe>
    1bf2:	46 95       	lsr	r20
    1bf4:	f1 df       	rcall	.-30     	; 0x1bd8 <__fp_splitA>
    1bf6:	08 c0       	rjmp	.+16     	; 0x1c08 <__fp_splitA+0x30>
    1bf8:	16 16       	cp	r1, r22
    1bfa:	17 06       	cpc	r1, r23
    1bfc:	18 06       	cpc	r1, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	f1 cf       	rjmp	.-30     	; 0x1be4 <__fp_splitA+0xc>
    1c02:	86 95       	lsr	r24
    1c04:	71 05       	cpc	r23, r1
    1c06:	61 05       	cpc	r22, r1
    1c08:	08 94       	sec
    1c0a:	08 95       	ret

00001c0c <__fp_zero>:
    1c0c:	e8 94       	clt

00001c0e <__fp_szero>:
    1c0e:	bb 27       	eor	r27, r27
    1c10:	66 27       	eor	r22, r22
    1c12:	77 27       	eor	r23, r23
    1c14:	cb 01       	movw	r24, r22
    1c16:	97 f9       	bld	r25, 7
    1c18:	08 95       	ret

00001c1a <__mulsf3>:
    1c1a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__mulsf3x>
    1c1e:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__fp_round>
    1c22:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fp_pscA>
    1c26:	38 f0       	brcs	.+14     	; 0x1c36 <__mulsf3+0x1c>
    1c28:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__fp_pscB>
    1c2c:	20 f0       	brcs	.+8      	; 0x1c36 <__mulsf3+0x1c>
    1c2e:	95 23       	and	r25, r21
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <__mulsf3+0x1c>
    1c32:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_inf>
    1c36:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__fp_nan>
    1c3a:	11 24       	eor	r1, r1
    1c3c:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_szero>

00001c40 <__mulsf3x>:
    1c40:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_split3>
    1c44:	70 f3       	brcs	.-36     	; 0x1c22 <__mulsf3+0x8>

00001c46 <__mulsf3_pse>:
    1c46:	95 9f       	mul	r25, r21
    1c48:	c1 f3       	breq	.-16     	; 0x1c3a <__mulsf3+0x20>
    1c4a:	95 0f       	add	r25, r21
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	55 1f       	adc	r21, r21
    1c50:	62 9f       	mul	r22, r18
    1c52:	f0 01       	movw	r30, r0
    1c54:	72 9f       	mul	r23, r18
    1c56:	bb 27       	eor	r27, r27
    1c58:	f0 0d       	add	r31, r0
    1c5a:	b1 1d       	adc	r27, r1
    1c5c:	63 9f       	mul	r22, r19
    1c5e:	aa 27       	eor	r26, r26
    1c60:	f0 0d       	add	r31, r0
    1c62:	b1 1d       	adc	r27, r1
    1c64:	aa 1f       	adc	r26, r26
    1c66:	64 9f       	mul	r22, r20
    1c68:	66 27       	eor	r22, r22
    1c6a:	b0 0d       	add	r27, r0
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	66 1f       	adc	r22, r22
    1c70:	82 9f       	mul	r24, r18
    1c72:	22 27       	eor	r18, r18
    1c74:	b0 0d       	add	r27, r0
    1c76:	a1 1d       	adc	r26, r1
    1c78:	62 1f       	adc	r22, r18
    1c7a:	73 9f       	mul	r23, r19
    1c7c:	b0 0d       	add	r27, r0
    1c7e:	a1 1d       	adc	r26, r1
    1c80:	62 1f       	adc	r22, r18
    1c82:	83 9f       	mul	r24, r19
    1c84:	a0 0d       	add	r26, r0
    1c86:	61 1d       	adc	r22, r1
    1c88:	22 1f       	adc	r18, r18
    1c8a:	74 9f       	mul	r23, r20
    1c8c:	33 27       	eor	r19, r19
    1c8e:	a0 0d       	add	r26, r0
    1c90:	61 1d       	adc	r22, r1
    1c92:	23 1f       	adc	r18, r19
    1c94:	84 9f       	mul	r24, r20
    1c96:	60 0d       	add	r22, r0
    1c98:	21 1d       	adc	r18, r1
    1c9a:	82 2f       	mov	r24, r18
    1c9c:	76 2f       	mov	r23, r22
    1c9e:	6a 2f       	mov	r22, r26
    1ca0:	11 24       	eor	r1, r1
    1ca2:	9f 57       	subi	r25, 0x7F	; 127
    1ca4:	50 40       	sbci	r21, 0x00	; 0
    1ca6:	9a f0       	brmi	.+38     	; 0x1cce <__mulsf3_pse+0x88>
    1ca8:	f1 f0       	breq	.+60     	; 0x1ce6 <__mulsf3_pse+0xa0>
    1caa:	88 23       	and	r24, r24
    1cac:	4a f0       	brmi	.+18     	; 0x1cc0 <__mulsf3_pse+0x7a>
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	66 1f       	adc	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	91 50       	subi	r25, 0x01	; 1
    1cbc:	50 40       	sbci	r21, 0x00	; 0
    1cbe:	a9 f7       	brne	.-22     	; 0x1caa <__mulsf3_pse+0x64>
    1cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	80 f0       	brcs	.+32     	; 0x1ce6 <__mulsf3_pse+0xa0>
    1cc6:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_inf>
    1cca:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_szero>
    1cce:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd0:	e4 f3       	brlt	.-8      	; 0x1cca <__mulsf3_pse+0x84>
    1cd2:	98 3e       	cpi	r25, 0xE8	; 232
    1cd4:	d4 f3       	brlt	.-12     	; 0x1cca <__mulsf3_pse+0x84>
    1cd6:	86 95       	lsr	r24
    1cd8:	77 95       	ror	r23
    1cda:	67 95       	ror	r22
    1cdc:	b7 95       	ror	r27
    1cde:	f7 95       	ror	r31
    1ce0:	e7 95       	ror	r30
    1ce2:	9f 5f       	subi	r25, 0xFF	; 255
    1ce4:	c1 f7       	brne	.-16     	; 0x1cd6 <__mulsf3_pse+0x90>
    1ce6:	fe 2b       	or	r31, r30
    1ce8:	88 0f       	add	r24, r24
    1cea:	91 1d       	adc	r25, r1
    1cec:	96 95       	lsr	r25
    1cee:	87 95       	ror	r24
    1cf0:	97 f9       	bld	r25, 7
    1cf2:	08 95       	ret

00001cf4 <__tablejump2__>:
    1cf4:	ee 0f       	add	r30, r30
    1cf6:	ff 1f       	adc	r31, r31
    1cf8:	05 90       	lpm	r0, Z+
    1cfa:	f4 91       	lpm	r31, Z
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	09 94       	ijmp

00001d00 <strcat>:
    1d00:	fb 01       	movw	r30, r22
    1d02:	dc 01       	movw	r26, r24
    1d04:	0d 90       	ld	r0, X+
    1d06:	00 20       	and	r0, r0
    1d08:	e9 f7       	brne	.-6      	; 0x1d04 <strcat+0x4>
    1d0a:	11 97       	sbiw	r26, 0x01	; 1
    1d0c:	01 90       	ld	r0, Z+
    1d0e:	0d 92       	st	X+, r0
    1d10:	00 20       	and	r0, r0
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <strcat+0xc>
    1d14:	08 95       	ret

00001d16 <strcpy>:
    1d16:	fb 01       	movw	r30, r22
    1d18:	dc 01       	movw	r26, r24
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	00 20       	and	r0, r0
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <strcpy+0x4>
    1d22:	08 95       	ret

00001d24 <sprintf>:
    1d24:	ae e0       	ldi	r26, 0x0E	; 14
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e8 e9       	ldi	r30, 0x98	; 152
    1d2a:	fe e0       	ldi	r31, 0x0E	; 14
    1d2c:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x1c>
    1d30:	0d 89       	ldd	r16, Y+21	; 0x15
    1d32:	1e 89       	ldd	r17, Y+22	; 0x16
    1d34:	86 e0       	ldi	r24, 0x06	; 6
    1d36:	8c 83       	std	Y+4, r24	; 0x04
    1d38:	09 83       	std	Y+1, r16	; 0x01
    1d3a:	1a 83       	std	Y+2, r17	; 0x02
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	9f e7       	ldi	r25, 0x7F	; 127
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	ae 01       	movw	r20, r28
    1d46:	47 5e       	subi	r20, 0xE7	; 231
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	6f 89       	ldd	r22, Y+23	; 0x17
    1d4c:	78 8d       	ldd	r23, Y+24	; 0x18
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <vfprintf>
    1d56:	ef 81       	ldd	r30, Y+7	; 0x07
    1d58:	f8 85       	ldd	r31, Y+8	; 0x08
    1d5a:	e0 0f       	add	r30, r16
    1d5c:	f1 1f       	adc	r31, r17
    1d5e:	10 82       	st	Z, r1
    1d60:	2e 96       	adiw	r28, 0x0e	; 14
    1d62:	e4 e0       	ldi	r30, 0x04	; 4
    1d64:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__epilogue_restores__+0x1c>

00001d68 <vfprintf>:
    1d68:	ab e0       	ldi	r26, 0x0B	; 11
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ea eb       	ldi	r30, 0xBA	; 186
    1d6e:	fe e0       	ldi	r31, 0x0E	; 14
    1d70:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__>
    1d74:	6c 01       	movw	r12, r24
    1d76:	7b 01       	movw	r14, r22
    1d78:	8a 01       	movw	r16, r20
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	16 82       	std	Z+6, r1	; 0x06
    1d7e:	17 82       	std	Z+7, r1	; 0x07
    1d80:	83 81       	ldd	r24, Z+3	; 0x03
    1d82:	81 ff       	sbrs	r24, 1
    1d84:	cc c1       	rjmp	.+920    	; 0x211e <vfprintf+0x3b6>
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	3c 01       	movw	r6, r24
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	f7 01       	movw	r30, r14
    1d92:	93 fd       	sbrc	r25, 3
    1d94:	85 91       	lpm	r24, Z+
    1d96:	93 ff       	sbrs	r25, 3
    1d98:	81 91       	ld	r24, Z+
    1d9a:	7f 01       	movw	r14, r30
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <vfprintf+0x3a>
    1da0:	ba c1       	rjmp	.+884    	; 0x2116 <vfprintf+0x3ae>
    1da2:	85 32       	cpi	r24, 0x25	; 37
    1da4:	39 f4       	brne	.+14     	; 0x1db4 <vfprintf+0x4c>
    1da6:	93 fd       	sbrc	r25, 3
    1da8:	85 91       	lpm	r24, Z+
    1daa:	93 ff       	sbrs	r25, 3
    1dac:	81 91       	ld	r24, Z+
    1dae:	7f 01       	movw	r14, r30
    1db0:	85 32       	cpi	r24, 0x25	; 37
    1db2:	29 f4       	brne	.+10     	; 0x1dbe <vfprintf+0x56>
    1db4:	b6 01       	movw	r22, r12
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    1dbc:	e7 cf       	rjmp	.-50     	; 0x1d8c <vfprintf+0x24>
    1dbe:	91 2c       	mov	r9, r1
    1dc0:	21 2c       	mov	r2, r1
    1dc2:	31 2c       	mov	r3, r1
    1dc4:	ff e1       	ldi	r31, 0x1F	; 31
    1dc6:	f3 15       	cp	r31, r3
    1dc8:	d8 f0       	brcs	.+54     	; 0x1e00 <vfprintf+0x98>
    1dca:	8b 32       	cpi	r24, 0x2B	; 43
    1dcc:	79 f0       	breq	.+30     	; 0x1dec <vfprintf+0x84>
    1dce:	38 f4       	brcc	.+14     	; 0x1dde <vfprintf+0x76>
    1dd0:	80 32       	cpi	r24, 0x20	; 32
    1dd2:	79 f0       	breq	.+30     	; 0x1df2 <vfprintf+0x8a>
    1dd4:	83 32       	cpi	r24, 0x23	; 35
    1dd6:	a1 f4       	brne	.+40     	; 0x1e00 <vfprintf+0x98>
    1dd8:	23 2d       	mov	r18, r3
    1dda:	20 61       	ori	r18, 0x10	; 16
    1ddc:	1d c0       	rjmp	.+58     	; 0x1e18 <vfprintf+0xb0>
    1dde:	8d 32       	cpi	r24, 0x2D	; 45
    1de0:	61 f0       	breq	.+24     	; 0x1dfa <vfprintf+0x92>
    1de2:	80 33       	cpi	r24, 0x30	; 48
    1de4:	69 f4       	brne	.+26     	; 0x1e00 <vfprintf+0x98>
    1de6:	23 2d       	mov	r18, r3
    1de8:	21 60       	ori	r18, 0x01	; 1
    1dea:	16 c0       	rjmp	.+44     	; 0x1e18 <vfprintf+0xb0>
    1dec:	83 2d       	mov	r24, r3
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	38 2e       	mov	r3, r24
    1df2:	e3 2d       	mov	r30, r3
    1df4:	e4 60       	ori	r30, 0x04	; 4
    1df6:	3e 2e       	mov	r3, r30
    1df8:	2a c0       	rjmp	.+84     	; 0x1e4e <vfprintf+0xe6>
    1dfa:	f3 2d       	mov	r31, r3
    1dfc:	f8 60       	ori	r31, 0x08	; 8
    1dfe:	1d c0       	rjmp	.+58     	; 0x1e3a <vfprintf+0xd2>
    1e00:	37 fc       	sbrc	r3, 7
    1e02:	2d c0       	rjmp	.+90     	; 0x1e5e <vfprintf+0xf6>
    1e04:	20 ed       	ldi	r18, 0xD0	; 208
    1e06:	28 0f       	add	r18, r24
    1e08:	2a 30       	cpi	r18, 0x0A	; 10
    1e0a:	40 f0       	brcs	.+16     	; 0x1e1c <vfprintf+0xb4>
    1e0c:	8e 32       	cpi	r24, 0x2E	; 46
    1e0e:	b9 f4       	brne	.+46     	; 0x1e3e <vfprintf+0xd6>
    1e10:	36 fc       	sbrc	r3, 6
    1e12:	81 c1       	rjmp	.+770    	; 0x2116 <vfprintf+0x3ae>
    1e14:	23 2d       	mov	r18, r3
    1e16:	20 64       	ori	r18, 0x40	; 64
    1e18:	32 2e       	mov	r3, r18
    1e1a:	19 c0       	rjmp	.+50     	; 0x1e4e <vfprintf+0xe6>
    1e1c:	36 fe       	sbrs	r3, 6
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <vfprintf+0xc4>
    1e20:	8a e0       	ldi	r24, 0x0A	; 10
    1e22:	98 9e       	mul	r9, r24
    1e24:	20 0d       	add	r18, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	92 2e       	mov	r9, r18
    1e2a:	11 c0       	rjmp	.+34     	; 0x1e4e <vfprintf+0xe6>
    1e2c:	ea e0       	ldi	r30, 0x0A	; 10
    1e2e:	2e 9e       	mul	r2, r30
    1e30:	20 0d       	add	r18, r0
    1e32:	11 24       	eor	r1, r1
    1e34:	22 2e       	mov	r2, r18
    1e36:	f3 2d       	mov	r31, r3
    1e38:	f0 62       	ori	r31, 0x20	; 32
    1e3a:	3f 2e       	mov	r3, r31
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <vfprintf+0xe6>
    1e3e:	8c 36       	cpi	r24, 0x6C	; 108
    1e40:	21 f4       	brne	.+8      	; 0x1e4a <vfprintf+0xe2>
    1e42:	83 2d       	mov	r24, r3
    1e44:	80 68       	ori	r24, 0x80	; 128
    1e46:	38 2e       	mov	r3, r24
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <vfprintf+0xe6>
    1e4a:	88 36       	cpi	r24, 0x68	; 104
    1e4c:	41 f4       	brne	.+16     	; 0x1e5e <vfprintf+0xf6>
    1e4e:	f7 01       	movw	r30, r14
    1e50:	93 fd       	sbrc	r25, 3
    1e52:	85 91       	lpm	r24, Z+
    1e54:	93 ff       	sbrs	r25, 3
    1e56:	81 91       	ld	r24, Z+
    1e58:	7f 01       	movw	r14, r30
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	b3 cf       	rjmp	.-154    	; 0x1dc4 <vfprintf+0x5c>
    1e5e:	98 2f       	mov	r25, r24
    1e60:	9f 7d       	andi	r25, 0xDF	; 223
    1e62:	95 54       	subi	r25, 0x45	; 69
    1e64:	93 30       	cpi	r25, 0x03	; 3
    1e66:	28 f4       	brcc	.+10     	; 0x1e72 <vfprintf+0x10a>
    1e68:	0c 5f       	subi	r16, 0xFC	; 252
    1e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6c:	9f e3       	ldi	r25, 0x3F	; 63
    1e6e:	99 83       	std	Y+1, r25	; 0x01
    1e70:	0d c0       	rjmp	.+26     	; 0x1e8c <vfprintf+0x124>
    1e72:	83 36       	cpi	r24, 0x63	; 99
    1e74:	31 f0       	breq	.+12     	; 0x1e82 <vfprintf+0x11a>
    1e76:	83 37       	cpi	r24, 0x73	; 115
    1e78:	71 f0       	breq	.+28     	; 0x1e96 <vfprintf+0x12e>
    1e7a:	83 35       	cpi	r24, 0x53	; 83
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <vfprintf+0x118>
    1e7e:	59 c0       	rjmp	.+178    	; 0x1f32 <vfprintf+0x1ca>
    1e80:	21 c0       	rjmp	.+66     	; 0x1ec4 <vfprintf+0x15c>
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 81       	ld	r24, Z
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	0e 5f       	subi	r16, 0xFE	; 254
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	88 24       	eor	r8, r8
    1e8e:	83 94       	inc	r8
    1e90:	91 2c       	mov	r9, r1
    1e92:	53 01       	movw	r10, r6
    1e94:	13 c0       	rjmp	.+38     	; 0x1ebc <vfprintf+0x154>
    1e96:	28 01       	movw	r4, r16
    1e98:	f2 e0       	ldi	r31, 0x02	; 2
    1e9a:	4f 0e       	add	r4, r31
    1e9c:	51 1c       	adc	r5, r1
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	a0 80       	ld	r10, Z
    1ea2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea4:	36 fe       	sbrs	r3, 6
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <vfprintf+0x146>
    1ea8:	69 2d       	mov	r22, r9
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <vfprintf+0x14a>
    1eae:	6f ef       	ldi	r22, 0xFF	; 255
    1eb0:	7f ef       	ldi	r23, 0xFF	; 255
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	0e 94 a0 10 	call	0x2140	; 0x2140 <strnlen>
    1eb8:	4c 01       	movw	r8, r24
    1eba:	82 01       	movw	r16, r4
    1ebc:	f3 2d       	mov	r31, r3
    1ebe:	ff 77       	andi	r31, 0x7F	; 127
    1ec0:	3f 2e       	mov	r3, r31
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <vfprintf+0x188>
    1ec4:	28 01       	movw	r4, r16
    1ec6:	22 e0       	ldi	r18, 0x02	; 2
    1ec8:	42 0e       	add	r4, r18
    1eca:	51 1c       	adc	r5, r1
    1ecc:	f8 01       	movw	r30, r16
    1ece:	a0 80       	ld	r10, Z
    1ed0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ed2:	36 fe       	sbrs	r3, 6
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <vfprintf+0x174>
    1ed6:	69 2d       	mov	r22, r9
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <vfprintf+0x178>
    1edc:	6f ef       	ldi	r22, 0xFF	; 255
    1ede:	7f ef       	ldi	r23, 0xFF	; 255
    1ee0:	c5 01       	movw	r24, r10
    1ee2:	0e 94 95 10 	call	0x212a	; 0x212a <strnlen_P>
    1ee6:	4c 01       	movw	r8, r24
    1ee8:	f3 2d       	mov	r31, r3
    1eea:	f0 68       	ori	r31, 0x80	; 128
    1eec:	3f 2e       	mov	r3, r31
    1eee:	82 01       	movw	r16, r4
    1ef0:	33 fc       	sbrc	r3, 3
    1ef2:	1b c0       	rjmp	.+54     	; 0x1f2a <vfprintf+0x1c2>
    1ef4:	82 2d       	mov	r24, r2
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	88 16       	cp	r8, r24
    1efa:	99 06       	cpc	r9, r25
    1efc:	b0 f4       	brcc	.+44     	; 0x1f2a <vfprintf+0x1c2>
    1efe:	b6 01       	movw	r22, r12
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    1f08:	2a 94       	dec	r2
    1f0a:	f4 cf       	rjmp	.-24     	; 0x1ef4 <vfprintf+0x18c>
    1f0c:	f5 01       	movw	r30, r10
    1f0e:	37 fc       	sbrc	r3, 7
    1f10:	85 91       	lpm	r24, Z+
    1f12:	37 fe       	sbrs	r3, 7
    1f14:	81 91       	ld	r24, Z+
    1f16:	5f 01       	movw	r10, r30
    1f18:	b6 01       	movw	r22, r12
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    1f20:	21 10       	cpse	r2, r1
    1f22:	2a 94       	dec	r2
    1f24:	21 e0       	ldi	r18, 0x01	; 1
    1f26:	82 1a       	sub	r8, r18
    1f28:	91 08       	sbc	r9, r1
    1f2a:	81 14       	cp	r8, r1
    1f2c:	91 04       	cpc	r9, r1
    1f2e:	71 f7       	brne	.-36     	; 0x1f0c <vfprintf+0x1a4>
    1f30:	e8 c0       	rjmp	.+464    	; 0x2102 <vfprintf+0x39a>
    1f32:	84 36       	cpi	r24, 0x64	; 100
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <vfprintf+0x1d2>
    1f36:	89 36       	cpi	r24, 0x69	; 105
    1f38:	41 f5       	brne	.+80     	; 0x1f8a <vfprintf+0x222>
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	37 fe       	sbrs	r3, 7
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <vfprintf+0x1e6>
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	0c 5f       	subi	r16, 0xFC	; 252
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	08 c0       	rjmp	.+16     	; 0x1f5e <vfprintf+0x1f6>
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	07 2e       	mov	r0, r23
    1f54:	00 0c       	add	r0, r0
    1f56:	88 0b       	sbc	r24, r24
    1f58:	99 0b       	sbc	r25, r25
    1f5a:	0e 5f       	subi	r16, 0xFE	; 254
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	f3 2d       	mov	r31, r3
    1f60:	ff 76       	andi	r31, 0x6F	; 111
    1f62:	3f 2e       	mov	r3, r31
    1f64:	97 ff       	sbrs	r25, 7
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <vfprintf+0x212>
    1f68:	90 95       	com	r25
    1f6a:	80 95       	com	r24
    1f6c:	70 95       	com	r23
    1f6e:	61 95       	neg	r22
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	8f 4f       	sbci	r24, 0xFF	; 255
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	f0 68       	ori	r31, 0x80	; 128
    1f78:	3f 2e       	mov	r3, r31
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	a3 01       	movw	r20, r6
    1f80:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__ultoa_invert>
    1f84:	88 2e       	mov	r8, r24
    1f86:	86 18       	sub	r8, r6
    1f88:	45 c0       	rjmp	.+138    	; 0x2014 <vfprintf+0x2ac>
    1f8a:	85 37       	cpi	r24, 0x75	; 117
    1f8c:	31 f4       	brne	.+12     	; 0x1f9a <vfprintf+0x232>
    1f8e:	23 2d       	mov	r18, r3
    1f90:	2f 7e       	andi	r18, 0xEF	; 239
    1f92:	b2 2e       	mov	r11, r18
    1f94:	2a e0       	ldi	r18, 0x0A	; 10
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	25 c0       	rjmp	.+74     	; 0x1fe4 <vfprintf+0x27c>
    1f9a:	93 2d       	mov	r25, r3
    1f9c:	99 7f       	andi	r25, 0xF9	; 249
    1f9e:	b9 2e       	mov	r11, r25
    1fa0:	8f 36       	cpi	r24, 0x6F	; 111
    1fa2:	c1 f0       	breq	.+48     	; 0x1fd4 <vfprintf+0x26c>
    1fa4:	18 f4       	brcc	.+6      	; 0x1fac <vfprintf+0x244>
    1fa6:	88 35       	cpi	r24, 0x58	; 88
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <vfprintf+0x260>
    1faa:	b5 c0       	rjmp	.+362    	; 0x2116 <vfprintf+0x3ae>
    1fac:	80 37       	cpi	r24, 0x70	; 112
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <vfprintf+0x24e>
    1fb0:	88 37       	cpi	r24, 0x78	; 120
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <vfprintf+0x254>
    1fb4:	b0 c0       	rjmp	.+352    	; 0x2116 <vfprintf+0x3ae>
    1fb6:	e9 2f       	mov	r30, r25
    1fb8:	e0 61       	ori	r30, 0x10	; 16
    1fba:	be 2e       	mov	r11, r30
    1fbc:	b4 fe       	sbrs	r11, 4
    1fbe:	0d c0       	rjmp	.+26     	; 0x1fda <vfprintf+0x272>
    1fc0:	fb 2d       	mov	r31, r11
    1fc2:	f4 60       	ori	r31, 0x04	; 4
    1fc4:	bf 2e       	mov	r11, r31
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <vfprintf+0x272>
    1fc8:	34 fe       	sbrs	r3, 4
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <vfprintf+0x278>
    1fcc:	29 2f       	mov	r18, r25
    1fce:	26 60       	ori	r18, 0x06	; 6
    1fd0:	b2 2e       	mov	r11, r18
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <vfprintf+0x278>
    1fd4:	28 e0       	ldi	r18, 0x08	; 8
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <vfprintf+0x27c>
    1fda:	20 e1       	ldi	r18, 0x10	; 16
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x27c>
    1fe0:	20 e1       	ldi	r18, 0x10	; 16
    1fe2:	32 e0       	ldi	r19, 0x02	; 2
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	b7 fe       	sbrs	r11, 7
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <vfprintf+0x290>
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	0c 5f       	subi	r16, 0xFC	; 252
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <vfprintf+0x29c>
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 5f       	subi	r16, 0xFE	; 254
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	a3 01       	movw	r20, r6
    2006:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__ultoa_invert>
    200a:	88 2e       	mov	r8, r24
    200c:	86 18       	sub	r8, r6
    200e:	fb 2d       	mov	r31, r11
    2010:	ff 77       	andi	r31, 0x7F	; 127
    2012:	3f 2e       	mov	r3, r31
    2014:	36 fe       	sbrs	r3, 6
    2016:	0d c0       	rjmp	.+26     	; 0x2032 <vfprintf+0x2ca>
    2018:	23 2d       	mov	r18, r3
    201a:	2e 7f       	andi	r18, 0xFE	; 254
    201c:	a2 2e       	mov	r10, r18
    201e:	89 14       	cp	r8, r9
    2020:	58 f4       	brcc	.+22     	; 0x2038 <vfprintf+0x2d0>
    2022:	34 fe       	sbrs	r3, 4
    2024:	0b c0       	rjmp	.+22     	; 0x203c <vfprintf+0x2d4>
    2026:	32 fc       	sbrc	r3, 2
    2028:	09 c0       	rjmp	.+18     	; 0x203c <vfprintf+0x2d4>
    202a:	83 2d       	mov	r24, r3
    202c:	8e 7e       	andi	r24, 0xEE	; 238
    202e:	a8 2e       	mov	r10, r24
    2030:	05 c0       	rjmp	.+10     	; 0x203c <vfprintf+0x2d4>
    2032:	b8 2c       	mov	r11, r8
    2034:	a3 2c       	mov	r10, r3
    2036:	03 c0       	rjmp	.+6      	; 0x203e <vfprintf+0x2d6>
    2038:	b8 2c       	mov	r11, r8
    203a:	01 c0       	rjmp	.+2      	; 0x203e <vfprintf+0x2d6>
    203c:	b9 2c       	mov	r11, r9
    203e:	a4 fe       	sbrs	r10, 4
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <vfprintf+0x2f8>
    2042:	fe 01       	movw	r30, r28
    2044:	e8 0d       	add	r30, r8
    2046:	f1 1d       	adc	r31, r1
    2048:	80 81       	ld	r24, Z
    204a:	80 33       	cpi	r24, 0x30	; 48
    204c:	21 f4       	brne	.+8      	; 0x2056 <vfprintf+0x2ee>
    204e:	9a 2d       	mov	r25, r10
    2050:	99 7e       	andi	r25, 0xE9	; 233
    2052:	a9 2e       	mov	r10, r25
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <vfprintf+0x300>
    2056:	a2 fe       	sbrs	r10, 2
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x2fe>
    205a:	b3 94       	inc	r11
    205c:	b3 94       	inc	r11
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <vfprintf+0x300>
    2060:	8a 2d       	mov	r24, r10
    2062:	86 78       	andi	r24, 0x86	; 134
    2064:	09 f0       	breq	.+2      	; 0x2068 <vfprintf+0x300>
    2066:	b3 94       	inc	r11
    2068:	a3 fc       	sbrc	r10, 3
    206a:	11 c0       	rjmp	.+34     	; 0x208e <vfprintf+0x326>
    206c:	a0 fe       	sbrs	r10, 0
    206e:	06 c0       	rjmp	.+12     	; 0x207c <vfprintf+0x314>
    2070:	b2 14       	cp	r11, r2
    2072:	88 f4       	brcc	.+34     	; 0x2096 <vfprintf+0x32e>
    2074:	28 0c       	add	r2, r8
    2076:	92 2c       	mov	r9, r2
    2078:	9b 18       	sub	r9, r11
    207a:	0e c0       	rjmp	.+28     	; 0x2098 <vfprintf+0x330>
    207c:	b2 14       	cp	r11, r2
    207e:	60 f4       	brcc	.+24     	; 0x2098 <vfprintf+0x330>
    2080:	b6 01       	movw	r22, r12
    2082:	80 e2       	ldi	r24, 0x20	; 32
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    208a:	b3 94       	inc	r11
    208c:	f7 cf       	rjmp	.-18     	; 0x207c <vfprintf+0x314>
    208e:	b2 14       	cp	r11, r2
    2090:	18 f4       	brcc	.+6      	; 0x2098 <vfprintf+0x330>
    2092:	2b 18       	sub	r2, r11
    2094:	02 c0       	rjmp	.+4      	; 0x209a <vfprintf+0x332>
    2096:	98 2c       	mov	r9, r8
    2098:	21 2c       	mov	r2, r1
    209a:	a4 fe       	sbrs	r10, 4
    209c:	10 c0       	rjmp	.+32     	; 0x20be <vfprintf+0x356>
    209e:	b6 01       	movw	r22, r12
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20a8:	a2 fe       	sbrs	r10, 2
    20aa:	17 c0       	rjmp	.+46     	; 0x20da <vfprintf+0x372>
    20ac:	a1 fc       	sbrc	r10, 1
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <vfprintf+0x34e>
    20b0:	88 e7       	ldi	r24, 0x78	; 120
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x352>
    20b6:	88 e5       	ldi	r24, 0x58	; 88
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	b6 01       	movw	r22, r12
    20bc:	0c c0       	rjmp	.+24     	; 0x20d6 <vfprintf+0x36e>
    20be:	8a 2d       	mov	r24, r10
    20c0:	86 78       	andi	r24, 0x86	; 134
    20c2:	59 f0       	breq	.+22     	; 0x20da <vfprintf+0x372>
    20c4:	a1 fe       	sbrs	r10, 1
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <vfprintf+0x364>
    20c8:	8b e2       	ldi	r24, 0x2B	; 43
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <vfprintf+0x366>
    20cc:	80 e2       	ldi	r24, 0x20	; 32
    20ce:	a7 fc       	sbrc	r10, 7
    20d0:	8d e2       	ldi	r24, 0x2D	; 45
    20d2:	b6 01       	movw	r22, r12
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20da:	89 14       	cp	r8, r9
    20dc:	38 f4       	brcc	.+14     	; 0x20ec <vfprintf+0x384>
    20de:	b6 01       	movw	r22, r12
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20e8:	9a 94       	dec	r9
    20ea:	f7 cf       	rjmp	.-18     	; 0x20da <vfprintf+0x372>
    20ec:	8a 94       	dec	r8
    20ee:	f3 01       	movw	r30, r6
    20f0:	e8 0d       	add	r30, r8
    20f2:	f1 1d       	adc	r31, r1
    20f4:	80 81       	ld	r24, Z
    20f6:	b6 01       	movw	r22, r12
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    20fe:	81 10       	cpse	r8, r1
    2100:	f5 cf       	rjmp	.-22     	; 0x20ec <vfprintf+0x384>
    2102:	22 20       	and	r2, r2
    2104:	09 f4       	brne	.+2      	; 0x2108 <vfprintf+0x3a0>
    2106:	42 ce       	rjmp	.-892    	; 0x1d8c <vfprintf+0x24>
    2108:	b6 01       	movw	r22, r12
    210a:	80 e2       	ldi	r24, 0x20	; 32
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 ab 10 	call	0x2156	; 0x2156 <fputc>
    2112:	2a 94       	dec	r2
    2114:	f6 cf       	rjmp	.-20     	; 0x2102 <vfprintf+0x39a>
    2116:	f6 01       	movw	r30, r12
    2118:	86 81       	ldd	r24, Z+6	; 0x06
    211a:	97 81       	ldd	r25, Z+7	; 0x07
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <vfprintf+0x3ba>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	2b 96       	adiw	r28, 0x0b	; 11
    2124:	e2 e1       	ldi	r30, 0x12	; 18
    2126:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__>

0000212a <strnlen_P>:
    212a:	fc 01       	movw	r30, r24
    212c:	05 90       	lpm	r0, Z+
    212e:	61 50       	subi	r22, 0x01	; 1
    2130:	70 40       	sbci	r23, 0x00	; 0
    2132:	01 10       	cpse	r0, r1
    2134:	d8 f7       	brcc	.-10     	; 0x212c <strnlen_P+0x2>
    2136:	80 95       	com	r24
    2138:	90 95       	com	r25
    213a:	8e 0f       	add	r24, r30
    213c:	9f 1f       	adc	r25, r31
    213e:	08 95       	ret

00002140 <strnlen>:
    2140:	fc 01       	movw	r30, r24
    2142:	61 50       	subi	r22, 0x01	; 1
    2144:	70 40       	sbci	r23, 0x00	; 0
    2146:	01 90       	ld	r0, Z+
    2148:	01 10       	cpse	r0, r1
    214a:	d8 f7       	brcc	.-10     	; 0x2142 <strnlen+0x2>
    214c:	80 95       	com	r24
    214e:	90 95       	com	r25
    2150:	8e 0f       	add	r24, r30
    2152:	9f 1f       	adc	r25, r31
    2154:	08 95       	ret

00002156 <fputc>:
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	fb 01       	movw	r30, r22
    2160:	23 81       	ldd	r18, Z+3	; 0x03
    2162:	21 fd       	sbrc	r18, 1
    2164:	03 c0       	rjmp	.+6      	; 0x216c <fputc+0x16>
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	9f ef       	ldi	r25, 0xFF	; 255
    216a:	2c c0       	rjmp	.+88     	; 0x21c4 <fputc+0x6e>
    216c:	22 ff       	sbrs	r18, 2
    216e:	16 c0       	rjmp	.+44     	; 0x219c <fputc+0x46>
    2170:	46 81       	ldd	r20, Z+6	; 0x06
    2172:	57 81       	ldd	r21, Z+7	; 0x07
    2174:	24 81       	ldd	r18, Z+4	; 0x04
    2176:	35 81       	ldd	r19, Z+5	; 0x05
    2178:	42 17       	cp	r20, r18
    217a:	53 07       	cpc	r21, r19
    217c:	44 f4       	brge	.+16     	; 0x218e <fputc+0x38>
    217e:	a0 81       	ld	r26, Z
    2180:	b1 81       	ldd	r27, Z+1	; 0x01
    2182:	9d 01       	movw	r18, r26
    2184:	2f 5f       	subi	r18, 0xFF	; 255
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	20 83       	st	Z, r18
    218a:	31 83       	std	Z+1, r19	; 0x01
    218c:	8c 93       	st	X, r24
    218e:	26 81       	ldd	r18, Z+6	; 0x06
    2190:	37 81       	ldd	r19, Z+7	; 0x07
    2192:	2f 5f       	subi	r18, 0xFF	; 255
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	26 83       	std	Z+6, r18	; 0x06
    2198:	37 83       	std	Z+7, r19	; 0x07
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <fputc+0x6e>
    219c:	8b 01       	movw	r16, r22
    219e:	ec 01       	movw	r28, r24
    21a0:	fb 01       	movw	r30, r22
    21a2:	00 84       	ldd	r0, Z+8	; 0x08
    21a4:	f1 85       	ldd	r31, Z+9	; 0x09
    21a6:	e0 2d       	mov	r30, r0
    21a8:	09 95       	icall
    21aa:	89 2b       	or	r24, r25
    21ac:	e1 f6       	brne	.-72     	; 0x2166 <fputc+0x10>
    21ae:	d8 01       	movw	r26, r16
    21b0:	16 96       	adiw	r26, 0x06	; 6
    21b2:	8d 91       	ld	r24, X+
    21b4:	9c 91       	ld	r25, X
    21b6:	17 97       	sbiw	r26, 0x07	; 7
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	16 96       	adiw	r26, 0x06	; 6
    21bc:	8d 93       	st	X+, r24
    21be:	9c 93       	st	X, r25
    21c0:	17 97       	sbiw	r26, 0x07	; 7
    21c2:	ce 01       	movw	r24, r28
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <__ultoa_invert>:
    21ce:	fa 01       	movw	r30, r20
    21d0:	aa 27       	eor	r26, r26
    21d2:	28 30       	cpi	r18, 0x08	; 8
    21d4:	51 f1       	breq	.+84     	; 0x222a <__ultoa_invert+0x5c>
    21d6:	20 31       	cpi	r18, 0x10	; 16
    21d8:	81 f1       	breq	.+96     	; 0x223a <__ultoa_invert+0x6c>
    21da:	e8 94       	clt
    21dc:	6f 93       	push	r22
    21de:	6e 7f       	andi	r22, 0xFE	; 254
    21e0:	6e 5f       	subi	r22, 0xFE	; 254
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	af 4f       	sbci	r26, 0xFF	; 255
    21ea:	b1 e0       	ldi	r27, 0x01	; 1
    21ec:	3e d0       	rcall	.+124    	; 0x226a <__ultoa_invert+0x9c>
    21ee:	b4 e0       	ldi	r27, 0x04	; 4
    21f0:	3c d0       	rcall	.+120    	; 0x226a <__ultoa_invert+0x9c>
    21f2:	67 0f       	add	r22, r23
    21f4:	78 1f       	adc	r23, r24
    21f6:	89 1f       	adc	r24, r25
    21f8:	9a 1f       	adc	r25, r26
    21fa:	a1 1d       	adc	r26, r1
    21fc:	68 0f       	add	r22, r24
    21fe:	79 1f       	adc	r23, r25
    2200:	8a 1f       	adc	r24, r26
    2202:	91 1d       	adc	r25, r1
    2204:	a1 1d       	adc	r26, r1
    2206:	6a 0f       	add	r22, r26
    2208:	71 1d       	adc	r23, r1
    220a:	81 1d       	adc	r24, r1
    220c:	91 1d       	adc	r25, r1
    220e:	a1 1d       	adc	r26, r1
    2210:	20 d0       	rcall	.+64     	; 0x2252 <__ultoa_invert+0x84>
    2212:	09 f4       	brne	.+2      	; 0x2216 <__ultoa_invert+0x48>
    2214:	68 94       	set
    2216:	3f 91       	pop	r19
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	26 9f       	mul	r18, r22
    221c:	11 24       	eor	r1, r1
    221e:	30 19       	sub	r19, r0
    2220:	30 5d       	subi	r19, 0xD0	; 208
    2222:	31 93       	st	Z+, r19
    2224:	de f6       	brtc	.-74     	; 0x21dc <__ultoa_invert+0xe>
    2226:	cf 01       	movw	r24, r30
    2228:	08 95       	ret
    222a:	46 2f       	mov	r20, r22
    222c:	47 70       	andi	r20, 0x07	; 7
    222e:	40 5d       	subi	r20, 0xD0	; 208
    2230:	41 93       	st	Z+, r20
    2232:	b3 e0       	ldi	r27, 0x03	; 3
    2234:	0f d0       	rcall	.+30     	; 0x2254 <__ultoa_invert+0x86>
    2236:	c9 f7       	brne	.-14     	; 0x222a <__ultoa_invert+0x5c>
    2238:	f6 cf       	rjmp	.-20     	; 0x2226 <__ultoa_invert+0x58>
    223a:	46 2f       	mov	r20, r22
    223c:	4f 70       	andi	r20, 0x0F	; 15
    223e:	40 5d       	subi	r20, 0xD0	; 208
    2240:	4a 33       	cpi	r20, 0x3A	; 58
    2242:	18 f0       	brcs	.+6      	; 0x224a <__ultoa_invert+0x7c>
    2244:	49 5d       	subi	r20, 0xD9	; 217
    2246:	31 fd       	sbrc	r19, 1
    2248:	40 52       	subi	r20, 0x20	; 32
    224a:	41 93       	st	Z+, r20
    224c:	02 d0       	rcall	.+4      	; 0x2252 <__ultoa_invert+0x84>
    224e:	a9 f7       	brne	.-22     	; 0x223a <__ultoa_invert+0x6c>
    2250:	ea cf       	rjmp	.-44     	; 0x2226 <__ultoa_invert+0x58>
    2252:	b4 e0       	ldi	r27, 0x04	; 4
    2254:	a6 95       	lsr	r26
    2256:	97 95       	ror	r25
    2258:	87 95       	ror	r24
    225a:	77 95       	ror	r23
    225c:	67 95       	ror	r22
    225e:	ba 95       	dec	r27
    2260:	c9 f7       	brne	.-14     	; 0x2254 <__ultoa_invert+0x86>
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	61 05       	cpc	r22, r1
    2266:	71 05       	cpc	r23, r1
    2268:	08 95       	ret
    226a:	9b 01       	movw	r18, r22
    226c:	ac 01       	movw	r20, r24
    226e:	0a 2e       	mov	r0, r26
    2270:	06 94       	lsr	r0
    2272:	57 95       	ror	r21
    2274:	47 95       	ror	r20
    2276:	37 95       	ror	r19
    2278:	27 95       	ror	r18
    227a:	ba 95       	dec	r27
    227c:	c9 f7       	brne	.-14     	; 0x2270 <__ultoa_invert+0xa2>
    227e:	62 0f       	add	r22, r18
    2280:	73 1f       	adc	r23, r19
    2282:	84 1f       	adc	r24, r20
    2284:	95 1f       	adc	r25, r21
    2286:	a0 1d       	adc	r26, r0
    2288:	08 95       	ret

0000228a <eeprom_read_block>:
    228a:	60 50       	subi	r22, 0x00	; 0
    228c:	7c 4e       	sbci	r23, 0xEC	; 236
    228e:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <memcpy>

00002292 <eeprom_read_byte>:
    2292:	03 d0       	rcall	.+6      	; 0x229a <eeprom_mapen>
    2294:	80 81       	ld	r24, Z
    2296:	99 27       	eor	r25, r25
    2298:	08 95       	ret

0000229a <eeprom_mapen>:
    229a:	fc 01       	movw	r30, r24
    229c:	e0 50       	subi	r30, 0x00	; 0
    229e:	fc 4e       	sbci	r31, 0xEC	; 236
    22a0:	08 95       	ret

000022a2 <eeprom_update_block>:
    22a2:	dc 01       	movw	r26, r24
    22a4:	a4 0f       	add	r26, r20
    22a6:	b5 1f       	adc	r27, r21
    22a8:	41 50       	subi	r20, 0x01	; 1
    22aa:	50 40       	sbci	r21, 0x00	; 0
    22ac:	48 f0       	brcs	.+18     	; 0x22c0 <eeprom_update_block+0x1e>
    22ae:	cb 01       	movw	r24, r22
    22b0:	84 0f       	add	r24, r20
    22b2:	95 1f       	adc	r25, r21
    22b4:	2e 91       	ld	r18, -X
    22b6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <eeprom_update_r18>
    22ba:	41 50       	subi	r20, 0x01	; 1
    22bc:	50 40       	sbci	r21, 0x00	; 0
    22be:	d0 f7       	brcc	.-12     	; 0x22b4 <eeprom_update_block+0x12>
    22c0:	08 95       	ret

000022c2 <eeprom_update_byte>:
    22c2:	26 2f       	mov	r18, r22

000022c4 <eeprom_update_r18>:
    22c4:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_mapen>
    22c8:	00 80       	ld	r0, Z
    22ca:	02 16       	cp	r0, r18
    22cc:	19 f0       	breq	.+6      	; 0x22d4 <eeprom_update_r18+0x10>
    22ce:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_write_r18>
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	08 95       	ret

000022d8 <eeprom_write_byte>:
    22d8:	26 2f       	mov	r18, r22

000022da <eeprom_write_r18>:
    22da:	af 93       	push	r26
    22dc:	bf 93       	push	r27
    22de:	e0 e0       	ldi	r30, 0x00	; 0
    22e0:	f0 e1       	ldi	r31, 0x10	; 16
    22e2:	32 81       	ldd	r19, Z+2	; 0x02
    22e4:	31 fd       	sbrc	r19, 1
    22e6:	fd cf       	rjmp	.-6      	; 0x22e2 <eeprom_write_r18+0x8>
    22e8:	dc 01       	movw	r26, r24
    22ea:	a0 50       	subi	r26, 0x00	; 0
    22ec:	bc 4e       	sbci	r27, 0xEC	; 236
    22ee:	2c 93       	st	X, r18
    22f0:	2d e9       	ldi	r18, 0x9D	; 157
    22f2:	24 bf       	out	0x34, r18	; 52
    22f4:	23 e0       	ldi	r18, 0x03	; 3
    22f6:	20 83       	st	Z, r18
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	bf 91       	pop	r27
    22fc:	af 91       	pop	r26
    22fe:	08 95       	ret

00002300 <__prologue_saves__>:
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	ca 1b       	sub	r28, r26
    232a:	db 0b       	sbc	r29, r27
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	09 94       	ijmp

00002332 <__epilogue_restores__>:
    2332:	2a 88       	ldd	r2, Y+18	; 0x12
    2334:	39 88       	ldd	r3, Y+17	; 0x11
    2336:	48 88       	ldd	r4, Y+16	; 0x10
    2338:	5f 84       	ldd	r5, Y+15	; 0x0f
    233a:	6e 84       	ldd	r6, Y+14	; 0x0e
    233c:	7d 84       	ldd	r7, Y+13	; 0x0d
    233e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2340:	9b 84       	ldd	r9, Y+11	; 0x0b
    2342:	aa 84       	ldd	r10, Y+10	; 0x0a
    2344:	b9 84       	ldd	r11, Y+9	; 0x09
    2346:	c8 84       	ldd	r12, Y+8	; 0x08
    2348:	df 80       	ldd	r13, Y+7	; 0x07
    234a:	ee 80       	ldd	r14, Y+6	; 0x06
    234c:	fd 80       	ldd	r15, Y+5	; 0x05
    234e:	0c 81       	ldd	r16, Y+4	; 0x04
    2350:	1b 81       	ldd	r17, Y+3	; 0x03
    2352:	aa 81       	ldd	r26, Y+2	; 0x02
    2354:	b9 81       	ldd	r27, Y+1	; 0x01
    2356:	ce 0f       	add	r28, r30
    2358:	d1 1d       	adc	r29, r1
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	ed 01       	movw	r28, r26
    2360:	08 95       	ret

00002362 <memcpy>:
    2362:	fb 01       	movw	r30, r22
    2364:	dc 01       	movw	r26, r24
    2366:	02 c0       	rjmp	.+4      	; 0x236c <memcpy+0xa>
    2368:	01 90       	ld	r0, Z+
    236a:	0d 92       	st	X+, r0
    236c:	41 50       	subi	r20, 0x01	; 1
    236e:	50 40       	sbci	r21, 0x00	; 0
    2370:	d8 f7       	brcc	.-10     	; 0x2368 <memcpy+0x6>
    2372:	08 95       	ret

00002374 <_exit>:
    2374:	f8 94       	cli

00002376 <__stop_program>:
    2376:	ff cf       	rjmp	.-2      	; 0x2376 <__stop_program>
