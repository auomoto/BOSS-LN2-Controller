
LN2 Autofill No Debouncer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000025b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  00006390  00002390  00002424  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000022f  00802800  00802800  000025b4  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00002650  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006f96  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003472  00000000  00000000  000098ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002692  00000000  00000000  0000cd60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000548  00000000  00000000  0000f3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002015  00000000  00000000  0000f93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cad  00000000  00000000  00011951  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  000125fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__vector_17>
      48:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	cc 01       	movw	r24, r24
      a2:	ea 01       	movw	r28, r20
      a4:	c1 02       	muls	r28, r17
      a6:	f7 02       	muls	r31, r23
      a8:	2f 03       	fmul	r18, r23
      aa:	67 03       	mulsu	r22, r23
      ac:	88 03       	fmulsu	r16, r16
      ae:	b7 03       	fmuls	r19, r23

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	2a e2       	ldi	r18, 0x2A	; 42
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	af 32       	cpi	r26, 0x2F	; 47
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <main>
      d0:	0c 94 c6 11 	jmp	0x238c	; 0x238c <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:
	If the thermistor is cold (high resistance) or unplugged, then this
	message is displayed on the screen.
----------------------------------------------------------------------*/
void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 37 08 	call	0x106e	; 0x106e <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	60 e9       	ldi	r22, 0x90	; 144
      e2:	73 e6       	ldi	r23, 0x63	; 99
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	6f e9       	ldi	r22, 0x9F	; 159
      ee:	73 e6       	ldi	r23, 0x63	; 99
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f8:	8d e8       	ldi	r24, 0x8D	; 141
      fa:	90 e2       	ldi	r25, 0x20	; 32
      fc:	01 97       	sbiw	r24, 0x01	; 1
      fe:	f1 f7       	brne	.-4      	; 0xfc <handle_button+0x4>
     100:	00 00       	nop
{

	uint8_t ten_ms_ticks;

	_delay_ms(10);									// Delay for second read
	screen_value = SCRVALVES;
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
	display(screen_value);
     108:	0e 94 bb 01 	call	0x376	; 0x376 <display>
	switch (button_pushed) {
     10c:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	e9 f1       	breq	.+122    	; 0x18e <__EEPROM_REGION_LENGTH__+0x8e>
     114:	18 f4       	brcc	.+6      	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	41 f0       	breq	.+16     	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
     11a:	c1 c0       	rjmp	.+386    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
     11c:	83 30       	cpi	r24, 0x03	; 3
     11e:	09 f4       	brne	.+2      	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
     120:	68 c0       	rjmp	.+208    	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
     122:	84 30       	cpi	r24, 0x04	; 4
     124:	09 f4       	brne	.+2      	; 0x128 <__EEPROM_REGION_LENGTH__+0x28>
     126:	8e c0       	rjmp	.+284    	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
     128:	ba c0       	rjmp	.+372    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
		case BLUEBUTTON:
			if (!BLUEBUTTONCLOSED) {
     12a:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     12e:	80 fd       	sbrc	r24, 0
     130:	b8 c0       	rjmp	.+368    	; 0x2a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				return;
			}
			if (BLUVALVEOPEN) {				// See valves.h
     132:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     136:	88 23       	and	r24, r24
     138:	4c f4       	brge	.+18     	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
				CLOSEVALVE(BLUVALVE);
     13a:	80 e8       	ldi	r24, 0x80	; 128
     13c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
				screen_value = SCRVALVES;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     146:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     14a:	a9 c0       	rjmp	.+338    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			} else if (BLUENABLED && BLUTHERMWARM) {
     14c:	8c e0       	ldi	r24, 0x0C	; 12
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     154:	88 23       	and	r24, r24
     156:	89 f0       	breq	.+34     	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
     158:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     15c:	90 ff       	sbrs	r25, 0
     15e:	0d c0       	rjmp	.+26     	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
				OPENVALVE(BLUVALVE);
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     166:	e7 e0       	ldi	r30, 0x07	; 7
     168:	f8 e2       	ldi	r31, 0x28	; 40
     16a:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     16c:	17 86       	std	Z+15, r1	; 0x0f
				screen_value = SCRVALVES;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     174:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     178:	92 c0       	rjmp	.+292    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			} else if (BLUENABLED && !BLUTHERMWARM) {
     17a:	88 23       	and	r24, r24
     17c:	09 f4       	brne	.+2      	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
     17e:	8f c0       	rjmp	.+286    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
     180:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     184:	80 fd       	sbrc	r24, 0
     186:	8b c0       	rjmp	.+278    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
				disp_coldtherm();
     188:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     18c:	88 c0       	rjmp	.+272    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			}
			break;

		case REDBUTTON:
			if (!REDBUTTONCLOSED) {
     18e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     192:	81 fd       	sbrc	r24, 1
     194:	86 c0       	rjmp	.+268    	; 0x2a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				return;
			}
			if (REDVALVEOPEN) {				// See valves.h
     196:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     19a:	86 ff       	sbrs	r24, 6
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <__EEPROM_REGION_LENGTH__+0xb0>
				CLOSEVALVE(REDVALVE);
     19e:	80 e4       	ldi	r24, 0x40	; 64
     1a0:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
				screen_value = SCRVALVES;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     1aa:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     1ae:	77 c0       	rjmp	.+238    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			} else if (REDENABLED && REDTHERMWARM) {
     1b0:	8d e0       	ldi	r24, 0x0D	; 13
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     1b8:	88 23       	and	r24, r24
     1ba:	89 f0       	breq	.+34     	; 0x1de <__EEPROM_REGION_LENGTH__+0xde>
     1bc:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1c0:	91 ff       	sbrs	r25, 1
     1c2:	0d c0       	rjmp	.+26     	; 0x1de <__EEPROM_REGION_LENGTH__+0xde>
				OPENVALVE(REDVALVE);
     1c4:	80 e4       	ldi	r24, 0x40	; 64
     1c6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     1ca:	e7 e0       	ldi	r30, 0x07	; 7
     1cc:	f8 e2       	ldi	r31, 0x28	; 40
     1ce:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1d0:	10 8a       	std	Z+16, r1	; 0x10
				screen_value = SCRVALVES;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     1d8:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     1dc:	60 c0       	rjmp	.+192    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			} else if (REDENABLED && !REDTHERMWARM) {
     1de:	88 23       	and	r24, r24
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <__EEPROM_REGION_LENGTH__+0xe4>
     1e2:	5d c0       	rjmp	.+186    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
     1e4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1e8:	81 fd       	sbrc	r24, 1
     1ea:	59 c0       	rjmp	.+178    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
				disp_coldtherm();
     1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1f0:	56 c0       	rjmp	.+172    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			}
			break;

		case BUFFERBUTTON:
			if (!BUFBUTTONCLOSED) {
     1f2:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     1f6:	82 fd       	sbrc	r24, 2
     1f8:	54 c0       	rjmp	.+168    	; 0x2a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				return;
			}
			if (BUFVALVEOPEN) {				// See valves.h
     1fa:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1fe:	85 ff       	sbrs	r24, 5
     200:	09 c0       	rjmp	.+18     	; 0x214 <__EEPROM_REGION_LENGTH__+0x114>
				CLOSEVALVE(BUFVALVE);
     202:	80 e2       	ldi	r24, 0x20	; 32
     204:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
				screen_value = SCRVALVES;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     20e:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     212:	45 c0       	rjmp	.+138    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			} else if (BUFTHERMWARM) {
     214:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     218:	82 ff       	sbrs	r24, 2
     21a:	0d c0       	rjmp	.+26     	; 0x236 <__EEPROM_REGION_LENGTH__+0x136>
				OPENVALVE(BUFVALVE);
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     222:	e7 e0       	ldi	r30, 0x07	; 7
     224:	f8 e2       	ldi	r31, 0x28	; 40
     226:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     228:	11 8a       	std	Z+17, r1	; 0x11
				screen_value = SCRVALVES;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     230:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     234:	34 c0       	rjmp	.+104    	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			} else if (!BUFTHERMWARM) {
     236:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     23a:	82 fd       	sbrc	r24, 2
     23c:	30 c0       	rjmp	.+96     	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
				disp_coldtherm();
     23e:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     242:	2d c0       	rjmp	.+90     	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
			}
			break;

		case SUPPLYBUTTON:
			if (!SUPBUTTONCLOSED) {
     244:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     248:	83 fd       	sbrc	r24, 3
     24a:	2b c0       	rjmp	.+86     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				return;
			}
			if (SUPVALVEOPEN) {						// See buttons.h
     24c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     250:	84 ff       	sbrs	r24, 4
     252:	14 c0       	rjmp	.+40     	; 0x27c <__EEPROM_REGION_LENGTH__+0x17c>
				CLOSEVALVE(SUPVALVE);
     254:	80 e1       	ldi	r24, 0x10	; 16
     256:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
				screen_value = SCRVALVES;
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     260:	0e 94 bb 01 	call	0x376	; 0x376 <display>
				return;
     264:	08 95       	ret
     266:	ed e8       	ldi	r30, 0x8D	; 141
     268:	f0 e2       	ldi	r31, 0x20	; 32
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <__EEPROM_REGION_LENGTH__+0x16a>
     26e:	00 00       	nop
			}
			ten_ms_ticks = 0;
			while (ten_ms_ticks < 200) {			// wait 2 seconds
				_delay_ms(10);
				if (!SUPBUTTONCLOSED) {
     270:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     274:	93 fd       	sbrc	r25, 3
     276:	05 c0       	rjmp	.+10     	; 0x282 <__EEPROM_REGION_LENGTH__+0x182>
					break;
				}
				ten_ms_ticks++;
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	01 c0       	rjmp	.+2      	; 0x27e <__EEPROM_REGION_LENGTH__+0x17e>
     27c:	80 e0       	ldi	r24, 0x00	; 0
				screen_value = SCRVALVES;
				display(SCRVALVES);
				return;
			}
			ten_ms_ticks = 0;
			while (ten_ms_ticks < 200) {			// wait 2 seconds
     27e:	88 3c       	cpi	r24, 0xC8	; 200
     280:	90 f3       	brcs	.-28     	; 0x266 <__EEPROM_REGION_LENGTH__+0x166>
				if (!SUPBUTTONCLOSED) {
					break;
				}
				ten_ms_ticks++;
			}
			if (SUPBUTTONCLOSED) {
     282:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     286:	83 fd       	sbrc	r24, 3
     288:	0a c0       	rjmp	.+20     	; 0x29e <__EEPROM_REGION_LENGTH__+0x19e>
				OPENVALVE(SUPVALVE);
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
     290:	10 92 15 28 	sts	0x2815, r1	; 0x802815 <status+0xe>
				screen_value = SCRVALVES;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
				display(SCRVALVES);
     29a:	0e 94 bb 01 	call	0x376	; 0x376 <display>

		default:
			break;
	}

	button_pushed = FALSE;
     29e:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
     2a2:	08 95       	ret

000002a4 <init_BUTTONS>:
}

void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     2a4:	e0 e2       	ldi	r30, 0x20	; 32
     2a6:	f4 e0       	ldi	r31, 0x04	; 4
     2a8:	8f e0       	ldi	r24, 0x0F	; 15
     2aa:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     2ac:	8b e0       	ldi	r24, 0x0B	; 11
     2ae:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     2b0:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     2b2:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     2b4:	83 8b       	std	Z+19, r24	; 0x13

	// Valve ports set to output
	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
     2b6:	e0 e4       	ldi	r30, 0x40	; 64
     2b8:	f4 e0       	ldi	r31, 0x04	; 4
     2ba:	80 ef       	ldi	r24, 0xF0	; 240
     2bc:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
     2be:	81 83       	std	Z+1, r24	; 0x01
     2c0:	08 95       	ret

000002c2 <__vector_34>:
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/

ISR(PORTB_PORT_vect)
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	8f 93       	push	r24

	if (PORTB.INTFLAGS & PIN0_bm) {			// Blue pushbutton
     2ce:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2d2:	80 ff       	sbrs	r24, 0
     2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <__vector_34+0x20>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     2dc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2e0:	1f c0       	rjmp	.+62     	; 0x320 <__vector_34+0x5e>
	} else if (PORTB.INTFLAGS & PIN1_bm) {	// Red pushbutton
     2e2:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2e6:	81 ff       	sbrs	r24, 1
     2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <__vector_34+0x34>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     2f0:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2f4:	15 c0       	rjmp	.+42     	; 0x320 <__vector_34+0x5e>
	} else if (PORTB.INTFLAGS & PIN2_bm) {	// Buffer pushbutton
     2f6:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2fa:	82 ff       	sbrs	r24, 2
     2fc:	07 c0       	rjmp	.+14     	; 0x30c <__vector_34+0x4a>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     2fe:	84 e0       	ldi	r24, 0x04	; 4
     300:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     30a:	0a c0       	rjmp	.+20     	; 0x320 <__vector_34+0x5e>
	} else if (PORTB.INTFLAGS & PIN3_bm) {	// Supply pushbutton
     30c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     310:	83 ff       	sbrs	r24, 3
     312:	06 c0       	rjmp	.+12     	; 0x320 <__vector_34+0x5e>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     314:	88 e0       	ldi	r24, 0x08	; 8
     316:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}

}
     320:	8f 91       	pop	r24
     322:	0f 90       	pop	r0
     324:	0f be       	out	0x3f, r0	; 63
     326:	0f 90       	pop	r0
     328:	1f 90       	pop	r1
     32a:	18 95       	reti

0000032c <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     32c:	4a e0       	ldi	r20, 0x0A	; 10
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	0e 94 51 11 	call	0x22a2	; 0x22a2 <eeprom_read_block>
     338:	08 95       	ret

0000033a <update_VERSION>:
}

void update_VERSION(void)
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	2b 97       	sbiw	r28, 0x0b	; 11
     344:	cd bf       	out	0x3d, r28	; 61
     346:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     348:	8b e0       	ldi	r24, 0x0B	; 11
     34a:	ef ea       	ldi	r30, 0xAF	; 175
     34c:	f3 e6       	ldi	r31, 0x63	; 99
     34e:	de 01       	movw	r26, r28
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	01 90       	ld	r0, Z+
     354:	0d 92       	st	X+, r0
     356:	8a 95       	dec	r24
     358:	e1 f7       	brne	.-8      	; 0x352 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     35a:	4a e0       	ldi	r20, 0x0A	; 10
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	0e 94 5d 11 	call	0x22ba	; 0x22ba <eeprom_update_block>
}
     36a:	2b 96       	adiw	r28, 0x0b	; 11
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	de bf       	out	0x3e, r29	; 62
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	aa 97       	sbiw	r28, 0x2a	; 42
     380:	cd bf       	out	0x3d, r28	; 61
     382:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	88 30       	cpi	r24, 0x08	; 8
     388:	91 05       	cpc	r25, r1
     38a:	08 f0       	brcs	.+2      	; 0x38e <display+0x18>
     38c:	1f c2       	rjmp	.+1086   	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
     38e:	fc 01       	movw	r30, r24
     390:	e0 5b       	subi	r30, 0xB0	; 176
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     398:	8f e0       	ldi	r24, 0x0F	; 15
     39a:	ea eb       	ldi	r30, 0xBA	; 186
     39c:	f3 e6       	ldi	r31, 0x63	; 99
     39e:	de 01       	movw	r26, r28
     3a0:	11 96       	adiw	r26, 0x01	; 1
     3a2:	01 90       	ld	r0, Z+
     3a4:	0d 92       	st	X+, r0
     3a6:	8a 95       	dec	r24
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <display+0x2c>
			get_VERSION(status.version);
     3aa:	87 e0       	ldi	r24, 0x07	; 7
     3ac:	98 e2       	ldi	r25, 0x28	; 40
     3ae:	0e 94 96 01 	call	0x32c	; 0x32c <get_VERSION>
			strcpy(line2, "   ");
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	90 e2       	ldi	r25, 0x20	; 32
     3b6:	8e 8b       	std	Y+22, r24	; 0x16
     3b8:	9f 8b       	std	Y+23, r25	; 0x17
     3ba:	80 e2       	ldi	r24, 0x20	; 32
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	88 8f       	std	Y+24, r24	; 0x18
     3c0:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     3c2:	67 e0       	ldi	r22, 0x07	; 7
     3c4:	78 e2       	ldi	r23, 0x28	; 40
     3c6:	ce 01       	movw	r24, r28
     3c8:	46 96       	adiw	r24, 0x16	; 22
     3ca:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <strcat>
			screen_value = SCRVERSION;
     3ce:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
     3d2:	10 c2       	rjmp	.+1056   	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     3d4:	80 e1       	ldi	r24, 0x10	; 16
     3d6:	e9 ec       	ldi	r30, 0xC9	; 201
     3d8:	f3 e6       	ldi	r31, 0x63	; 99
     3da:	de 01       	movw	r26, r28
     3dc:	11 96       	adiw	r26, 0x01	; 1
     3de:	01 90       	ld	r0, Z+
     3e0:	0d 92       	st	X+, r0
     3e2:	8a 95       	dec	r24
     3e4:	e1 f7       	brne	.-8      	; 0x3de <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     3e6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3ea:	84 ff       	sbrs	r24, 4
     3ec:	0a c0       	rjmp	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				strcpy(line2, " O  ");
     3ee:	85 e0       	ldi	r24, 0x05	; 5
     3f0:	e9 ed       	ldi	r30, 0xD9	; 217
     3f2:	f3 e6       	ldi	r31, 0x63	; 99
     3f4:	de 01       	movw	r26, r28
     3f6:	56 96       	adiw	r26, 0x16	; 22
     3f8:	01 90       	ld	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	8a 95       	dec	r24
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <display+0x82>
     400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			} else {
				strcpy(line2, " C  ");
     402:	85 e0       	ldi	r24, 0x05	; 5
     404:	ee ed       	ldi	r30, 0xDE	; 222
     406:	f3 e6       	ldi	r31, 0x63	; 99
     408:	de 01       	movw	r26, r28
     40a:	56 96       	adiw	r26, 0x16	; 22
     40c:	01 90       	ld	r0, Z+
     40e:	0d 92       	st	X+, r0
     410:	8a 95       	dec	r24
     412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			}
			if (BUFVALVEOPEN) {					// valves.h
     414:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     418:	85 ff       	sbrs	r24, 5
     41a:	0e c0       	rjmp	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				strcat(line2, " O  ");
     41c:	de 01       	movw	r26, r28
     41e:	56 96       	adiw	r26, 0x16	; 22
     420:	0d 90       	ld	r0, X+
     422:	00 20       	and	r0, r0
     424:	e9 f7       	brne	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	e9 ed       	ldi	r30, 0xD9	; 217
     42c:	f3 e6       	ldi	r31, 0x63	; 99
     42e:	01 90       	ld	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	8a 95       	dec	r24
     434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	1f c0       	rjmp	.+62     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			} else if (status.maxopen_BUF) {
     438:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
     43c:	88 23       	and	r24, r24
     43e:	71 f0       	breq	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				strcat(line2, " T  ");
     440:	de 01       	movw	r26, r28
     442:	56 96       	adiw	r26, 0x16	; 22
     444:	0d 90       	ld	r0, X+
     446:	00 20       	and	r0, r0
     448:	e9 f7       	brne	.-6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     44a:	11 97       	sbiw	r26, 0x01	; 1
     44c:	85 e0       	ldi	r24, 0x05	; 5
     44e:	e3 ee       	ldi	r30, 0xE3	; 227
     450:	f3 e6       	ldi	r31, 0x63	; 99
     452:	01 90       	ld	r0, Z+
     454:	0d 92       	st	X+, r0
     456:	8a 95       	dec	r24
     458:	e1 f7       	brne	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     45a:	0d c0       	rjmp	.+26     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			} else {
				strcat(line2, " C  ");
     45c:	de 01       	movw	r26, r28
     45e:	56 96       	adiw	r26, 0x16	; 22
     460:	0d 90       	ld	r0, X+
     462:	00 20       	and	r0, r0
     464:	e9 f7       	brne	.-6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	ee ed       	ldi	r30, 0xDE	; 222
     46c:	f3 e6       	ldi	r31, 0x63	; 99
     46e:	01 90       	ld	r0, Z+
     470:	0d 92       	st	X+, r0
     472:	8a 95       	dec	r24
     474:	e1 f7       	brne	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			}
			if (!REDENABLED) {					// eeprom.h
     476:	8d e0       	ldi	r24, 0x0D	; 13
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     47e:	81 11       	cpse	r24, r1
     480:	0e c0       	rjmp	.+28     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				strcat(line2, " X  ");
     482:	de 01       	movw	r26, r28
     484:	56 96       	adiw	r26, 0x16	; 22
     486:	0d 90       	ld	r0, X+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48c:	11 97       	sbiw	r26, 0x01	; 1
     48e:	85 e0       	ldi	r24, 0x05	; 5
     490:	e8 ee       	ldi	r30, 0xE8	; 232
     492:	f3 e6       	ldi	r31, 0x63	; 99
     494:	01 90       	ld	r0, Z+
     496:	0d 92       	st	X+, r0
     498:	8a 95       	dec	r24
     49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49c:	31 c0       	rjmp	.+98     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			} else if (REDVALVEOPEN) {			// valves.h
     49e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     4a2:	86 ff       	sbrs	r24, 6
     4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
				strcat(line2, " O  ");
     4a6:	de 01       	movw	r26, r28
     4a8:	56 96       	adiw	r26, 0x16	; 22
     4aa:	0d 90       	ld	r0, X+
     4ac:	00 20       	and	r0, r0
     4ae:	e9 f7       	brne	.-6      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	85 e0       	ldi	r24, 0x05	; 5
     4b4:	e9 ed       	ldi	r30, 0xD9	; 217
     4b6:	f3 e6       	ldi	r31, 0x63	; 99
     4b8:	01 90       	ld	r0, Z+
     4ba:	0d 92       	st	X+, r0
     4bc:	8a 95       	dec	r24
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4c0:	1f c0       	rjmp	.+62     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			} else if (status.maxopen_RED) {
     4c2:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
     4c6:	88 23       	and	r24, r24
     4c8:	71 f0       	breq	.+28     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				strcat(line2, " T  ");
     4ca:	de 01       	movw	r26, r28
     4cc:	56 96       	adiw	r26, 0x16	; 22
     4ce:	0d 90       	ld	r0, X+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d4:	11 97       	sbiw	r26, 0x01	; 1
     4d6:	85 e0       	ldi	r24, 0x05	; 5
     4d8:	e3 ee       	ldi	r30, 0xE3	; 227
     4da:	f3 e6       	ldi	r31, 0x63	; 99
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4e4:	0d c0       	rjmp	.+26     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			} else {
				strcat(line2, " C  ");
     4e6:	de 01       	movw	r26, r28
     4e8:	56 96       	adiw	r26, 0x16	; 22
     4ea:	0d 90       	ld	r0, X+
     4ec:	00 20       	and	r0, r0
     4ee:	e9 f7       	brne	.-6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	85 e0       	ldi	r24, 0x05	; 5
     4f4:	ee ed       	ldi	r30, 0xDE	; 222
     4f6:	f3 e6       	ldi	r31, 0x63	; 99
     4f8:	01 90       	ld	r0, Z+
     4fa:	0d 92       	st	X+, r0
     4fc:	8a 95       	dec	r24
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			}
			if (!BLUENABLED) {
     500:	8c e0       	ldi	r24, 0x0C	; 12
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     508:	81 11       	cpse	r24, r1
     50a:	0c c0       	rjmp	.+24     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
				strcat(line2, " X");
     50c:	fe 01       	movw	r30, r28
     50e:	76 96       	adiw	r30, 0x16	; 22
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	98 e5       	ldi	r25, 0x58	; 88
     51c:	80 83       	st	Z, r24
     51e:	91 83       	std	Z+1, r25	; 0x01
     520:	12 82       	std	Z+2, r1	; 0x02
     522:	2b c0       	rjmp	.+86     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			} else if (BLUVALVEOPEN) {			// valves.h
     524:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     528:	88 23       	and	r24, r24
     52a:	64 f4       	brge	.+24     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
				strcat(line2, " O");
     52c:	fe 01       	movw	r30, r28
     52e:	76 96       	adiw	r30, 0x16	; 22
     530:	01 90       	ld	r0, Z+
     532:	00 20       	and	r0, r0
     534:	e9 f7       	brne	.-6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	80 e2       	ldi	r24, 0x20	; 32
     53a:	9f e4       	ldi	r25, 0x4F	; 79
     53c:	80 83       	st	Z, r24
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	12 82       	std	Z+2, r1	; 0x02
     542:	1b c0       	rjmp	.+54     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			} else if (status.maxopen_BLU) {
     544:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
     548:	88 23       	and	r24, r24
     54a:	61 f0       	breq	.+24     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
				strcat(line2, " T");
     54c:	fe 01       	movw	r30, r28
     54e:	76 96       	adiw	r30, 0x16	; 22
     550:	01 90       	ld	r0, Z+
     552:	00 20       	and	r0, r0
     554:	e9 f7       	brne	.-6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	80 e2       	ldi	r24, 0x20	; 32
     55a:	94 e5       	ldi	r25, 0x54	; 84
     55c:	80 83       	st	Z, r24
     55e:	91 83       	std	Z+1, r25	; 0x01
     560:	12 82       	std	Z+2, r1	; 0x02
     562:	0b c0       	rjmp	.+22     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			} else {
				strcat(line2, " C");
     564:	fe 01       	movw	r30, r28
     566:	76 96       	adiw	r30, 0x16	; 22
     568:	01 90       	ld	r0, Z+
     56a:	00 20       	and	r0, r0
     56c:	e9 f7       	brne	.-6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	80 e2       	ldi	r24, 0x20	; 32
     572:	93 e4       	ldi	r25, 0x43	; 67
     574:	80 83       	st	Z, r24
     576:	91 83       	std	Z+1, r25	; 0x01
     578:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     580:	39 c1       	rjmp	.+626    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     582:	8d e0       	ldi	r24, 0x0D	; 13
     584:	ed ee       	ldi	r30, 0xED	; 237
     586:	f3 e6       	ldi	r31, 0x63	; 99
     588:	de 01       	movw	r26, r28
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			if (status.next_fill < 2) {
     594:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <status+0x15>
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	98 f4       	brcc	.+38     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
				sprintf(line2, "%d minute", status.next_fill);
     59c:	1f 92       	push	r1
     59e:	8f 93       	push	r24
     5a0:	8a ef       	ldi	r24, 0xFA	; 250
     5a2:	93 e6       	ldi	r25, 0x63	; 99
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	ce 01       	movw	r24, r28
     5aa:	46 96       	adiw	r24, 0x16	; 22
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	12 c0       	rjmp	.+36     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     5c2:	1f 92       	push	r1
     5c4:	8f 93       	push	r24
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	94 e6       	ldi	r25, 0x64	; 100
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	ce 01       	movw	r24, r28
     5d0:	46 96       	adiw	r24, 0x16	; 22
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     5ec:	03 c1       	rjmp	.+518    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     5ee:	8e e0       	ldi	r24, 0x0E	; 14
     5f0:	ef e0       	ldi	r30, 0x0F	; 15
     5f2:	f4 e6       	ldi	r31, 0x64	; 100
     5f4:	de 01       	movw	r26, r28
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	01 90       	ld	r0, Z+
     5fa:	0d 92       	st	X+, r0
     5fc:	8a 95       	dec	r24
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			if (FILLINTERVAL == 1) {			// eeprom.h
     600:	8a e0       	ldi	r24, 0x0A	; 10
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	99 f4       	brne	.+38     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
				sprintf(line2, "%d minute", FILLINTERVAL);
     60c:	1f 92       	push	r1
     60e:	8f 93       	push	r24
     610:	8a ef       	ldi	r24, 0xFA	; 250
     612:	93 e6       	ldi	r25, 0x63	; 99
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	ce 01       	movw	r24, r28
     61a:	46 96       	adiw	r24, 0x16	; 22
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	12 c0       	rjmp	.+36     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     632:	1f 92       	push	r1
     634:	8f 93       	push	r24
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	94 e6       	ldi	r25, 0x64	; 100
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	ce 01       	movw	r24, r28
     640:	46 96       	adiw	r24, 0x16	; 22
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     65c:	cb c0       	rjmp	.+406    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     65e:	8e e0       	ldi	r24, 0x0E	; 14
     660:	ed e1       	ldi	r30, 0x1D	; 29
     662:	f4 e6       	ldi	r31, 0x64	; 100
     664:	de 01       	movw	r26, r28
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
			if (MAXOPENTIME < 2) {				// eeprom.h
     670:	8b e0       	ldi	r24, 0x0B	; 11
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	98 f4       	brcc	.+38     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
				sprintf(line2, "%d minute", MAXOPENTIME);
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	8a ef       	ldi	r24, 0xFA	; 250
     682:	93 e6       	ldi	r25, 0x63	; 99
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	ce 01       	movw	r24, r28
     68a:	46 96       	adiw	r24, 0x16	; 22
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     6a2:	1f 92       	push	r1
     6a4:	8f 93       	push	r24
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	94 e6       	ldi	r25, 0x64	; 100
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	ce 01       	movw	r24, r28
     6b0:	46 96       	adiw	r24, 0x16	; 22
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     6cc:	93 c0       	rjmp	.+294    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     6ce:	8d e0       	ldi	r24, 0x0D	; 13
     6d0:	eb e2       	ldi	r30, 0x2B	; 43
     6d2:	f4 e6       	ldi	r31, 0x64	; 100
     6d4:	de 01       	movw	r26, r28
     6d6:	11 96       	adiw	r26, 0x01	; 1
     6d8:	01 90       	ld	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	8a 95       	dec	r24
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
			sprintf(line2, "%d kPa", status.pressure);
     6e0:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <status+0x1a>
     6e4:	1f 92       	push	r1
     6e6:	8f 93       	push	r24
     6e8:	88 e3       	ldi	r24, 0x38	; 56
     6ea:	94 e6       	ldi	r25, 0x64	; 100
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	ce 01       	movw	r24, r28
     6f2:	46 96       	adiw	r24, 0x16	; 22
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
			screen_value = SCRPRESSURE;
     6fc:	85 e0       	ldi	r24, 0x05	; 5
     6fe:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	72 c0       	rjmp	.+228    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     710:	8c e0       	ldi	r24, 0x0C	; 12
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     718:	88 23       	and	r24, r24
     71a:	99 f0       	breq	.+38     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
				strcpy(line1, "BLUE is ENABLED");
     71c:	80 e1       	ldi	r24, 0x10	; 16
     71e:	ef e3       	ldi	r30, 0x3F	; 63
     720:	f4 e6       	ldi	r31, 0x64	; 100
     722:	de 01       	movw	r26, r28
     724:	11 96       	adiw	r26, 0x01	; 1
     726:	01 90       	ld	r0, Z+
     728:	0d 92       	st	X+, r0
     72a:	8a 95       	dec	r24
     72c:	e1 f7       	brne	.-8      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
				strcpy(line2, "Push to disable");
     72e:	80 e1       	ldi	r24, 0x10	; 16
     730:	ef e4       	ldi	r30, 0x4F	; 79
     732:	f4 e6       	ldi	r31, 0x64	; 100
     734:	de 01       	movw	r26, r28
     736:	56 96       	adiw	r26, 0x16	; 22
     738:	01 90       	ld	r0, Z+
     73a:	0d 92       	st	X+, r0
     73c:	8a 95       	dec	r24
     73e:	e1 f7       	brne	.-8      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
     740:	12 c0       	rjmp	.+36     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
			} else {
				strcpy(line1, "Blue is DISABLED");
     742:	81 e1       	ldi	r24, 0x11	; 17
     744:	ef e5       	ldi	r30, 0x5F	; 95
     746:	f4 e6       	ldi	r31, 0x64	; 100
     748:	de 01       	movw	r26, r28
     74a:	11 96       	adiw	r26, 0x01	; 1
     74c:	01 90       	ld	r0, Z+
     74e:	0d 92       	st	X+, r0
     750:	8a 95       	dec	r24
     752:	e1 f7       	brne	.-8      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
				strcpy(line2, "Push to enable");
     754:	8f e0       	ldi	r24, 0x0F	; 15
     756:	e0 e7       	ldi	r30, 0x70	; 112
     758:	f4 e6       	ldi	r31, 0x64	; 100
     75a:	de 01       	movw	r26, r28
     75c:	56 96       	adiw	r26, 0x16	; 22
     75e:	01 90       	ld	r0, Z+
     760:	0d 92       	st	X+, r0
     762:	8a 95       	dec	r24
     764:	e1 f7       	brne	.-8      	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     766:	86 e0       	ldi	r24, 0x06	; 6
     768:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     76c:	43 c0       	rjmp	.+134    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     76e:	8d e0       	ldi	r24, 0x0D	; 13
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     776:	88 23       	and	r24, r24
     778:	99 f0       	breq	.+38     	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
				strcpy(line1, "RED is ENABLED");
     77a:	8f e0       	ldi	r24, 0x0F	; 15
     77c:	ef e7       	ldi	r30, 0x7F	; 127
     77e:	f4 e6       	ldi	r31, 0x64	; 100
     780:	de 01       	movw	r26, r28
     782:	11 96       	adiw	r26, 0x01	; 1
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
				strcpy(line2, "Push to disable");
     78c:	80 e1       	ldi	r24, 0x10	; 16
     78e:	ef e4       	ldi	r30, 0x4F	; 79
     790:	f4 e6       	ldi	r31, 0x64	; 100
     792:	de 01       	movw	r26, r28
     794:	56 96       	adiw	r26, 0x16	; 22
     796:	01 90       	ld	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	8a 95       	dec	r24
     79c:	e1 f7       	brne	.-8      	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
     79e:	12 c0       	rjmp	.+36     	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
			} else {
				strcpy(line1, "RED is DISABLED");
     7a0:	80 e1       	ldi	r24, 0x10	; 16
     7a2:	ee e8       	ldi	r30, 0x8E	; 142
     7a4:	f4 e6       	ldi	r31, 0x64	; 100
     7a6:	de 01       	movw	r26, r28
     7a8:	11 96       	adiw	r26, 0x01	; 1
     7aa:	01 90       	ld	r0, Z+
     7ac:	0d 92       	st	X+, r0
     7ae:	8a 95       	dec	r24
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
				strcpy(line2, "Push to enable");
     7b2:	8f e0       	ldi	r24, 0x0F	; 15
     7b4:	e0 e7       	ldi	r30, 0x70	; 112
     7b6:	f4 e6       	ldi	r31, 0x64	; 100
     7b8:	de 01       	movw	r26, r28
     7ba:	56 96       	adiw	r26, 0x16	; 22
     7bc:	01 90       	ld	r0, Z+
     7be:	0d 92       	st	X+, r0
     7c0:	8a 95       	dec	r24
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     7c4:	87 e0       	ldi	r24, 0x07	; 7
     7c6:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>

		default:
			strcpy(line1, "default");
     7cc:	88 e0       	ldi	r24, 0x08	; 8
     7ce:	ee e9       	ldi	r30, 0x9E	; 158
     7d0:	f4 e6       	ldi	r31, 0x64	; 100
     7d2:	de 01       	movw	r26, r28
     7d4:	11 96       	adiw	r26, 0x01	; 1
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
			strcpy(line2, "overrun");
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	e6 ea       	ldi	r30, 0xA6	; 166
     7e2:	f4 e6       	ldi	r31, 0x64	; 100
     7e4:	de 01       	movw	r26, r28
     7e6:	56 96       	adiw	r26, 0x16	; 22
     7e8:	01 90       	ld	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	8a 95       	dec	r24
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
			screen_value = SCRVERSION;			// encoder.h
     7f0:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	be 01       	movw	r22, r28
     7f8:	6f 5f       	subi	r22, 0xFF	; 255
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
	writestr_OLED(0, line2, 2);
     802:	42 e0       	ldi	r20, 0x02	; 2
     804:	be 01       	movw	r22, r28
     806:	6a 5e       	subi	r22, 0xEA	; 234
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
}
     810:	aa 96       	adiw	r28, 0x2a	; 42
     812:	cd bf       	out	0x3d, r28	; 61
     814:	de bf       	out	0x3e, r29	; 62
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     81c:	8c e0       	ldi	r24, 0x0C	; 12
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	81 11       	cpse	r24, r1
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	8c e0       	ldi	r24, 0x0C	; 12
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_update_byte>
	encoder_sensed = FALSE;
     832:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     83c:	08 95       	ret

0000083e <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     83e:	8d e0       	ldi	r24, 0x0D	; 13
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	81 11       	cpse	r24, r1
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	8d e0       	ldi	r24, 0x0D	; 13
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_update_byte>
	encoder_sensed = FALSE;
     854:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     858:	87 e0       	ldi	r24, 0x07	; 7
     85a:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     85e:	08 95       	ret

00000860 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	65 97       	sbiw	r28, 0x15	; 21
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	de bf       	out	0x3e, r29	; 62

	char strbuf[21];

	PORTC.INTFLAGS = PIN1_bm;					// Clear interrupt flag
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     878:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	encoder_value = FILLINTERVAL;				// eeprom.h
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     884:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	99 f4       	brne	.+38     	; 0x8b2 <change_FILLINT+0x52>
		sprintf(strbuf, "%d minute", encoder_value);
     88c:	1f 92       	push	r1
     88e:	8f 93       	push	r24
     890:	8a ef       	ldi	r24, 0xFA	; 250
     892:	93 e6       	ldi	r25, 0x63	; 99
     894:	9f 93       	push	r25
     896:	8f 93       	push	r24
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	12 c0       	rjmp	.+36     	; 0x8d6 <change_FILLINT+0x76>
	} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     8b2:	1f 92       	push	r1
     8b4:	8f 93       	push	r24
     8b6:	84 e0       	ldi	r24, 0x04	; 4
     8b8:	94 e6       	ldi	r25, 0x64	; 100
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	6e ea       	ldi	r22, 0xAE	; 174
     8da:	74 e6       	ldi	r23, 0x64	; 100
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     8e2:	42 e0       	ldi	r20, 0x02	; 2
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8f0:	58 c0       	rjmp	.+176    	; 0x9a2 <change_FILLINT+0x142>
		if (encoder_sensed == ENCODERA) {
     8f2:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     8f6:	87 30       	cpi	r24, 0x07	; 7
     8f8:	09 f0       	breq	.+2      	; 0x8fc <change_FILLINT+0x9c>
     8fa:	53 c0       	rjmp	.+166    	; 0x9a2 <change_FILLINT+0x142>
			if ((ENCODERACLOSED && !ENCODERBCLOSED) || (!ENCODERACLOSED && ENCODERBCLOSED)) {
     8fc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     900:	82 fd       	sbrc	r24, 2
     902:	04 c0       	rjmp	.+8      	; 0x90c <change_FILLINT+0xac>
     904:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     908:	83 fd       	sbrc	r24, 3
     90a:	08 c0       	rjmp	.+16     	; 0x91c <change_FILLINT+0xbc>
     90c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     910:	82 ff       	sbrs	r24, 2
     912:	0d c0       	rjmp	.+26     	; 0x92e <change_FILLINT+0xce>
     914:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     918:	83 fd       	sbrc	r24, 3
     91a:	09 c0       	rjmp	.+18     	; 0x92e <change_FILLINT+0xce>
				encoder_value++;
     91c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     92c:	08 c0       	rjmp	.+16     	; 0x93e <change_FILLINT+0xde>
			} else {
				encoder_value--;
     92e:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     932:	81 50       	subi	r24, 0x01	; 1
     934:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = -1;
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
			}
			if (encoder_value <= 1) {
     93e:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	20 f4       	brcc	.+8      	; 0x94e <change_FILLINT+0xee>
				encoder_value = 2;
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
     94c:	05 c0       	rjmp	.+10     	; 0x958 <change_FILLINT+0xf8>
			} else if (encoder_value == 255) {
     94e:	8f 3f       	cpi	r24, 0xFF	; 255
     950:	19 f4       	brne	.+6      	; 0x958 <change_FILLINT+0xf8>
				encoder_value = 254;
     952:	8e ef       	ldi	r24, 0xFE	; 254
     954:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     958:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     95c:	1f 92       	push	r1
     95e:	8f 93       	push	r24
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	94 e6       	ldi	r25, 0x64	; 100
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	8e 01       	movw	r16, r28
     96a:	0f 5f       	subi	r16, 0xFF	; 255
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
     96e:	1f 93       	push	r17
     970:	0f 93       	push	r16
     972:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
			writestr_OLED(0, "Push to set intv", 1);
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	6e ea       	ldi	r22, 0xAE	; 174
     97a:	74 e6       	ldi	r23, 0x64	; 100
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     982:	42 e0       	ldi	r20, 0x02	; 2
     984:	b8 01       	movw	r22, r16
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
			PORTC.INTFLAGS = PIN2_bm;			// Clear interrupt flag
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
			encoder_sensed = FALSE;
     992:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     9a2:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     9a6:	85 30       	cpi	r24, 0x05	; 5
     9a8:	09 f0       	breq	.+2      	; 0x9ac <change_FILLINT+0x14c>
     9aa:	a3 cf       	rjmp	.-186    	; 0x8f2 <change_FILLINT+0x92>
			writestr_OLED(0, strbuf, 2);
			PORTC.INTFLAGS = PIN2_bm;			// Clear interrupt flag
			encoder_sensed = FALSE;
		}
	}
	PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     9b2:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     9b6:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     9c2:	8b e0       	ldi	r24, 0x0B	; 11
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     9ca:	18 2f       	mov	r17, r24
     9cc:	8a e0       	ldi	r24, 0x0A	; 10
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     9d4:	18 17       	cp	r17, r24
     9d6:	30 f0       	brcs	.+12     	; 0x9e4 <change_FILLINT+0x184>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     9d8:	6f ef       	ldi	r22, 0xFF	; 255
     9da:	68 0f       	add	r22, r24
     9dc:	8b e0       	ldi	r24, 0x0B	; 11
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_update_byte>
	}

	display(SCRFILLINT);
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	0e 94 bb 01 	call	0x376	; 0x376 <display>

}
     9ea:	65 96       	adiw	r28, 0x15	; 21
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	65 97       	sbiw	r28, 0x15	; 21
     a04:	cd bf       	out	0x3d, r28	; 61
     a06:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	PORTC.INTFLAGS = PIN1_bm;				// Clear interrupt flag
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     a0e:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	encoder_value = MAXOPENTIME;			// eeprom.h
     a12:	8b e0       	ldi	r24, 0x0B	; 11
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     a1a:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	99 f4       	brne	.+38     	; 0xa48 <change_MAXOPENTIME+0x4e>
		sprintf(strbuf, "%d minute", encoder_value);
     a22:	1f 92       	push	r1
     a24:	8f 93       	push	r24
     a26:	8a ef       	ldi	r24, 0xFA	; 250
     a28:	93 e6       	ldi	r25, 0x63	; 99
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <change_MAXOPENTIME+0x72>
	} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     a48:	1f 92       	push	r1
     a4a:	8f 93       	push	r24
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	94 e6       	ldi	r25, 0x64	; 100
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	6f eb       	ldi	r22, 0xBF	; 191
     a70:	74 e6       	ldi	r23, 0x64	; 100
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     a78:	42 e0       	ldi	r20, 0x02	; 2
     a7a:	be 01       	movw	r22, r28
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>

	while (encoder_sensed != ENCODERBUTTON) {
     a86:	79 c0       	rjmp	.+242    	; 0xb7a <change_MAXOPENTIME+0x180>
		if (encoder_sensed == ENCODERA) {
     a88:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     a8c:	87 30       	cpi	r24, 0x07	; 7
     a8e:	09 f0       	breq	.+2      	; 0xa92 <change_MAXOPENTIME+0x98>
     a90:	74 c0       	rjmp	.+232    	; 0xb7a <change_MAXOPENTIME+0x180>
			if ((ENCODERACLOSED && !ENCODERBCLOSED) || (!ENCODERACLOSED && ENCODERBCLOSED)) {
     a92:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a96:	82 fd       	sbrc	r24, 2
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <change_MAXOPENTIME+0xa8>
     a9a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a9e:	83 fd       	sbrc	r24, 3
     aa0:	08 c0       	rjmp	.+16     	; 0xab2 <change_MAXOPENTIME+0xb8>
     aa2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     aa6:	82 ff       	sbrs	r24, 2
     aa8:	0d c0       	rjmp	.+26     	; 0xac4 <change_MAXOPENTIME+0xca>
     aaa:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     aae:	83 fd       	sbrc	r24, 3
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <change_MAXOPENTIME+0xca>
				encoder_value++;
     ab2:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     ab6:	8f 5f       	subi	r24, 0xFF	; 255
     ab8:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     ac2:	08 c0       	rjmp	.+16     	; 0xad4 <change_MAXOPENTIME+0xda>
			} else {
				encoder_value--;
     ac4:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
				encoder_change = -1;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
			}
			if (encoder_value <= 0) {
     ad4:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     ad8:	81 11       	cpse	r24, r1
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <change_MAXOPENTIME+0xea>
				encoder_value = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <change_MAXOPENTIME+0xf4>
			} else if (encoder_value == 255) {
     ae4:	8f 3f       	cpi	r24, 0xFF	; 255
     ae6:	19 f4       	brne	.+6      	; 0xaee <change_MAXOPENTIME+0xf4>
				encoder_value = 254;
     ae8:	8e ef       	ldi	r24, 0xFE	; 254
     aea:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}

			if (encoder_value >= FILLINTERVAL) {
     aee:	8a e0       	ldi	r24, 0x0A	; 10
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     af6:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <encoder_value>
     afa:	98 17       	cp	r25, r24
     afc:	18 f0       	brcs	.+6      	; 0xb04 <change_MAXOPENTIME+0x10a>
				encoder_value = FILLINTERVAL - 1;
     afe:	81 50       	subi	r24, 0x01	; 1
     b00:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			if (encoder_value == 1) {
     b04:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	99 f4       	brne	.+38     	; 0xb32 <change_MAXOPENTIME+0x138>
				sprintf(strbuf, "%d minute", encoder_value);
     b0c:	1f 92       	push	r1
     b0e:	8f 93       	push	r24
     b10:	8a ef       	ldi	r24, 0xFA	; 250
     b12:	93 e6       	ldi	r25, 0x63	; 99
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <change_MAXOPENTIME+0x15c>
			} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     b32:	1f 92       	push	r1
     b34:	8f 93       	push	r24
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	94 e6       	ldi	r25, 0x64	; 100
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	6f eb       	ldi	r22, 0xBF	; 191
     b5a:	74 e6       	ldi	r23, 0x64	; 100
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);			
     b62:	42 e0       	ldi	r20, 0x02	; 2
     b64:	be 01       	movw	r22, r28
     b66:	6f 5f       	subi	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
			PORTC.INTFLAGS = PIN2_bm;		// Clear interrupt flag
     b70:	84 e0       	ldi	r24, 0x04	; 4
     b72:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
			encoder_sensed = FALSE;
     b76:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     b7a:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	09 f0       	breq	.+2      	; 0xb84 <change_MAXOPENTIME+0x18a>
     b82:	82 cf       	rjmp	.-252    	; 0xa88 <change_MAXOPENTIME+0x8e>
			writestr_OLED(0, strbuf, 2);			
			PORTC.INTFLAGS = PIN2_bm;		// Clear interrupt flag
			encoder_sensed = FALSE;
		}
	}
	PORTC.INTFLAGS = PIN1_bm;				// Clear interrupt flag
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
	encoder_sensed = FALSE;
     b8a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     b8e:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     b92:	8b e0       	ldi	r24, 0x0B	; 11
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	0e 94 bb 01 	call	0x376	; 0x376 <display>

}
     ba0:	65 96       	adiw	r28, 0x15	; 21
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN2CTRL = PORT_ISC_BOTHEDGES_gc;	// ENCA
     bac:	e0 e4       	ldi	r30, 0x40	; 64
     bae:	f4 e0       	ldi	r31, 0x04	; 4
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN1CTRL = PORT_ISC_FALLING_gc;	// PUSH
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	81 8b       	std	Z+17, r24	; 0x11
     bb8:	08 95       	ret

00000bba <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     bba:	8c e0       	ldi	r24, 0x0C	; 12
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     bc2:	88 23       	and	r24, r24
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     bc6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     bca:	88 23       	and	r24, r24
     bcc:	5c f0       	brlt	.+22     	; 0xbe4 <start_FILL+0x2a>
     bce:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     bd2:	80 ff       	sbrs	r24, 0
     bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     bd6:	80 e8       	ldi	r24, 0x80	; 128
     bd8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     bdc:	e7 e0       	ldi	r30, 0x07	; 7
     bde:	f8 e2       	ldi	r31, 0x28	; 40
     be0:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     be2:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     be4:	8d e0       	ldi	r24, 0x0D	; 13
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     bec:	88 23       	and	r24, r24
     bee:	79 f0       	breq	.+30     	; 0xc0e <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     bf0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     bf4:	86 fd       	sbrc	r24, 6
     bf6:	0b c0       	rjmp	.+22     	; 0xc0e <start_FILL+0x54>
     bf8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     bfc:	81 ff       	sbrs	r24, 1
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     c00:	80 e4       	ldi	r24, 0x40	; 64
     c02:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     c06:	e7 e0       	ldi	r30, 0x07	; 7
     c08:	f8 e2       	ldi	r31, 0x28	; 40
     c0a:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     c0c:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     c0e:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	11 f4       	brne	.+4      	; 0xc1a <start_FILL+0x60>
		display(SCRVALVES);
     c16:	0e 94 bb 01 	call	0x376	; 0x376 <display>
	}
	status.next_fill = FILLINTERVAL;
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     c22:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <status+0x15>
     c26:	08 95       	ret

00000c28 <handle_encoder>:
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{

	if (display_off) {
     c28:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <display_off>
     c2c:	88 23       	and	r24, r24
     c2e:	29 f0       	breq	.+10     	; 0xc3a <handle_encoder+0x12>
		display(screen_value);
     c30:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     c34:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     c38:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     c3a:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     c3e:	87 30       	cpi	r24, 0x07	; 7
     c40:	89 f5       	brne	.+98     	; 0xca4 <handle_encoder+0x7c>
		if ((ENCODERACLOSED && !ENCODERBCLOSED) || (!ENCODERACLOSED && ENCODERBCLOSED)) {
     c42:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c46:	82 fd       	sbrc	r24, 2
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <handle_encoder+0x2a>
     c4a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c4e:	83 fd       	sbrc	r24, 3
     c50:	08 c0       	rjmp	.+16     	; 0xc62 <handle_encoder+0x3a>
     c52:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c56:	82 ff       	sbrs	r24, 2
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <handle_encoder+0x4c>
     c5a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     c5e:	83 fd       	sbrc	r24, 3
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <handle_encoder+0x4c>
			encoder_value++;
     c62:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     c72:	08 c0       	rjmp	.+16     	; 0xc84 <handle_encoder+0x5c>
		} else {
			encoder_value--;
     c74:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c78:	81 50       	subi	r24, 0x01	; 1
     c7a:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = -1;
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
		}
		screen_value = (screen_value + encoder_change);
     c84:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <encoder_change>
     c88:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     c8c:	89 0f       	add	r24, r25
		if (screen_value < 0) {
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     c8e:	87 70       	andi	r24, 0x07	; 7
     c90:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		}
		PORTC.INTFLAGS = PIN2_bm;			// Clear interrupt flag
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = FALSE;
     c9a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		display(screen_value);
     c9e:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     ca2:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {
     ca4:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     ca8:	85 30       	cpi	r24, 0x05	; 5
     caa:	11 f5       	brne	.+68     	; 0xcf0 <handle_encoder+0xc8>
		switch (screen_value) {
     cac:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	89 f0       	breq	.+34     	; 0xcd6 <handle_encoder+0xae>
     cb4:	28 f4       	brcc	.+10     	; 0xcc0 <handle_encoder+0x98>
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	41 f0       	breq	.+16     	; 0xcca <handle_encoder+0xa2>
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	49 f0       	breq	.+18     	; 0xcd0 <handle_encoder+0xa8>
     cbe:	13 c0       	rjmp	.+38     	; 0xce6 <handle_encoder+0xbe>
     cc0:	86 30       	cpi	r24, 0x06	; 6
     cc2:	61 f0       	breq	.+24     	; 0xcdc <handle_encoder+0xb4>
     cc4:	87 30       	cpi	r24, 0x07	; 7
     cc6:	69 f0       	breq	.+26     	; 0xce2 <handle_encoder+0xba>
     cc8:	0e c0       	rjmp	.+28     	; 0xce6 <handle_encoder+0xbe>
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     cca:	0e 94 dd 05 	call	0xbba	; 0xbba <start_FILL>
				break;
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <handle_encoder+0xbe>
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     cd0:	0e 94 30 04 	call	0x860	; 0x860 <change_FILLINT>
				break;
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <handle_encoder+0xbe>
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     cd6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_MAXOPENTIME>
				break;
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <handle_encoder+0xbe>
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     cdc:	0e 94 0e 04 	call	0x81c	; 0x81c <change_DISABLEBLU>
				break;
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <handle_encoder+0xbe>
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     ce2:	0e 94 1f 04 	call	0x83e	; 0x83e <change_DISABLERED>
				break;
			default:
				break;
		}
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = FALSE;
     cec:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
     cf0:	08 95       	ret

00000cf2 <__vector_24>:
	PC1 is the encoder pushbutton
	PC2 is ENCODER A signal
	PC3 is ENCODER B signal
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	8f 93       	push	r24

	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     cfe:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     d02:	81 ff       	sbrs	r24, 1
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <__vector_24+0x1c>
		encoder_sensed = ENCODERBUTTON;
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <__vector_24+0x2a>
	} else if (PORTC.INTFLAGS & PIN2_bm) {	// Encoder rotary
     d0e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     d12:	82 ff       	sbrs	r24, 2
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <__vector_24+0x2a>
		encoder_sensed = ENCODERA;
     d16:	87 e0       	ldi	r24, 0x07	; 7
     d18:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
	}
}
     d1c:	8f 91       	pop	r24
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <init_STATUS>:

}


void init_STATUS()
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29

	status.next_buftank_fill = BIGFILLINTERVAL;
     d2c:	c7 e0       	ldi	r28, 0x07	; 7
     d2e:	d8 e2       	ldi	r29, 0x28	; 40
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	8e 8b       	std	Y+22, r24	; 0x16
	status.next_fill = FILLINTERVAL;
     d34:	8a e0       	ldi	r24, 0x0A	; 10
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
     d3c:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     d3e:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     d40:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     d42:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     d44:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     d46:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     d48:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     d4a:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     d4c:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     d4e:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     d50:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     d52:	0e 94 83 08 	call	0x1106	; 0x1106 <read_PRESSURE>
     d56:	8a 8f       	std	Y+26, r24	; 0x1a

}
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <init_PORTS>:

void init_PORTS(void)
{

	// Unused pins
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d5e:	e0 e0       	ldi	r30, 0x00	; 0
     d60:	f4 e0       	ldi	r31, 0x04	; 4
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d66:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d68:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__TEXT_REGION_LENGTH__+0x7f4450>
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d6c:	e0 e6       	ldi	r30, 0x60	; 96
     d6e:	f4 e0       	ldi	r31, 0x04	; 4
     d70:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d72:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d74:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d76:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d78:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d7a:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d7c:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d7e:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d80:	e0 ea       	ldi	r30, 0xA0	; 160
     d82:	f4 e0       	ldi	r31, 0x04	; 4
     d84:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d86:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d88:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d8a:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d8c:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d8e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     d90:	80 8b       	std	Z+16, r24	; 0x10
     d92:	08 95       	ret

00000d94 <init>:
void init_STATUS(void);

void init(void)
{

	hour_flag = FALSE;
     d94:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
	minute_flag = FALSE;
     d98:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>
	seconds = 0;
     d9c:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     da0:	0e 94 af 06 	call	0xd5e	; 0xd5e <init_PORTS>
	init_USART();
     da4:	0e 94 be 0a 	call	0x157c	; 0x157c <init_USART>
	init_BUTTONS();
     da8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <init_BUTTONS>
	init_ENCODER();
     dac:	0e 94 d6 05 	call	0xbac	; 0xbac <init_ENCODER>
	init_TWI();
     db0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <init_TWI>
	init_RTC();
     db4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <init_RTC>
	init_ADC();
     db8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <init_ADC>
	init_STATUS();
     dbc:	0e 94 94 06 	call	0xd28	; 0xd28 <init_STATUS>
	init_OLED(0);
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <init_OLED>
	update_VERSION();
     dc6:	0e 94 9d 01 	call	0x33a	; 0x33a <update_VERSION>
	display(SCRVERSION);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0e 94 bb 01 	call	0x376	; 0x376 <display>
     dd0:	08 95       	ret

00000dd2 <main>:
#include "init.h"

int main(void)
{

	init();
     dd2:	0e 94 ca 06 	call	0xd94	; 0xd94 <init>
	sei();
     dd6:	78 94       	sei
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     dd8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     ddc:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     dde:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     de2:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     de6:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     de8:	0e 94 14 06 	call	0xc28	; 0xc28 <handle_encoder>
		}
		if (hour_flag) {		// Things to do once an hour
     dec:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <hour_flag>
     df0:	81 11       	cpse	r24, r1
			handle_hour();		// See rtc.c
     df2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <handle_hour>
		}
		if (minute_flag) {		// Things to do once a minute
     df6:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <minute_flag>
     dfa:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     dfc:	0e 94 de 08 	call	0x11bc	; 0x11bc <handle_minute>
		}
		if (tick) {				// Things to do once a second
     e00:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     e04:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     e06:	0e 94 42 09 	call	0x1284	; 0x1284 <handle_ticks>
//			button_pushed = scan_buttons();
		}
		if (recv0_buf.done) {	// Serial communication received
     e0a:	80 91 2a 29 	lds	r24, 0x292A	; 0x80292a <recv0_buf+0xff>
     e0e:	88 23       	and	r24, r24
     e10:	19 f3       	breq	.-58     	; 0xdd8 <main+0x6>
			handle_serial();	// See usart.c
     e12:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <handle_serial>
     e16:	e0 cf       	rjmp	.-64     	; 0xdd8 <main+0x6>

00000e18 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	d6 2f       	mov	r29, r22
     e1e:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	0e 94 5f 0a 	call	0x14be	; 0x14be <start_TWI>
	write_TWI(type);
     e26:	8d 2f       	mov	r24, r29
     e28:	0e 94 99 0a 	call	0x1532	; 0x1532 <write_TWI>
	write_TWI(byteToSend);
     e2c:	8c 2f       	mov	r24, r28
     e2e:	0e 94 99 0a 	call	0x1532	; 0x1532 <write_TWI>
	stop_TWI();
     e32:	0e 94 95 0a 	call	0x152a	; 0x152a <stop_TWI>

}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     e3c:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     e3e:	e0 e0       	ldi	r30, 0x00	; 0
     e40:	f4 e0       	ldi	r31, 0x04	; 4
     e42:	90 e8       	ldi	r25, 0x80	; 128
     e44:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	a6 e4       	ldi	r26, 0x46	; 70
     e4a:	b0 e1       	ldi	r27, 0x10	; 16
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <init_OLED+0x10>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     e52:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     e54:	81 11       	cpse	r24, r1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <init_OLED+0x20>
		twiaddr = OLEDADDR0;
     e58:	cc e3       	ldi	r28, 0x3C	; 60
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
     e5c:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     e5e:	4a e2       	ldi	r20, 0x2A	; 42
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	8c 2f       	mov	r24, r28
     e64:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     e68:	41 e7       	ldi	r20, 0x71	; 113
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	8c 2f       	mov	r24, r28
     e6e:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     e72:	4c e5       	ldi	r20, 0x5C	; 92
     e74:	60 e4       	ldi	r22, 0x40	; 64
     e76:	8c 2f       	mov	r24, r28
     e78:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e7c:	48 e2       	ldi	r20, 0x28	; 40
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	8c 2f       	mov	r24, r28
     e82:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     e86:	48 e0       	ldi	r20, 0x08	; 8
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	8c 2f       	mov	r24, r28
     e8c:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e90:	4a e2       	ldi	r20, 0x2A	; 42
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	8c 2f       	mov	r24, r28
     e96:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e9a:	49 e7       	ldi	r20, 0x79	; 121
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	8c 2f       	mov	r24, r28
     ea0:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     ea4:	45 ed       	ldi	r20, 0xD5	; 213
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	8c 2f       	mov	r24, r28
     eaa:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     eae:	40 e7       	ldi	r20, 0x70	; 112
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     eb8:	48 e7       	ldi	r20, 0x78	; 120
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	8c 2f       	mov	r24, r28
     ebe:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     ec2:	48 e0       	ldi	r20, 0x08	; 8
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8c 2f       	mov	r24, r28
     ec8:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     ecc:	46 e0       	ldi	r20, 0x06	; 6
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	8c 2f       	mov	r24, r28
     ed2:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     ed6:	42 e7       	ldi	r20, 0x72	; 114
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	8c 2f       	mov	r24, r28
     edc:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	60 e4       	ldi	r22, 0x40	; 64
     ee4:	8c 2f       	mov	r24, r28
     ee6:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     eea:	4a e2       	ldi	r20, 0x2A	; 42
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	8c 2f       	mov	r24, r28
     ef0:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     ef4:	49 e7       	ldi	r20, 0x79	; 121
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	8c 2f       	mov	r24, r28
     efa:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     efe:	4a ed       	ldi	r20, 0xDA	; 218
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	8c 2f       	mov	r24, r28
     f04:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	8c 2f       	mov	r24, r28
     f0e:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     f12:	4c ed       	ldi	r20, 0xDC	; 220
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	8c 2f       	mov	r24, r28
     f18:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	8c 2f       	mov	r24, r28
     f22:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     f26:	41 e8       	ldi	r20, 0x81	; 129
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	8c 2f       	mov	r24, r28
     f2c:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	8c 2f       	mov	r24, r28
     f36:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     f3a:	49 ed       	ldi	r20, 0xD9	; 217
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	8c 2f       	mov	r24, r28
     f40:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     f44:	41 ef       	ldi	r20, 0xF1	; 241
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	8c 2f       	mov	r24, r28
     f4a:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     f4e:	4b ed       	ldi	r20, 0xDB	; 219
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	8c 2f       	mov	r24, r28
     f54:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     f58:	40 e4       	ldi	r20, 0x40	; 64
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	8c 2f       	mov	r24, r28
     f5e:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     f62:	48 e7       	ldi	r20, 0x78	; 120
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	8c 2f       	mov	r24, r28
     f68:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     f6c:	48 e2       	ldi	r20, 0x28	; 40
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	8c 2f       	mov	r24, r28
     f72:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	8c 2f       	mov	r24, r28
     f7c:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	8c 2f       	mov	r24, r28
     f86:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     f8a:	4c e0       	ldi	r20, 0x0C	; 12
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	8c 2f       	mov	r24, r28
     f90:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
     f94:	ba e6       	ldi	r27, 0x6A	; 106
     f96:	24 e0       	ldi	r18, 0x04	; 4
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	b1 50       	subi	r27, 0x01	; 1
     f9c:	20 40       	sbci	r18, 0x00	; 0
     f9e:	80 40       	sbci	r24, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <init_OLED+0x15e>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     fa4:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     fa8:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>

}
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	e2 97       	sbiw	r28, 0x32	; 50
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     fc8:	91 e1       	ldi	r25, 0x11	; 17
     fca:	e0 ed       	ldi	r30, 0xD0	; 208
     fcc:	f4 e6       	ldi	r31, 0x64	; 100
     fce:	de 01       	movw	r26, r28
     fd0:	92 96       	adiw	r26, 0x22	; 34
     fd2:	01 90       	ld	r0, Z+
     fd4:	0d 92       	st	X+, r0
     fd6:	9a 95       	dec	r25
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <writestr_OLED+0x22>

	if (displaynumber == 0) {
     fda:	81 11       	cpse	r24, r1
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
     fde:	0c e3       	ldi	r16, 0x3C	; 60
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
     fe2:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	7c 01       	movw	r14, r24
     fea:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <strcpy>
	if (strlen(strbuf) > 16) {
     fee:	f7 01       	movw	r30, r14
     ff0:	01 90       	ld	r0, Z+
     ff2:	00 20       	and	r0, r0
     ff4:	e9 f7       	brne	.-6      	; 0xff0 <writestr_OLED+0x40>
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	ee 19       	sub	r30, r14
     ffa:	ff 09       	sbc	r31, r15
     ffc:	71 97       	sbiw	r30, 0x11	; 17
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1000:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1002:	be 01       	movw	r22, r28
    1004:	6e 5d       	subi	r22, 0xDE	; 222
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <strcat>

	if (lineno == 1) {
    1010:	11 30       	cpi	r17, 0x01	; 1
    1012:	39 f4       	brne	.+14     	; 0x1022 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	80 2f       	mov	r24, r16
    101a:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	12 c0       	rjmp	.+36     	; 0x1046 <writestr_OLED+0x96>
	strcat(strbuf, blanks);		// pad with blanks

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1022:	40 ec       	ldi	r20, 0xC0	; 192
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	80 2f       	mov	r24, r16
    1028:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
    102c:	f8 cf       	rjmp	.-16     	; 0x101e <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    102e:	e1 e0       	ldi	r30, 0x01	; 1
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	ec 0f       	add	r30, r28
    1034:	fd 1f       	adc	r31, r29
    1036:	e1 0f       	add	r30, r17
    1038:	f1 1d       	adc	r31, r1
    103a:	40 81       	ld	r20, Z
    103c:	60 e4       	ldi	r22, 0x40	; 64
    103e:	80 2f       	mov	r24, r16
    1040:	0e 94 0c 07 	call	0xe18	; 0xe18 <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1044:	1f 5f       	subi	r17, 0xFF	; 255
    1046:	10 31       	cpi	r17, 0x10	; 16
    1048:	90 f3       	brcs	.-28     	; 0x102e <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    1052:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
	display_off = FALSE;
    1056:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <display_off>

}
    105a:	e2 96       	adiw	r28, 0x32	; 50
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	1f 92       	push	r1
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    107c:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    108a:	42 e0       	ldi	r20, 0x02	; 2
    108c:	be 01       	movw	r22, r28
    108e:	6f 5f       	subi	r22, 0xFF	; 255
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	81 2f       	mov	r24, r17
    1094:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writestr_OLED>
	timerOLED = 0;
    1098:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    109c:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
	display_off = TRUE;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <display_off>

}
    10a6:	0f 90       	pop	r0
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	08 95       	ret

000010b0 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
    10b6:	e0 e0       	ldi	r30, 0x00	; 0
    10b8:	f6 e0       	ldi	r31, 0x06	; 6
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    10c0:	a0 ea       	ldi	r26, 0xA0	; 160
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	8c 91       	ld	r24, X
    10c6:	80 63       	ori	r24, 0x30	; 48
    10c8:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    10ca:	a2 e0       	ldi	r26, 0x02	; 2
    10cc:	b6 e0       	ldi	r27, 0x06	; 6
    10ce:	8c 91       	ld	r24, X
    10d0:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    10d2:	8c 91       	ld	r24, X
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    10d8:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    10dc:	80 81       	ld	r24, Z
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    10e2:	e8 e0       	ldi	r30, 0x08	; 8
    10e4:	f6 e0       	ldi	r31, 0x06	; 6
    10e6:	80 81       	ld	r24, Z
    10e8:	81 60       	ori	r24, 0x01	; 1
    10ea:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <init_ADC+0x40>
		asm("nop");
    10ee:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    10f0:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    10f4:	80 fd       	sbrc	r24, 0
    10f6:	fb cf       	rjmp	.-10     	; 0x10ee <init_ADC+0x3e>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    10f8:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    10fc:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    1100:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <status+0x1a>
    1104:	08 95       	ret

00001106 <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	cf 93       	push	r28

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    1110:	c1 2c       	mov	r12, r1
    1112:	d1 2c       	mov	r13, r1
    1114:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    1116:	c0 e0       	ldi	r28, 0x00	; 0
    1118:	1b c0       	rjmp	.+54     	; 0x1150 <read_PRESSURE+0x4a>
		ADC0_COMMAND |= ADC_STCONV_bm;
    111a:	e8 e0       	ldi	r30, 0x08	; 8
    111c:	f6 e0       	ldi	r31, 0x06	; 6
    111e:	80 81       	ld	r24, Z
    1120:	81 60       	ori	r24, 0x01	; 1
    1122:	80 83       	st	Z, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <read_PRESSURE+0x22>
			asm("nop");
    1126:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1128:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    112c:	80 fd       	sbrc	r24, 0
    112e:	fb cf       	rjmp	.-10     	; 0x1126 <read_PRESSURE+0x20>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1130:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__floatunsisf>
    113e:	9b 01       	movw	r18, r22
    1140:	ac 01       	movw	r20, r24
    1142:	c7 01       	movw	r24, r14
    1144:	b6 01       	movw	r22, r12
    1146:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
    114a:	6b 01       	movw	r12, r22
    114c:	7c 01       	movw	r14, r24
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    114e:	cf 5f       	subi	r28, 0xFF	; 255
    1150:	ca 30       	cpi	r28, 0x0A	; 10
    1152:	18 f3       	brcs	.-58     	; 0x111a <read_PRESSURE+0x14>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	c7 01       	movw	r24, r14
    115e:	b6 01       	movw	r22, r12
    1160:	0e 94 c6 0c 	call	0x198c	; 0x198c <__divsf3>
    1164:	2e e5       	ldi	r18, 0x5E	; 94
    1166:	3a eb       	ldi	r19, 0xBA	; 186
    1168:	49 e5       	ldi	r20, 0x59	; 89
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__mulsf3>
    1170:	2f e1       	ldi	r18, 0x1F	; 31
    1172:	35 e8       	ldi	r19, 0x85	; 133
    1174:	45 ec       	ldi	r20, 0xC5	; 197
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__subsf3>
    117c:	6b 01       	movw	r12, r22
    117e:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__cmpsf2>
    118a:	88 23       	and	r24, r24
    118c:	1c f4       	brge	.+6      	; 0x1194 <read_PRESSURE+0x8e>
		value = 0.0;
    118e:	c1 2c       	mov	r12, r1
    1190:	d1 2c       	mov	r13, r1
    1192:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	5f e3       	ldi	r21, 0x3F	; 63
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__addsf3>
    11a4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fixunssfsi>
    11a8:	86 2f       	mov	r24, r22

}
    11aa:	cf 91       	pop	r28
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	08 95       	ret

000011b6 <handle_hour>:
	dewar. Normally, this isn't the case at LCO.
----------------------------------------------------------------------*/
void handle_hour(void)
{

	hour_flag = FALSE;
    11b6:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
    11ba:	08 95       	ret

000011bc <handle_minute>:
/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
	Checks if a buffer dewar timeout has occurred.
----------------------------------------------------------------------*/
void handle_minute(void)
{
    11bc:	cf 93       	push	r28

	if (++minutes >= 60) {
    11be:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <minutes>
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <minutes>
    11c8:	8c 33       	cpi	r24, 0x3C	; 60
    11ca:	28 f0       	brcs	.+10     	; 0x11d6 <handle_minute+0x1a>
		hour_flag = TRUE;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <hour_flag>
		minutes = 0;
    11d2:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <minutes>
	}

	minute_flag = FALSE;
    11d6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>

	if (BLUVALVEOPEN) {
    11da:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11de:	88 23       	and	r24, r24
    11e0:	8c f4       	brge	.+34     	; 0x1204 <handle_minute+0x48>
		status.opentime_BLU++;
    11e2:	e7 e0       	ldi	r30, 0x07	; 7
    11e4:	f8 e2       	ldi	r31, 0x28	; 40
    11e6:	c3 85       	ldd	r28, Z+11	; 0x0b
    11e8:	cf 5f       	subi	r28, 0xFF	; 255
    11ea:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    11ec:	8b e0       	ldi	r24, 0x0B	; 11
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
    11f4:	c8 17       	cp	r28, r24
    11f6:	30 f0       	brcs	.+12     	; 0x1204 <handle_minute+0x48>
			CLOSEVALVE(BLUVALVE);
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    1204:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1208:	86 ff       	sbrs	r24, 6
    120a:	11 c0       	rjmp	.+34     	; 0x122e <handle_minute+0x72>
		status.opentime_RED++;
    120c:	e7 e0       	ldi	r30, 0x07	; 7
    120e:	f8 e2       	ldi	r31, 0x28	; 40
    1210:	c4 85       	ldd	r28, Z+12	; 0x0c
    1212:	cf 5f       	subi	r28, 0xFF	; 255
    1214:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    1216:	8b e0       	ldi	r24, 0x0B	; 11
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
    121e:	c8 17       	cp	r28, r24
    1220:	30 f0       	brcs	.+12     	; 0x122e <handle_minute+0x72>
			CLOSEVALVE(REDVALVE);
    1222:	80 e4       	ldi	r24, 0x40	; 64
    1224:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    122e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1232:	85 ff       	sbrs	r24, 5
    1234:	13 c0       	rjmp	.+38     	; 0x125c <handle_minute+0xa0>
		status.opentime_BUF++;
    1236:	e7 e0       	ldi	r30, 0x07	; 7
    1238:	f8 e2       	ldi	r31, 0x28	; 40
    123a:	85 85       	ldd	r24, Z+13	; 0x0d
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    1240:	84 31       	cpi	r24, 0x14	; 20
    1242:	60 f0       	brcs	.+24     	; 0x125c <handle_minute+0xa0>
			CLOSEVALVE(BUFVALVE);
    1244:	e0 e4       	ldi	r30, 0x40	; 64
    1246:	f4 e0       	ldi	r31, 0x04	; 4
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    124c:	80 e1       	ldi	r24, 0x10	; 16
    124e:	86 83       	std	Z+6, r24	; 0x06
			status.maxopen_BUF = TRUE;
    1250:	e7 e0       	ldi	r30, 0x07	; 7
    1252:	f8 e2       	ldi	r31, 0x28	; 40
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	81 8b       	std	Z+17, r24	; 0x11
			status.next_buftank_fill = BIGFILLINTERVAL;
    1258:	8c e0       	ldi	r24, 0x0C	; 12
    125a:	86 8b       	std	Z+22, r24	; 0x16
		}
	}

	if (SUPVALVEOPEN) {
    125c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1260:	84 ff       	sbrs	r24, 4
    1262:	05 c0       	rjmp	.+10     	; 0x126e <handle_minute+0xb2>
		status.opentime_SUP++;				// Increment supply dewar valve time
    1264:	e7 e0       	ldi	r30, 0x07	; 7
    1266:	f8 e2       	ldi	r31, 0x28	; 40
    1268:	86 85       	ldd	r24, Z+14	; 0x0e
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    126e:	e7 e0       	ldi	r30, 0x07	; 7
    1270:	f8 e2       	ldi	r31, 0x28	; 40
    1272:	85 89       	ldd	r24, Z+21	; 0x15
    1274:	81 50       	subi	r24, 0x01	; 1
    1276:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    1278:	81 11       	cpse	r24, r1
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <handle_minute+0xc4>
		start_FILL();						// See encoder.c
    127c:	0e 94 dd 05 	call	0xbba	; 0xbba <start_FILL>
	}
}
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <handle_ticks>:
	it has timed out. Get a new LN2 gas pressure reading.
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    1284:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {		// seconds incremented in ISR
    1288:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    128c:	8c 33       	cpi	r24, 0x3C	; 60
    128e:	28 f0       	brcs	.+10     	; 0x129a <handle_ticks+0x16>
		minute_flag = TRUE;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <minute_flag>
		seconds = 0;
    1296:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

	status.pressure = read_PRESSURE();				// LN2 pressure
    129a:	0e 94 83 08 	call	0x1106	; 0x1106 <read_PRESSURE>
    129e:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <status+0x1a>

//	handle_button();

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    12a2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    12a6:	88 23       	and	r24, r24
    12a8:	f4 f4       	brge	.+60     	; 0x12e6 <handle_ticks+0x62>
    12aa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12ae:	80 fd       	sbrc	r24, 0
    12b0:	1a c0       	rjmp	.+52     	; 0x12e6 <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    12b2:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <status+0x13>
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	30 f0       	brcs	.+12     	; 0x12c6 <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    12c0:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <status+0x13>
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    12cc:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	49 f4       	brne	.+18     	; 0x12e6 <handle_ticks+0x62>
    12d4:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12d8:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12dc:	89 2b       	or	r24, r25
    12de:	19 f0       	breq	.+6      	; 0x12e6 <handle_ticks+0x62>
			display(SCRVALVES);
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	0e 94 bb 01 	call	0x376	; 0x376 <display>
		}
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    12e6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    12ea:	86 ff       	sbrs	r24, 6
    12ec:	1e c0       	rjmp	.+60     	; 0x132a <handle_ticks+0xa6>
    12ee:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12f2:	81 fd       	sbrc	r24, 1
    12f4:	1a c0       	rjmp	.+52     	; 0x132a <handle_ticks+0xa6>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    12f6:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x14>
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	30 f0       	brcs	.+12     	; 0x130a <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    12fe:	80 e4       	ldi	r24, 0x40	; 64
    1300:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    1304:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x14>
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1310:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	49 f4       	brne	.+18     	; 0x132a <handle_ticks+0xa6>
    1318:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    131c:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1320:	89 2b       	or	r24, r25
    1322:	19 f0       	breq	.+6      	; 0x132a <handle_ticks+0xa6>
			display(SCRVALVES);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 bb 01 	call	0x376	; 0x376 <display>
		}
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    132a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    132e:	85 ff       	sbrs	r24, 5
    1330:	2a c0       	rjmp	.+84     	; 0x1386 <handle_ticks+0x102>
    1332:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1336:	82 fd       	sbrc	r24, 2
    1338:	26 c0       	rjmp	.+76     	; 0x1386 <handle_ticks+0x102>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    133a:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x12>
    133e:	85 30       	cpi	r24, 0x05	; 5
    1340:	90 f0       	brcs	.+36     	; 0x1366 <handle_ticks+0xe2>
			CLOSEVALVE(BUFVALVE);
    1342:	e0 e4       	ldi	r30, 0x40	; 64
    1344:	f4 e0       	ldi	r31, 0x04	; 4
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	86 83       	std	Z+6, r24	; 0x06
			status.overfill_BUF = 0;
    134a:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <status+0x12>
    134e:	24 e5       	ldi	r18, 0x54	; 84
    1350:	88 e5       	ldi	r24, 0x58	; 88
    1352:	94 e1       	ldi	r25, 0x14	; 20
    1354:	21 50       	subi	r18, 0x01	; 1
    1356:	80 40       	sbci	r24, 0x00	; 0
    1358:	90 40       	sbci	r25, 0x00	; 0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <handle_ticks+0xd0>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <handle_ticks+0xda>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <handle_ticks+0xdc>
			_delay_ms(2000);
			CLOSEVALVE(SUPVALVE);
    1360:	80 e1       	ldi	r24, 0x10	; 16
    1362:	86 83       	std	Z+6, r24	; 0x06
    1364:	03 c0       	rjmp	.+6      	; 0x136c <handle_ticks+0xe8>
		} else {
			status.overfill_BUF++;
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    136c:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	49 f4       	brne	.+18     	; 0x1386 <handle_ticks+0x102>
    1374:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1378:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    137c:	89 2b       	or	r24, r25
    137e:	19 f0       	breq	.+6      	; 0x1386 <handle_ticks+0x102>
			display(SCRVALVES);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 bb 01 	call	0x376	; 0x376 <display>
			status.supply_button_time = 0;
		}
	}
*/

	if (timerOLED) {
    1386:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    138a:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	81 f0       	breq	.+32     	; 0x13b2 <handle_ticks+0x12e>
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    1392:	8b 30       	cpi	r24, 0x0B	; 11
    1394:	91 05       	cpc	r25, r1
    1396:	40 f0       	brcs	.+16     	; 0x13a8 <handle_ticks+0x124>
			clear_OLED(0);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 37 08 	call	0x106e	; 0x106e <clear_OLED>
			timerOLED = 0;
    139e:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    13a2:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
    13a6:	08 95       	ret
		} else {
			timerOLED++;
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    13ae:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
    13b2:	08 95       	ret

000013b4 <init_RTC>:
{

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    13b4:	e0 e6       	ldi	r30, 0x60	; 96
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    13ba:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    13bc:	98 ed       	ldi	r25, 0xD8	; 216
    13be:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13c0:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <init_RTC+0x12>
		asm("nop");
    13c4:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    13c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    13ca:	86 fd       	sbrc	r24, 6
    13cc:	fb cf       	rjmp	.-10     	; 0x13c4 <init_RTC+0x10>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    13ce:	e0 e6       	ldi	r30, 0x60	; 96
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    13d4:	8b 7f       	andi	r24, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    13d6:	98 ed       	ldi	r25, 0xD8	; 216
    13d8:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13da:	84 8f       	std	Z+28, r24	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    13dc:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    13de:	81 60       	ori	r24, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    13e0:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13e2:	84 8f       	std	Z+28, r24	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <init_RTC+0x34>
		asm("nop");
    13e6:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    13e8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    13ec:	81 11       	cpse	r24, r1
    13ee:	fb cf       	rjmp	.-10     	; 0x13e6 <init_RTC+0x32>
		asm("nop");
	}

	RTC.PER = 511;			// 1 sec period for overflow interrupts
    13f0:	e0 e4       	ldi	r30, 0x40	; 64
    13f2:	f1 e0       	ldi	r31, 0x01	; 1
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	82 87       	std	Z+10, r24	; 0x0a
    13fa:	93 87       	std	Z+11, r25	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    1400:	85 81       	ldd	r24, Z+5	; 0x05
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    1406:	81 eb       	ldi	r24, 0xB1	; 177
    1408:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    140a:	82 81       	ldd	r24, Z+2	; 0x02
    140c:	81 60       	ori	r24, 0x01	; 1
    140e:	82 83       	std	Z+2, r24	; 0x02
    1410:	08 95       	ret

00001412 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	8f 93       	push	r24
    141e:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    1426:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    1430:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    1442:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <ticks_TCB0>
    1446:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    144a:	25 e0       	ldi	r18, 0x05	; 5
    144c:	3d e0       	ldi	r19, 0x0D	; 13
    144e:	ac 01       	movw	r20, r24
    1450:	42 9f       	mul	r20, r18
    1452:	c0 01       	movw	r24, r0
    1454:	43 9f       	mul	r20, r19
    1456:	90 0d       	add	r25, r0
    1458:	52 9f       	mul	r21, r18
    145a:	90 0d       	add	r25, r0
    145c:	11 24       	eor	r1, r1
    145e:	e0 e8       	ldi	r30, 0x80	; 128
    1460:	fa e0       	ldi	r31, 0x0A	; 10
    1462:	84 87       	std	Z+12, r24	; 0x0c
    1464:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    146a:	80 83       	st	Z, r24
    146c:	08 95       	ret

0000146e <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    146e:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    1472:	08 95       	ret

00001474 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	0f 92       	push	r0
    147c:	11 24       	eor	r1, r1
    147e:	8f 93       	push	r24
    1480:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    1488:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    148c:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <ticks_TCB0>
    1496:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <ticks_TCB0+0x1>

}
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    14a8:	e0 ea       	ldi	r30, 0xA0	; 160
    14aa:	f8 e0       	ldi	r31, 0x08	; 8
    14ac:	8b e0       	ldi	r24, 0x0B	; 11
    14ae:	86 83       	std	Z+6, r24	; 0x06
    14b0:	83 81       	ldd	r24, Z+3	; 0x03
    14b2:	81 60       	ori	r24, 0x01	; 1
    14b4:	83 83       	std	Z+3, r24	; 0x03
    14b6:	85 81       	ldd	r24, Z+5	; 0x05
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	85 83       	std	Z+5, r24	; 0x05
    14bc:	08 95       	ret

000014be <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    14be:	61 30       	cpi	r22, 0x01	; 1
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    14d0:	88 0f       	add	r24, r24
    14d2:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	start_TCB0(1);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 21 0a 	call	0x1442	; 0x1442 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <start_TWI+0x38>
		if (ticks_TCB0 > 10) {
    14e0:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    14e4:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    14e8:	0b 97       	sbiw	r24, 0x0b	; 11
    14ea:	20 f0       	brcs	.+8      	; 0x14f4 <start_TWI+0x36>
			stop_TCB0();
    14ec:	0e 94 37 0a 	call	0x146e	; 0x146e <stop_TCB0>
			return(TWITIMEOUT);
    14f0:	84 e0       	ldi	r24, 0x04	; 4
    14f2:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    14f4:	00 00       	nop
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14f6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14fa:	80 7c       	andi	r24, 0xC0	; 192
    14fc:	89 f3       	breq	.-30     	; 0x14e0 <start_TWI+0x22>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    14fe:	0e 94 37 0a 	call	0x146e	; 0x146e <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    1502:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1506:	82 fd       	sbrc	r24, 2
    1508:	0c c0       	rjmp	.+24     	; 0x1522 <start_TWI+0x64>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    150a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    150e:	83 fd       	sbrc	r24, 3
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <start_TWI+0x68>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    1512:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1516:	89 2f       	mov	r24, r25
    1518:	80 71       	andi	r24, 0x10	; 16
    151a:	94 ff       	sbrs	r25, 4
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <start_TWI+0x6a>
		return(TWINODEVICE);
    151e:	85 e0       	ldi	r24, 0x05	; 5
    1520:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    1526:	82 e0       	ldi	r24, 0x02	; 2
		return(TWINODEVICE);
	}

	return(0);

}
    1528:	08 95       	ret

0000152a <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    152a:	87 e0       	ldi	r24, 0x07	; 7
    152c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    1530:	08 95       	ret

00001532 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <write_TWI+0x4>
		asm("nop");
    1534:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1536:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    153a:	96 ff       	sbrs	r25, 6
    153c:	fb cf       	rjmp	.-10     	; 0x1534 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    153e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 21 0a 	call	0x1442	; 0x1442 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <write_TWI+0x30>
		asm("nop");
    154c:	00 00       	nop
		if (ticks_TCB0 > 50) {
    154e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1552:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1556:	c3 97       	sbiw	r24, 0x33	; 51
    1558:	20 f0       	brcs	.+8      	; 0x1562 <write_TWI+0x30>
			stop_TCB0();
    155a:	0e 94 37 0a 	call	0x146e	; 0x146e <stop_TCB0>
			return(TWITIMEOUT);
    155e:	84 e0       	ldi	r24, 0x04	; 4
    1560:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1562:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1566:	86 ff       	sbrs	r24, 6
    1568:	f1 cf       	rjmp	.-30     	; 0x154c <write_TWI+0x1a>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    156a:	0e 94 37 0a 	call	0x146e	; 0x146e <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    156e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1572:	89 2f       	mov	r24, r25
    1574:	80 71       	andi	r24, 0x10	; 16
    1576:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    1578:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    157a:	08 95       	ret

0000157c <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    157c:	e0 e0       	ldi	r30, 0x00	; 0
    157e:	f4 e0       	ldi	r31, 0x04	; 4
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    1584:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    1586:	e0 e0       	ldi	r30, 0x00	; 0
    1588:	f8 e0       	ldi	r31, 0x08	; 8
    158a:	2d e6       	ldi	r18, 0x6D	; 109
    158c:	35 e0       	ldi	r19, 0x05	; 5
    158e:	20 87       	std	Z+8, r18	; 0x08
    1590:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    1592:	95 81       	ldd	r25, Z+5	; 0x05
    1594:	90 68       	ori	r25, 0x80	; 128
    1596:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    1598:	96 81       	ldd	r25, Z+6	; 0x06
    159a:	90 64       	ori	r25, 0x40	; 64
    159c:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    159e:	96 81       	ldd	r25, Z+6	; 0x06
    15a0:	90 68       	ori	r25, 0x80	; 128
    15a2:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    15a4:	10 92 2c 29 	sts	0x292C, r1	; 0x80292c <recv0_buf+0x101>
	send0_buf.length = 0;
    15a8:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <send0_buf+0x101>
	recv0_buf.nxfrd = 0;
    15ac:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <recv0_buf+0x100>
	send0_buf.nxfrd = 0;
    15b0:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	recv0_buf.done = FALSE;				// Ready to receive data
    15b4:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
	send0_buf.done = TRUE;				// No data to send
    15b8:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    15bc:	08 95       	ret

000015be <send_USART>:
		This copies the data array into the send0_buf data buffer and enables
		"transmit data register empty" interrupt (DREIE). The USART0_DRE_vect
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
    15be:	dc 01       	movw	r26, r24
	uint8_t i;
	send0_buf.length = nbytes;
    15c0:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <send0_buf+0x101>
	send0_buf.nxfrd = 0;
    15c4:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	send0_buf.done = FALSE;
    15c8:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <send0_buf+0xff>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <send_USART+0x22>
		send0_buf.data[i] = *data++;
    15d0:	e9 2f       	mov	r30, r25
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8c 91       	ld	r24, X
    15d6:	e3 5d       	subi	r30, 0xD3	; 211
    15d8:	f6 4d       	sbci	r31, 0xD6	; 214
    15da:	80 83       	st	Z, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15dc:	9f 5f       	subi	r25, 0xFF	; 255
		send0_buf.data[i] = *data++;
    15de:	11 96       	adiw	r26, 0x01	; 1
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15e0:	96 17       	cp	r25, r22
    15e2:	b0 f3       	brcs	.-20     	; 0x15d0 <send_USART+0x12>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    15e4:	e0 e0       	ldi	r30, 0x00	; 0
    15e6:	f8 e0       	ldi	r31, 0x08	; 8
    15e8:	85 81       	ldd	r24, Z+5	; 0x05
    15ea:	80 62       	ori	r24, 0x20	; 32
    15ec:	85 83       	std	Z+5, r24	; 0x05
    15ee:	08 95       	ret

000015f0 <handle_serial>:

LN2,C,SUP,T,BUF,X,RED,C,BLU,111,NXT,222,MAX,333,INT,100,PRES,H,TBUF,H,TRED,H,TBLU

------------------------------------------------------------------------------*/
void handle_serial(void)
{
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	c3 5a       	subi	r28, 0xA3	; 163
    160a:	d1 09       	sbc	r29, r1
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	de bf       	out	0x3e, r29	; 62

	const char fmt0[] = "%c%c%c%c,%d,NXT,%d,MAX,%d,INT,%d,PRES,%c,TBUF,%c,TRED,%c,TBLU\r";
    1610:	8f e3       	ldi	r24, 0x3F	; 63
    1612:	e1 ee       	ldi	r30, 0xE1	; 225
    1614:	f4 e6       	ldi	r31, 0x64	; 100
    1616:	de 01       	movw	r26, r28
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	01 90       	ld	r0, Z+
    161c:	0d 92       	st	X+, r0
    161e:	8a 95       	dec	r24
    1620:	e1 f7       	brne	.-8      	; 0x161a <handle_serial+0x2a>
	char strbuf[100], supvalve, bufvalve, redvalve, bluvalve, bufther, redther, bluther;
	uint8_t nextfill, maxopen, fillint, pressure;

	recv0_buf.done = FALSE;
    1622:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
    1626:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    162a:	84 ff       	sbrs	r24, 4
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <handle_serial+0x48>
		supvalve = 'O';
    162e:	0f 2e       	mov	r0, r31
    1630:	ff e4       	ldi	r31, 0x4F	; 79
    1632:	ff 2e       	mov	r15, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <handle_serial+0x50>
	} else {
		supvalve = 'C';
    1638:	0f 2e       	mov	r0, r31
    163a:	f3 e4       	ldi	r31, 0x43	; 67
    163c:	ff 2e       	mov	r15, r31
    163e:	f0 2d       	mov	r31, r0
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
    1640:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
    1644:	81 11       	cpse	r24, r1
    1646:	09 c0       	rjmp	.+18     	; 0x165a <handle_serial+0x6a>
		bufvalve = 'T';
	} else if (BUFVALVEOPEN) {
    1648:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    164c:	85 ff       	sbrs	r24, 5
    164e:	0a c0       	rjmp	.+20     	; 0x1664 <handle_serial+0x74>
		bufvalve = 'O';
    1650:	0f 2e       	mov	r0, r31
    1652:	ff e4       	ldi	r31, 0x4F	; 79
    1654:	ef 2e       	mov	r14, r31
    1656:	f0 2d       	mov	r31, r0
    1658:	09 c0       	rjmp	.+18     	; 0x166c <handle_serial+0x7c>
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
		bufvalve = 'T';
    165a:	0f 2e       	mov	r0, r31
    165c:	f4 e5       	ldi	r31, 0x54	; 84
    165e:	ef 2e       	mov	r14, r31
    1660:	f0 2d       	mov	r31, r0
    1662:	04 c0       	rjmp	.+8      	; 0x166c <handle_serial+0x7c>
	} else if (BUFVALVEOPEN) {
		bufvalve = 'O';
	} else {
		bufvalve = 'C';
    1664:	0f 2e       	mov	r0, r31
    1666:	f3 e4       	ldi	r31, 0x43	; 67
    1668:	ef 2e       	mov	r14, r31
    166a:	f0 2d       	mov	r31, r0
	}

	// Red CCD vent valve
	if (!REDENABLED) {
    166c:	8d e0       	ldi	r24, 0x0D	; 13
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
    1674:	88 23       	and	r24, r24
    1676:	69 f0       	breq	.+26     	; 0x1692 <handle_serial+0xa2>
		redvalve = 'X';
	} else if (status.maxopen_RED) {
    1678:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
    167c:	81 11       	cpse	r24, r1
    167e:	0e c0       	rjmp	.+28     	; 0x169c <handle_serial+0xac>
		redvalve = 'T';
	} else if (REDVALVEOPEN) {
    1680:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1684:	86 ff       	sbrs	r24, 6
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <handle_serial+0xb6>
		redvalve = 'O';
    1688:	0f 2e       	mov	r0, r31
    168a:	ff e4       	ldi	r31, 0x4F	; 79
    168c:	df 2e       	mov	r13, r31
    168e:	f0 2d       	mov	r31, r0
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <handle_serial+0xbe>
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
		redvalve = 'X';
    1692:	0f 2e       	mov	r0, r31
    1694:	f8 e5       	ldi	r31, 0x58	; 88
    1696:	df 2e       	mov	r13, r31
    1698:	f0 2d       	mov	r31, r0
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <handle_serial+0xbe>
	} else if (status.maxopen_RED) {
		redvalve = 'T';
    169c:	0f 2e       	mov	r0, r31
    169e:	f4 e5       	ldi	r31, 0x54	; 84
    16a0:	df 2e       	mov	r13, r31
    16a2:	f0 2d       	mov	r31, r0
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <handle_serial+0xbe>
	} else if (REDVALVEOPEN) {
		redvalve = 'O';
	} else {
		redvalve = 'C';
    16a6:	0f 2e       	mov	r0, r31
    16a8:	f3 e4       	ldi	r31, 0x43	; 67
    16aa:	df 2e       	mov	r13, r31
    16ac:	f0 2d       	mov	r31, r0
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
    16ae:	8c e0       	ldi	r24, 0x0C	; 12
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
    16b6:	88 23       	and	r24, r24
    16b8:	69 f0       	breq	.+26     	; 0x16d4 <handle_serial+0xe4>
		bluvalve = 'X';
	} else if (status.maxopen_BLU) {
    16ba:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
    16be:	81 11       	cpse	r24, r1
    16c0:	0e c0       	rjmp	.+28     	; 0x16de <handle_serial+0xee>
		bluvalve = 'T';
	} else if (BLUVALVEOPEN) {
    16c2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    16c6:	88 23       	and	r24, r24
    16c8:	7c f4       	brge	.+30     	; 0x16e8 <handle_serial+0xf8>
		bluvalve = 'O';
    16ca:	0f 2e       	mov	r0, r31
    16cc:	ff e4       	ldi	r31, 0x4F	; 79
    16ce:	af 2e       	mov	r10, r31
    16d0:	f0 2d       	mov	r31, r0
    16d2:	0e c0       	rjmp	.+28     	; 0x16f0 <handle_serial+0x100>
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
		bluvalve = 'X';
    16d4:	0f 2e       	mov	r0, r31
    16d6:	f8 e5       	ldi	r31, 0x58	; 88
    16d8:	af 2e       	mov	r10, r31
    16da:	f0 2d       	mov	r31, r0
    16dc:	09 c0       	rjmp	.+18     	; 0x16f0 <handle_serial+0x100>
	} else if (status.maxopen_BLU) {
		bluvalve = 'T';
    16de:	0f 2e       	mov	r0, r31
    16e0:	f4 e5       	ldi	r31, 0x54	; 84
    16e2:	af 2e       	mov	r10, r31
    16e4:	f0 2d       	mov	r31, r0
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <handle_serial+0x100>
	} else if (BLUVALVEOPEN) {
		bluvalve = 'O';
	} else {
		bluvalve = 'C';
    16e8:	0f 2e       	mov	r0, r31
    16ea:	f3 e4       	ldi	r31, 0x43	; 67
    16ec:	af 2e       	mov	r10, r31
    16ee:	f0 2d       	mov	r31, r0
	}

	// Fill interval
	fillint = FILLINTERVAL;		// Read from EEPROM
    16f0:	8a e0       	ldi	r24, 0x0A	; 10
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>
    16f8:	b8 2e       	mov	r11, r24

	// Next fill in
	nextfill = status.next_fill;
    16fa:	07 e0       	ldi	r16, 0x07	; 7
    16fc:	18 e2       	ldi	r17, 0x28	; 40
    16fe:	f8 01       	movw	r30, r16
    1700:	c5 88       	ldd	r12, Z+21	; 0x15

	// Max open time
	maxopen = MAXOPENTIME;		// Read from EEPROM
    1702:	8b e0       	ldi	r24, 0x0B	; 11
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_read_byte>

	// Pressure
	pressure = status.pressure;
    170a:	f8 01       	movw	r30, r16
    170c:	92 8d       	ldd	r25, Z+26	; 0x1a

	// BUF thermistor
	if (BUFTHERMWARM) {
    170e:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1712:	22 ff       	sbrs	r18, 2
    1714:	02 c0       	rjmp	.+4      	; 0x171a <handle_serial+0x12a>
		bufther = 'H';
    1716:	28 e4       	ldi	r18, 0x48	; 72
    1718:	01 c0       	rjmp	.+2      	; 0x171c <handle_serial+0x12c>
	} else {
		bufther = 'C';
    171a:	23 e4       	ldi	r18, 0x43	; 67
	}

	// Red thermistor
	if (REDTHERMWARM) {
    171c:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1720:	31 ff       	sbrs	r19, 1
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <handle_serial+0x138>
		redther = 'H';
    1724:	38 e4       	ldi	r19, 0x48	; 72
    1726:	01 c0       	rjmp	.+2      	; 0x172a <handle_serial+0x13a>
	} else {
		redther = 'C';
    1728:	33 e4       	ldi	r19, 0x43	; 67
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
    172a:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    172e:	40 ff       	sbrs	r20, 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <handle_serial+0x146>
		bluther = 'H';
    1732:	48 e4       	ldi	r20, 0x48	; 72
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <handle_serial+0x148>
	} else {
		bluther = 'C';
    1736:	43 e4       	ldi	r20, 0x43	; 67
	}

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
    1738:	1f 92       	push	r1
    173a:	4f 93       	push	r20
    173c:	1f 92       	push	r1
    173e:	3f 93       	push	r19
    1740:	1f 92       	push	r1
    1742:	2f 93       	push	r18
    1744:	1f 92       	push	r1
    1746:	9f 93       	push	r25
    1748:	1f 92       	push	r1
    174a:	bf 92       	push	r11
    174c:	1f 92       	push	r1
    174e:	8f 93       	push	r24
    1750:	1f 92       	push	r1
    1752:	cf 92       	push	r12
    1754:	1f 92       	push	r1
    1756:	af 92       	push	r10
    1758:	1f 92       	push	r1
    175a:	df 92       	push	r13
    175c:	1f 92       	push	r1
    175e:	ef 92       	push	r14
    1760:	1f 92       	push	r1
    1762:	ff 92       	push	r15
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	9f 93       	push	r25
    176a:	8f 93       	push	r24
    176c:	cf 96       	adiw	r24, 0x3f	; 63
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <sprintf>
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(1);					// 1 ms ticks
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 21 0a 	call	0x1442	; 0x1442 <start_TCB0>
	while (!send0_buf.done) {
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <handle_serial+0x1a4>
		if (ticks_TCB0 > 1000) {	// See timers.h
    1784:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1788:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    178c:	89 3e       	cpi	r24, 0xE9	; 233
    178e:	93 40       	sbci	r25, 0x03	; 3
    1790:	90 f4       	brcc	.+36     	; 0x17b6 <handle_serial+0x1c6>
			return;
		}
		asm("nop");
    1792:	00 00       	nop

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(1);					// 1 ms ticks
	while (!send0_buf.done) {
    1794:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <send0_buf+0xff>
    1798:	88 23       	and	r24, r24
    179a:	a1 f3       	breq	.-24     	; 0x1784 <handle_serial+0x194>
			return;
		}
		asm("nop");
	}

	send_USART((uint8_t*) strbuf, strlen(strbuf));
    179c:	ce 01       	movw	r24, r28
    179e:	80 5c       	subi	r24, 0xC0	; 192
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	fc 01       	movw	r30, r24
    17a4:	01 90       	ld	r0, Z+
    17a6:	00 20       	and	r0, r0
    17a8:	e9 f7       	brne	.-6      	; 0x17a4 <handle_serial+0x1b4>
    17aa:	31 97       	sbiw	r30, 0x01	; 1
    17ac:	bf 01       	movw	r22, r30
    17ae:	68 1b       	sub	r22, r24
    17b0:	79 0b       	sbc	r23, r25
    17b2:	0e 94 df 0a 	call	0x15be	; 0x15be <send_USART>

}
    17b6:	cd 55       	subi	r28, 0x5D	; 93
    17b8:	df 4f       	sbci	r29, 0xFF	; 255
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	08 95       	ret

000017d4 <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	8f 93       	push	r24
    17e0:	9f 93       	push	r25
    17e2:	af 93       	push	r26
    17e4:	bf 93       	push	r27
    17e6:	ef 93       	push	r30
    17e8:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    17ea:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    17ee:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <recv0_buf+0x101>
    17f2:	9f 3f       	cpi	r25, 0xFF	; 255
    17f4:	b1 f0       	breq	.+44     	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
		if ((char) c == '\r') {
    17f6:	8d 30       	cpi	r24, 0x0D	; 13
    17f8:	51 f4       	brne	.+20     	; 0x180e <__DATA_REGION_LENGTH__+0xe>
			recv0_buf.data[recv0_buf.length] = '\0';
    17fa:	e0 91 2c 29 	lds	r30, 0x292C	; 0x80292c <recv0_buf+0x101>
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	e5 5d       	subi	r30, 0xD5	; 213
    1802:	f7 4d       	sbci	r31, 0xD7	; 215
    1804:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <recv0_buf+0xff>
    180c:	0a c0       	rjmp	.+20     	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    180e:	ac e2       	ldi	r26, 0x2C	; 44
    1810:	b9 e2       	ldi	r27, 0x29	; 41
    1812:	ec 91       	ld	r30, X
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	9e 0f       	add	r25, r30
    1818:	9c 93       	st	X, r25
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	e5 5d       	subi	r30, 0xD5	; 213
    181e:	f7 4d       	sbci	r31, 0xD7	; 215
    1820:	80 83       	st	Z, r24
		}
	}
}
    1822:	ff 91       	pop	r31
    1824:	ef 91       	pop	r30
    1826:	bf 91       	pop	r27
    1828:	af 91       	pop	r26
    182a:	9f 91       	pop	r25
    182c:	8f 91       	pop	r24
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    1852:	c0 e0       	ldi	r28, 0x00	; 0
    1854:	d8 e0       	ldi	r29, 0x08	; 8
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	8f 7d       	andi	r24, 0xDF	; 223
    185a:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    185c:	ad e2       	ldi	r26, 0x2D	; 45
    185e:	ba e2       	ldi	r27, 0x2A	; 42
    1860:	ec 91       	ld	r30, X
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8e 0f       	add	r24, r30
    1866:	8c 93       	st	X, r24
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	e3 5d       	subi	r30, 0xD3	; 211
    186c:	f6 4d       	sbci	r31, 0xD6	; 214
    186e:	80 81       	ld	r24, Z
    1870:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    1872:	90 91 2e 2a 	lds	r25, 0x2A2E	; 0x802a2e <send0_buf+0x101>
    1876:	8c 91       	ld	r24, X
    1878:	98 13       	cpse	r25, r24
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    1882:	05 c0       	rjmp	.+10     	; 0x188e <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    1884:	e0 e0       	ldi	r30, 0x00	; 0
    1886:	f8 e0       	ldi	r31, 0x08	; 8
    1888:	85 81       	ldd	r24, Z+5	; 0x05
    188a:	80 62       	ori	r24, 0x20	; 32
    188c:	85 83       	std	Z+5, r24	; 0x05
	}
}
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <__subsf3>:
    18a8:	50 58       	subi	r21, 0x80	; 128

000018aa <__addsf3>:
    18aa:	bb 27       	eor	r27, r27
    18ac:	aa 27       	eor	r26, r26
    18ae:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__addsf3x>
    18b2:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__fp_round>
    18b6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_pscA>
    18ba:	38 f0       	brcs	.+14     	; 0x18ca <__addsf3+0x20>
    18bc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscB>
    18c0:	20 f0       	brcs	.+8      	; 0x18ca <__addsf3+0x20>
    18c2:	39 f4       	brne	.+14     	; 0x18d2 <__addsf3+0x28>
    18c4:	9f 3f       	cpi	r25, 0xFF	; 255
    18c6:	19 f4       	brne	.+6      	; 0x18ce <__addsf3+0x24>
    18c8:	26 f4       	brtc	.+8      	; 0x18d2 <__addsf3+0x28>
    18ca:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_nan>
    18ce:	0e f4       	brtc	.+2      	; 0x18d2 <__addsf3+0x28>
    18d0:	e0 95       	com	r30
    18d2:	e7 fb       	bst	r30, 7
    18d4:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_inf>

000018d8 <__addsf3x>:
    18d8:	e9 2f       	mov	r30, r25
    18da:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_split3>
    18de:	58 f3       	brcs	.-42     	; 0x18b6 <__addsf3+0xc>
    18e0:	ba 17       	cp	r27, r26
    18e2:	62 07       	cpc	r22, r18
    18e4:	73 07       	cpc	r23, r19
    18e6:	84 07       	cpc	r24, r20
    18e8:	95 07       	cpc	r25, r21
    18ea:	20 f0       	brcs	.+8      	; 0x18f4 <__addsf3x+0x1c>
    18ec:	79 f4       	brne	.+30     	; 0x190c <__addsf3x+0x34>
    18ee:	a6 f5       	brtc	.+104    	; 0x1958 <__addsf3x+0x80>
    18f0:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__fp_zero>
    18f4:	0e f4       	brtc	.+2      	; 0x18f8 <__addsf3x+0x20>
    18f6:	e0 95       	com	r30
    18f8:	0b 2e       	mov	r0, r27
    18fa:	ba 2f       	mov	r27, r26
    18fc:	a0 2d       	mov	r26, r0
    18fe:	0b 01       	movw	r0, r22
    1900:	b9 01       	movw	r22, r18
    1902:	90 01       	movw	r18, r0
    1904:	0c 01       	movw	r0, r24
    1906:	ca 01       	movw	r24, r20
    1908:	a0 01       	movw	r20, r0
    190a:	11 24       	eor	r1, r1
    190c:	ff 27       	eor	r31, r31
    190e:	59 1b       	sub	r21, r25
    1910:	99 f0       	breq	.+38     	; 0x1938 <__addsf3x+0x60>
    1912:	59 3f       	cpi	r21, 0xF9	; 249
    1914:	50 f4       	brcc	.+20     	; 0x192a <__addsf3x+0x52>
    1916:	50 3e       	cpi	r21, 0xE0	; 224
    1918:	68 f1       	brcs	.+90     	; 0x1974 <__addsf3x+0x9c>
    191a:	1a 16       	cp	r1, r26
    191c:	f0 40       	sbci	r31, 0x00	; 0
    191e:	a2 2f       	mov	r26, r18
    1920:	23 2f       	mov	r18, r19
    1922:	34 2f       	mov	r19, r20
    1924:	44 27       	eor	r20, r20
    1926:	58 5f       	subi	r21, 0xF8	; 248
    1928:	f3 cf       	rjmp	.-26     	; 0x1910 <__addsf3x+0x38>
    192a:	46 95       	lsr	r20
    192c:	37 95       	ror	r19
    192e:	27 95       	ror	r18
    1930:	a7 95       	ror	r26
    1932:	f0 40       	sbci	r31, 0x00	; 0
    1934:	53 95       	inc	r21
    1936:	c9 f7       	brne	.-14     	; 0x192a <__addsf3x+0x52>
    1938:	7e f4       	brtc	.+30     	; 0x1958 <__addsf3x+0x80>
    193a:	1f 16       	cp	r1, r31
    193c:	ba 0b       	sbc	r27, r26
    193e:	62 0b       	sbc	r22, r18
    1940:	73 0b       	sbc	r23, r19
    1942:	84 0b       	sbc	r24, r20
    1944:	ba f0       	brmi	.+46     	; 0x1974 <__addsf3x+0x9c>
    1946:	91 50       	subi	r25, 0x01	; 1
    1948:	a1 f0       	breq	.+40     	; 0x1972 <__addsf3x+0x9a>
    194a:	ff 0f       	add	r31, r31
    194c:	bb 1f       	adc	r27, r27
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	c2 f7       	brpl	.-16     	; 0x1946 <__addsf3x+0x6e>
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <__addsf3x+0x9c>
    1958:	ba 0f       	add	r27, r26
    195a:	62 1f       	adc	r22, r18
    195c:	73 1f       	adc	r23, r19
    195e:	84 1f       	adc	r24, r20
    1960:	48 f4       	brcc	.+18     	; 0x1974 <__addsf3x+0x9c>
    1962:	87 95       	ror	r24
    1964:	77 95       	ror	r23
    1966:	67 95       	ror	r22
    1968:	b7 95       	ror	r27
    196a:	f7 95       	ror	r31
    196c:	9e 3f       	cpi	r25, 0xFE	; 254
    196e:	08 f0       	brcs	.+2      	; 0x1972 <__addsf3x+0x9a>
    1970:	b0 cf       	rjmp	.-160    	; 0x18d2 <__addsf3+0x28>
    1972:	93 95       	inc	r25
    1974:	88 0f       	add	r24, r24
    1976:	08 f0       	brcs	.+2      	; 0x197a <__addsf3x+0xa2>
    1978:	99 27       	eor	r25, r25
    197a:	ee 0f       	add	r30, r30
    197c:	97 95       	ror	r25
    197e:	87 95       	ror	r24
    1980:	08 95       	ret

00001982 <__cmpsf2>:
    1982:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fp_cmp>
    1986:	08 f4       	brcc	.+2      	; 0x198a <__cmpsf2+0x8>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	08 95       	ret

0000198c <__divsf3>:
    198c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__divsf3x>
    1990:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__fp_round>
    1994:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscB>
    1998:	58 f0       	brcs	.+22     	; 0x19b0 <__divsf3+0x24>
    199a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_pscA>
    199e:	40 f0       	brcs	.+16     	; 0x19b0 <__divsf3+0x24>
    19a0:	29 f4       	brne	.+10     	; 0x19ac <__divsf3+0x20>
    19a2:	5f 3f       	cpi	r21, 0xFF	; 255
    19a4:	29 f0       	breq	.+10     	; 0x19b0 <__divsf3+0x24>
    19a6:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_inf>
    19aa:	51 11       	cpse	r21, r1
    19ac:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__fp_szero>
    19b0:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_nan>

000019b4 <__divsf3x>:
    19b4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_split3>
    19b8:	68 f3       	brcs	.-38     	; 0x1994 <__divsf3+0x8>

000019ba <__divsf3_pse>:
    19ba:	99 23       	and	r25, r25
    19bc:	b1 f3       	breq	.-20     	; 0x19aa <__divsf3+0x1e>
    19be:	55 23       	and	r21, r21
    19c0:	91 f3       	breq	.-28     	; 0x19a6 <__divsf3+0x1a>
    19c2:	95 1b       	sub	r25, r21
    19c4:	55 0b       	sbc	r21, r21
    19c6:	bb 27       	eor	r27, r27
    19c8:	aa 27       	eor	r26, r26
    19ca:	62 17       	cp	r22, r18
    19cc:	73 07       	cpc	r23, r19
    19ce:	84 07       	cpc	r24, r20
    19d0:	38 f0       	brcs	.+14     	; 0x19e0 <__divsf3_pse+0x26>
    19d2:	9f 5f       	subi	r25, 0xFF	; 255
    19d4:	5f 4f       	sbci	r21, 0xFF	; 255
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	44 1f       	adc	r20, r20
    19dc:	aa 1f       	adc	r26, r26
    19de:	a9 f3       	breq	.-22     	; 0x19ca <__divsf3_pse+0x10>
    19e0:	35 d0       	rcall	.+106    	; 0x1a4c <__divsf3_pse+0x92>
    19e2:	0e 2e       	mov	r0, r30
    19e4:	3a f0       	brmi	.+14     	; 0x19f4 <__divsf3_pse+0x3a>
    19e6:	e0 e8       	ldi	r30, 0x80	; 128
    19e8:	32 d0       	rcall	.+100    	; 0x1a4e <__divsf3_pse+0x94>
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	50 40       	sbci	r21, 0x00	; 0
    19ee:	e6 95       	lsr	r30
    19f0:	00 1c       	adc	r0, r0
    19f2:	ca f7       	brpl	.-14     	; 0x19e6 <__divsf3_pse+0x2c>
    19f4:	2b d0       	rcall	.+86     	; 0x1a4c <__divsf3_pse+0x92>
    19f6:	fe 2f       	mov	r31, r30
    19f8:	29 d0       	rcall	.+82     	; 0x1a4c <__divsf3_pse+0x92>
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	bb 1f       	adc	r27, r27
    1a02:	26 17       	cp	r18, r22
    1a04:	37 07       	cpc	r19, r23
    1a06:	48 07       	cpc	r20, r24
    1a08:	ab 07       	cpc	r26, r27
    1a0a:	b0 e8       	ldi	r27, 0x80	; 128
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <__divsf3_pse+0x56>
    1a0e:	bb 0b       	sbc	r27, r27
    1a10:	80 2d       	mov	r24, r0
    1a12:	bf 01       	movw	r22, r30
    1a14:	ff 27       	eor	r31, r31
    1a16:	93 58       	subi	r25, 0x83	; 131
    1a18:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1a:	3a f0       	brmi	.+14     	; 0x1a2a <__divsf3_pse+0x70>
    1a1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1e:	51 05       	cpc	r21, r1
    1a20:	78 f0       	brcs	.+30     	; 0x1a40 <__divsf3_pse+0x86>
    1a22:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_inf>
    1a26:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__fp_szero>
    1a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2c:	e4 f3       	brlt	.-8      	; 0x1a26 <__divsf3_pse+0x6c>
    1a2e:	98 3e       	cpi	r25, 0xE8	; 232
    1a30:	d4 f3       	brlt	.-12     	; 0x1a26 <__divsf3_pse+0x6c>
    1a32:	86 95       	lsr	r24
    1a34:	77 95       	ror	r23
    1a36:	67 95       	ror	r22
    1a38:	b7 95       	ror	r27
    1a3a:	f7 95       	ror	r31
    1a3c:	9f 5f       	subi	r25, 0xFF	; 255
    1a3e:	c9 f7       	brne	.-14     	; 0x1a32 <__divsf3_pse+0x78>
    1a40:	88 0f       	add	r24, r24
    1a42:	91 1d       	adc	r25, r1
    1a44:	96 95       	lsr	r25
    1a46:	87 95       	ror	r24
    1a48:	97 f9       	bld	r25, 7
    1a4a:	08 95       	ret
    1a4c:	e1 e0       	ldi	r30, 0x01	; 1
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	bb 1f       	adc	r27, r27
    1a56:	62 17       	cp	r22, r18
    1a58:	73 07       	cpc	r23, r19
    1a5a:	84 07       	cpc	r24, r20
    1a5c:	ba 07       	cpc	r27, r26
    1a5e:	20 f0       	brcs	.+8      	; 0x1a68 <__divsf3_pse+0xae>
    1a60:	62 1b       	sub	r22, r18
    1a62:	73 0b       	sbc	r23, r19
    1a64:	84 0b       	sbc	r24, r20
    1a66:	ba 0b       	sbc	r27, r26
    1a68:	ee 1f       	adc	r30, r30
    1a6a:	88 f7       	brcc	.-30     	; 0x1a4e <__divsf3_pse+0x94>
    1a6c:	e0 95       	com	r30
    1a6e:	08 95       	ret

00001a70 <__fixunssfsi>:
    1a70:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__fp_splitA>
    1a74:	88 f0       	brcs	.+34     	; 0x1a98 <__fixunssfsi+0x28>
    1a76:	9f 57       	subi	r25, 0x7F	; 127
    1a78:	98 f0       	brcs	.+38     	; 0x1aa0 <__fixunssfsi+0x30>
    1a7a:	b9 2f       	mov	r27, r25
    1a7c:	99 27       	eor	r25, r25
    1a7e:	b7 51       	subi	r27, 0x17	; 23
    1a80:	b0 f0       	brcs	.+44     	; 0x1aae <__fixunssfsi+0x3e>
    1a82:	e1 f0       	breq	.+56     	; 0x1abc <__fixunssfsi+0x4c>
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	1a f0       	brmi	.+6      	; 0x1a94 <__fixunssfsi+0x24>
    1a8e:	ba 95       	dec	r27
    1a90:	c9 f7       	brne	.-14     	; 0x1a84 <__fixunssfsi+0x14>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <__fixunssfsi+0x4c>
    1a94:	b1 30       	cpi	r27, 0x01	; 1
    1a96:	91 f0       	breq	.+36     	; 0x1abc <__fixunssfsi+0x4c>
    1a98:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__fp_zero>
    1a9c:	b1 e0       	ldi	r27, 0x01	; 1
    1a9e:	08 95       	ret
    1aa0:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__fp_zero>
    1aa4:	67 2f       	mov	r22, r23
    1aa6:	78 2f       	mov	r23, r24
    1aa8:	88 27       	eor	r24, r24
    1aaa:	b8 5f       	subi	r27, 0xF8	; 248
    1aac:	39 f0       	breq	.+14     	; 0x1abc <__fixunssfsi+0x4c>
    1aae:	b9 3f       	cpi	r27, 0xF9	; 249
    1ab0:	cc f3       	brlt	.-14     	; 0x1aa4 <__fixunssfsi+0x34>
    1ab2:	86 95       	lsr	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b3 95       	inc	r27
    1aba:	d9 f7       	brne	.-10     	; 0x1ab2 <__fixunssfsi+0x42>
    1abc:	3e f4       	brtc	.+14     	; 0x1acc <__fixunssfsi+0x5c>
    1abe:	90 95       	com	r25
    1ac0:	80 95       	com	r24
    1ac2:	70 95       	com	r23
    1ac4:	61 95       	neg	r22
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	08 95       	ret

00001ace <__floatunsisf>:
    1ace:	e8 94       	clt
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <__floatsisf+0x12>

00001ad2 <__floatsisf>:
    1ad2:	97 fb       	bst	r25, 7
    1ad4:	3e f4       	brtc	.+14     	; 0x1ae4 <__floatsisf+0x12>
    1ad6:	90 95       	com	r25
    1ad8:	80 95       	com	r24
    1ada:	70 95       	com	r23
    1adc:	61 95       	neg	r22
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	99 23       	and	r25, r25
    1ae6:	a9 f0       	breq	.+42     	; 0x1b12 <__floatsisf+0x40>
    1ae8:	f9 2f       	mov	r31, r25
    1aea:	96 e9       	ldi	r25, 0x96	; 150
    1aec:	bb 27       	eor	r27, r27
    1aee:	93 95       	inc	r25
    1af0:	f6 95       	lsr	r31
    1af2:	87 95       	ror	r24
    1af4:	77 95       	ror	r23
    1af6:	67 95       	ror	r22
    1af8:	b7 95       	ror	r27
    1afa:	f1 11       	cpse	r31, r1
    1afc:	f8 cf       	rjmp	.-16     	; 0x1aee <__floatsisf+0x1c>
    1afe:	fa f4       	brpl	.+62     	; 0x1b3e <__floatsisf+0x6c>
    1b00:	bb 0f       	add	r27, r27
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <__floatsisf+0x36>
    1b04:	60 ff       	sbrs	r22, 0
    1b06:	1b c0       	rjmp	.+54     	; 0x1b3e <__floatsisf+0x6c>
    1b08:	6f 5f       	subi	r22, 0xFF	; 255
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b10:	16 c0       	rjmp	.+44     	; 0x1b3e <__floatsisf+0x6c>
    1b12:	88 23       	and	r24, r24
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <__floatsisf+0x48>
    1b16:	96 e9       	ldi	r25, 0x96	; 150
    1b18:	11 c0       	rjmp	.+34     	; 0x1b3c <__floatsisf+0x6a>
    1b1a:	77 23       	and	r23, r23
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <__floatsisf+0x54>
    1b1e:	9e e8       	ldi	r25, 0x8E	; 142
    1b20:	87 2f       	mov	r24, r23
    1b22:	76 2f       	mov	r23, r22
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <__floatsisf+0x5e>
    1b26:	66 23       	and	r22, r22
    1b28:	71 f0       	breq	.+28     	; 0x1b46 <__floatsisf+0x74>
    1b2a:	96 e8       	ldi	r25, 0x86	; 134
    1b2c:	86 2f       	mov	r24, r22
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	2a f0       	brmi	.+10     	; 0x1b3e <__floatsisf+0x6c>
    1b34:	9a 95       	dec	r25
    1b36:	66 0f       	add	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	88 1f       	adc	r24, r24
    1b3c:	da f7       	brpl	.-10     	; 0x1b34 <__floatsisf+0x62>
    1b3e:	88 0f       	add	r24, r24
    1b40:	96 95       	lsr	r25
    1b42:	87 95       	ror	r24
    1b44:	97 f9       	bld	r25, 7
    1b46:	08 95       	ret

00001b48 <__fp_cmp>:
    1b48:	99 0f       	add	r25, r25
    1b4a:	00 08       	sbc	r0, r0
    1b4c:	55 0f       	add	r21, r21
    1b4e:	aa 0b       	sbc	r26, r26
    1b50:	e0 e8       	ldi	r30, 0x80	; 128
    1b52:	fe ef       	ldi	r31, 0xFE	; 254
    1b54:	16 16       	cp	r1, r22
    1b56:	17 06       	cpc	r1, r23
    1b58:	e8 07       	cpc	r30, r24
    1b5a:	f9 07       	cpc	r31, r25
    1b5c:	c0 f0       	brcs	.+48     	; 0x1b8e <__fp_cmp+0x46>
    1b5e:	12 16       	cp	r1, r18
    1b60:	13 06       	cpc	r1, r19
    1b62:	e4 07       	cpc	r30, r20
    1b64:	f5 07       	cpc	r31, r21
    1b66:	98 f0       	brcs	.+38     	; 0x1b8e <__fp_cmp+0x46>
    1b68:	62 1b       	sub	r22, r18
    1b6a:	73 0b       	sbc	r23, r19
    1b6c:	84 0b       	sbc	r24, r20
    1b6e:	95 0b       	sbc	r25, r21
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <__fp_cmp+0x38>
    1b72:	0a 26       	eor	r0, r26
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <__fp_cmp+0x46>
    1b76:	23 2b       	or	r18, r19
    1b78:	24 2b       	or	r18, r20
    1b7a:	25 2b       	or	r18, r21
    1b7c:	21 f4       	brne	.+8      	; 0x1b86 <__fp_cmp+0x3e>
    1b7e:	08 95       	ret
    1b80:	0a 26       	eor	r0, r26
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <__fp_cmp+0x3e>
    1b84:	a1 40       	sbci	r26, 0x01	; 1
    1b86:	a6 95       	lsr	r26
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	81 1d       	adc	r24, r1
    1b8c:	81 1d       	adc	r24, r1
    1b8e:	08 95       	ret

00001b90 <__fp_inf>:
    1b90:	97 f9       	bld	r25, 7
    1b92:	9f 67       	ori	r25, 0x7F	; 127
    1b94:	80 e8       	ldi	r24, 0x80	; 128
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	08 95       	ret

00001b9c <__fp_nan>:
    1b9c:	9f ef       	ldi	r25, 0xFF	; 255
    1b9e:	80 ec       	ldi	r24, 0xC0	; 192
    1ba0:	08 95       	ret

00001ba2 <__fp_pscA>:
    1ba2:	00 24       	eor	r0, r0
    1ba4:	0a 94       	dec	r0
    1ba6:	16 16       	cp	r1, r22
    1ba8:	17 06       	cpc	r1, r23
    1baa:	18 06       	cpc	r1, r24
    1bac:	09 06       	cpc	r0, r25
    1bae:	08 95       	ret

00001bb0 <__fp_pscB>:
    1bb0:	00 24       	eor	r0, r0
    1bb2:	0a 94       	dec	r0
    1bb4:	12 16       	cp	r1, r18
    1bb6:	13 06       	cpc	r1, r19
    1bb8:	14 06       	cpc	r1, r20
    1bba:	05 06       	cpc	r0, r21
    1bbc:	08 95       	ret

00001bbe <__fp_round>:
    1bbe:	09 2e       	mov	r0, r25
    1bc0:	03 94       	inc	r0
    1bc2:	00 0c       	add	r0, r0
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <__fp_round+0xc>
    1bc6:	88 23       	and	r24, r24
    1bc8:	52 f0       	brmi	.+20     	; 0x1bde <__fp_round+0x20>
    1bca:	bb 0f       	add	r27, r27
    1bcc:	40 f4       	brcc	.+16     	; 0x1bde <__fp_round+0x20>
    1bce:	bf 2b       	or	r27, r31
    1bd0:	11 f4       	brne	.+4      	; 0x1bd6 <__fp_round+0x18>
    1bd2:	60 ff       	sbrs	r22, 0
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <__fp_round+0x20>
    1bd6:	6f 5f       	subi	r22, 0xFF	; 255
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	8f 4f       	sbci	r24, 0xFF	; 255
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	08 95       	ret

00001be0 <__fp_split3>:
    1be0:	57 fd       	sbrc	r21, 7
    1be2:	90 58       	subi	r25, 0x80	; 128
    1be4:	44 0f       	add	r20, r20
    1be6:	55 1f       	adc	r21, r21
    1be8:	59 f0       	breq	.+22     	; 0x1c00 <__fp_splitA+0x10>
    1bea:	5f 3f       	cpi	r21, 0xFF	; 255
    1bec:	71 f0       	breq	.+28     	; 0x1c0a <__fp_splitA+0x1a>
    1bee:	47 95       	ror	r20

00001bf0 <__fp_splitA>:
    1bf0:	88 0f       	add	r24, r24
    1bf2:	97 fb       	bst	r25, 7
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	61 f0       	breq	.+24     	; 0x1c10 <__fp_splitA+0x20>
    1bf8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bfa:	79 f0       	breq	.+30     	; 0x1c1a <__fp_splitA+0x2a>
    1bfc:	87 95       	ror	r24
    1bfe:	08 95       	ret
    1c00:	12 16       	cp	r1, r18
    1c02:	13 06       	cpc	r1, r19
    1c04:	14 06       	cpc	r1, r20
    1c06:	55 1f       	adc	r21, r21
    1c08:	f2 cf       	rjmp	.-28     	; 0x1bee <__fp_split3+0xe>
    1c0a:	46 95       	lsr	r20
    1c0c:	f1 df       	rcall	.-30     	; 0x1bf0 <__fp_splitA>
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <__fp_splitA+0x30>
    1c10:	16 16       	cp	r1, r22
    1c12:	17 06       	cpc	r1, r23
    1c14:	18 06       	cpc	r1, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	f1 cf       	rjmp	.-30     	; 0x1bfc <__fp_splitA+0xc>
    1c1a:	86 95       	lsr	r24
    1c1c:	71 05       	cpc	r23, r1
    1c1e:	61 05       	cpc	r22, r1
    1c20:	08 94       	sec
    1c22:	08 95       	ret

00001c24 <__fp_zero>:
    1c24:	e8 94       	clt

00001c26 <__fp_szero>:
    1c26:	bb 27       	eor	r27, r27
    1c28:	66 27       	eor	r22, r22
    1c2a:	77 27       	eor	r23, r23
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	97 f9       	bld	r25, 7
    1c30:	08 95       	ret

00001c32 <__mulsf3>:
    1c32:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3x>
    1c36:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__fp_round>
    1c3a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_pscA>
    1c3e:	38 f0       	brcs	.+14     	; 0x1c4e <__mulsf3+0x1c>
    1c40:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fp_pscB>
    1c44:	20 f0       	brcs	.+8      	; 0x1c4e <__mulsf3+0x1c>
    1c46:	95 23       	and	r25, r21
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <__mulsf3+0x1c>
    1c4a:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_inf>
    1c4e:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_nan>
    1c52:	11 24       	eor	r1, r1
    1c54:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__fp_szero>

00001c58 <__mulsf3x>:
    1c58:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_split3>
    1c5c:	70 f3       	brcs	.-36     	; 0x1c3a <__mulsf3+0x8>

00001c5e <__mulsf3_pse>:
    1c5e:	95 9f       	mul	r25, r21
    1c60:	c1 f3       	breq	.-16     	; 0x1c52 <__mulsf3+0x20>
    1c62:	95 0f       	add	r25, r21
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	55 1f       	adc	r21, r21
    1c68:	62 9f       	mul	r22, r18
    1c6a:	f0 01       	movw	r30, r0
    1c6c:	72 9f       	mul	r23, r18
    1c6e:	bb 27       	eor	r27, r27
    1c70:	f0 0d       	add	r31, r0
    1c72:	b1 1d       	adc	r27, r1
    1c74:	63 9f       	mul	r22, r19
    1c76:	aa 27       	eor	r26, r26
    1c78:	f0 0d       	add	r31, r0
    1c7a:	b1 1d       	adc	r27, r1
    1c7c:	aa 1f       	adc	r26, r26
    1c7e:	64 9f       	mul	r22, r20
    1c80:	66 27       	eor	r22, r22
    1c82:	b0 0d       	add	r27, r0
    1c84:	a1 1d       	adc	r26, r1
    1c86:	66 1f       	adc	r22, r22
    1c88:	82 9f       	mul	r24, r18
    1c8a:	22 27       	eor	r18, r18
    1c8c:	b0 0d       	add	r27, r0
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	62 1f       	adc	r22, r18
    1c92:	73 9f       	mul	r23, r19
    1c94:	b0 0d       	add	r27, r0
    1c96:	a1 1d       	adc	r26, r1
    1c98:	62 1f       	adc	r22, r18
    1c9a:	83 9f       	mul	r24, r19
    1c9c:	a0 0d       	add	r26, r0
    1c9e:	61 1d       	adc	r22, r1
    1ca0:	22 1f       	adc	r18, r18
    1ca2:	74 9f       	mul	r23, r20
    1ca4:	33 27       	eor	r19, r19
    1ca6:	a0 0d       	add	r26, r0
    1ca8:	61 1d       	adc	r22, r1
    1caa:	23 1f       	adc	r18, r19
    1cac:	84 9f       	mul	r24, r20
    1cae:	60 0d       	add	r22, r0
    1cb0:	21 1d       	adc	r18, r1
    1cb2:	82 2f       	mov	r24, r18
    1cb4:	76 2f       	mov	r23, r22
    1cb6:	6a 2f       	mov	r22, r26
    1cb8:	11 24       	eor	r1, r1
    1cba:	9f 57       	subi	r25, 0x7F	; 127
    1cbc:	50 40       	sbci	r21, 0x00	; 0
    1cbe:	9a f0       	brmi	.+38     	; 0x1ce6 <__mulsf3_pse+0x88>
    1cc0:	f1 f0       	breq	.+60     	; 0x1cfe <__mulsf3_pse+0xa0>
    1cc2:	88 23       	and	r24, r24
    1cc4:	4a f0       	brmi	.+18     	; 0x1cd8 <__mulsf3_pse+0x7a>
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	66 1f       	adc	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	91 50       	subi	r25, 0x01	; 1
    1cd4:	50 40       	sbci	r21, 0x00	; 0
    1cd6:	a9 f7       	brne	.-22     	; 0x1cc2 <__mulsf3_pse+0x64>
    1cd8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cda:	51 05       	cpc	r21, r1
    1cdc:	80 f0       	brcs	.+32     	; 0x1cfe <__mulsf3_pse+0xa0>
    1cde:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__fp_inf>
    1ce2:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__fp_szero>
    1ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce8:	e4 f3       	brlt	.-8      	; 0x1ce2 <__mulsf3_pse+0x84>
    1cea:	98 3e       	cpi	r25, 0xE8	; 232
    1cec:	d4 f3       	brlt	.-12     	; 0x1ce2 <__mulsf3_pse+0x84>
    1cee:	86 95       	lsr	r24
    1cf0:	77 95       	ror	r23
    1cf2:	67 95       	ror	r22
    1cf4:	b7 95       	ror	r27
    1cf6:	f7 95       	ror	r31
    1cf8:	e7 95       	ror	r30
    1cfa:	9f 5f       	subi	r25, 0xFF	; 255
    1cfc:	c1 f7       	brne	.-16     	; 0x1cee <__mulsf3_pse+0x90>
    1cfe:	fe 2b       	or	r31, r30
    1d00:	88 0f       	add	r24, r24
    1d02:	91 1d       	adc	r25, r1
    1d04:	96 95       	lsr	r25
    1d06:	87 95       	ror	r24
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret

00001d0c <__tablejump2__>:
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	ff 1f       	adc	r31, r31
    1d10:	05 90       	lpm	r0, Z+
    1d12:	f4 91       	lpm	r31, Z
    1d14:	e0 2d       	mov	r30, r0
    1d16:	09 94       	ijmp

00001d18 <strcat>:
    1d18:	fb 01       	movw	r30, r22
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	0d 90       	ld	r0, X+
    1d1e:	00 20       	and	r0, r0
    1d20:	e9 f7       	brne	.-6      	; 0x1d1c <strcat+0x4>
    1d22:	11 97       	sbiw	r26, 0x01	; 1
    1d24:	01 90       	ld	r0, Z+
    1d26:	0d 92       	st	X+, r0
    1d28:	00 20       	and	r0, r0
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <strcat+0xc>
    1d2c:	08 95       	ret

00001d2e <strcpy>:
    1d2e:	fb 01       	movw	r30, r22
    1d30:	dc 01       	movw	r26, r24
    1d32:	01 90       	ld	r0, Z+
    1d34:	0d 92       	st	X+, r0
    1d36:	00 20       	and	r0, r0
    1d38:	e1 f7       	brne	.-8      	; 0x1d32 <strcpy+0x4>
    1d3a:	08 95       	ret

00001d3c <sprintf>:
    1d3c:	ae e0       	ldi	r26, 0x0E	; 14
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e4 ea       	ldi	r30, 0xA4	; 164
    1d42:	fe e0       	ldi	r31, 0x0E	; 14
    1d44:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x1c>
    1d48:	0d 89       	ldd	r16, Y+21	; 0x15
    1d4a:	1e 89       	ldd	r17, Y+22	; 0x16
    1d4c:	86 e0       	ldi	r24, 0x06	; 6
    1d4e:	8c 83       	std	Y+4, r24	; 0x04
    1d50:	09 83       	std	Y+1, r16	; 0x01
    1d52:	1a 83       	std	Y+2, r17	; 0x02
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	9f e7       	ldi	r25, 0x7F	; 127
    1d58:	8d 83       	std	Y+5, r24	; 0x05
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	ae 01       	movw	r20, r28
    1d5e:	47 5e       	subi	r20, 0xE7	; 231
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	6f 89       	ldd	r22, Y+23	; 0x17
    1d64:	78 8d       	ldd	r23, Y+24	; 0x18
    1d66:	ce 01       	movw	r24, r28
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vfprintf>
    1d6e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d70:	f8 85       	ldd	r31, Y+8	; 0x08
    1d72:	e0 0f       	add	r30, r16
    1d74:	f1 1f       	adc	r31, r17
    1d76:	10 82       	st	Z, r1
    1d78:	2e 96       	adiw	r28, 0x0e	; 14
    1d7a:	e4 e0       	ldi	r30, 0x04	; 4
    1d7c:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__epilogue_restores__+0x1c>

00001d80 <vfprintf>:
    1d80:	ab e0       	ldi	r26, 0x0B	; 11
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	fe e0       	ldi	r31, 0x0E	; 14
    1d88:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__>
    1d8c:	6c 01       	movw	r12, r24
    1d8e:	7b 01       	movw	r14, r22
    1d90:	8a 01       	movw	r16, r20
    1d92:	fc 01       	movw	r30, r24
    1d94:	16 82       	std	Z+6, r1	; 0x06
    1d96:	17 82       	std	Z+7, r1	; 0x07
    1d98:	83 81       	ldd	r24, Z+3	; 0x03
    1d9a:	81 ff       	sbrs	r24, 1
    1d9c:	cc c1       	rjmp	.+920    	; 0x2136 <vfprintf+0x3b6>
    1d9e:	ce 01       	movw	r24, r28
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	3c 01       	movw	r6, r24
    1da4:	f6 01       	movw	r30, r12
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	f7 01       	movw	r30, r14
    1daa:	93 fd       	sbrc	r25, 3
    1dac:	85 91       	lpm	r24, Z+
    1dae:	93 ff       	sbrs	r25, 3
    1db0:	81 91       	ld	r24, Z+
    1db2:	7f 01       	movw	r14, r30
    1db4:	88 23       	and	r24, r24
    1db6:	09 f4       	brne	.+2      	; 0x1dba <vfprintf+0x3a>
    1db8:	ba c1       	rjmp	.+884    	; 0x212e <vfprintf+0x3ae>
    1dba:	85 32       	cpi	r24, 0x25	; 37
    1dbc:	39 f4       	brne	.+14     	; 0x1dcc <vfprintf+0x4c>
    1dbe:	93 fd       	sbrc	r25, 3
    1dc0:	85 91       	lpm	r24, Z+
    1dc2:	93 ff       	sbrs	r25, 3
    1dc4:	81 91       	ld	r24, Z+
    1dc6:	7f 01       	movw	r14, r30
    1dc8:	85 32       	cpi	r24, 0x25	; 37
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <vfprintf+0x56>
    1dcc:	b6 01       	movw	r22, r12
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    1dd4:	e7 cf       	rjmp	.-50     	; 0x1da4 <vfprintf+0x24>
    1dd6:	91 2c       	mov	r9, r1
    1dd8:	21 2c       	mov	r2, r1
    1dda:	31 2c       	mov	r3, r1
    1ddc:	ff e1       	ldi	r31, 0x1F	; 31
    1dde:	f3 15       	cp	r31, r3
    1de0:	d8 f0       	brcs	.+54     	; 0x1e18 <vfprintf+0x98>
    1de2:	8b 32       	cpi	r24, 0x2B	; 43
    1de4:	79 f0       	breq	.+30     	; 0x1e04 <vfprintf+0x84>
    1de6:	38 f4       	brcc	.+14     	; 0x1df6 <vfprintf+0x76>
    1de8:	80 32       	cpi	r24, 0x20	; 32
    1dea:	79 f0       	breq	.+30     	; 0x1e0a <vfprintf+0x8a>
    1dec:	83 32       	cpi	r24, 0x23	; 35
    1dee:	a1 f4       	brne	.+40     	; 0x1e18 <vfprintf+0x98>
    1df0:	23 2d       	mov	r18, r3
    1df2:	20 61       	ori	r18, 0x10	; 16
    1df4:	1d c0       	rjmp	.+58     	; 0x1e30 <vfprintf+0xb0>
    1df6:	8d 32       	cpi	r24, 0x2D	; 45
    1df8:	61 f0       	breq	.+24     	; 0x1e12 <vfprintf+0x92>
    1dfa:	80 33       	cpi	r24, 0x30	; 48
    1dfc:	69 f4       	brne	.+26     	; 0x1e18 <vfprintf+0x98>
    1dfe:	23 2d       	mov	r18, r3
    1e00:	21 60       	ori	r18, 0x01	; 1
    1e02:	16 c0       	rjmp	.+44     	; 0x1e30 <vfprintf+0xb0>
    1e04:	83 2d       	mov	r24, r3
    1e06:	82 60       	ori	r24, 0x02	; 2
    1e08:	38 2e       	mov	r3, r24
    1e0a:	e3 2d       	mov	r30, r3
    1e0c:	e4 60       	ori	r30, 0x04	; 4
    1e0e:	3e 2e       	mov	r3, r30
    1e10:	2a c0       	rjmp	.+84     	; 0x1e66 <vfprintf+0xe6>
    1e12:	f3 2d       	mov	r31, r3
    1e14:	f8 60       	ori	r31, 0x08	; 8
    1e16:	1d c0       	rjmp	.+58     	; 0x1e52 <vfprintf+0xd2>
    1e18:	37 fc       	sbrc	r3, 7
    1e1a:	2d c0       	rjmp	.+90     	; 0x1e76 <vfprintf+0xf6>
    1e1c:	20 ed       	ldi	r18, 0xD0	; 208
    1e1e:	28 0f       	add	r18, r24
    1e20:	2a 30       	cpi	r18, 0x0A	; 10
    1e22:	40 f0       	brcs	.+16     	; 0x1e34 <vfprintf+0xb4>
    1e24:	8e 32       	cpi	r24, 0x2E	; 46
    1e26:	b9 f4       	brne	.+46     	; 0x1e56 <vfprintf+0xd6>
    1e28:	36 fc       	sbrc	r3, 6
    1e2a:	81 c1       	rjmp	.+770    	; 0x212e <vfprintf+0x3ae>
    1e2c:	23 2d       	mov	r18, r3
    1e2e:	20 64       	ori	r18, 0x40	; 64
    1e30:	32 2e       	mov	r3, r18
    1e32:	19 c0       	rjmp	.+50     	; 0x1e66 <vfprintf+0xe6>
    1e34:	36 fe       	sbrs	r3, 6
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0xc4>
    1e38:	8a e0       	ldi	r24, 0x0A	; 10
    1e3a:	98 9e       	mul	r9, r24
    1e3c:	20 0d       	add	r18, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	92 2e       	mov	r9, r18
    1e42:	11 c0       	rjmp	.+34     	; 0x1e66 <vfprintf+0xe6>
    1e44:	ea e0       	ldi	r30, 0x0A	; 10
    1e46:	2e 9e       	mul	r2, r30
    1e48:	20 0d       	add	r18, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	22 2e       	mov	r2, r18
    1e4e:	f3 2d       	mov	r31, r3
    1e50:	f0 62       	ori	r31, 0x20	; 32
    1e52:	3f 2e       	mov	r3, r31
    1e54:	08 c0       	rjmp	.+16     	; 0x1e66 <vfprintf+0xe6>
    1e56:	8c 36       	cpi	r24, 0x6C	; 108
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <vfprintf+0xe2>
    1e5a:	83 2d       	mov	r24, r3
    1e5c:	80 68       	ori	r24, 0x80	; 128
    1e5e:	38 2e       	mov	r3, r24
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <vfprintf+0xe6>
    1e62:	88 36       	cpi	r24, 0x68	; 104
    1e64:	41 f4       	brne	.+16     	; 0x1e76 <vfprintf+0xf6>
    1e66:	f7 01       	movw	r30, r14
    1e68:	93 fd       	sbrc	r25, 3
    1e6a:	85 91       	lpm	r24, Z+
    1e6c:	93 ff       	sbrs	r25, 3
    1e6e:	81 91       	ld	r24, Z+
    1e70:	7f 01       	movw	r14, r30
    1e72:	81 11       	cpse	r24, r1
    1e74:	b3 cf       	rjmp	.-154    	; 0x1ddc <vfprintf+0x5c>
    1e76:	98 2f       	mov	r25, r24
    1e78:	9f 7d       	andi	r25, 0xDF	; 223
    1e7a:	95 54       	subi	r25, 0x45	; 69
    1e7c:	93 30       	cpi	r25, 0x03	; 3
    1e7e:	28 f4       	brcc	.+10     	; 0x1e8a <vfprintf+0x10a>
    1e80:	0c 5f       	subi	r16, 0xFC	; 252
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	9f e3       	ldi	r25, 0x3F	; 63
    1e86:	99 83       	std	Y+1, r25	; 0x01
    1e88:	0d c0       	rjmp	.+26     	; 0x1ea4 <vfprintf+0x124>
    1e8a:	83 36       	cpi	r24, 0x63	; 99
    1e8c:	31 f0       	breq	.+12     	; 0x1e9a <vfprintf+0x11a>
    1e8e:	83 37       	cpi	r24, 0x73	; 115
    1e90:	71 f0       	breq	.+28     	; 0x1eae <vfprintf+0x12e>
    1e92:	83 35       	cpi	r24, 0x53	; 83
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <vfprintf+0x118>
    1e96:	59 c0       	rjmp	.+178    	; 0x1f4a <vfprintf+0x1ca>
    1e98:	21 c0       	rjmp	.+66     	; 0x1edc <vfprintf+0x15c>
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 81       	ld	r24, Z
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	0e 5f       	subi	r16, 0xFE	; 254
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	88 24       	eor	r8, r8
    1ea6:	83 94       	inc	r8
    1ea8:	91 2c       	mov	r9, r1
    1eaa:	53 01       	movw	r10, r6
    1eac:	13 c0       	rjmp	.+38     	; 0x1ed4 <vfprintf+0x154>
    1eae:	28 01       	movw	r4, r16
    1eb0:	f2 e0       	ldi	r31, 0x02	; 2
    1eb2:	4f 0e       	add	r4, r31
    1eb4:	51 1c       	adc	r5, r1
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	a0 80       	ld	r10, Z
    1eba:	b1 80       	ldd	r11, Z+1	; 0x01
    1ebc:	36 fe       	sbrs	r3, 6
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <vfprintf+0x146>
    1ec0:	69 2d       	mov	r22, r9
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <vfprintf+0x14a>
    1ec6:	6f ef       	ldi	r22, 0xFF	; 255
    1ec8:	7f ef       	ldi	r23, 0xFF	; 255
    1eca:	c5 01       	movw	r24, r10
    1ecc:	0e 94 ac 10 	call	0x2158	; 0x2158 <strnlen>
    1ed0:	4c 01       	movw	r8, r24
    1ed2:	82 01       	movw	r16, r4
    1ed4:	f3 2d       	mov	r31, r3
    1ed6:	ff 77       	andi	r31, 0x7F	; 127
    1ed8:	3f 2e       	mov	r3, r31
    1eda:	16 c0       	rjmp	.+44     	; 0x1f08 <vfprintf+0x188>
    1edc:	28 01       	movw	r4, r16
    1ede:	22 e0       	ldi	r18, 0x02	; 2
    1ee0:	42 0e       	add	r4, r18
    1ee2:	51 1c       	adc	r5, r1
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	a0 80       	ld	r10, Z
    1ee8:	b1 80       	ldd	r11, Z+1	; 0x01
    1eea:	36 fe       	sbrs	r3, 6
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <vfprintf+0x174>
    1eee:	69 2d       	mov	r22, r9
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <vfprintf+0x178>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	c5 01       	movw	r24, r10
    1efa:	0e 94 a1 10 	call	0x2142	; 0x2142 <strnlen_P>
    1efe:	4c 01       	movw	r8, r24
    1f00:	f3 2d       	mov	r31, r3
    1f02:	f0 68       	ori	r31, 0x80	; 128
    1f04:	3f 2e       	mov	r3, r31
    1f06:	82 01       	movw	r16, r4
    1f08:	33 fc       	sbrc	r3, 3
    1f0a:	1b c0       	rjmp	.+54     	; 0x1f42 <vfprintf+0x1c2>
    1f0c:	82 2d       	mov	r24, r2
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	88 16       	cp	r8, r24
    1f12:	99 06       	cpc	r9, r25
    1f14:	b0 f4       	brcc	.+44     	; 0x1f42 <vfprintf+0x1c2>
    1f16:	b6 01       	movw	r22, r12
    1f18:	80 e2       	ldi	r24, 0x20	; 32
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    1f20:	2a 94       	dec	r2
    1f22:	f4 cf       	rjmp	.-24     	; 0x1f0c <vfprintf+0x18c>
    1f24:	f5 01       	movw	r30, r10
    1f26:	37 fc       	sbrc	r3, 7
    1f28:	85 91       	lpm	r24, Z+
    1f2a:	37 fe       	sbrs	r3, 7
    1f2c:	81 91       	ld	r24, Z+
    1f2e:	5f 01       	movw	r10, r30
    1f30:	b6 01       	movw	r22, r12
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    1f38:	21 10       	cpse	r2, r1
    1f3a:	2a 94       	dec	r2
    1f3c:	21 e0       	ldi	r18, 0x01	; 1
    1f3e:	82 1a       	sub	r8, r18
    1f40:	91 08       	sbc	r9, r1
    1f42:	81 14       	cp	r8, r1
    1f44:	91 04       	cpc	r9, r1
    1f46:	71 f7       	brne	.-36     	; 0x1f24 <vfprintf+0x1a4>
    1f48:	e8 c0       	rjmp	.+464    	; 0x211a <vfprintf+0x39a>
    1f4a:	84 36       	cpi	r24, 0x64	; 100
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <vfprintf+0x1d2>
    1f4e:	89 36       	cpi	r24, 0x69	; 105
    1f50:	41 f5       	brne	.+80     	; 0x1fa2 <vfprintf+0x222>
    1f52:	f8 01       	movw	r30, r16
    1f54:	37 fe       	sbrs	r3, 7
    1f56:	07 c0       	rjmp	.+14     	; 0x1f66 <vfprintf+0x1e6>
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	0c 5f       	subi	r16, 0xFC	; 252
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <vfprintf+0x1f6>
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	07 2e       	mov	r0, r23
    1f6c:	00 0c       	add	r0, r0
    1f6e:	88 0b       	sbc	r24, r24
    1f70:	99 0b       	sbc	r25, r25
    1f72:	0e 5f       	subi	r16, 0xFE	; 254
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	f3 2d       	mov	r31, r3
    1f78:	ff 76       	andi	r31, 0x6F	; 111
    1f7a:	3f 2e       	mov	r3, r31
    1f7c:	97 ff       	sbrs	r25, 7
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <vfprintf+0x212>
    1f80:	90 95       	com	r25
    1f82:	80 95       	com	r24
    1f84:	70 95       	com	r23
    1f86:	61 95       	neg	r22
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	f0 68       	ori	r31, 0x80	; 128
    1f90:	3f 2e       	mov	r3, r31
    1f92:	2a e0       	ldi	r18, 0x0A	; 10
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	a3 01       	movw	r20, r6
    1f98:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__ultoa_invert>
    1f9c:	88 2e       	mov	r8, r24
    1f9e:	86 18       	sub	r8, r6
    1fa0:	45 c0       	rjmp	.+138    	; 0x202c <vfprintf+0x2ac>
    1fa2:	85 37       	cpi	r24, 0x75	; 117
    1fa4:	31 f4       	brne	.+12     	; 0x1fb2 <vfprintf+0x232>
    1fa6:	23 2d       	mov	r18, r3
    1fa8:	2f 7e       	andi	r18, 0xEF	; 239
    1faa:	b2 2e       	mov	r11, r18
    1fac:	2a e0       	ldi	r18, 0x0A	; 10
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	25 c0       	rjmp	.+74     	; 0x1ffc <vfprintf+0x27c>
    1fb2:	93 2d       	mov	r25, r3
    1fb4:	99 7f       	andi	r25, 0xF9	; 249
    1fb6:	b9 2e       	mov	r11, r25
    1fb8:	8f 36       	cpi	r24, 0x6F	; 111
    1fba:	c1 f0       	breq	.+48     	; 0x1fec <vfprintf+0x26c>
    1fbc:	18 f4       	brcc	.+6      	; 0x1fc4 <vfprintf+0x244>
    1fbe:	88 35       	cpi	r24, 0x58	; 88
    1fc0:	79 f0       	breq	.+30     	; 0x1fe0 <vfprintf+0x260>
    1fc2:	b5 c0       	rjmp	.+362    	; 0x212e <vfprintf+0x3ae>
    1fc4:	80 37       	cpi	r24, 0x70	; 112
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <vfprintf+0x24e>
    1fc8:	88 37       	cpi	r24, 0x78	; 120
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <vfprintf+0x254>
    1fcc:	b0 c0       	rjmp	.+352    	; 0x212e <vfprintf+0x3ae>
    1fce:	e9 2f       	mov	r30, r25
    1fd0:	e0 61       	ori	r30, 0x10	; 16
    1fd2:	be 2e       	mov	r11, r30
    1fd4:	b4 fe       	sbrs	r11, 4
    1fd6:	0d c0       	rjmp	.+26     	; 0x1ff2 <vfprintf+0x272>
    1fd8:	fb 2d       	mov	r31, r11
    1fda:	f4 60       	ori	r31, 0x04	; 4
    1fdc:	bf 2e       	mov	r11, r31
    1fde:	09 c0       	rjmp	.+18     	; 0x1ff2 <vfprintf+0x272>
    1fe0:	34 fe       	sbrs	r3, 4
    1fe2:	0a c0       	rjmp	.+20     	; 0x1ff8 <vfprintf+0x278>
    1fe4:	29 2f       	mov	r18, r25
    1fe6:	26 60       	ori	r18, 0x06	; 6
    1fe8:	b2 2e       	mov	r11, r18
    1fea:	06 c0       	rjmp	.+12     	; 0x1ff8 <vfprintf+0x278>
    1fec:	28 e0       	ldi	r18, 0x08	; 8
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <vfprintf+0x27c>
    1ff2:	20 e1       	ldi	r18, 0x10	; 16
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <vfprintf+0x27c>
    1ff8:	20 e1       	ldi	r18, 0x10	; 16
    1ffa:	32 e0       	ldi	r19, 0x02	; 2
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	b7 fe       	sbrs	r11, 7
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <vfprintf+0x290>
    2002:	60 81       	ld	r22, Z
    2004:	71 81       	ldd	r23, Z+1	; 0x01
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	93 81       	ldd	r25, Z+3	; 0x03
    200a:	0c 5f       	subi	r16, 0xFC	; 252
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	06 c0       	rjmp	.+12     	; 0x201c <vfprintf+0x29c>
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 5f       	subi	r16, 0xFE	; 254
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	a3 01       	movw	r20, r6
    201e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__ultoa_invert>
    2022:	88 2e       	mov	r8, r24
    2024:	86 18       	sub	r8, r6
    2026:	fb 2d       	mov	r31, r11
    2028:	ff 77       	andi	r31, 0x7F	; 127
    202a:	3f 2e       	mov	r3, r31
    202c:	36 fe       	sbrs	r3, 6
    202e:	0d c0       	rjmp	.+26     	; 0x204a <vfprintf+0x2ca>
    2030:	23 2d       	mov	r18, r3
    2032:	2e 7f       	andi	r18, 0xFE	; 254
    2034:	a2 2e       	mov	r10, r18
    2036:	89 14       	cp	r8, r9
    2038:	58 f4       	brcc	.+22     	; 0x2050 <vfprintf+0x2d0>
    203a:	34 fe       	sbrs	r3, 4
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <vfprintf+0x2d4>
    203e:	32 fc       	sbrc	r3, 2
    2040:	09 c0       	rjmp	.+18     	; 0x2054 <vfprintf+0x2d4>
    2042:	83 2d       	mov	r24, r3
    2044:	8e 7e       	andi	r24, 0xEE	; 238
    2046:	a8 2e       	mov	r10, r24
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <vfprintf+0x2d4>
    204a:	b8 2c       	mov	r11, r8
    204c:	a3 2c       	mov	r10, r3
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <vfprintf+0x2d6>
    2050:	b8 2c       	mov	r11, r8
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <vfprintf+0x2d6>
    2054:	b9 2c       	mov	r11, r9
    2056:	a4 fe       	sbrs	r10, 4
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <vfprintf+0x2f8>
    205a:	fe 01       	movw	r30, r28
    205c:	e8 0d       	add	r30, r8
    205e:	f1 1d       	adc	r31, r1
    2060:	80 81       	ld	r24, Z
    2062:	80 33       	cpi	r24, 0x30	; 48
    2064:	21 f4       	brne	.+8      	; 0x206e <vfprintf+0x2ee>
    2066:	9a 2d       	mov	r25, r10
    2068:	99 7e       	andi	r25, 0xE9	; 233
    206a:	a9 2e       	mov	r10, r25
    206c:	09 c0       	rjmp	.+18     	; 0x2080 <vfprintf+0x300>
    206e:	a2 fe       	sbrs	r10, 2
    2070:	06 c0       	rjmp	.+12     	; 0x207e <vfprintf+0x2fe>
    2072:	b3 94       	inc	r11
    2074:	b3 94       	inc	r11
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <vfprintf+0x300>
    2078:	8a 2d       	mov	r24, r10
    207a:	86 78       	andi	r24, 0x86	; 134
    207c:	09 f0       	breq	.+2      	; 0x2080 <vfprintf+0x300>
    207e:	b3 94       	inc	r11
    2080:	a3 fc       	sbrc	r10, 3
    2082:	11 c0       	rjmp	.+34     	; 0x20a6 <vfprintf+0x326>
    2084:	a0 fe       	sbrs	r10, 0
    2086:	06 c0       	rjmp	.+12     	; 0x2094 <vfprintf+0x314>
    2088:	b2 14       	cp	r11, r2
    208a:	88 f4       	brcc	.+34     	; 0x20ae <vfprintf+0x32e>
    208c:	28 0c       	add	r2, r8
    208e:	92 2c       	mov	r9, r2
    2090:	9b 18       	sub	r9, r11
    2092:	0e c0       	rjmp	.+28     	; 0x20b0 <vfprintf+0x330>
    2094:	b2 14       	cp	r11, r2
    2096:	60 f4       	brcc	.+24     	; 0x20b0 <vfprintf+0x330>
    2098:	b6 01       	movw	r22, r12
    209a:	80 e2       	ldi	r24, 0x20	; 32
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    20a2:	b3 94       	inc	r11
    20a4:	f7 cf       	rjmp	.-18     	; 0x2094 <vfprintf+0x314>
    20a6:	b2 14       	cp	r11, r2
    20a8:	18 f4       	brcc	.+6      	; 0x20b0 <vfprintf+0x330>
    20aa:	2b 18       	sub	r2, r11
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <vfprintf+0x332>
    20ae:	98 2c       	mov	r9, r8
    20b0:	21 2c       	mov	r2, r1
    20b2:	a4 fe       	sbrs	r10, 4
    20b4:	10 c0       	rjmp	.+32     	; 0x20d6 <vfprintf+0x356>
    20b6:	b6 01       	movw	r22, r12
    20b8:	80 e3       	ldi	r24, 0x30	; 48
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    20c0:	a2 fe       	sbrs	r10, 2
    20c2:	17 c0       	rjmp	.+46     	; 0x20f2 <vfprintf+0x372>
    20c4:	a1 fc       	sbrc	r10, 1
    20c6:	03 c0       	rjmp	.+6      	; 0x20ce <vfprintf+0x34e>
    20c8:	88 e7       	ldi	r24, 0x78	; 120
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vfprintf+0x352>
    20ce:	88 e5       	ldi	r24, 0x58	; 88
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	b6 01       	movw	r22, r12
    20d4:	0c c0       	rjmp	.+24     	; 0x20ee <vfprintf+0x36e>
    20d6:	8a 2d       	mov	r24, r10
    20d8:	86 78       	andi	r24, 0x86	; 134
    20da:	59 f0       	breq	.+22     	; 0x20f2 <vfprintf+0x372>
    20dc:	a1 fe       	sbrs	r10, 1
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <vfprintf+0x364>
    20e0:	8b e2       	ldi	r24, 0x2B	; 43
    20e2:	01 c0       	rjmp	.+2      	; 0x20e6 <vfprintf+0x366>
    20e4:	80 e2       	ldi	r24, 0x20	; 32
    20e6:	a7 fc       	sbrc	r10, 7
    20e8:	8d e2       	ldi	r24, 0x2D	; 45
    20ea:	b6 01       	movw	r22, r12
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    20f2:	89 14       	cp	r8, r9
    20f4:	38 f4       	brcc	.+14     	; 0x2104 <vfprintf+0x384>
    20f6:	b6 01       	movw	r22, r12
    20f8:	80 e3       	ldi	r24, 0x30	; 48
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    2100:	9a 94       	dec	r9
    2102:	f7 cf       	rjmp	.-18     	; 0x20f2 <vfprintf+0x372>
    2104:	8a 94       	dec	r8
    2106:	f3 01       	movw	r30, r6
    2108:	e8 0d       	add	r30, r8
    210a:	f1 1d       	adc	r31, r1
    210c:	80 81       	ld	r24, Z
    210e:	b6 01       	movw	r22, r12
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    2116:	81 10       	cpse	r8, r1
    2118:	f5 cf       	rjmp	.-22     	; 0x2104 <vfprintf+0x384>
    211a:	22 20       	and	r2, r2
    211c:	09 f4       	brne	.+2      	; 0x2120 <vfprintf+0x3a0>
    211e:	42 ce       	rjmp	.-892    	; 0x1da4 <vfprintf+0x24>
    2120:	b6 01       	movw	r22, r12
    2122:	80 e2       	ldi	r24, 0x20	; 32
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 b7 10 	call	0x216e	; 0x216e <fputc>
    212a:	2a 94       	dec	r2
    212c:	f6 cf       	rjmp	.-20     	; 0x211a <vfprintf+0x39a>
    212e:	f6 01       	movw	r30, r12
    2130:	86 81       	ldd	r24, Z+6	; 0x06
    2132:	97 81       	ldd	r25, Z+7	; 0x07
    2134:	02 c0       	rjmp	.+4      	; 0x213a <vfprintf+0x3ba>
    2136:	8f ef       	ldi	r24, 0xFF	; 255
    2138:	9f ef       	ldi	r25, 0xFF	; 255
    213a:	2b 96       	adiw	r28, 0x0b	; 11
    213c:	e2 e1       	ldi	r30, 0x12	; 18
    213e:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__>

00002142 <strnlen_P>:
    2142:	fc 01       	movw	r30, r24
    2144:	05 90       	lpm	r0, Z+
    2146:	61 50       	subi	r22, 0x01	; 1
    2148:	70 40       	sbci	r23, 0x00	; 0
    214a:	01 10       	cpse	r0, r1
    214c:	d8 f7       	brcc	.-10     	; 0x2144 <strnlen_P+0x2>
    214e:	80 95       	com	r24
    2150:	90 95       	com	r25
    2152:	8e 0f       	add	r24, r30
    2154:	9f 1f       	adc	r25, r31
    2156:	08 95       	ret

00002158 <strnlen>:
    2158:	fc 01       	movw	r30, r24
    215a:	61 50       	subi	r22, 0x01	; 1
    215c:	70 40       	sbci	r23, 0x00	; 0
    215e:	01 90       	ld	r0, Z+
    2160:	01 10       	cpse	r0, r1
    2162:	d8 f7       	brcc	.-10     	; 0x215a <strnlen+0x2>
    2164:	80 95       	com	r24
    2166:	90 95       	com	r25
    2168:	8e 0f       	add	r24, r30
    216a:	9f 1f       	adc	r25, r31
    216c:	08 95       	ret

0000216e <fputc>:
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	fb 01       	movw	r30, r22
    2178:	23 81       	ldd	r18, Z+3	; 0x03
    217a:	21 fd       	sbrc	r18, 1
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <fputc+0x16>
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	2c c0       	rjmp	.+88     	; 0x21dc <fputc+0x6e>
    2184:	22 ff       	sbrs	r18, 2
    2186:	16 c0       	rjmp	.+44     	; 0x21b4 <fputc+0x46>
    2188:	46 81       	ldd	r20, Z+6	; 0x06
    218a:	57 81       	ldd	r21, Z+7	; 0x07
    218c:	24 81       	ldd	r18, Z+4	; 0x04
    218e:	35 81       	ldd	r19, Z+5	; 0x05
    2190:	42 17       	cp	r20, r18
    2192:	53 07       	cpc	r21, r19
    2194:	44 f4       	brge	.+16     	; 0x21a6 <fputc+0x38>
    2196:	a0 81       	ld	r26, Z
    2198:	b1 81       	ldd	r27, Z+1	; 0x01
    219a:	9d 01       	movw	r18, r26
    219c:	2f 5f       	subi	r18, 0xFF	; 255
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	20 83       	st	Z, r18
    21a2:	31 83       	std	Z+1, r19	; 0x01
    21a4:	8c 93       	st	X, r24
    21a6:	26 81       	ldd	r18, Z+6	; 0x06
    21a8:	37 81       	ldd	r19, Z+7	; 0x07
    21aa:	2f 5f       	subi	r18, 0xFF	; 255
    21ac:	3f 4f       	sbci	r19, 0xFF	; 255
    21ae:	26 83       	std	Z+6, r18	; 0x06
    21b0:	37 83       	std	Z+7, r19	; 0x07
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <fputc+0x6e>
    21b4:	8b 01       	movw	r16, r22
    21b6:	ec 01       	movw	r28, r24
    21b8:	fb 01       	movw	r30, r22
    21ba:	00 84       	ldd	r0, Z+8	; 0x08
    21bc:	f1 85       	ldd	r31, Z+9	; 0x09
    21be:	e0 2d       	mov	r30, r0
    21c0:	09 95       	icall
    21c2:	89 2b       	or	r24, r25
    21c4:	e1 f6       	brne	.-72     	; 0x217e <fputc+0x10>
    21c6:	d8 01       	movw	r26, r16
    21c8:	16 96       	adiw	r26, 0x06	; 6
    21ca:	8d 91       	ld	r24, X+
    21cc:	9c 91       	ld	r25, X
    21ce:	17 97       	sbiw	r26, 0x07	; 7
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	16 96       	adiw	r26, 0x06	; 6
    21d4:	8d 93       	st	X+, r24
    21d6:	9c 93       	st	X, r25
    21d8:	17 97       	sbiw	r26, 0x07	; 7
    21da:	ce 01       	movw	r24, r28
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	08 95       	ret

000021e6 <__ultoa_invert>:
    21e6:	fa 01       	movw	r30, r20
    21e8:	aa 27       	eor	r26, r26
    21ea:	28 30       	cpi	r18, 0x08	; 8
    21ec:	51 f1       	breq	.+84     	; 0x2242 <__ultoa_invert+0x5c>
    21ee:	20 31       	cpi	r18, 0x10	; 16
    21f0:	81 f1       	breq	.+96     	; 0x2252 <__ultoa_invert+0x6c>
    21f2:	e8 94       	clt
    21f4:	6f 93       	push	r22
    21f6:	6e 7f       	andi	r22, 0xFE	; 254
    21f8:	6e 5f       	subi	r22, 0xFE	; 254
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	8f 4f       	sbci	r24, 0xFF	; 255
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	af 4f       	sbci	r26, 0xFF	; 255
    2202:	b1 e0       	ldi	r27, 0x01	; 1
    2204:	3e d0       	rcall	.+124    	; 0x2282 <__ultoa_invert+0x9c>
    2206:	b4 e0       	ldi	r27, 0x04	; 4
    2208:	3c d0       	rcall	.+120    	; 0x2282 <__ultoa_invert+0x9c>
    220a:	67 0f       	add	r22, r23
    220c:	78 1f       	adc	r23, r24
    220e:	89 1f       	adc	r24, r25
    2210:	9a 1f       	adc	r25, r26
    2212:	a1 1d       	adc	r26, r1
    2214:	68 0f       	add	r22, r24
    2216:	79 1f       	adc	r23, r25
    2218:	8a 1f       	adc	r24, r26
    221a:	91 1d       	adc	r25, r1
    221c:	a1 1d       	adc	r26, r1
    221e:	6a 0f       	add	r22, r26
    2220:	71 1d       	adc	r23, r1
    2222:	81 1d       	adc	r24, r1
    2224:	91 1d       	adc	r25, r1
    2226:	a1 1d       	adc	r26, r1
    2228:	20 d0       	rcall	.+64     	; 0x226a <__ultoa_invert+0x84>
    222a:	09 f4       	brne	.+2      	; 0x222e <__ultoa_invert+0x48>
    222c:	68 94       	set
    222e:	3f 91       	pop	r19
    2230:	2a e0       	ldi	r18, 0x0A	; 10
    2232:	26 9f       	mul	r18, r22
    2234:	11 24       	eor	r1, r1
    2236:	30 19       	sub	r19, r0
    2238:	30 5d       	subi	r19, 0xD0	; 208
    223a:	31 93       	st	Z+, r19
    223c:	de f6       	brtc	.-74     	; 0x21f4 <__ultoa_invert+0xe>
    223e:	cf 01       	movw	r24, r30
    2240:	08 95       	ret
    2242:	46 2f       	mov	r20, r22
    2244:	47 70       	andi	r20, 0x07	; 7
    2246:	40 5d       	subi	r20, 0xD0	; 208
    2248:	41 93       	st	Z+, r20
    224a:	b3 e0       	ldi	r27, 0x03	; 3
    224c:	0f d0       	rcall	.+30     	; 0x226c <__ultoa_invert+0x86>
    224e:	c9 f7       	brne	.-14     	; 0x2242 <__ultoa_invert+0x5c>
    2250:	f6 cf       	rjmp	.-20     	; 0x223e <__ultoa_invert+0x58>
    2252:	46 2f       	mov	r20, r22
    2254:	4f 70       	andi	r20, 0x0F	; 15
    2256:	40 5d       	subi	r20, 0xD0	; 208
    2258:	4a 33       	cpi	r20, 0x3A	; 58
    225a:	18 f0       	brcs	.+6      	; 0x2262 <__ultoa_invert+0x7c>
    225c:	49 5d       	subi	r20, 0xD9	; 217
    225e:	31 fd       	sbrc	r19, 1
    2260:	40 52       	subi	r20, 0x20	; 32
    2262:	41 93       	st	Z+, r20
    2264:	02 d0       	rcall	.+4      	; 0x226a <__ultoa_invert+0x84>
    2266:	a9 f7       	brne	.-22     	; 0x2252 <__ultoa_invert+0x6c>
    2268:	ea cf       	rjmp	.-44     	; 0x223e <__ultoa_invert+0x58>
    226a:	b4 e0       	ldi	r27, 0x04	; 4
    226c:	a6 95       	lsr	r26
    226e:	97 95       	ror	r25
    2270:	87 95       	ror	r24
    2272:	77 95       	ror	r23
    2274:	67 95       	ror	r22
    2276:	ba 95       	dec	r27
    2278:	c9 f7       	brne	.-14     	; 0x226c <__ultoa_invert+0x86>
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	61 05       	cpc	r22, r1
    227e:	71 05       	cpc	r23, r1
    2280:	08 95       	ret
    2282:	9b 01       	movw	r18, r22
    2284:	ac 01       	movw	r20, r24
    2286:	0a 2e       	mov	r0, r26
    2288:	06 94       	lsr	r0
    228a:	57 95       	ror	r21
    228c:	47 95       	ror	r20
    228e:	37 95       	ror	r19
    2290:	27 95       	ror	r18
    2292:	ba 95       	dec	r27
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__ultoa_invert+0xa2>
    2296:	62 0f       	add	r22, r18
    2298:	73 1f       	adc	r23, r19
    229a:	84 1f       	adc	r24, r20
    229c:	95 1f       	adc	r25, r21
    229e:	a0 1d       	adc	r26, r0
    22a0:	08 95       	ret

000022a2 <eeprom_read_block>:
    22a2:	60 50       	subi	r22, 0x00	; 0
    22a4:	7c 4e       	sbci	r23, 0xEC	; 236
    22a6:	0c 94 bd 11 	jmp	0x237a	; 0x237a <memcpy>

000022aa <eeprom_read_byte>:
    22aa:	03 d0       	rcall	.+6      	; 0x22b2 <eeprom_mapen>
    22ac:	80 81       	ld	r24, Z
    22ae:	99 27       	eor	r25, r25
    22b0:	08 95       	ret

000022b2 <eeprom_mapen>:
    22b2:	fc 01       	movw	r30, r24
    22b4:	e0 50       	subi	r30, 0x00	; 0
    22b6:	fc 4e       	sbci	r31, 0xEC	; 236
    22b8:	08 95       	ret

000022ba <eeprom_update_block>:
    22ba:	dc 01       	movw	r26, r24
    22bc:	a4 0f       	add	r26, r20
    22be:	b5 1f       	adc	r27, r21
    22c0:	41 50       	subi	r20, 0x01	; 1
    22c2:	50 40       	sbci	r21, 0x00	; 0
    22c4:	48 f0       	brcs	.+18     	; 0x22d8 <eeprom_update_block+0x1e>
    22c6:	cb 01       	movw	r24, r22
    22c8:	84 0f       	add	r24, r20
    22ca:	95 1f       	adc	r25, r21
    22cc:	2e 91       	ld	r18, -X
    22ce:	0e 94 6e 11 	call	0x22dc	; 0x22dc <eeprom_update_r18>
    22d2:	41 50       	subi	r20, 0x01	; 1
    22d4:	50 40       	sbci	r21, 0x00	; 0
    22d6:	d0 f7       	brcc	.-12     	; 0x22cc <eeprom_update_block+0x12>
    22d8:	08 95       	ret

000022da <eeprom_update_byte>:
    22da:	26 2f       	mov	r18, r22

000022dc <eeprom_update_r18>:
    22dc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <eeprom_mapen>
    22e0:	00 80       	ld	r0, Z
    22e2:	02 16       	cp	r0, r18
    22e4:	19 f0       	breq	.+6      	; 0x22ec <eeprom_update_r18+0x10>
    22e6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <eeprom_write_r18>
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	08 95       	ret

000022f0 <eeprom_write_byte>:
    22f0:	26 2f       	mov	r18, r22

000022f2 <eeprom_write_r18>:
    22f2:	af 93       	push	r26
    22f4:	bf 93       	push	r27
    22f6:	e0 e0       	ldi	r30, 0x00	; 0
    22f8:	f0 e1       	ldi	r31, 0x10	; 16
    22fa:	32 81       	ldd	r19, Z+2	; 0x02
    22fc:	31 fd       	sbrc	r19, 1
    22fe:	fd cf       	rjmp	.-6      	; 0x22fa <eeprom_write_r18+0x8>
    2300:	dc 01       	movw	r26, r24
    2302:	a0 50       	subi	r26, 0x00	; 0
    2304:	bc 4e       	sbci	r27, 0xEC	; 236
    2306:	2c 93       	st	X, r18
    2308:	2d e9       	ldi	r18, 0x9D	; 157
    230a:	24 bf       	out	0x34, r18	; 52
    230c:	23 e0       	ldi	r18, 0x03	; 3
    230e:	20 83       	st	Z, r18
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	bf 91       	pop	r27
    2314:	af 91       	pop	r26
    2316:	08 95       	ret

00002318 <__prologue_saves__>:
    2318:	2f 92       	push	r2
    231a:	3f 92       	push	r3
    231c:	4f 92       	push	r4
    231e:	5f 92       	push	r5
    2320:	6f 92       	push	r6
    2322:	7f 92       	push	r7
    2324:	8f 92       	push	r8
    2326:	9f 92       	push	r9
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	ca 1b       	sub	r28, r26
    2342:	db 0b       	sbc	r29, r27
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	09 94       	ijmp

0000234a <__epilogue_restores__>:
    234a:	2a 88       	ldd	r2, Y+18	; 0x12
    234c:	39 88       	ldd	r3, Y+17	; 0x11
    234e:	48 88       	ldd	r4, Y+16	; 0x10
    2350:	5f 84       	ldd	r5, Y+15	; 0x0f
    2352:	6e 84       	ldd	r6, Y+14	; 0x0e
    2354:	7d 84       	ldd	r7, Y+13	; 0x0d
    2356:	8c 84       	ldd	r8, Y+12	; 0x0c
    2358:	9b 84       	ldd	r9, Y+11	; 0x0b
    235a:	aa 84       	ldd	r10, Y+10	; 0x0a
    235c:	b9 84       	ldd	r11, Y+9	; 0x09
    235e:	c8 84       	ldd	r12, Y+8	; 0x08
    2360:	df 80       	ldd	r13, Y+7	; 0x07
    2362:	ee 80       	ldd	r14, Y+6	; 0x06
    2364:	fd 80       	ldd	r15, Y+5	; 0x05
    2366:	0c 81       	ldd	r16, Y+4	; 0x04
    2368:	1b 81       	ldd	r17, Y+3	; 0x03
    236a:	aa 81       	ldd	r26, Y+2	; 0x02
    236c:	b9 81       	ldd	r27, Y+1	; 0x01
    236e:	ce 0f       	add	r28, r30
    2370:	d1 1d       	adc	r29, r1
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	ed 01       	movw	r28, r26
    2378:	08 95       	ret

0000237a <memcpy>:
    237a:	fb 01       	movw	r30, r22
    237c:	dc 01       	movw	r26, r24
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <memcpy+0xa>
    2380:	01 90       	ld	r0, Z+
    2382:	0d 92       	st	X+, r0
    2384:	41 50       	subi	r20, 0x01	; 1
    2386:	50 40       	sbci	r21, 0x00	; 0
    2388:	d8 f7       	brcc	.-10     	; 0x2380 <memcpy+0x6>
    238a:	08 95       	ret

0000238c <_exit>:
    238c:	f8 94       	cli

0000238e <__stop_program>:
    238e:	ff cf       	rjmp	.-2      	; 0x238e <__stop_program>
