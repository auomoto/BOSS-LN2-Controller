
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00002762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001aa  00006524  00002524  000025b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000ca  00802800  00802800  00002762  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002762  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000320  00000000  00000000  00002800  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006be5  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000034a0  00000000  00000000  00009705  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002597  00000000  00000000  0000cba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005ac  00000000  00000000  0000f13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f2f  00000000  00000000  0000f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cbe  00000000  00000000  00011617  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  000122d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__vector_17>
      48:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	9c 01       	movw	r18, r24
      a2:	ba 01       	movw	r22, r20
      a4:	91 02       	muls	r25, r17
      a6:	c7 02       	muls	r28, r23
      a8:	ff 02       	muls	r31, r31
      aa:	37 03       	mulsu	r19, r23
      ac:	58 03       	fmul	r21, r16
      ae:	87 03       	fmuls	r16, r23

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	28 e2       	ldi	r18, 0x28	; 40
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	aa 3c       	cpi	r26, 0xCA	; 202
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
      d0:	0c 94 90 12 	jmp	0x2520	; 0x2520 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:

volatile uint8_t button_pushed;

void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 da 07 	call	0xfb4	; 0xfb4 <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	64 e2       	ldi	r22, 0x24	; 36
      e2:	75 e6       	ldi	r23, 0x65	; 101
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	63 e3       	ldi	r22, 0x33	; 51
      ee:	75 e6       	ldi	r23, 0x65	; 101
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	d1 f1       	breq	.+116    	; 0x174 <__EEPROM_REGION_LENGTH__+0x74>
     100:	18 f4       	brcc	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	41 f0       	breq	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     106:	9a c0       	rjmp	.+308    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f4       	brne	.+2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     10c:	62 c0       	rjmp	.+196    	; 0x1d2 <__EEPROM_REGION_LENGTH__+0xd2>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	87 c0       	rjmp	.+270    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
     114:	93 c0       	rjmp	.+294    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {				// See valves.h
     116:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     11a:	88 23       	and	r24, r24
     11c:	24 f4       	brge	.+8      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
				CLOSEVALVE(BLUVALVE);
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     124:	8b c0       	rjmp	.+278    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (BLUENABLED && BLUTHERMWARM) {
     126:	8c e0       	ldi	r24, 0x0C	; 12
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     12e:	88 23       	and	r24, r24
     130:	09 f4       	brne	.+2      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
     132:	84 c0       	rjmp	.+264    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
     134:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     138:	80 ff       	sbrs	r24, 0
     13a:	08 c0       	rjmp	.+16     	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
				OPENVALVE(BLUVALVE);
     13c:	80 e8       	ldi	r24, 0x80	; 128
     13e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     142:	e4 e0       	ldi	r30, 0x04	; 4
     144:	f8 e2       	ldi	r31, 0x28	; 40
     146:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     148:	17 86       	std	Z+15, r1	; 0x0f
     14a:	78 c0       	rjmp	.+240    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (BLUENABLED && !BLUTHERMWARM) {
     14c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     150:	80 fd       	sbrc	r24, 0
     152:	74 c0       	rjmp	.+232    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
				disp_coldtherm();
     154:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	24 e5       	ldi	r18, 0x54	; 84
     15a:	88 e5       	ldi	r24, 0x58	; 88
     15c:	94 e1       	ldi	r25, 0x14	; 20
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	80 40       	sbci	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
     166:	00 c0       	rjmp	.+0      	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
     168:	00 c0       	rjmp	.+0      	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
				_delay_ms(2000);
				display(screen_value);
     16a:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     16e:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     172:	64 c0       	rjmp	.+200    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {				// See valves.h
     174:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     178:	86 ff       	sbrs	r24, 6
     17a:	04 c0       	rjmp	.+8      	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
				CLOSEVALVE(REDVALVE);
     17c:	80 e4       	ldi	r24, 0x40	; 64
     17e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     182:	5c c0       	rjmp	.+184    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (REDENABLED && REDTHERMWARM) {
     184:	8d e0       	ldi	r24, 0x0D	; 13
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     18c:	88 23       	and	r24, r24
     18e:	09 f4       	brne	.+2      	; 0x192 <__EEPROM_REGION_LENGTH__+0x92>
     190:	55 c0       	rjmp	.+170    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
     192:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     196:	81 ff       	sbrs	r24, 1
     198:	08 c0       	rjmp	.+16     	; 0x1aa <__EEPROM_REGION_LENGTH__+0xaa>
				OPENVALVE(REDVALVE);
     19a:	80 e4       	ldi	r24, 0x40	; 64
     19c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     1a0:	e4 e0       	ldi	r30, 0x04	; 4
     1a2:	f8 e2       	ldi	r31, 0x28	; 40
     1a4:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1a6:	10 8a       	std	Z+16, r1	; 0x10
     1a8:	49 c0       	rjmp	.+146    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (REDENABLED && !REDTHERMWARM) {
     1aa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1ae:	81 fd       	sbrc	r24, 1
     1b0:	45 c0       	rjmp	.+138    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
				disp_coldtherm();
     1b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1b6:	24 e5       	ldi	r18, 0x54	; 84
     1b8:	88 e5       	ldi	r24, 0x58	; 88
     1ba:	94 e1       	ldi	r25, 0x14	; 20
     1bc:	21 50       	subi	r18, 0x01	; 1
     1be:	80 40       	sbci	r24, 0x00	; 0
     1c0:	90 40       	sbci	r25, 0x00	; 0
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <__EEPROM_REGION_LENGTH__+0xbc>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <__EEPROM_REGION_LENGTH__+0xc6>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <__EEPROM_REGION_LENGTH__+0xc8>
				_delay_ms(2000);
				display(screen_value);
     1c8:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     1cc:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     1d0:	35 c0       	rjmp	.+106    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {				// See valves.h
     1d2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1d6:	85 ff       	sbrs	r24, 5
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__EEPROM_REGION_LENGTH__+0xe2>
				CLOSEVALVE(BUFVALVE);
     1da:	80 e2       	ldi	r24, 0x20	; 32
     1dc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1e0:	2d c0       	rjmp	.+90     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (BUFTHERMWARM) {
     1e2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1e6:	82 ff       	sbrs	r24, 2
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <__EEPROM_REGION_LENGTH__+0xfa>
				OPENVALVE(BUFVALVE);
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     1f0:	e4 e0       	ldi	r30, 0x04	; 4
     1f2:	f8 e2       	ldi	r31, 0x28	; 40
     1f4:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     1f6:	11 8a       	std	Z+17, r1	; 0x11
     1f8:	21 c0       	rjmp	.+66     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (!BUFTHERMWARM) {
     1fa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1fe:	82 fd       	sbrc	r24, 2
     200:	1d c0       	rjmp	.+58     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
				disp_coldtherm();
     202:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     206:	24 e5       	ldi	r18, 0x54	; 84
     208:	88 e5       	ldi	r24, 0x58	; 88
     20a:	94 e1       	ldi	r25, 0x14	; 20
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <__EEPROM_REGION_LENGTH__+0x10c>
     214:	00 c0       	rjmp	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x116>
     216:	00 c0       	rjmp	.+0      	; 0x218 <__EEPROM_REGION_LENGTH__+0x118>
				_delay_ms(2000);
				display(screen_value);
     218:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     21c:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     220:	0d c0       	rjmp	.+26     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {				// See valves.h
     222:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     226:	84 ff       	sbrs	r24, 4
     228:	04 c0       	rjmp	.+8      	; 0x232 <__EEPROM_REGION_LENGTH__+0x132>
				CLOSEVALVE(SUPVALVE);
     22a:	80 e1       	ldi	r24, 0x10	; 16
     22c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     230:	05 c0       	rjmp	.+10     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else {
				OPENVALVE(SUPVALVE);
     232:	80 e1       	ldi	r24, 0x10	; 16
     234:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
     238:	10 92 12 28 	sts	0x2812, r1	; 0x802812 <status+0xe>

		default:
			break;
	}

	button_pushed = FALSE;
     23c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>

	if (screen_value == SCRVALVES) {
     240:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	11 f4       	brne	.+4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x14c>
		display(SCRVALVES);
     248:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     24c:	08 95       	ret

0000024e <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     24e:	e0 e2       	ldi	r30, 0x20	; 32
     250:	f4 e0       	ldi	r31, 0x04	; 4
     252:	8b e0       	ldi	r24, 0x0B	; 11
     254:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     256:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     258:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     25a:	81 8b       	std	Z+17, r24	; 0x11
     25c:	08 95       	ret

0000025e <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     25e:	1f 92       	push	r1
     260:	0f 92       	push	r0
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	0f 92       	push	r0
     266:	11 24       	eor	r1, r1
     268:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     26a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     26e:	82 ff       	sbrs	r24, 2
     270:	07 c0       	rjmp	.+14     	; 0x280 <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     272:	84 e0       	ldi	r24, 0x04	; 4
     274:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     27e:	20 c0       	rjmp	.+64     	; 0x2c0 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     280:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     284:	83 ff       	sbrs	r24, 3
     286:	07 c0       	rjmp	.+14     	; 0x296 <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     288:	88 e0       	ldi	r24, 0x08	; 8
     28a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     294:	15 c0       	rjmp	.+42     	; 0x2c0 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     296:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     29a:	80 ff       	sbrs	r24, 0
     29c:	07 c0       	rjmp	.+14     	; 0x2ac <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     2ac:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2b0:	81 ff       	sbrs	r24, 1
     2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     2ba:	84 e0       	ldi	r24, 0x04	; 4
     2bc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     2c0:	8f 91       	pop	r24
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	0e 94 1b 12 	call	0x2436	; 0x2436 <eeprom_read_block>
     2d8:	08 95       	ret

000002da <update_VERSION>:
}

void update_VERSION(void)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	2b 97       	sbiw	r28, 0x0b	; 11
     2e4:	cd bf       	out	0x3d, r28	; 61
     2e6:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     2e8:	8b e0       	ldi	r24, 0x0B	; 11
     2ea:	e3 e4       	ldi	r30, 0x43	; 67
     2ec:	f5 e6       	ldi	r31, 0x65	; 101
     2ee:	de 01       	movw	r26, r28
     2f0:	11 96       	adiw	r26, 0x01	; 1
     2f2:	01 90       	ld	r0, Z+
     2f4:	0d 92       	st	X+, r0
     2f6:	8a 95       	dec	r24
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     2fa:	4a e0       	ldi	r20, 0x0A	; 10
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 27 12 	call	0x244e	; 0x244e <eeprom_update_block>
}
     30a:	2b 96       	adiw	r28, 0x0b	; 11
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	de bf       	out	0x3e, r29	; 62
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	aa 97       	sbiw	r28, 0x2a	; 42
     320:	cd bf       	out	0x3d, r28	; 61
     322:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	88 30       	cpi	r24, 0x08	; 8
     328:	91 05       	cpc	r25, r1
     32a:	08 f0       	brcs	.+2      	; 0x32e <display+0x18>
     32c:	1f c2       	rjmp	.+1086   	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
     32e:	fc 01       	movw	r30, r24
     330:	e0 5b       	subi	r30, 0xB0	; 176
     332:	ff 4f       	sbci	r31, 0xFF	; 255
     334:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     338:	8f e0       	ldi	r24, 0x0F	; 15
     33a:	ee e4       	ldi	r30, 0x4E	; 78
     33c:	f5 e6       	ldi	r31, 0x65	; 101
     33e:	de 01       	movw	r26, r28
     340:	11 96       	adiw	r26, 0x01	; 1
     342:	01 90       	ld	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	8a 95       	dec	r24
     348:	e1 f7       	brne	.-8      	; 0x342 <display+0x2c>
			get_VERSION(status.version);
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	98 e2       	ldi	r25, 0x28	; 40
     34e:	0e 94 66 01 	call	0x2cc	; 0x2cc <get_VERSION>
			strcpy(line2, "   ");
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	90 e2       	ldi	r25, 0x20	; 32
     356:	8e 8b       	std	Y+22, r24	; 0x16
     358:	9f 8b       	std	Y+23, r25	; 0x17
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	88 8f       	std	Y+24, r24	; 0x18
     360:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     362:	64 e0       	ldi	r22, 0x04	; 4
     364:	78 e2       	ldi	r23, 0x28	; 40
     366:	ce 01       	movw	r24, r28
     368:	46 96       	adiw	r24, 0x16	; 22
     36a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strcat>
			screen_value = SCRVERSION;
     36e:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <screen_value>
			break;
     372:	10 c2       	rjmp	.+1056   	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     374:	80 e1       	ldi	r24, 0x10	; 16
     376:	ed e5       	ldi	r30, 0x5D	; 93
     378:	f5 e6       	ldi	r31, 0x65	; 101
     37a:	de 01       	movw	r26, r28
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     386:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     38a:	84 ff       	sbrs	r24, 4
     38c:	0a c0       	rjmp	.+20     	; 0x3a2 <display+0x8c>
				strcpy(line2, " O  ");
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	ed e6       	ldi	r30, 0x6D	; 109
     392:	f5 e6       	ldi	r31, 0x65	; 101
     394:	de 01       	movw	r26, r28
     396:	56 96       	adiw	r26, 0x16	; 22
     398:	01 90       	ld	r0, Z+
     39a:	0d 92       	st	X+, r0
     39c:	8a 95       	dec	r24
     39e:	e1 f7       	brne	.-8      	; 0x398 <display+0x82>
     3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	e2 e7       	ldi	r30, 0x72	; 114
     3a6:	f5 e6       	ldi	r31, 0x65	; 101
     3a8:	de 01       	movw	r26, r28
     3aa:	56 96       	adiw	r26, 0x16	; 22
     3ac:	01 90       	ld	r0, Z+
     3ae:	0d 92       	st	X+, r0
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     3b4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3b8:	85 ff       	sbrs	r24, 5
     3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <display+0xc2>
				strcat(line2, " O  ");
     3bc:	de 01       	movw	r26, r28
     3be:	56 96       	adiw	r26, 0x16	; 22
     3c0:	0d 90       	ld	r0, X+
     3c2:	00 20       	and	r0, r0
     3c4:	e9 f7       	brne	.-6      	; 0x3c0 <display+0xaa>
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	85 e0       	ldi	r24, 0x05	; 5
     3ca:	ed e6       	ldi	r30, 0x6D	; 109
     3cc:	f5 e6       	ldi	r31, 0x65	; 101
     3ce:	01 90       	ld	r0, Z+
     3d0:	0d 92       	st	X+, r0
     3d2:	8a 95       	dec	r24
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <display+0xb8>
     3d6:	1f c0       	rjmp	.+62     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			} else if (status.maxopen_BUF) {
     3d8:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
     3dc:	88 23       	and	r24, r24
     3de:	71 f0       	breq	.+28     	; 0x3fc <display+0xe6>
				strcat(line2, " T  ");
     3e0:	de 01       	movw	r26, r28
     3e2:	56 96       	adiw	r26, 0x16	; 22
     3e4:	0d 90       	ld	r0, X+
     3e6:	00 20       	and	r0, r0
     3e8:	e9 f7       	brne	.-6      	; 0x3e4 <display+0xce>
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	85 e0       	ldi	r24, 0x05	; 5
     3ee:	e7 e7       	ldi	r30, 0x77	; 119
     3f0:	f5 e6       	ldi	r31, 0x65	; 101
     3f2:	01 90       	ld	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	8a 95       	dec	r24
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <display+0xdc>
     3fa:	0d c0       	rjmp	.+26     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			} else {
				strcat(line2, " C  ");
     3fc:	de 01       	movw	r26, r28
     3fe:	56 96       	adiw	r26, 0x16	; 22
     400:	0d 90       	ld	r0, X+
     402:	00 20       	and	r0, r0
     404:	e9 f7       	brne	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>
     406:	11 97       	sbiw	r26, 0x01	; 1
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	e2 e7       	ldi	r30, 0x72	; 114
     40c:	f5 e6       	ldi	r31, 0x65	; 101
     40e:	01 90       	ld	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	8a 95       	dec	r24
     414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			}
			if (!REDENABLED) {					// eeprom.h
     416:	8d e0       	ldi	r24, 0x0D	; 13
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     41e:	81 11       	cpse	r24, r1
     420:	0e c0       	rjmp	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				strcat(line2, " X  ");
     422:	de 01       	movw	r26, r28
     424:	56 96       	adiw	r26, 0x16	; 22
     426:	0d 90       	ld	r0, X+
     428:	00 20       	and	r0, r0
     42a:	e9 f7       	brne	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	ec e7       	ldi	r30, 0x7C	; 124
     432:	f5 e6       	ldi	r31, 0x65	; 101
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	8a 95       	dec	r24
     43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43c:	31 c0       	rjmp	.+98     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			} else if (REDVALVEOPEN) {			// valves.h
     43e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     442:	86 ff       	sbrs	r24, 6
     444:	0e c0       	rjmp	.+28     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				strcat(line2, " O  ");
     446:	de 01       	movw	r26, r28
     448:	56 96       	adiw	r26, 0x16	; 22
     44a:	0d 90       	ld	r0, X+
     44c:	00 20       	and	r0, r0
     44e:	e9 f7       	brne	.-6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     450:	11 97       	sbiw	r26, 0x01	; 1
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	ed e6       	ldi	r30, 0x6D	; 109
     456:	f5 e6       	ldi	r31, 0x65	; 101
     458:	01 90       	ld	r0, Z+
     45a:	0d 92       	st	X+, r0
     45c:	8a 95       	dec	r24
     45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	1f c0       	rjmp	.+62     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			} else if (status.maxopen_RED) {
     462:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
     466:	88 23       	and	r24, r24
     468:	71 f0       	breq	.+28     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				strcat(line2, " T  ");
     46a:	de 01       	movw	r26, r28
     46c:	56 96       	adiw	r26, 0x16	; 22
     46e:	0d 90       	ld	r0, X+
     470:	00 20       	and	r0, r0
     472:	e9 f7       	brne	.-6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	e7 e7       	ldi	r30, 0x77	; 119
     47a:	f5 e6       	ldi	r31, 0x65	; 101
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	8a 95       	dec	r24
     482:	e1 f7       	brne	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     484:	0d c0       	rjmp	.+26     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			} else {
				strcat(line2, " C  ");
     486:	de 01       	movw	r26, r28
     488:	56 96       	adiw	r26, 0x16	; 22
     48a:	0d 90       	ld	r0, X+
     48c:	00 20       	and	r0, r0
     48e:	e9 f7       	brne	.-6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     490:	11 97       	sbiw	r26, 0x01	; 1
     492:	85 e0       	ldi	r24, 0x05	; 5
     494:	e2 e7       	ldi	r30, 0x72	; 114
     496:	f5 e6       	ldi	r31, 0x65	; 101
     498:	01 90       	ld	r0, Z+
     49a:	0d 92       	st	X+, r0
     49c:	8a 95       	dec	r24
     49e:	e1 f7       	brne	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			}
			if (!BLUENABLED) {
     4a0:	8c e0       	ldi	r24, 0x0C	; 12
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     4a8:	81 11       	cpse	r24, r1
     4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				strcat(line2, " X");
     4ac:	fe 01       	movw	r30, r28
     4ae:	76 96       	adiw	r30, 0x16	; 22
     4b0:	01 90       	ld	r0, Z+
     4b2:	00 20       	and	r0, r0
     4b4:	e9 f7       	brne	.-6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	80 e2       	ldi	r24, 0x20	; 32
     4ba:	98 e5       	ldi	r25, 0x58	; 88
     4bc:	80 83       	st	Z, r24
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	12 82       	std	Z+2, r1	; 0x02
     4c2:	2b c0       	rjmp	.+86     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			} else if (BLUVALVEOPEN) {			// valves.h
     4c4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     4c8:	88 23       	and	r24, r24
     4ca:	64 f4       	brge	.+24     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
				strcat(line2, " O");
     4cc:	fe 01       	movw	r30, r28
     4ce:	76 96       	adiw	r30, 0x16	; 22
     4d0:	01 90       	ld	r0, Z+
     4d2:	00 20       	and	r0, r0
     4d4:	e9 f7       	brne	.-6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d6:	31 97       	sbiw	r30, 0x01	; 1
     4d8:	80 e2       	ldi	r24, 0x20	; 32
     4da:	9f e4       	ldi	r25, 0x4F	; 79
     4dc:	80 83       	st	Z, r24
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	12 82       	std	Z+2, r1	; 0x02
     4e2:	1b c0       	rjmp	.+54     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			} else if (status.maxopen_BLU) {
     4e4:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
     4e8:	88 23       	and	r24, r24
     4ea:	61 f0       	breq	.+24     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
				strcat(line2, " T");
     4ec:	fe 01       	movw	r30, r28
     4ee:	76 96       	adiw	r30, 0x16	; 22
     4f0:	01 90       	ld	r0, Z+
     4f2:	00 20       	and	r0, r0
     4f4:	e9 f7       	brne	.-6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	80 e2       	ldi	r24, 0x20	; 32
     4fa:	94 e5       	ldi	r25, 0x54	; 84
     4fc:	80 83       	st	Z, r24
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	12 82       	std	Z+2, r1	; 0x02
     502:	0b c0       	rjmp	.+22     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			} else {
				strcat(line2, " C");
     504:	fe 01       	movw	r30, r28
     506:	76 96       	adiw	r30, 0x16	; 22
     508:	01 90       	ld	r0, Z+
     50a:	00 20       	and	r0, r0
     50c:	e9 f7       	brne	.-6      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	93 e4       	ldi	r25, 0x43	; 67
     514:	80 83       	st	Z, r24
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     520:	39 c1       	rjmp	.+626    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     522:	8d e0       	ldi	r24, 0x0D	; 13
     524:	e1 e8       	ldi	r30, 0x81	; 129
     526:	f5 e6       	ldi	r31, 0x65	; 101
     528:	de 01       	movw	r26, r28
     52a:	11 96       	adiw	r26, 0x01	; 1
     52c:	01 90       	ld	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	8a 95       	dec	r24
     532:	e1 f7       	brne	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			if (status.next_fill < 2) {
     534:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0x12>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	98 f4       	brcc	.+38     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
				sprintf(line2, "%d minute", status.next_fill);
     53c:	1f 92       	push	r1
     53e:	8f 93       	push	r24
     540:	8e e8       	ldi	r24, 0x8E	; 142
     542:	95 e6       	ldi	r25, 0x65	; 101
     544:	9f 93       	push	r25
     546:	8f 93       	push	r24
     548:	ce 01       	movw	r24, r28
     54a:	46 96       	adiw	r24, 0x16	; 22
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	12 c0       	rjmp	.+36     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     562:	1f 92       	push	r1
     564:	8f 93       	push	r24
     566:	88 e9       	ldi	r24, 0x98	; 152
     568:	95 e6       	ldi	r25, 0x65	; 101
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	ce 01       	movw	r24, r28
     570:	46 96       	adiw	r24, 0x16	; 22
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     58c:	03 c1       	rjmp	.+518    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     58e:	8e e0       	ldi	r24, 0x0E	; 14
     590:	e3 ea       	ldi	r30, 0xA3	; 163
     592:	f5 e6       	ldi	r31, 0x65	; 101
     594:	de 01       	movw	r26, r28
     596:	11 96       	adiw	r26, 0x01	; 1
     598:	01 90       	ld	r0, Z+
     59a:	0d 92       	st	X+, r0
     59c:	8a 95       	dec	r24
     59e:	e1 f7       	brne	.-8      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
			if (FILLINTERVAL == 1) {			// eeprom.h
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	99 f4       	brne	.+38     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
				sprintf(line2, "%d minute", FILLINTERVAL);
     5ac:	1f 92       	push	r1
     5ae:	8f 93       	push	r24
     5b0:	8e e8       	ldi	r24, 0x8E	; 142
     5b2:	95 e6       	ldi	r25, 0x65	; 101
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	ce 01       	movw	r24, r28
     5ba:	46 96       	adiw	r24, 0x16	; 22
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	12 c0       	rjmp	.+36     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     5d2:	1f 92       	push	r1
     5d4:	8f 93       	push	r24
     5d6:	88 e9       	ldi	r24, 0x98	; 152
     5d8:	95 e6       	ldi	r25, 0x65	; 101
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	ce 01       	movw	r24, r28
     5e0:	46 96       	adiw	r24, 0x16	; 22
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     5fc:	cb c0       	rjmp	.+406    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     5fe:	8e e0       	ldi	r24, 0x0E	; 14
     600:	e1 eb       	ldi	r30, 0xB1	; 177
     602:	f5 e6       	ldi	r31, 0x65	; 101
     604:	de 01       	movw	r26, r28
     606:	11 96       	adiw	r26, 0x01	; 1
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	8a 95       	dec	r24
     60e:	e1 f7       	brne	.-8      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
			if (MAXOPENTIME < 2) {				// eeprom.h
     610:	8b e0       	ldi	r24, 0x0B	; 11
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	98 f4       	brcc	.+38     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
				sprintf(line2, "%d minute", MAXOPENTIME);
     61c:	1f 92       	push	r1
     61e:	8f 93       	push	r24
     620:	8e e8       	ldi	r24, 0x8E	; 142
     622:	95 e6       	ldi	r25, 0x65	; 101
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	ce 01       	movw	r24, r28
     62a:	46 96       	adiw	r24, 0x16	; 22
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	12 c0       	rjmp	.+36     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     642:	1f 92       	push	r1
     644:	8f 93       	push	r24
     646:	88 e9       	ldi	r24, 0x98	; 152
     648:	95 e6       	ldi	r25, 0x65	; 101
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	ce 01       	movw	r24, r28
     650:	46 96       	adiw	r24, 0x16	; 22
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     66c:	93 c0       	rjmp	.+294    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     66e:	8d e0       	ldi	r24, 0x0D	; 13
     670:	ef eb       	ldi	r30, 0xBF	; 191
     672:	f5 e6       	ldi	r31, 0x65	; 101
     674:	de 01       	movw	r26, r28
     676:	11 96       	adiw	r26, 0x01	; 1
     678:	01 90       	ld	r0, Z+
     67a:	0d 92       	st	X+, r0
     67c:	8a 95       	dec	r24
     67e:	e1 f7       	brne	.-8      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			sprintf(line2, "%d kPa", status.pressure);
     680:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x14>
     684:	1f 92       	push	r1
     686:	8f 93       	push	r24
     688:	8c ec       	ldi	r24, 0xCC	; 204
     68a:	95 e6       	ldi	r25, 0x65	; 101
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	ce 01       	movw	r24, r28
     692:	46 96       	adiw	r24, 0x16	; 22
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
			screen_value = SCRPRESSURE;
     69c:	85 e0       	ldi	r24, 0x05	; 5
     69e:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	72 c0       	rjmp	.+228    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     6b0:	8c e0       	ldi	r24, 0x0C	; 12
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     6b8:	88 23       	and	r24, r24
     6ba:	99 f0       	breq	.+38     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
				strcpy(line1, "BLUE is ENABLED");
     6bc:	80 e1       	ldi	r24, 0x10	; 16
     6be:	e3 ed       	ldi	r30, 0xD3	; 211
     6c0:	f5 e6       	ldi	r31, 0x65	; 101
     6c2:	de 01       	movw	r26, r28
     6c4:	11 96       	adiw	r26, 0x01	; 1
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	8a 95       	dec	r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
				strcpy(line2, "Push to disable");
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	e3 ee       	ldi	r30, 0xE3	; 227
     6d2:	f5 e6       	ldi	r31, 0x65	; 101
     6d4:	de 01       	movw	r26, r28
     6d6:	56 96       	adiw	r26, 0x16	; 22
     6d8:	01 90       	ld	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	8a 95       	dec	r24
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
     6e0:	12 c0       	rjmp	.+36     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
			} else {
				strcpy(line1, "Blue is DISABLED");
     6e2:	81 e1       	ldi	r24, 0x11	; 17
     6e4:	e3 ef       	ldi	r30, 0xF3	; 243
     6e6:	f5 e6       	ldi	r31, 0x65	; 101
     6e8:	de 01       	movw	r26, r28
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	01 90       	ld	r0, Z+
     6ee:	0d 92       	st	X+, r0
     6f0:	8a 95       	dec	r24
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
				strcpy(line2, "Push to enable");
     6f4:	8f e0       	ldi	r24, 0x0F	; 15
     6f6:	e4 e0       	ldi	r30, 0x04	; 4
     6f8:	f6 e6       	ldi	r31, 0x66	; 102
     6fa:	de 01       	movw	r26, r28
     6fc:	56 96       	adiw	r26, 0x16	; 22
     6fe:	01 90       	ld	r0, Z+
     700:	0d 92       	st	X+, r0
     702:	8a 95       	dec	r24
     704:	e1 f7       	brne	.-8      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     706:	86 e0       	ldi	r24, 0x06	; 6
     708:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     70c:	43 c0       	rjmp	.+134    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     70e:	8d e0       	ldi	r24, 0x0D	; 13
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     716:	88 23       	and	r24, r24
     718:	99 f0       	breq	.+38     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
				strcpy(line1, "RED is ENABLED");
     71a:	8f e0       	ldi	r24, 0x0F	; 15
     71c:	e3 e1       	ldi	r30, 0x13	; 19
     71e:	f6 e6       	ldi	r31, 0x66	; 102
     720:	de 01       	movw	r26, r28
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	01 90       	ld	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	8a 95       	dec	r24
     72a:	e1 f7       	brne	.-8      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
				strcpy(line2, "Push to disable");
     72c:	80 e1       	ldi	r24, 0x10	; 16
     72e:	e3 ee       	ldi	r30, 0xE3	; 227
     730:	f5 e6       	ldi	r31, 0x65	; 101
     732:	de 01       	movw	r26, r28
     734:	56 96       	adiw	r26, 0x16	; 22
     736:	01 90       	ld	r0, Z+
     738:	0d 92       	st	X+, r0
     73a:	8a 95       	dec	r24
     73c:	e1 f7       	brne	.-8      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     73e:	12 c0       	rjmp	.+36     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			} else {
				strcpy(line1, "RED is DISABLED");
     740:	80 e1       	ldi	r24, 0x10	; 16
     742:	e2 e2       	ldi	r30, 0x22	; 34
     744:	f6 e6       	ldi	r31, 0x66	; 102
     746:	de 01       	movw	r26, r28
     748:	11 96       	adiw	r26, 0x01	; 1
     74a:	01 90       	ld	r0, Z+
     74c:	0d 92       	st	X+, r0
     74e:	8a 95       	dec	r24
     750:	e1 f7       	brne	.-8      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
				strcpy(line2, "Push to enable");
     752:	8f e0       	ldi	r24, 0x0F	; 15
     754:	e4 e0       	ldi	r30, 0x04	; 4
     756:	f6 e6       	ldi	r31, 0x66	; 102
     758:	de 01       	movw	r26, r28
     75a:	56 96       	adiw	r26, 0x16	; 22
     75c:	01 90       	ld	r0, Z+
     75e:	0d 92       	st	X+, r0
     760:	8a 95       	dec	r24
     762:	e1 f7       	brne	.-8      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     764:	87 e0       	ldi	r24, 0x07	; 7
     766:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     76a:	14 c0       	rjmp	.+40     	; 0x794 <__LOCK_REGION_LENGTH__+0x394>

		default:
			strcpy(line1, "default");
     76c:	88 e0       	ldi	r24, 0x08	; 8
     76e:	e2 e3       	ldi	r30, 0x32	; 50
     770:	f6 e6       	ldi	r31, 0x66	; 102
     772:	de 01       	movw	r26, r28
     774:	11 96       	adiw	r26, 0x01	; 1
     776:	01 90       	ld	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	8a 95       	dec	r24
     77c:	e1 f7       	brne	.-8      	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
			strcpy(line2, "overrun");
     77e:	88 e0       	ldi	r24, 0x08	; 8
     780:	ea e3       	ldi	r30, 0x3A	; 58
     782:	f6 e6       	ldi	r31, 0x66	; 102
     784:	de 01       	movw	r26, r28
     786:	56 96       	adiw	r26, 0x16	; 22
     788:	01 90       	ld	r0, Z+
     78a:	0d 92       	st	X+, r0
     78c:	8a 95       	dec	r24
     78e:	e1 f7       	brne	.-8      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			screen_value = SCRVERSION;			// encoder.h
     790:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	writestr_OLED(0, line2, 2);
     7a2:	42 e0       	ldi	r20, 0x02	; 2
     7a4:	be 01       	movw	r22, r28
     7a6:	6a 5e       	subi	r22, 0xEA	; 234
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
}
     7b0:	aa 96       	adiw	r28, 0x2a	; 42
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     7bc:	8c e0       	ldi	r24, 0x0C	; 12
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	81 11       	cpse	r24, r1
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	8c e0       	ldi	r24, 0x0C	; 12
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 37 12 	call	0x246e	; 0x246e <eeprom_update_byte>
	encoder_sensed = FALSE;
     7d2:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     7d6:	86 e0       	ldi	r24, 0x06	; 6
     7d8:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     7dc:	08 95       	ret

000007de <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     7de:	8d e0       	ldi	r24, 0x0D	; 13
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	81 11       	cpse	r24, r1
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	8d e0       	ldi	r24, 0x0D	; 13
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 37 12 	call	0x246e	; 0x246e <eeprom_update_byte>
	encoder_sensed = FALSE;
     7f4:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     7fe:	08 95       	ret

00000800 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	65 97       	sbiw	r28, 0x15	; 21
     812:	cd bf       	out	0x3d, r28	; 61
     814:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;				// eeprom.h
     816:	8a e0       	ldi	r24, 0x0A	; 10
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     81e:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
	if (encoder_value == 1) {
     822:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	a9 f4       	brne	.+42     	; 0x854 <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     82a:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     82e:	1f 92       	push	r1
     830:	8f 93       	push	r24
     832:	8e e8       	ldi	r24, 0x8E	; 142
     834:	95 e6       	ldi	r25, 0x65	; 101
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	14 c0       	rjmp	.+40     	; 0x87c <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     854:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     858:	1f 92       	push	r1
     85a:	8f 93       	push	r24
     85c:	88 e9       	ldi	r24, 0x98	; 152
     85e:	95 e6       	ldi	r25, 0x65	; 101
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	62 e4       	ldi	r22, 0x42	; 66
     880:	76 e6       	ldi	r23, 0x66	; 102
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     888:	42 e0       	ldi	r20, 0x02	; 2
     88a:	be 01       	movw	r22, r28
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     896:	0f 2e       	mov	r0, r31
     898:	fe ef       	ldi	r31, 0xFE	; 254
     89a:	ef 2e       	mov	r14, r31
     89c:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     89e:	68 94       	set
     8a0:	ff 24       	eor	r15, r15
     8a2:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8a4:	08 e9       	ldi	r16, 0x98	; 152
     8a6:	15 e6       	ldi	r17, 0x65	; 101
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8a8:	32 c0       	rjmp	.+100    	; 0x90e <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     8aa:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     8ae:	87 30       	cpi	r24, 0x07	; 7
     8b0:	71 f5       	brne	.+92     	; 0x90e <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     8b2:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	18 f4       	brcc	.+6      	; 0x8c0 <change_FILLINT+0xc0>
				encoder_value = 2;
     8ba:	f0 92 1b 28 	sts	0x281B, r15	; 0x80281b <encoder_value>
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     8c0:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8c4:	8f 3f       	cpi	r24, 0xFF	; 255
     8c6:	11 f4       	brne	.+4      	; 0x8cc <change_FILLINT+0xcc>
				encoder_value = 254;
     8c8:	e0 92 1b 28 	sts	0x281B, r14	; 0x80281b <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8cc:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8d0:	1f 92       	push	r1
     8d2:	8f 93       	push	r24
     8d4:	1f 93       	push	r17
     8d6:	0f 93       	push	r16
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	8c 0f       	add	r24, r28
     8de:	9d 1f       	adc	r25, r29
     8e0:	9f 93       	push	r25
     8e2:	8f 93       	push	r24
     8e4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     8e8:	41 e0       	ldi	r20, 0x01	; 1
     8ea:	63 e5       	ldi	r22, 0x53	; 83
     8ec:	76 e6       	ldi	r23, 0x66	; 102
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     8f4:	4f 2d       	mov	r20, r15
     8f6:	be 01       	movw	r22, r28
     8f8:	6f 5f       	subi	r22, 0xFF	; 255
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     90e:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     912:	85 30       	cpi	r24, 0x05	; 5
     914:	51 f6       	brne	.-108    	; 0x8aa <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     916:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     91a:	60 91 1b 28 	lds	r22, 0x281B	; 0x80281b <encoder_value>
     91e:	8a e0       	ldi	r24, 0x0A	; 10
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 37 12 	call	0x246e	; 0x246e <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     926:	8b e0       	ldi	r24, 0x0B	; 11
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     92e:	18 2f       	mov	r17, r24
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     938:	18 17       	cp	r17, r24
     93a:	30 f0       	brcs	.+12     	; 0x948 <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     93c:	6f ef       	ldi	r22, 0xFF	; 255
     93e:	68 0f       	add	r22, r24
     940:	8b e0       	ldi	r24, 0x0B	; 11
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 37 12 	call	0x246e	; 0x246e <eeprom_update_byte>
	}
	display(SCRFILLINT);
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	0e 94 8b 01 	call	0x316	; 0x316 <display>
}
     94e:	65 96       	adiw	r28, 0x15	; 21
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	08 95       	ret

00000962 <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	65 97       	sbiw	r28, 0x15	; 21
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;			// eeprom.h
     97c:	8b e0       	ldi	r24, 0x0B	; 11
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     984:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
	if (encoder_value == 1) {
     988:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	a9 f4       	brne	.+42     	; 0x9ba <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     990:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     994:	1f 92       	push	r1
     996:	8f 93       	push	r24
     998:	8e e8       	ldi	r24, 0x8E	; 142
     99a:	95 e6       	ldi	r25, 0x65	; 101
     99c:	9f 93       	push	r25
     99e:	8f 93       	push	r24
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	14 c0       	rjmp	.+40     	; 0x9e2 <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     9ba:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     9be:	1f 92       	push	r1
     9c0:	8f 93       	push	r24
     9c2:	88 e9       	ldi	r24, 0x98	; 152
     9c4:	95 e6       	ldi	r25, 0x65	; 101
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     9e2:	41 e0       	ldi	r20, 0x01	; 1
     9e4:	63 e6       	ldi	r22, 0x63	; 99
     9e6:	76 e6       	ldi	r23, 0x66	; 102
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     9ee:	42 e0       	ldi	r20, 0x02	; 2
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     9fc:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     9fe:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a00:	0f 2e       	mov	r0, r31
     a02:	f8 e9       	ldi	r31, 0x98	; 152
     a04:	ef 2e       	mov	r14, r31
     a06:	f5 e6       	ldi	r31, 0x65	; 101
     a08:	ff 2e       	mov	r15, r31
     a0a:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     a0c:	0f 2e       	mov	r0, r31
     a0e:	fe e8       	ldi	r31, 0x8E	; 142
     a10:	cf 2e       	mov	r12, r31
     a12:	f5 e6       	ldi	r31, 0x65	; 101
     a14:	df 2e       	mov	r13, r31
     a16:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a18:	57 c0       	rjmp	.+174    	; 0xac8 <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     a1a:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     a1e:	87 30       	cpi	r24, 0x07	; 7
     a20:	09 f0       	breq	.+2      	; 0xa24 <change_MAXOPENTIME+0xc2>
     a22:	52 c0       	rjmp	.+164    	; 0xac8 <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     a24:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     a28:	81 11       	cpse	r24, r1
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     a2c:	10 93 1b 28 	sts	0x281B, r17	; 0x80281b <encoder_value>
     a30:	06 c0       	rjmp	.+12     	; 0xa3e <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     a32:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     a36:	8f 3f       	cpi	r24, 0xFF	; 255
     a38:	11 f4       	brne	.+4      	; 0xa3e <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     a3a:	00 93 1b 28 	sts	0x281B, r16	; 0x80281b <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     a3e:	8a e0       	ldi	r24, 0x0A	; 10
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     a46:	90 91 1b 28 	lds	r25, 0x281B	; 0x80281b <encoder_value>
     a4a:	98 17       	cp	r25, r24
     a4c:	18 f0       	brcs	.+6      	; 0xa54 <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			}
			if (encoder_value == 1) {
     a54:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	a9 f4       	brne	.+42     	; 0xa86 <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     a5c:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     a60:	1f 92       	push	r1
     a62:	8f 93       	push	r24
     a64:	df 92       	push	r13
     a66:	cf 92       	push	r12
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	8c 0f       	add	r24, r28
     a6e:	9d 1f       	adc	r25, r29
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	14 c0       	rjmp	.+40     	; 0xaae <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a86:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     a8a:	1f 92       	push	r1
     a8c:	8f 93       	push	r24
     a8e:	ff 92       	push	r15
     a90:	ef 92       	push	r14
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	8c 0f       	add	r24, r28
     a98:	9d 1f       	adc	r25, r29
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     aae:	41 2f       	mov	r20, r17
     ab0:	63 e6       	ldi	r22, 0x63	; 99
     ab2:	76 e6       	ldi	r23, 0x66	; 102
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     aba:	42 e0       	ldi	r20, 0x02	; 2
     abc:	be 01       	movw	r22, r28
     abe:	6f 5f       	subi	r22, 0xFF	; 255
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     ac8:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     acc:	85 30       	cpi	r24, 0x05	; 5
     ace:	09 f0       	breq	.+2      	; 0xad2 <change_MAXOPENTIME+0x170>
     ad0:	a4 cf       	rjmp	.-184    	; 0xa1a <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     ad2:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     ad6:	60 91 1b 28 	lds	r22, 0x281B	; 0x80281b <encoder_value>
     ada:	8b e0       	ldi	r24, 0x0B	; 11
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 37 12 	call	0x246e	; 0x246e <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     ae2:	84 e0       	ldi	r24, 0x04	; 4
     ae4:	0e 94 8b 01 	call	0x316	; 0x316 <display>

}
     ae8:	65 96       	adiw	r28, 0x15	; 21
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	08 95       	ret

00000b00 <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     b00:	e0 e4       	ldi	r30, 0x40	; 64
     b02:	f4 e0       	ldi	r31, 0x04	; 4
     b04:	8b e0       	ldi	r24, 0x0B	; 11
     b06:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     b08:	98 e0       	ldi	r25, 0x08	; 8
     b0a:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     b0c:	81 8b       	std	Z+17, r24	; 0x11
     b0e:	08 95       	ret

00000b10 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     b10:	8c e0       	ldi	r24, 0x0C	; 12
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     b18:	88 23       	and	r24, r24
     b1a:	79 f0       	breq	.+30     	; 0xb3a <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     b1c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b20:	88 23       	and	r24, r24
     b22:	5c f0       	brlt	.+22     	; 0xb3a <start_FILL+0x2a>
     b24:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b28:	80 ff       	sbrs	r24, 0
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     b32:	e4 e0       	ldi	r30, 0x04	; 4
     b34:	f8 e2       	ldi	r31, 0x28	; 40
     b36:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     b38:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     b3a:	8d e0       	ldi	r24, 0x0D	; 13
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     b42:	88 23       	and	r24, r24
     b44:	79 f0       	breq	.+30     	; 0xb64 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     b46:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b4a:	86 fd       	sbrc	r24, 6
     b4c:	0b c0       	rjmp	.+22     	; 0xb64 <start_FILL+0x54>
     b4e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b52:	81 ff       	sbrs	r24, 1
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     b5c:	e4 e0       	ldi	r30, 0x04	; 4
     b5e:	f8 e2       	ldi	r31, 0x28	; 40
     b60:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     b62:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     b64:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	11 f4       	brne	.+4      	; 0xb70 <start_FILL+0x60>
		display(SCRVALVES);
     b6c:	0e 94 8b 01 	call	0x316	; 0x316 <display>
	}
	status.next_fill = FILLINTERVAL;
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     b78:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0x12>
     b7c:	08 95       	ret

00000b7e <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     b7e:	80 91 1f 28 	lds	r24, 0x281F	; 0x80281f <display_off>
     b82:	88 23       	and	r24, r24
     b84:	29 f0       	breq	.+10     	; 0xb90 <handle_encoder+0x12>
		display(screen_value);
     b86:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     b8a:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     b8e:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     b90:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     b94:	87 30       	cpi	r24, 0x07	; 7
     b96:	a9 f4       	brne	.+42     	; 0xbc2 <handle_encoder+0x44>
		encoder_sensed = FALSE;
     b98:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     b9c:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     ba0:	90 91 1c 28 	lds	r25, 0x281C	; 0x80281c <encoder_change>
     ba4:	89 0f       	add	r24, r25
     ba6:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
		if (screen_value < 0) {
     baa:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     bae:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     bb2:	87 70       	andi	r24, 0x07	; 7
     bb4:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
		}
		display(screen_value);
     bb8:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     bbc:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     bc0:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     bc2:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	f9 f4       	brne	.+62     	; 0xc08 <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     bca:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
		switch (screen_value) {
     bce:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	89 f0       	breq	.+34     	; 0xbf8 <handle_encoder+0x7a>
     bd6:	28 f4       	brcc	.+10     	; 0xbe2 <handle_encoder+0x64>
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	41 f0       	breq	.+16     	; 0xbec <handle_encoder+0x6e>
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	49 f0       	breq	.+18     	; 0xbf2 <handle_encoder+0x74>
     be0:	08 95       	ret
     be2:	86 30       	cpi	r24, 0x06	; 6
     be4:	61 f0       	breq	.+24     	; 0xbfe <handle_encoder+0x80>
     be6:	87 30       	cpi	r24, 0x07	; 7
     be8:	69 f0       	breq	.+26     	; 0xc04 <handle_encoder+0x86>
     bea:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     bec:	0e 94 88 05 	call	0xb10	; 0xb10 <start_FILL>
				break;
     bf0:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     bf2:	0e 94 00 04 	call	0x800	; 0x800 <change_FILLINT>
				break;
     bf6:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     bf8:	0e 94 b1 04 	call	0x962	; 0x962 <change_MAXOPENTIME>
				break;
     bfc:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     bfe:	0e 94 de 03 	call	0x7bc	; 0x7bc <change_DISABLEBLU>
				break;
     c02:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     c04:	0e 94 ef 03 	call	0x7de	; 0x7de <change_DISABLERED>
     c08:	08 95       	ret

00000c0a <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	8f 93       	push	r24
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     c1a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c1e:	81 ff       	sbrs	r24, 1
     c20:	07 c0       	rjmp	.+14     	; 0xc30 <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <encoder_sensed>
     c2e:	1f c0       	rjmp	.+62     	; 0xc6e <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     c30:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c34:	83 ff       	sbrs	r24, 3
     c36:	1b c0       	rjmp	.+54     	; 0xc6e <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     c38:	e0 e4       	ldi	r30, 0x40	; 64
     c3a:	f4 e0       	ldi	r31, 0x04	; 4
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     c40:	80 85       	ldd	r24, Z+8	; 0x08
     c42:	82 ff       	sbrs	r24, 2
     c44:	09 c0       	rjmp	.+18     	; 0xc58 <__vector_24+0x4e>
			encoder_value++;
     c46:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			encoder_change = 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_change>
     c56:	08 c0       	rjmp	.+16     	; 0xc68 <__vector_24+0x5e>
		} else {
			encoder_value--;
     c58:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     c5c:	81 50       	subi	r24, 0x01	; 1
     c5e:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			encoder_change = -1;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_change>
		}
		encoder_sensed = ENCODERA;
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <encoder_sensed>
	}
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	8f 91       	pop	r24
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <init_STATUS>:
	display(SCRVERSION);

}

void init_STATUS()
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29

	status.next_fill = FILLINTERVAL;
     c82:	8a e0       	ldi	r24, 0x0A	; 10
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
     c8a:	c4 e0       	ldi	r28, 0x04	; 4
     c8c:	d8 e2       	ldi	r29, 0x28	; 40
     c8e:	8a 8b       	std	Y+18, r24	; 0x12
	status.opentime_BLU = 0;
     c90:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     c92:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     c94:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     c96:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     c98:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     c9a:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     c9c:	19 8a       	std	Y+17, r1	; 0x11
	status.pressure = read_PRESSURE();
     c9e:	0e 94 27 08 	call	0x104e	; 0x104e <read_PRESSURE>
     ca2:	8c 8b       	std	Y+20, r24	; 0x14

}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <init_PORTS>:
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
*/
	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     caa:	e0 e6       	ldi	r30, 0x60	; 96
     cac:	f4 e0       	ldi	r31, 0x04	; 4
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb2:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb4:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb6:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb8:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cba:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cbc:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cbe:	87 8b       	std	Z+23, r24	; 0x17
     cc0:	08 95       	ret

00000cc2 <init>:
void init_STATUS(void);

void init(void)
{

	minute = FALSE;
     cc2:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>
	seconds = 0;
     cc6:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     cca:	0e 94 55 06 	call	0xcaa	; 0xcaa <init_PORTS>
	init_VALVES();
     cce:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <init_VALVES>
	init_USART();
     cd2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <init_USART>
	init_BUTTONS();
     cd6:	0e 94 27 01 	call	0x24e	; 0x24e <init_BUTTONS>
	init_ENCODER();
     cda:	0e 94 80 05 	call	0xb00	; 0xb00 <init_ENCODER>
	init_TWI();
     cde:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <init_TWI>
	init_RTC(511);
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <init_RTC>
	init_ADC();
     cea:	0e 94 fb 07 	call	0xff6	; 0xff6 <init_ADC>
	init_STATUS();
     cee:	0e 94 3f 06 	call	0xc7e	; 0xc7e <init_STATUS>
	init_OLED(0);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 b3 06 	call	0xd66	; 0xd66 <init_OLED>
	update_VERSION();
     cf8:	0e 94 6d 01 	call	0x2da	; 0x2da <update_VERSION>
	display(SCRVERSION);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 8b 01 	call	0x316	; 0x316 <display>
     d02:	08 95       	ret

00000d04 <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     d04:	0e 94 61 06 	call	0xcc2	; 0xcc2 <init>
	sei();
     d08:	78 94       	sei
			handle_minute();	// See rtc.c
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
		}
		if (recv0_buf.done) {	// Serial communication received
     d0a:	c3 e7       	ldi	r28, 0x73	; 115
     d0c:	d8 e2       	ldi	r29, 0x28	; 40
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     d0e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     d12:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     d14:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     d18:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     d1c:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     d1e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <handle_encoder>
		}
		if (minute) {			// Things to do once a minute
     d22:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <minute>
     d26:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     d28:	0e 94 8a 08 	call	0x1114	; 0x1114 <handle_minute>
		}
		if (tick) {				// Things to do once a second
     d2c:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     d30:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     d32:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <handle_ticks>
		}
		if (recv0_buf.done) {	// Serial communication received
     d36:	88 81       	ld	r24, Y
     d38:	88 23       	and	r24, r24
     d3a:	49 f3       	breq	.-46     	; 0xd0e <main+0xa>
			handle_serial();	// See usart.c
     d3c:	0e 94 87 0a 	call	0x150e	; 0x150e <handle_serial>
     d40:	e6 cf       	rjmp	.-52     	; 0xd0e <main+0xa>

00000d42 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	d6 2f       	mov	r29, r22
     d48:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <start_TWI>
	write_TWI(type);
     d50:	8d 2f       	mov	r24, r29
     d52:	0e 94 20 0a 	call	0x1440	; 0x1440 <write_TWI>
	write_TWI(byteToSend);
     d56:	8c 2f       	mov	r24, r28
     d58:	0e 94 20 0a 	call	0x1440	; 0x1440 <write_TWI>
	stop_TWI();
     d5c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <stop_TWI>

}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d66:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d68:	e0 e0       	ldi	r30, 0x00	; 0
     d6a:	f4 e0       	ldi	r31, 0x04	; 4
     d6c:	90 e8       	ldi	r25, 0x80	; 128
     d6e:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	a6 e4       	ldi	r26, 0x46	; 70
     d74:	b0 e1       	ldi	r27, 0x10	; 16
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <init_OLED+0x10>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     d7c:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d7e:	88 23       	and	r24, r24
     d80:	11 f0       	breq	.+4      	; 0xd86 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d82:	cd e3       	ldi	r28, 0x3D	; 61
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d86:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d88:	4a e2       	ldi	r20, 0x2A	; 42
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	8c 2f       	mov	r24, r28
     d8e:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     d92:	41 e7       	ldi	r20, 0x71	; 113
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	8c 2f       	mov	r24, r28
     d98:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     d9c:	4c e5       	ldi	r20, 0x5C	; 92
     d9e:	60 e4       	ldi	r22, 0x40	; 64
     da0:	8c 2f       	mov	r24, r28
     da2:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     da6:	48 e2       	ldi	r20, 0x28	; 40
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	8c 2f       	mov	r24, r28
     dac:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     db0:	48 e0       	ldi	r20, 0x08	; 8
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	8c 2f       	mov	r24, r28
     db6:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     dba:	4a e2       	ldi	r20, 0x2A	; 42
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	8c 2f       	mov	r24, r28
     dc0:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dc4:	49 e7       	ldi	r20, 0x79	; 121
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	8c 2f       	mov	r24, r28
     dca:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     dce:	45 ed       	ldi	r20, 0xD5	; 213
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	8c 2f       	mov	r24, r28
     dd4:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     dd8:	40 e7       	ldi	r20, 0x70	; 112
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	8c 2f       	mov	r24, r28
     dde:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     de2:	48 e7       	ldi	r20, 0x78	; 120
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	8c 2f       	mov	r24, r28
     de8:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     dec:	48 e0       	ldi	r20, 0x08	; 8
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	8c 2f       	mov	r24, r28
     df2:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     df6:	46 e0       	ldi	r20, 0x06	; 6
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	8c 2f       	mov	r24, r28
     dfc:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     e00:	42 e7       	ldi	r20, 0x72	; 114
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	8c 2f       	mov	r24, r28
     e06:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	60 e4       	ldi	r22, 0x40	; 64
     e0e:	8c 2f       	mov	r24, r28
     e10:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e14:	4a e2       	ldi	r20, 0x2A	; 42
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	8c 2f       	mov	r24, r28
     e1a:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e1e:	49 e7       	ldi	r20, 0x79	; 121
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	8c 2f       	mov	r24, r28
     e24:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     e28:	4a ed       	ldi	r20, 0xDA	; 218
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	8c 2f       	mov	r24, r28
     e2e:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	8c 2f       	mov	r24, r28
     e38:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     e3c:	4c ed       	ldi	r20, 0xDC	; 220
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	8c 2f       	mov	r24, r28
     e42:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	8c 2f       	mov	r24, r28
     e4c:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     e50:	41 e8       	ldi	r20, 0x81	; 129
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	8c 2f       	mov	r24, r28
     e56:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     e5a:	4f e7       	ldi	r20, 0x7F	; 127
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e64:	49 ed       	ldi	r20, 0xD9	; 217
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	8c 2f       	mov	r24, r28
     e6a:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e6e:	41 ef       	ldi	r20, 0xF1	; 241
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	8c 2f       	mov	r24, r28
     e74:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e78:	4b ed       	ldi	r20, 0xDB	; 219
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	8c 2f       	mov	r24, r28
     e7e:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e82:	40 e4       	ldi	r20, 0x40	; 64
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	8c 2f       	mov	r24, r28
     e88:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e8c:	48 e7       	ldi	r20, 0x78	; 120
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	8c 2f       	mov	r24, r28
     e92:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e96:	48 e2       	ldi	r20, 0x28	; 40
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	8c 2f       	mov	r24, r28
     e9c:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	8c 2f       	mov	r24, r28
     ea6:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	8c 2f       	mov	r24, r28
     eb0:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     eb4:	4c e0       	ldi	r20, 0x0C	; 12
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
     ebe:	ba e6       	ldi	r27, 0x6A	; 106
     ec0:	24 e0       	ldi	r18, 0x04	; 4
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	b1 50       	subi	r27, 0x01	; 1
     ec6:	20 40       	sbci	r18, 0x00	; 0
     ec8:	80 40       	sbci	r24, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <init_OLED+0x15e>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     ece:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
     ed2:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
//	timeoutOLED = 5;

}
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	e2 97       	sbiw	r28, 0x32	; 50
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     ef4:	91 e1       	ldi	r25, 0x11	; 17
     ef6:	e4 e7       	ldi	r30, 0x74	; 116
     ef8:	f6 e6       	ldi	r31, 0x66	; 102
     efa:	de 01       	movw	r26, r28
     efc:	92 96       	adiw	r26, 0x22	; 34
     efe:	01 90       	ld	r0, Z+
     f00:	0d 92       	st	X+, r0
     f02:	9a 95       	dec	r25
     f04:	e1 f7       	brne	.-8      	; 0xefe <writestr_OLED+0x24>

	if (displaynumber == 0) {
     f06:	88 23       	and	r24, r24
     f08:	29 f0       	breq	.+10     	; 0xf14 <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     f0a:	0f 2e       	mov	r0, r31
     f0c:	fd e3       	ldi	r31, 0x3D	; 61
     f0e:	ff 2e       	mov	r15, r31
     f10:	f0 2d       	mov	r31, r0
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     f14:	0f 2e       	mov	r0, r31
     f16:	fc e3       	ldi	r31, 0x3C	; 60
     f18:	ff 2e       	mov	r15, r31
     f1a:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     f1c:	8e 01       	movw	r16, r28
     f1e:	0f 5f       	subi	r16, 0xFF	; 255
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <strcpy>
	if (strlen(strbuf) > 16) {
     f28:	f8 01       	movw	r30, r16
     f2a:	01 90       	ld	r0, Z+
     f2c:	00 20       	and	r0, r0
     f2e:	e9 f7       	brne	.-6      	; 0xf2a <writestr_OLED+0x50>
     f30:	31 97       	sbiw	r30, 0x01	; 1
     f32:	e0 1b       	sub	r30, r16
     f34:	f1 0b       	sbc	r31, r17
     f36:	71 97       	sbiw	r30, 0x11	; 17
     f38:	08 f0       	brcs	.+2      	; 0xf3c <writestr_OLED+0x62>
		strbuf[16] = '\0';
     f3a:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     f3c:	be 01       	movw	r22, r28
     f3e:	6e 5d       	subi	r22, 0xDE	; 222
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strcat>

	if (lineno == 1) {
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	d8 12       	cpse	r13, r24
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	8f 2d       	mov	r24, r15
     f56:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <writestr_OLED+0xb4>
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f5c:	40 ec       	ldi	r20, 0xC0	; 192
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	8f 2d       	mov	r24, r15
     f62:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
     f66:	13 c0       	rjmp	.+38     	; 0xf8e <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f68:	f8 01       	movw	r30, r16
     f6a:	41 91       	ld	r20, Z+
     f6c:	8f 01       	movw	r16, r30
     f6e:	60 e4       	ldi	r22, 0x40	; 64
     f70:	8f 2d       	mov	r24, r15
     f72:	0e 94 a1 06 	call	0xd42	; 0xd42 <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f76:	0c 15       	cp	r16, r12
     f78:	1d 05       	cpc	r17, r13
     f7a:	b1 f7       	brne	.-20     	; 0xf68 <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <timerOLED>
     f84:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <timerOLED+0x1>
	display_off = FALSE;
     f88:	10 92 1f 28 	sts	0x281F, r1	; 0x80281f <display_off>

}
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <writestr_OLED+0xc4>
     f8e:	8e 01       	movw	r16, r28
     f90:	0f 5f       	subi	r16, 0xFF	; 255
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	6e 01       	movw	r12, r28
     f96:	f1 e1       	ldi	r31, 0x11	; 17
     f98:	cf 0e       	add	r12, r31
     f9a:	d1 1c       	adc	r13, r1
     f9c:	e5 cf       	rjmp	.-54     	; 0xf68 <writestr_OLED+0x8e>
     f9e:	e2 96       	adiw	r28, 0x32	; 50
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	08 95       	ret

00000fb4 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     fc2:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	be 01       	movw	r22, r28
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     fd0:	42 e0       	ldi	r20, 0x02	; 2
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	81 2f       	mov	r24, r17
     fda:	0e 94 6d 07 	call	0xeda	; 0xeda <writestr_OLED>
	timerOLED = 0;
     fde:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
     fe2:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
	display_off = TRUE;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 1f 28 	sts	0x281F, r24	; 0x80281f <display_off>

}
     fec:	0f 90       	pop	r0
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	08 95       	ret

00000ff6 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
     ffc:	e0 e0       	ldi	r30, 0x00	; 0
     ffe:	f6 e0       	ldi	r31, 0x06	; 6
    1000:	80 81       	ld	r24, Z
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    1006:	a0 ea       	ldi	r26, 0xA0	; 160
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	8c 91       	ld	r24, X
    100c:	80 63       	ori	r24, 0x30	; 48
    100e:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    1010:	a2 e0       	ldi	r26, 0x02	; 2
    1012:	b6 e0       	ldi	r27, 0x06	; 6
    1014:	8c 91       	ld	r24, X
    1016:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    1018:	8c 91       	ld	r24, X
    101a:	80 64       	ori	r24, 0x40	; 64
    101c:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    101e:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    1022:	80 81       	ld	r24, Z
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    1028:	e8 e0       	ldi	r30, 0x08	; 8
    102a:	f6 e0       	ldi	r31, 0x06	; 6
    102c:	80 81       	ld	r24, Z
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    1032:	80 81       	ld	r24, Z
    1034:	80 ff       	sbrs	r24, 0
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <init_ADC+0x4a>
		asm("nop");
    1038:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    103a:	80 81       	ld	r24, Z
    103c:	80 fd       	sbrc	r24, 0
    103e:	fc cf       	rjmp	.-8      	; 0x1038 <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    1040:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1044:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    1048:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <status+0x14>
    104c:	08 95       	ret

0000104e <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    104e:	bf 92       	push	r11
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	0f 2e       	mov	r0, r31
    1062:	fa e0       	ldi	r31, 0x0A	; 10
    1064:	bf 2e       	mov	r11, r31
    1066:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    1068:	c1 2c       	mov	r12, r1
    106a:	d1 2c       	mov	r13, r1
    106c:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    106e:	c8 e0       	ldi	r28, 0x08	; 8
    1070:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1072:	00 e1       	ldi	r16, 0x10	; 16
    1074:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1076:	88 81       	ld	r24, Y
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    107c:	88 81       	ld	r24, Y
    107e:	80 ff       	sbrs	r24, 0
    1080:	04 c0       	rjmp	.+8      	; 0x108a <read_PRESSURE+0x3c>
			asm("nop");
    1082:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1084:	88 81       	ld	r24, Y
    1086:	80 fd       	sbrc	r24, 0
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    108a:	f8 01       	movw	r30, r16
    108c:	60 81       	ld	r22, Z
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__addsf3>
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
    10a8:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    10aa:	b1 10       	cpse	r11, r1
    10ac:	e4 cf       	rjmp	.-56     	; 0x1076 <read_PRESSURE+0x28>
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}
	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__divsf3>
    10ba:	2e e5       	ldi	r18, 0x5E	; 94
    10bc:	3a eb       	ldi	r19, 0xBA	; 186
    10be:	49 e5       	ldi	r20, 0x59	; 89
    10c0:	5f e3       	ldi	r21, 0x3F	; 63
    10c2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    10c6:	2f e1       	ldi	r18, 0x1F	; 31
    10c8:	35 e8       	ldi	r19, 0x85	; 133
    10ca:	45 ec       	ldi	r20, 0xC5	; 197
    10cc:	51 e4       	ldi	r21, 0x41	; 65
    10ce:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__subsf3>
    10d2:	6b 01       	movw	r12, r22
    10d4:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__cmpsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	1c f4       	brge	.+6      	; 0x10ea <read_PRESSURE+0x9c>
		value = 0.0;
    10e4:	c1 2c       	mov	r12, r1
    10e6:	d1 2c       	mov	r13, r1
    10e8:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	5f e3       	ldi	r21, 0x3F	; 63
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__addsf3>
    10fa:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fixunssfsi>
    10fe:	86 2f       	mov	r24, r22

}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	bf 90       	pop	r11
    1112:	08 95       	ret

00001114 <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    1114:	cf 93       	push	r28

	minute = FALSE;
    1116:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>

	if (BLUVALVEOPEN) {
    111a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    111e:	88 23       	and	r24, r24
    1120:	8c f4       	brge	.+34     	; 0x1144 <handle_minute+0x30>
		status.opentime_BLU++;
    1122:	e4 e0       	ldi	r30, 0x04	; 4
    1124:	f8 e2       	ldi	r31, 0x28	; 40
    1126:	c3 85       	ldd	r28, Z+11	; 0x0b
    1128:	cf 5f       	subi	r28, 0xFF	; 255
    112a:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    112c:	8b e0       	ldi	r24, 0x0B	; 11
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
    1134:	c8 17       	cp	r28, r24
    1136:	30 f0       	brcs	.+12     	; 0x1144 <handle_minute+0x30>
			CLOSEVALVE(BLUVALVE);
    1138:	80 e8       	ldi	r24, 0x80	; 128
    113a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 13 28 	sts	0x2813, r24	; 0x802813 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    1144:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1148:	86 ff       	sbrs	r24, 6
    114a:	11 c0       	rjmp	.+34     	; 0x116e <handle_minute+0x5a>
		status.opentime_RED++;
    114c:	e4 e0       	ldi	r30, 0x04	; 4
    114e:	f8 e2       	ldi	r31, 0x28	; 40
    1150:	c4 85       	ldd	r28, Z+12	; 0x0c
    1152:	cf 5f       	subi	r28, 0xFF	; 255
    1154:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    1156:	8b e0       	ldi	r24, 0x0B	; 11
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
    115e:	c8 17       	cp	r28, r24
    1160:	30 f0       	brcs	.+12     	; 0x116e <handle_minute+0x5a>
			CLOSEVALVE(REDVALVE);
    1162:	80 e4       	ldi	r24, 0x40	; 64
    1164:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 14 28 	sts	0x2814, r24	; 0x802814 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    116e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1172:	85 ff       	sbrs	r24, 5
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <handle_minute+0x7c>
		status.opentime_BUF++;
    1176:	e4 e0       	ldi	r30, 0x04	; 4
    1178:	f8 e2       	ldi	r31, 0x28	; 40
    117a:	85 85       	ldd	r24, Z+13	; 0x0d
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// MAX OPEN ERROR
    1180:	8a 30       	cpi	r24, 0x0A	; 10
    1182:	30 f0       	brcs	.+12     	; 0x1190 <handle_minute+0x7c>
			CLOSEVALVE(BUFVALVE);
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BUF = TRUE;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 15 28 	sts	0x2815, r24	; 0x802815 <status+0x11>
		}
	}

	if (SUPVALVEOPEN) {
    1190:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1194:	84 ff       	sbrs	r24, 4
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <handle_minute+0x8e>
		status.opentime_SUP++;				// Increment supply dewar time
    1198:	e4 e0       	ldi	r30, 0x04	; 4
    119a:	f8 e2       	ldi	r31, 0x28	; 40
    119c:	86 85       	ldd	r24, Z+14	; 0x0e
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    11a2:	e4 e0       	ldi	r30, 0x04	; 4
    11a4:	f8 e2       	ldi	r31, 0x28	; 40
    11a6:	82 89       	ldd	r24, Z+18	; 0x12
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	82 8b       	std	Z+18, r24	; 0x12
	if (status.next_fill == 0) {
    11ac:	81 11       	cpse	r24, r1
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <handle_minute+0xa0>
		start_FILL();						// See encoder.c
    11b0:	0e 94 88 05 	call	0xb10	; 0xb10 <start_FILL>
	}
}
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <handle_ticks>:
THINGS TO DO EVERY SECOND
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    11b8:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {
    11bc:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    11c0:	8c 33       	cpi	r24, 0x3C	; 60
    11c2:	28 f0       	brcs	.+10     	; 0x11ce <handle_ticks+0x16>
		minute = TRUE;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <minute>
		seconds = 0;
    11ca:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}
	status.pressure = read_PRESSURE();		// LN2 pressure
    11ce:	0e 94 27 08 	call	0x104e	; 0x104e <read_PRESSURE>
    11d2:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <status+0x14>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {	// Valve open, therm cold
    11d6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11da:	88 23       	and	r24, r24
    11dc:	a4 f4       	brge	.+40     	; 0x1206 <handle_ticks+0x4e>
    11de:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    11e2:	80 fd       	sbrc	r24, 0
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <handle_ticks+0x4e>
		CLOSEVALVE(BLUVALVE);
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if ((screen_value == SCRVALVES) && timerOLED) {
    11ec:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	49 f4       	brne	.+18     	; 0x1206 <handle_ticks+0x4e>
    11f4:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    11f8:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    11fc:	89 2b       	or	r24, r25
    11fe:	19 f0       	breq	.+6      	; 0x1206 <handle_ticks+0x4e>
			display(SCRVALVES);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	0e 94 8b 01 	call	0x316	; 0x316 <display>
		}
//		status.opentime_BLU = 0;
//		status.maxopen_BLU = FALSE;
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {	// Valve open, therm cold
    1206:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    120a:	86 ff       	sbrs	r24, 6
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <handle_ticks+0x7e>
    120e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1212:	81 fd       	sbrc	r24, 1
    1214:	10 c0       	rjmp	.+32     	; 0x1236 <handle_ticks+0x7e>
		CLOSEVALVE(REDVALVE);
    1216:	80 e4       	ldi	r24, 0x40	; 64
    1218:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if ((screen_value == SCRVALVES) && timerOLED) {
    121c:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	49 f4       	brne	.+18     	; 0x1236 <handle_ticks+0x7e>
    1224:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    1228:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    122c:	89 2b       	or	r24, r25
    122e:	91 f1       	breq	.+100    	; 0x1294 <handle_ticks+0xdc>
			display(SCRVALVES);
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 8b 01 	call	0x316	; 0x316 <display>
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {	// Valve open, therm cold
    1236:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    123a:	85 ff       	sbrs	r24, 5
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <handle_ticks+0xae>
    123e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1242:	82 fd       	sbrc	r24, 2
    1244:	10 c0       	rjmp	.+32     	; 0x1266 <handle_ticks+0xae>
		CLOSEVALVE(BUFVALVE);
    1246:	80 e2       	ldi	r24, 0x20	; 32
    1248:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if ((screen_value == SCRVALVES) && timerOLED) {
    124c:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	49 f4       	brne	.+18     	; 0x1266 <handle_ticks+0xae>
    1254:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    1258:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    125c:	89 2b       	or	r24, r25
    125e:	11 f1       	breq	.+68     	; 0x12a4 <handle_ticks+0xec>
			display(SCRVALVES);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 8b 01 	call	0x316	; 0x316 <display>
//		status.buildpressure_time = 0;
//		status.opentime_BUF = 0;
//		status.maxopen_BUF = FALSE;
	}

	if (timerOLED) {
    1266:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    126a:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	c9 f0       	breq	.+50     	; 0x12a4 <handle_ticks+0xec>
//		if (timerOLED > timeoutOLED) {	// Display timeout
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    1272:	8b 30       	cpi	r24, 0x0B	; 11
    1274:	91 05       	cpc	r25, r1
    1276:	40 f0       	brcs	.+16     	; 0x1288 <handle_ticks+0xd0>
			clear_OLED(0);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <clear_OLED>
			timerOLED = 0;
    127e:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
    1282:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
    1286:	08 95       	ret
		} else {
			timerOLED++;
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <timerOLED>
    128e:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <timerOLED+0x1>
		}
	}
}
    1292:	08 95       	ret
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {	// Valve open, therm cold
    1294:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1298:	85 ff       	sbrs	r24, 5
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <handle_ticks+0xec>
    129c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12a0:	82 ff       	sbrs	r24, 2
    12a2:	d1 cf       	rjmp	.-94     	; 0x1246 <handle_ticks+0x8e>
    12a4:	08 95       	ret

000012a6 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    12a6:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    12a8:	e0 e6       	ldi	r30, 0x60	; 96
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    12b0:	98 ed       	ldi	r25, 0xD8	; 216
    12b2:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    12b4:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    12b6:	83 81       	ldd	r24, Z+3	; 0x03
    12b8:	86 ff       	sbrs	r24, 6
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <init_RTC+0x1e>
		asm("nop");
    12bc:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	96 fd       	sbrc	r25, 6
    12c2:	fc cf       	rjmp	.-8      	; 0x12bc <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    12c4:	e0 e6       	ldi	r30, 0x60	; 96
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    12ca:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    12cc:	88 ed       	ldi	r24, 0xD8	; 216
    12ce:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    12d0:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    12d2:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    12d4:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    12d6:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    12d8:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    12da:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    12de:	88 23       	and	r24, r24
    12e0:	31 f0       	breq	.+12     	; 0x12ee <init_RTC+0x48>
    12e2:	e0 e4       	ldi	r30, 0x40	; 64
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    12e6:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	91 11       	cpse	r25, r1
    12ec:	fc cf       	rjmp	.-8      	; 0x12e6 <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    12ee:	e0 e4       	ldi	r30, 0x40	; 64
    12f0:	f1 e0       	ldi	r31, 0x01	; 1
    12f2:	22 87       	std	Z+10, r18	; 0x0a
    12f4:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    12fa:	85 81       	ldd	r24, Z+5	; 0x05
    12fc:	81 60       	ori	r24, 0x01	; 1
    12fe:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    1300:	81 eb       	ldi	r24, 0xB1	; 177
    1302:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	81 60       	ori	r24, 0x01	; 1
    1308:	82 83       	std	Z+2, r24	; 0x02
    130a:	08 95       	ret

0000130c <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    1320:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    132a:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    133c:	10 92 20 28 	sts	0x2820, r1	; 0x802820 <ticks_TCB0>
    1340:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    1344:	25 e0       	ldi	r18, 0x05	; 5
    1346:	3d e0       	ldi	r19, 0x0D	; 13
    1348:	ac 01       	movw	r20, r24
    134a:	42 9f       	mul	r20, r18
    134c:	c0 01       	movw	r24, r0
    134e:	43 9f       	mul	r20, r19
    1350:	90 0d       	add	r25, r0
    1352:	52 9f       	mul	r21, r18
    1354:	90 0d       	add	r25, r0
    1356:	11 24       	eor	r1, r1
    1358:	e0 e8       	ldi	r30, 0x80	; 128
    135a:	fa e0       	ldi	r31, 0x0A	; 10
    135c:	84 87       	std	Z+12, r24	; 0x0c
    135e:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    1364:	80 83       	st	Z, r24
    1366:	08 95       	ret

00001368 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    1368:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    136c:	08 95       	ret

0000136e <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    1382:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <ticks_TCB0>
    1386:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <ticks_TCB0+0x1>
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <ticks_TCB0>
    1390:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <ticks_TCB0+0x1>

    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    13a2:	e0 ea       	ldi	r30, 0xA0	; 160
    13a4:	f8 e0       	ldi	r31, 0x08	; 8
    13a6:	8b e0       	ldi	r24, 0x0B	; 11
    13a8:	86 83       	std	Z+6, r24	; 0x06
    13aa:	83 81       	ldd	r24, Z+3	; 0x03
    13ac:	81 60       	ori	r24, 0x01	; 1
    13ae:	83 83       	std	Z+3, r24	; 0x03
    13b0:	85 81       	ldd	r24, Z+5	; 0x05
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	85 83       	std	Z+5, r24	; 0x05
    13b6:	08 95       	ret

000013b8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    13b8:	61 30       	cpi	r22, 0x01	; 1
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <start_TWI+0xe>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    13bc:	88 0f       	add	r24, r24
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <start_TWI+0x14>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    13c6:	88 0f       	add	r24, r24
    13c8:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 9e 09 	call	0x133c	; 0x133c <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    13d4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13d8:	80 7c       	andi	r24, 0xC0	; 192
    13da:	b9 f4       	brne	.+46     	; 0x140a <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    13dc:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <ticks_TCB0>
    13e0:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <ticks_TCB0+0x1>
    13e4:	0b 97       	sbiw	r24, 0x0b	; 11
    13e6:	48 f4       	brcc	.+18     	; 0x13fa <start_TWI+0x42>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    13e8:	e0 ea       	ldi	r30, 0xA0	; 160
    13ea:	f8 e0       	ldi	r31, 0x08	; 8
    13ec:	0a c0       	rjmp	.+20     	; 0x1402 <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    13ee:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <ticks_TCB0>
    13f2:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <ticks_TCB0+0x1>
    13f6:	0b 97       	sbiw	r24, 0x0b	; 11
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <start_TWI+0x4a>
			stop_TCB0();
    13fa:	0e 94 b4 09 	call	0x1368	; 0x1368 <stop_TCB0>
			return(TWITIMEOUT);
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    1402:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1404:	85 81       	ldd	r24, Z+5	; 0x05
    1406:	80 7c       	andi	r24, 0xC0	; 192
    1408:	91 f3       	breq	.-28     	; 0x13ee <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    140a:	0e 94 b4 09 	call	0x1368	; 0x1368 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    140e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1412:	82 fd       	sbrc	r24, 2
    1414:	0b c0       	rjmp	.+22     	; 0x142c <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    1416:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    141a:	83 fd       	sbrc	r24, 3
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    141e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1422:	89 2f       	mov	r24, r25
    1424:	80 71       	andi	r24, 0x10	; 16
    1426:	94 fd       	sbrc	r25, 4
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <start_TWI+0x7c>
    142a:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    1434:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    1436:	08 95       	ret

00001438 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    1438:	87 e0       	ldi	r24, 0x07	; 7
    143a:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    143e:	08 95       	ret

00001440 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1440:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1444:	96 fd       	sbrc	r25, 6
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <write_TWI+0x14>
    1448:	e0 ea       	ldi	r30, 0xA0	; 160
    144a:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    144c:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    144e:	95 81       	ldd	r25, Z+5	; 0x05
    1450:	96 ff       	sbrs	r25, 6
    1452:	fc cf       	rjmp	.-8      	; 0x144c <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    1454:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 9e 09 	call	0x133c	; 0x133c <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1460:	e0 ea       	ldi	r30, 0xA0	; 160
    1462:	f8 e0       	ldi	r31, 0x08	; 8
    1464:	0b c0       	rjmp	.+22     	; 0x147c <write_TWI+0x3c>
		asm("nop");
    1466:	00 00       	nop
		if (ticks_TCB0 > 50) {
    1468:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <ticks_TCB0>
    146c:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <ticks_TCB0+0x1>
    1470:	c3 97       	sbiw	r24, 0x33	; 51
    1472:	20 f0       	brcs	.+8      	; 0x147c <write_TWI+0x3c>
			stop_TCB0();
    1474:	0e 94 b4 09 	call	0x1368	; 0x1368 <stop_TCB0>
			return(TWITIMEOUT);
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    147c:	85 81       	ldd	r24, Z+5	; 0x05
    147e:	86 ff       	sbrs	r24, 6
    1480:	f2 cf       	rjmp	.-28     	; 0x1466 <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    1482:	0e 94 b4 09 	call	0x1368	; 0x1368 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    1486:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    148a:	89 2f       	mov	r24, r25
    148c:	80 71       	andi	r24, 0x10	; 16
    148e:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    1490:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    1492:	08 95       	ret

00001494 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    1494:	e0 e0       	ldi	r30, 0x00	; 0
    1496:	f4 e0       	ldi	r31, 0x04	; 4
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    149c:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    149e:	e0 e0       	ldi	r30, 0x00	; 0
    14a0:	f8 e0       	ldi	r31, 0x08	; 8
    14a2:	2d e6       	ldi	r18, 0x6D	; 109
    14a4:	35 e0       	ldi	r19, 0x05	; 5
    14a6:	20 87       	std	Z+8, r18	; 0x08
    14a8:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    14aa:	95 81       	ldd	r25, Z+5	; 0x05
    14ac:	90 68       	ori	r25, 0x80	; 128
    14ae:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    14b0:	96 81       	ldd	r25, Z+6	; 0x06
    14b2:	90 64       	ori	r25, 0x40	; 64
    14b4:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    14b6:	96 81       	ldd	r25, Z+6	; 0x06
    14b8:	90 68       	ori	r25, 0x80	; 128
    14ba:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    14bc:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <recv0_buf+0x53>
	send0_buf.length = 0;
    14c0:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <send0_buf+0x53>
	recv0_buf.nxfrd = 0;
    14c4:	10 92 74 28 	sts	0x2874, r1	; 0x802874 <recv0_buf+0x52>
	send0_buf.nxfrd = 0;
    14c8:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <send0_buf+0x52>
	recv0_buf.done = FALSE;				// Ready to receive data
    14cc:	10 92 73 28 	sts	0x2873, r1	; 0x802873 <recv0_buf+0x51>
	send0_buf.done = TRUE;				// No data to send
    14d0:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <send0_buf+0x51>
    14d4:	08 95       	ret

000014d6 <send_USART>:
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
	uint8_t i;
	send0_buf.length = nbytes;
    14d6:	60 93 c9 28 	sts	0x28C9, r22	; 0x8028c9 <send0_buf+0x53>
	send0_buf.nxfrd = 0;
    14da:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <send0_buf+0x52>
	send0_buf.done = FALSE;
    14de:	10 92 c7 28 	sts	0x28C7, r1	; 0x8028c7 <send0_buf+0x51>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    14e2:	66 23       	and	r22, r22
    14e4:	71 f0       	breq	.+28     	; 0x1502 <send_USART+0x2c>
    14e6:	a8 2f       	mov	r26, r24
    14e8:	b9 2f       	mov	r27, r25
    14ea:	e6 e7       	ldi	r30, 0x76	; 118
    14ec:	f8 e2       	ldi	r31, 0x28	; 40
    14ee:	61 50       	subi	r22, 0x01	; 1
    14f0:	26 2f       	mov	r18, r22
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	29 58       	subi	r18, 0x89	; 137
    14f6:	37 4d       	sbci	r19, 0xD7	; 215
		send0_buf.data[i] = *data++;
    14f8:	8d 91       	ld	r24, X+
    14fa:	81 93       	st	Z+, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    14fc:	e2 17       	cp	r30, r18
    14fe:	f3 07       	cpc	r31, r19
    1500:	d9 f7       	brne	.-10     	; 0x14f8 <send_USART+0x22>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    1502:	e0 e0       	ldi	r30, 0x00	; 0
    1504:	f8 e0       	ldi	r31, 0x08	; 8
    1506:	85 81       	ldd	r24, Z+5	; 0x05
    1508:	80 62       	ori	r24, 0x20	; 32
    150a:	85 83       	std	Z+5, r24	; 0x05
    150c:	08 95       	ret

0000150e <handle_serial>:
	[2] - Red dewar valve status <O|C|T|X>
	[3] - Blue dewar valve status <O|C|T|X>
	[4-6] - Fill interval in minutes
------------------------------------------------------------------------------*/
void handle_serial(void)
{
    150e:	af 92       	push	r10
    1510:	bf 92       	push	r11
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	c2 5a       	subi	r28, 0xA2	; 162
    1528:	d1 09       	sbc	r29, r1
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	de bf       	out	0x3e, r29	; 62
	char strbuf[81], tempstr[81];

	recv0_buf.done = FALSE;
    152e:	10 92 73 28 	sts	0x2873, r1	; 0x802873 <recv0_buf+0x51>

	// Buffer dewar supply Valve
	strcpy(strbuf, "SUP,");
    1532:	85 e0       	ldi	r24, 0x05	; 5
    1534:	e5 e8       	ldi	r30, 0x85	; 133
    1536:	f6 e6       	ldi	r31, 0x66	; 102
    1538:	de 01       	movw	r26, r28
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	01 90       	ld	r0, Z+
    153e:	0d 92       	st	X+, r0
    1540:	8a 95       	dec	r24
    1542:	e1 f7       	brne	.-8      	; 0x153c <handle_serial+0x2e>
	if (SUPVALVEOPEN) {
    1544:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1548:	84 ff       	sbrs	r24, 4
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <handle_serial+0x54>
		strcat(strbuf, "O");
    154c:	fe 01       	movw	r30, r28
    154e:	31 96       	adiw	r30, 0x01	; 1
    1550:	01 90       	ld	r0, Z+
    1552:	00 20       	and	r0, r0
    1554:	e9 f7       	brne	.-6      	; 0x1550 <handle_serial+0x42>
    1556:	31 97       	sbiw	r30, 0x01	; 1
    1558:	8f e4       	ldi	r24, 0x4F	; 79
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	80 83       	st	Z, r24
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <handle_serial+0x68>
	} else {
		strcat(strbuf, "C");
    1562:	fe 01       	movw	r30, r28
    1564:	31 96       	adiw	r30, 0x01	; 1
    1566:	01 90       	ld	r0, Z+
    1568:	00 20       	and	r0, r0
    156a:	e9 f7       	brne	.-6      	; 0x1566 <handle_serial+0x58>
    156c:	31 97       	sbiw	r30, 0x01	; 1
    156e:	83 e4       	ldi	r24, 0x43	; 67
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	80 83       	st	Z, r24
    1574:	91 83       	std	Z+1, r25	; 0x01
	}

	// Buffer dewar vent valve
	strcat(strbuf, ",BUF,");
    1576:	de 01       	movw	r26, r28
    1578:	11 96       	adiw	r26, 0x01	; 1
    157a:	0d 90       	ld	r0, X+
    157c:	00 20       	and	r0, r0
    157e:	e9 f7       	brne	.-6      	; 0x157a <handle_serial+0x6c>
    1580:	11 97       	sbiw	r26, 0x01	; 1
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	ea e8       	ldi	r30, 0x8A	; 138
    1586:	f6 e6       	ldi	r31, 0x66	; 102
    1588:	01 90       	ld	r0, Z+
    158a:	0d 92       	st	X+, r0
    158c:	8a 95       	dec	r24
    158e:	e1 f7       	brne	.-8      	; 0x1588 <handle_serial+0x7a>
	if (status.maxopen_BUF) {
    1590:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
    1594:	88 23       	and	r24, r24
    1596:	59 f0       	breq	.+22     	; 0x15ae <handle_serial+0xa0>
		strcat(strbuf, "T");
    1598:	fe 01       	movw	r30, r28
    159a:	31 96       	adiw	r30, 0x01	; 1
    159c:	01 90       	ld	r0, Z+
    159e:	00 20       	and	r0, r0
    15a0:	e9 f7       	brne	.-6      	; 0x159c <handle_serial+0x8e>
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	84 e5       	ldi	r24, 0x54	; 84
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	19 c0       	rjmp	.+50     	; 0x15e0 <handle_serial+0xd2>
	} else if (BUFVALVEOPEN) {
    15ae:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    15b2:	85 ff       	sbrs	r24, 5
    15b4:	0b c0       	rjmp	.+22     	; 0x15cc <handle_serial+0xbe>
		strcat(strbuf, "O");
    15b6:	fe 01       	movw	r30, r28
    15b8:	31 96       	adiw	r30, 0x01	; 1
    15ba:	01 90       	ld	r0, Z+
    15bc:	00 20       	and	r0, r0
    15be:	e9 f7       	brne	.-6      	; 0x15ba <handle_serial+0xac>
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	8f e4       	ldi	r24, 0x4F	; 79
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	80 83       	st	Z, r24
    15c8:	91 83       	std	Z+1, r25	; 0x01
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <handle_serial+0xd2>
	} else {
		strcat(strbuf, "C");
    15cc:	fe 01       	movw	r30, r28
    15ce:	31 96       	adiw	r30, 0x01	; 1
    15d0:	01 90       	ld	r0, Z+
    15d2:	00 20       	and	r0, r0
    15d4:	e9 f7       	brne	.-6      	; 0x15d0 <handle_serial+0xc2>
    15d6:	31 97       	sbiw	r30, 0x01	; 1
    15d8:	83 e4       	ldi	r24, 0x43	; 67
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
	}

	// Red CCD vent valve
	strcat(strbuf,",RED,");
    15e0:	de 01       	movw	r26, r28
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	0d 90       	ld	r0, X+
    15e6:	00 20       	and	r0, r0
    15e8:	e9 f7       	brne	.-6      	; 0x15e4 <handle_serial+0xd6>
    15ea:	11 97       	sbiw	r26, 0x01	; 1
    15ec:	86 e0       	ldi	r24, 0x06	; 6
    15ee:	e0 e9       	ldi	r30, 0x90	; 144
    15f0:	f6 e6       	ldi	r31, 0x66	; 102
    15f2:	01 90       	ld	r0, Z+
    15f4:	0d 92       	st	X+, r0
    15f6:	8a 95       	dec	r24
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <handle_serial+0xe4>
	if (!REDENABLED) {
    15fa:	8d e0       	ldi	r24, 0x0D	; 13
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
    1602:	81 11       	cpse	r24, r1
    1604:	0b c0       	rjmp	.+22     	; 0x161c <handle_serial+0x10e>
		strcat(strbuf, "X");
    1606:	fe 01       	movw	r30, r28
    1608:	31 96       	adiw	r30, 0x01	; 1
    160a:	01 90       	ld	r0, Z+
    160c:	00 20       	and	r0, r0
    160e:	e9 f7       	brne	.-6      	; 0x160a <handle_serial+0xfc>
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	88 e5       	ldi	r24, 0x58	; 88
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	80 83       	st	Z, r24
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	28 c0       	rjmp	.+80     	; 0x166c <handle_serial+0x15e>
	} else if (status.maxopen_RED) {
    161c:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
    1620:	88 23       	and	r24, r24
    1622:	59 f0       	breq	.+22     	; 0x163a <handle_serial+0x12c>
		strcat(strbuf, "T");
    1624:	fe 01       	movw	r30, r28
    1626:	31 96       	adiw	r30, 0x01	; 1
    1628:	01 90       	ld	r0, Z+
    162a:	00 20       	and	r0, r0
    162c:	e9 f7       	brne	.-6      	; 0x1628 <handle_serial+0x11a>
    162e:	31 97       	sbiw	r30, 0x01	; 1
    1630:	84 e5       	ldi	r24, 0x54	; 84
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	80 83       	st	Z, r24
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	19 c0       	rjmp	.+50     	; 0x166c <handle_serial+0x15e>
	} else if (REDVALVEOPEN) {
    163a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    163e:	86 ff       	sbrs	r24, 6
    1640:	0b c0       	rjmp	.+22     	; 0x1658 <handle_serial+0x14a>
		strcat(strbuf, "O");
    1642:	fe 01       	movw	r30, r28
    1644:	31 96       	adiw	r30, 0x01	; 1
    1646:	01 90       	ld	r0, Z+
    1648:	00 20       	and	r0, r0
    164a:	e9 f7       	brne	.-6      	; 0x1646 <handle_serial+0x138>
    164c:	31 97       	sbiw	r30, 0x01	; 1
    164e:	8f e4       	ldi	r24, 0x4F	; 79
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	80 83       	st	Z, r24
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	0a c0       	rjmp	.+20     	; 0x166c <handle_serial+0x15e>
	} else {
		strcat(strbuf, "C");
    1658:	fe 01       	movw	r30, r28
    165a:	31 96       	adiw	r30, 0x01	; 1
    165c:	01 90       	ld	r0, Z+
    165e:	00 20       	and	r0, r0
    1660:	e9 f7       	brne	.-6      	; 0x165c <handle_serial+0x14e>
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	83 e4       	ldi	r24, 0x43	; 67
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	80 83       	st	Z, r24
    166a:	91 83       	std	Z+1, r25	; 0x01
	}

	// Blue CCD vent valve
	strcat(strbuf, ",BLU,");
    166c:	de 01       	movw	r26, r28
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	0d 90       	ld	r0, X+
    1672:	00 20       	and	r0, r0
    1674:	e9 f7       	brne	.-6      	; 0x1670 <handle_serial+0x162>
    1676:	11 97       	sbiw	r26, 0x01	; 1
    1678:	86 e0       	ldi	r24, 0x06	; 6
    167a:	e6 e9       	ldi	r30, 0x96	; 150
    167c:	f6 e6       	ldi	r31, 0x66	; 102
    167e:	01 90       	ld	r0, Z+
    1680:	0d 92       	st	X+, r0
    1682:	8a 95       	dec	r24
    1684:	e1 f7       	brne	.-8      	; 0x167e <handle_serial+0x170>
	if (!BLUENABLED) {
    1686:	8c e0       	ldi	r24, 0x0C	; 12
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
    168e:	81 11       	cpse	r24, r1
    1690:	0b c0       	rjmp	.+22     	; 0x16a8 <handle_serial+0x19a>
		strcat(strbuf, "X");
    1692:	fe 01       	movw	r30, r28
    1694:	31 96       	adiw	r30, 0x01	; 1
    1696:	01 90       	ld	r0, Z+
    1698:	00 20       	and	r0, r0
    169a:	e9 f7       	brne	.-6      	; 0x1696 <handle_serial+0x188>
    169c:	31 97       	sbiw	r30, 0x01	; 1
    169e:	88 e5       	ldi	r24, 0x58	; 88
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	80 83       	st	Z, r24
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	28 c0       	rjmp	.+80     	; 0x16f8 <handle_serial+0x1ea>
		} else if (status.maxopen_BLU) {
    16a8:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
    16ac:	88 23       	and	r24, r24
    16ae:	59 f0       	breq	.+22     	; 0x16c6 <handle_serial+0x1b8>
		strcat(strbuf, "T");
    16b0:	fe 01       	movw	r30, r28
    16b2:	31 96       	adiw	r30, 0x01	; 1
    16b4:	01 90       	ld	r0, Z+
    16b6:	00 20       	and	r0, r0
    16b8:	e9 f7       	brne	.-6      	; 0x16b4 <handle_serial+0x1a6>
    16ba:	31 97       	sbiw	r30, 0x01	; 1
    16bc:	84 e5       	ldi	r24, 0x54	; 84
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	80 83       	st	Z, r24
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	19 c0       	rjmp	.+50     	; 0x16f8 <handle_serial+0x1ea>
		} else if (BLUVALVEOPEN) {
    16c6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    16ca:	88 23       	and	r24, r24
    16cc:	5c f4       	brge	.+22     	; 0x16e4 <handle_serial+0x1d6>
		strcat(strbuf, "O");
    16ce:	fe 01       	movw	r30, r28
    16d0:	31 96       	adiw	r30, 0x01	; 1
    16d2:	01 90       	ld	r0, Z+
    16d4:	00 20       	and	r0, r0
    16d6:	e9 f7       	brne	.-6      	; 0x16d2 <handle_serial+0x1c4>
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	8f e4       	ldi	r24, 0x4F	; 79
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	80 83       	st	Z, r24
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <handle_serial+0x1ea>
		} else {
		strcat(strbuf, "C");
    16e4:	fe 01       	movw	r30, r28
    16e6:	31 96       	adiw	r30, 0x01	; 1
    16e8:	01 90       	ld	r0, Z+
    16ea:	00 20       	and	r0, r0
    16ec:	e9 f7       	brne	.-6      	; 0x16e8 <handle_serial+0x1da>
    16ee:	31 97       	sbiw	r30, 0x01	; 1
    16f0:	83 e4       	ldi	r24, 0x43	; 67
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	80 83       	st	Z, r24
    16f6:	91 83       	std	Z+1, r25	; 0x01
	}

	// Fill interval
	strcat(strbuf, ",INT,");
    16f8:	8e 01       	movw	r16, r28
    16fa:	0f 5f       	subi	r16, 0xFF	; 255
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	d8 01       	movw	r26, r16
    1700:	0d 90       	ld	r0, X+
    1702:	00 20       	and	r0, r0
    1704:	e9 f7       	brne	.-6      	; 0x1700 <handle_serial+0x1f2>
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	ec e9       	ldi	r30, 0x9C	; 156
    170c:	f6 e6       	ldi	r31, 0x66	; 102
    170e:	01 90       	ld	r0, Z+
    1710:	0d 92       	st	X+, r0
    1712:	8a 95       	dec	r24
    1714:	e1 f7       	brne	.-8      	; 0x170e <handle_serial+0x200>
	sprintf(tempstr, "%d", FILLINTERVAL);
    1716:	8a e0       	ldi	r24, 0x0A	; 10
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
    171e:	1f 92       	push	r1
    1720:	8f 93       	push	r24
    1722:	0f 2e       	mov	r0, r31
    1724:	f2 ea       	ldi	r31, 0xA2	; 162
    1726:	cf 2e       	mov	r12, r31
    1728:	f6 e6       	ldi	r31, 0x66	; 102
    172a:	df 2e       	mov	r13, r31
    172c:	f0 2d       	mov	r31, r0
    172e:	df 92       	push	r13
    1730:	cf 92       	push	r12
    1732:	7e 01       	movw	r14, r28
    1734:	22 e5       	ldi	r18, 0x52	; 82
    1736:	e2 0e       	add	r14, r18
    1738:	f1 1c       	adc	r15, r1
    173a:	ff 92       	push	r15
    173c:	ef 92       	push	r14
    173e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
	strcat(strbuf, tempstr);
    1742:	b7 01       	movw	r22, r14
    1744:	c8 01       	movw	r24, r16
    1746:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strcat>

	// Time to next fill
	strcat(strbuf, ",NEXT,");
    174a:	d8 01       	movw	r26, r16
    174c:	0d 90       	ld	r0, X+
    174e:	00 20       	and	r0, r0
    1750:	e9 f7       	brne	.-6      	; 0x174c <handle_serial+0x23e>
    1752:	11 97       	sbiw	r26, 0x01	; 1
    1754:	87 e0       	ldi	r24, 0x07	; 7
    1756:	e5 ea       	ldi	r30, 0xA5	; 165
    1758:	f6 e6       	ldi	r31, 0x66	; 102
    175a:	01 90       	ld	r0, Z+
    175c:	0d 92       	st	X+, r0
    175e:	8a 95       	dec	r24
    1760:	e1 f7       	brne	.-8      	; 0x175a <handle_serial+0x24c>
	sprintf(tempstr, "%d", status.next_fill);
    1762:	0f 2e       	mov	r0, r31
    1764:	f4 e0       	ldi	r31, 0x04	; 4
    1766:	af 2e       	mov	r10, r31
    1768:	f8 e2       	ldi	r31, 0x28	; 40
    176a:	bf 2e       	mov	r11, r31
    176c:	f0 2d       	mov	r31, r0
    176e:	f5 01       	movw	r30, r10
    1770:	82 89       	ldd	r24, Z+18	; 0x12
    1772:	1f 92       	push	r1
    1774:	8f 93       	push	r24
    1776:	df 92       	push	r13
    1778:	cf 92       	push	r12
    177a:	ff 92       	push	r15
    177c:	ef 92       	push	r14
    177e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
	strcat(strbuf, tempstr);
    1782:	b7 01       	movw	r22, r14
    1784:	c8 01       	movw	r24, r16
    1786:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strcat>

	// Max open time
	strcat(strbuf, ",MAX,");
    178a:	d8 01       	movw	r26, r16
    178c:	0d 90       	ld	r0, X+
    178e:	00 20       	and	r0, r0
    1790:	e9 f7       	brne	.-6      	; 0x178c <handle_serial+0x27e>
    1792:	11 97       	sbiw	r26, 0x01	; 1
    1794:	86 e0       	ldi	r24, 0x06	; 6
    1796:	ec ea       	ldi	r30, 0xAC	; 172
    1798:	f6 e6       	ldi	r31, 0x66	; 102
    179a:	01 90       	ld	r0, Z+
    179c:	0d 92       	st	X+, r0
    179e:	8a 95       	dec	r24
    17a0:	e1 f7       	brne	.-8      	; 0x179a <handle_serial+0x28c>
	sprintf(tempstr, "%d", MAXOPENTIME);
    17a2:	8b e0       	ldi	r24, 0x0B	; 11
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 1f 12 	call	0x243e	; 0x243e <eeprom_read_byte>
    17aa:	1f 92       	push	r1
    17ac:	8f 93       	push	r24
    17ae:	df 92       	push	r13
    17b0:	cf 92       	push	r12
    17b2:	ff 92       	push	r15
    17b4:	ef 92       	push	r14
    17b6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
	strcat(strbuf, tempstr);	
    17ba:	b7 01       	movw	r22, r14
    17bc:	c8 01       	movw	r24, r16
    17be:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strcat>

	// Pressure
	strcat(strbuf, ",PRES,");
    17c2:	d8 01       	movw	r26, r16
    17c4:	0d 90       	ld	r0, X+
    17c6:	00 20       	and	r0, r0
    17c8:	e9 f7       	brne	.-6      	; 0x17c4 <handle_serial+0x2b6>
    17ca:	11 97       	sbiw	r26, 0x01	; 1
    17cc:	87 e0       	ldi	r24, 0x07	; 7
    17ce:	e2 eb       	ldi	r30, 0xB2	; 178
    17d0:	f6 e6       	ldi	r31, 0x66	; 102
    17d2:	01 90       	ld	r0, Z+
    17d4:	0d 92       	st	X+, r0
    17d6:	8a 95       	dec	r24
    17d8:	e1 f7       	brne	.-8      	; 0x17d2 <handle_serial+0x2c4>
	sprintf(tempstr, "%d", status.pressure);
    17da:	f5 01       	movw	r30, r10
    17dc:	84 89       	ldd	r24, Z+20	; 0x14
    17de:	1f 92       	push	r1
    17e0:	8f 93       	push	r24
    17e2:	df 92       	push	r13
    17e4:	cf 92       	push	r12
    17e6:	ff 92       	push	r15
    17e8:	ef 92       	push	r14
    17ea:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <sprintf>
	strcat(strbuf, tempstr);
    17ee:	b7 01       	movw	r22, r14
    17f0:	c8 01       	movw	r24, r16
    17f2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strcat>

	// Thermistors
	strcat(strbuf, ",TBUF,");
    17f6:	d8 01       	movw	r26, r16
    17f8:	0d 90       	ld	r0, X+
    17fa:	00 20       	and	r0, r0
    17fc:	e9 f7       	brne	.-6      	; 0x17f8 <handle_serial+0x2ea>
    17fe:	11 97       	sbiw	r26, 0x01	; 1
    1800:	87 e0       	ldi	r24, 0x07	; 7
    1802:	e9 eb       	ldi	r30, 0xB9	; 185
    1804:	f6 e6       	ldi	r31, 0x66	; 102
    1806:	01 90       	ld	r0, Z+
    1808:	0d 92       	st	X+, r0
    180a:	8a 95       	dec	r24
    180c:	e1 f7       	brne	.-8      	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
	if (BUFTHERMWARM) {
    180e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	82 ff       	sbrs	r24, 2
    1818:	0a c0       	rjmp	.+20     	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
		strcat(strbuf, "H");
    181a:	f8 01       	movw	r30, r16
    181c:	01 90       	ld	r0, Z+
    181e:	00 20       	and	r0, r0
    1820:	e9 f7       	brne	.-6      	; 0x181c <__DATA_REGION_LENGTH__+0x1c>
    1822:	31 97       	sbiw	r30, 0x01	; 1
    1824:	88 e4       	ldi	r24, 0x48	; 72
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	80 83       	st	Z, r24
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <__DATA_REGION_LENGTH__+0x42>
	} else {
		strcat(strbuf, "C");
    182e:	fe 01       	movw	r30, r28
    1830:	31 96       	adiw	r30, 0x01	; 1
    1832:	01 90       	ld	r0, Z+
    1834:	00 20       	and	r0, r0
    1836:	e9 f7       	brne	.-6      	; 0x1832 <__DATA_REGION_LENGTH__+0x32>
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	83 e4       	ldi	r24, 0x43	; 67
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	80 83       	st	Z, r24
    1840:	91 83       	std	Z+1, r25	; 0x01
	}
	strcat(strbuf, ",TRED,");
    1842:	de 01       	movw	r26, r28
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	0d 90       	ld	r0, X+
    1848:	00 20       	and	r0, r0
    184a:	e9 f7       	brne	.-6      	; 0x1846 <__DATA_REGION_LENGTH__+0x46>
    184c:	11 97       	sbiw	r26, 0x01	; 1
    184e:	87 e0       	ldi	r24, 0x07	; 7
    1850:	e0 ec       	ldi	r30, 0xC0	; 192
    1852:	f6 e6       	ldi	r31, 0x66	; 102
    1854:	01 90       	ld	r0, Z+
    1856:	0d 92       	st	X+, r0
    1858:	8a 95       	dec	r24
    185a:	e1 f7       	brne	.-8      	; 0x1854 <__DATA_REGION_LENGTH__+0x54>
	if (REDTHERMWARM) {
    185c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1860:	81 ff       	sbrs	r24, 1
    1862:	0b c0       	rjmp	.+22     	; 0x187a <__DATA_REGION_LENGTH__+0x7a>
		strcat(strbuf, "H");
    1864:	fe 01       	movw	r30, r28
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	01 90       	ld	r0, Z+
    186a:	00 20       	and	r0, r0
    186c:	e9 f7       	brne	.-6      	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
    186e:	31 97       	sbiw	r30, 0x01	; 1
    1870:	88 e4       	ldi	r24, 0x48	; 72
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	80 83       	st	Z, r24
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	0a c0       	rjmp	.+20     	; 0x188e <__DATA_REGION_LENGTH__+0x8e>
	} else {
		strcat(strbuf, "C");
    187a:	fe 01       	movw	r30, r28
    187c:	31 96       	adiw	r30, 0x01	; 1
    187e:	01 90       	ld	r0, Z+
    1880:	00 20       	and	r0, r0
    1882:	e9 f7       	brne	.-6      	; 0x187e <__DATA_REGION_LENGTH__+0x7e>
    1884:	31 97       	sbiw	r30, 0x01	; 1
    1886:	83 e4       	ldi	r24, 0x43	; 67
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	80 83       	st	Z, r24
    188c:	91 83       	std	Z+1, r25	; 0x01
	}
	strcat(strbuf, ",TBLU,");
    188e:	de 01       	movw	r26, r28
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	0d 90       	ld	r0, X+
    1894:	00 20       	and	r0, r0
    1896:	e9 f7       	brne	.-6      	; 0x1892 <__DATA_REGION_LENGTH__+0x92>
    1898:	11 97       	sbiw	r26, 0x01	; 1
    189a:	87 e0       	ldi	r24, 0x07	; 7
    189c:	e7 ec       	ldi	r30, 0xC7	; 199
    189e:	f6 e6       	ldi	r31, 0x66	; 102
    18a0:	01 90       	ld	r0, Z+
    18a2:	0d 92       	st	X+, r0
    18a4:	8a 95       	dec	r24
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <__DATA_REGION_LENGTH__+0xa0>
	if (BLUTHERMWARM) {
    18a8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    18ac:	80 ff       	sbrs	r24, 0
    18ae:	0b c0       	rjmp	.+22     	; 0x18c6 <__DATA_REGION_LENGTH__+0xc6>
		strcat(strbuf, "H");
    18b0:	fe 01       	movw	r30, r28
    18b2:	31 96       	adiw	r30, 0x01	; 1
    18b4:	01 90       	ld	r0, Z+
    18b6:	00 20       	and	r0, r0
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <__DATA_REGION_LENGTH__+0xb4>
    18ba:	31 97       	sbiw	r30, 0x01	; 1
    18bc:	88 e4       	ldi	r24, 0x48	; 72
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <__DATA_REGION_LENGTH__+0xda>
	} else {
		strcat(strbuf, "C");
    18c6:	fe 01       	movw	r30, r28
    18c8:	31 96       	adiw	r30, 0x01	; 1
    18ca:	01 90       	ld	r0, Z+
    18cc:	00 20       	and	r0, r0
    18ce:	e9 f7       	brne	.-6      	; 0x18ca <__DATA_REGION_LENGTH__+0xca>
    18d0:	31 97       	sbiw	r30, 0x01	; 1
    18d2:	83 e4       	ldi	r24, 0x43	; 67
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
	}

	strcat(strbuf,"\r\n");
    18da:	fe 01       	movw	r30, r28
    18dc:	31 96       	adiw	r30, 0x01	; 1
    18de:	01 90       	ld	r0, Z+
    18e0:	00 20       	and	r0, r0
    18e2:	e9 f7       	brne	.-6      	; 0x18de <__DATA_REGION_LENGTH__+0xde>
    18e4:	31 97       	sbiw	r30, 0x01	; 1
    18e6:	8d e0       	ldi	r24, 0x0D	; 13
    18e8:	9a e0       	ldi	r25, 0x0A	; 10
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	12 82       	std	Z+2, r1	; 0x02
	start_TCB0(100);			// 100 ms ticks
    18f0:	84 e6       	ldi	r24, 0x64	; 100
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 9e 09 	call	0x133c	; 0x133c <start_TCB0>
	while (!send0_buf.done) {
    18f8:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <send0_buf+0x51>
    18fc:	81 11       	cpse	r24, r1
    18fe:	13 c0       	rjmp	.+38     	; 0x1926 <__DATA_REGION_LENGTH__+0x126>
		if (ticks_TCB0 > 10) {	// See timers.h
    1900:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <ticks_TCB0>
    1904:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <ticks_TCB0+0x1>
    1908:	0b 97       	sbiw	r24, 0x0b	; 11
    190a:	c8 f4       	brcc	.+50     	; 0x193e <__DATA_REGION_LENGTH__+0x13e>
		strcat(strbuf, "C");
	}

	strcat(strbuf,"\r\n");
	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    190c:	e7 ec       	ldi	r30, 0xC7	; 199
    190e:	f8 e2       	ldi	r31, 0x28	; 40
    1910:	06 c0       	rjmp	.+12     	; 0x191e <__DATA_REGION_LENGTH__+0x11e>
		if (ticks_TCB0 > 10) {	// See timers.h
    1912:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <ticks_TCB0>
    1916:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <ticks_TCB0+0x1>
    191a:	0b 97       	sbiw	r24, 0x0b	; 11
    191c:	80 f4       	brcc	.+32     	; 0x193e <__DATA_REGION_LENGTH__+0x13e>
			return;
		}
		asm("nop");
    191e:	00 00       	nop
		strcat(strbuf, "C");
	}

	strcat(strbuf,"\r\n");
	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    1920:	80 81       	ld	r24, Z
    1922:	88 23       	and	r24, r24
    1924:	b1 f3       	breq	.-20     	; 0x1912 <__DATA_REGION_LENGTH__+0x112>
		if (ticks_TCB0 > 10) {	// See timers.h
			return;
		}
		asm("nop");
	}
	send_USART((uint8_t*) strbuf, strlen(strbuf));
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	fc 01       	movw	r30, r24
    192c:	01 90       	ld	r0, Z+
    192e:	00 20       	and	r0, r0
    1930:	e9 f7       	brne	.-6      	; 0x192c <__DATA_REGION_LENGTH__+0x12c>
    1932:	31 97       	sbiw	r30, 0x01	; 1
    1934:	bf 01       	movw	r22, r30
    1936:	68 1b       	sub	r22, r24
    1938:	79 0b       	sbc	r23, r25
    193a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <send_USART>
}
    193e:	ce 55       	subi	r28, 0x5E	; 94
    1940:	df 4f       	sbci	r29, 0xFF	; 255
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	bf 90       	pop	r11
    1958:	af 90       	pop	r10
    195a:	08 95       	ret

0000195c <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    195c:	1f 92       	push	r1
    195e:	0f 92       	push	r0
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	0f 92       	push	r0
    1964:	11 24       	eor	r1, r1
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    1972:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    1976:	90 91 75 28 	lds	r25, 0x2875	; 0x802875 <recv0_buf+0x53>
    197a:	91 35       	cpi	r25, 0x51	; 81
    197c:	b0 f4       	brcc	.+44     	; 0x19aa <__vector_17+0x4e>
		if ((char) c == '\r') {
    197e:	8d 30       	cpi	r24, 0x0D	; 13
    1980:	51 f4       	brne	.+20     	; 0x1996 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    1982:	e0 91 75 28 	lds	r30, 0x2875	; 0x802875 <recv0_buf+0x53>
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	ee 5d       	subi	r30, 0xDE	; 222
    198a:	f7 4d       	sbci	r31, 0xD7	; 215
    198c:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 73 28 	sts	0x2873, r24	; 0x802873 <recv0_buf+0x51>
    1994:	0a c0       	rjmp	.+20     	; 0x19aa <__vector_17+0x4e>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    1996:	a5 e7       	ldi	r26, 0x75	; 117
    1998:	b8 e2       	ldi	r27, 0x28	; 40
    199a:	ec 91       	ld	r30, X
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	9e 0f       	add	r25, r30
    19a0:	9c 93       	st	X, r25
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	ee 5d       	subi	r30, 0xDE	; 222
    19a6:	f7 4d       	sbci	r31, 0xD7	; 215
    19a8:	80 83       	st	Z, r24
		}
	}
}
    19aa:	ff 91       	pop	r31
    19ac:	ef 91       	pop	r30
    19ae:	bf 91       	pop	r27
    19b0:	af 91       	pop	r26
    19b2:	9f 91       	pop	r25
    19b4:	8f 91       	pop	r24
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti

000019c0 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    19c0:	1f 92       	push	r1
    19c2:	0f 92       	push	r0
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	ef 93       	push	r30
    19d8:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    19da:	c0 e0       	ldi	r28, 0x00	; 0
    19dc:	d8 e0       	ldi	r29, 0x08	; 8
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	8f 7d       	andi	r24, 0xDF	; 223
    19e2:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    19e4:	a8 ec       	ldi	r26, 0xC8	; 200
    19e6:	b8 e2       	ldi	r27, 0x28	; 40
    19e8:	ec 91       	ld	r30, X
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8e 0f       	add	r24, r30
    19ee:	8c 93       	st	X, r24
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	ea 58       	subi	r30, 0x8A	; 138
    19f4:	f7 4d       	sbci	r31, 0xD7	; 215
    19f6:	80 81       	ld	r24, Z
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    19fa:	90 91 c9 28 	lds	r25, 0x28C9	; 0x8028c9 <send0_buf+0x53>
    19fe:	8c 91       	ld	r24, X
    1a00:	98 13       	cpse	r25, r24
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <send0_buf+0x51>
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    1a0c:	e0 e0       	ldi	r30, 0x00	; 0
    1a0e:	f8 e0       	ldi	r31, 0x08	; 8
    1a10:	85 81       	ldd	r24, Z+5	; 0x05
    1a12:	80 62       	ori	r24, 0x20	; 32
    1a14:	85 83       	std	Z+5, r24	; 0x05
	}
}
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	bf 91       	pop	r27
    1a20:	af 91       	pop	r26
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1a30:	e0 e4       	ldi	r30, 0x40	; 64
    1a32:	f4 e0       	ldi	r31, 0x04	; 4
    1a34:	80 ef       	ldi	r24, 0xF0	; 240
    1a36:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1a38:	81 83       	std	Z+1, r24	; 0x01
    1a3a:	08 95       	ret

00001a3c <__subsf3>:
    1a3c:	50 58       	subi	r21, 0x80	; 128

00001a3e <__addsf3>:
    1a3e:	bb 27       	eor	r27, r27
    1a40:	aa 27       	eor	r26, r26
    1a42:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__addsf3x>
    1a46:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_round>
    1a4a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fp_pscA>
    1a4e:	38 f0       	brcs	.+14     	; 0x1a5e <__addsf3+0x20>
    1a50:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__fp_pscB>
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <__addsf3+0x20>
    1a56:	39 f4       	brne	.+14     	; 0x1a66 <__addsf3+0x28>
    1a58:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <__addsf3+0x24>
    1a5c:	26 f4       	brtc	.+8      	; 0x1a66 <__addsf3+0x28>
    1a5e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_nan>
    1a62:	0e f4       	brtc	.+2      	; 0x1a66 <__addsf3+0x28>
    1a64:	e0 95       	com	r30
    1a66:	e7 fb       	bst	r30, 7
    1a68:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>

00001a6c <__addsf3x>:
    1a6c:	e9 2f       	mov	r30, r25
    1a6e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_split3>
    1a72:	58 f3       	brcs	.-42     	; 0x1a4a <__addsf3+0xc>
    1a74:	ba 17       	cp	r27, r26
    1a76:	62 07       	cpc	r22, r18
    1a78:	73 07       	cpc	r23, r19
    1a7a:	84 07       	cpc	r24, r20
    1a7c:	95 07       	cpc	r25, r21
    1a7e:	20 f0       	brcs	.+8      	; 0x1a88 <__addsf3x+0x1c>
    1a80:	79 f4       	brne	.+30     	; 0x1aa0 <__addsf3x+0x34>
    1a82:	a6 f5       	brtc	.+104    	; 0x1aec <__addsf3x+0x80>
    1a84:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_zero>
    1a88:	0e f4       	brtc	.+2      	; 0x1a8c <__addsf3x+0x20>
    1a8a:	e0 95       	com	r30
    1a8c:	0b 2e       	mov	r0, r27
    1a8e:	ba 2f       	mov	r27, r26
    1a90:	a0 2d       	mov	r26, r0
    1a92:	0b 01       	movw	r0, r22
    1a94:	b9 01       	movw	r22, r18
    1a96:	90 01       	movw	r18, r0
    1a98:	0c 01       	movw	r0, r24
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	a0 01       	movw	r20, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	ff 27       	eor	r31, r31
    1aa2:	59 1b       	sub	r21, r25
    1aa4:	99 f0       	breq	.+38     	; 0x1acc <__addsf3x+0x60>
    1aa6:	59 3f       	cpi	r21, 0xF9	; 249
    1aa8:	50 f4       	brcc	.+20     	; 0x1abe <__addsf3x+0x52>
    1aaa:	50 3e       	cpi	r21, 0xE0	; 224
    1aac:	68 f1       	brcs	.+90     	; 0x1b08 <__addsf3x+0x9c>
    1aae:	1a 16       	cp	r1, r26
    1ab0:	f0 40       	sbci	r31, 0x00	; 0
    1ab2:	a2 2f       	mov	r26, r18
    1ab4:	23 2f       	mov	r18, r19
    1ab6:	34 2f       	mov	r19, r20
    1ab8:	44 27       	eor	r20, r20
    1aba:	58 5f       	subi	r21, 0xF8	; 248
    1abc:	f3 cf       	rjmp	.-26     	; 0x1aa4 <__addsf3x+0x38>
    1abe:	46 95       	lsr	r20
    1ac0:	37 95       	ror	r19
    1ac2:	27 95       	ror	r18
    1ac4:	a7 95       	ror	r26
    1ac6:	f0 40       	sbci	r31, 0x00	; 0
    1ac8:	53 95       	inc	r21
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__addsf3x+0x52>
    1acc:	7e f4       	brtc	.+30     	; 0x1aec <__addsf3x+0x80>
    1ace:	1f 16       	cp	r1, r31
    1ad0:	ba 0b       	sbc	r27, r26
    1ad2:	62 0b       	sbc	r22, r18
    1ad4:	73 0b       	sbc	r23, r19
    1ad6:	84 0b       	sbc	r24, r20
    1ad8:	ba f0       	brmi	.+46     	; 0x1b08 <__addsf3x+0x9c>
    1ada:	91 50       	subi	r25, 0x01	; 1
    1adc:	a1 f0       	breq	.+40     	; 0x1b06 <__addsf3x+0x9a>
    1ade:	ff 0f       	add	r31, r31
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	c2 f7       	brpl	.-16     	; 0x1ada <__addsf3x+0x6e>
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <__addsf3x+0x9c>
    1aec:	ba 0f       	add	r27, r26
    1aee:	62 1f       	adc	r22, r18
    1af0:	73 1f       	adc	r23, r19
    1af2:	84 1f       	adc	r24, r20
    1af4:	48 f4       	brcc	.+18     	; 0x1b08 <__addsf3x+0x9c>
    1af6:	87 95       	ror	r24
    1af8:	77 95       	ror	r23
    1afa:	67 95       	ror	r22
    1afc:	b7 95       	ror	r27
    1afe:	f7 95       	ror	r31
    1b00:	9e 3f       	cpi	r25, 0xFE	; 254
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <__addsf3x+0x9a>
    1b04:	b0 cf       	rjmp	.-160    	; 0x1a66 <__addsf3+0x28>
    1b06:	93 95       	inc	r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <__addsf3x+0xa2>
    1b0c:	99 27       	eor	r25, r25
    1b0e:	ee 0f       	add	r30, r30
    1b10:	97 95       	ror	r25
    1b12:	87 95       	ror	r24
    1b14:	08 95       	ret

00001b16 <__cmpsf2>:
    1b16:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__fp_cmp>
    1b1a:	08 f4       	brcc	.+2      	; 0x1b1e <__cmpsf2+0x8>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	08 95       	ret

00001b20 <__divsf3>:
    1b20:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__divsf3x>
    1b24:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_round>
    1b28:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__fp_pscB>
    1b2c:	58 f0       	brcs	.+22     	; 0x1b44 <__divsf3+0x24>
    1b2e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fp_pscA>
    1b32:	40 f0       	brcs	.+16     	; 0x1b44 <__divsf3+0x24>
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <__divsf3+0x20>
    1b36:	5f 3f       	cpi	r21, 0xFF	; 255
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <__divsf3+0x24>
    1b3a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1b3e:	51 11       	cpse	r21, r1
    1b40:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>
    1b44:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_nan>

00001b48 <__divsf3x>:
    1b48:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_split3>
    1b4c:	68 f3       	brcs	.-38     	; 0x1b28 <__divsf3+0x8>

00001b4e <__divsf3_pse>:
    1b4e:	99 23       	and	r25, r25
    1b50:	b1 f3       	breq	.-20     	; 0x1b3e <__divsf3+0x1e>
    1b52:	55 23       	and	r21, r21
    1b54:	91 f3       	breq	.-28     	; 0x1b3a <__divsf3+0x1a>
    1b56:	95 1b       	sub	r25, r21
    1b58:	55 0b       	sbc	r21, r21
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	aa 27       	eor	r26, r26
    1b5e:	62 17       	cp	r22, r18
    1b60:	73 07       	cpc	r23, r19
    1b62:	84 07       	cpc	r24, r20
    1b64:	38 f0       	brcs	.+14     	; 0x1b74 <__divsf3_pse+0x26>
    1b66:	9f 5f       	subi	r25, 0xFF	; 255
    1b68:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6a:	22 0f       	add	r18, r18
    1b6c:	33 1f       	adc	r19, r19
    1b6e:	44 1f       	adc	r20, r20
    1b70:	aa 1f       	adc	r26, r26
    1b72:	a9 f3       	breq	.-22     	; 0x1b5e <__divsf3_pse+0x10>
    1b74:	35 d0       	rcall	.+106    	; 0x1be0 <__divsf3_pse+0x92>
    1b76:	0e 2e       	mov	r0, r30
    1b78:	3a f0       	brmi	.+14     	; 0x1b88 <__divsf3_pse+0x3a>
    1b7a:	e0 e8       	ldi	r30, 0x80	; 128
    1b7c:	32 d0       	rcall	.+100    	; 0x1be2 <__divsf3_pse+0x94>
    1b7e:	91 50       	subi	r25, 0x01	; 1
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	e6 95       	lsr	r30
    1b84:	00 1c       	adc	r0, r0
    1b86:	ca f7       	brpl	.-14     	; 0x1b7a <__divsf3_pse+0x2c>
    1b88:	2b d0       	rcall	.+86     	; 0x1be0 <__divsf3_pse+0x92>
    1b8a:	fe 2f       	mov	r31, r30
    1b8c:	29 d0       	rcall	.+82     	; 0x1be0 <__divsf3_pse+0x92>
    1b8e:	66 0f       	add	r22, r22
    1b90:	77 1f       	adc	r23, r23
    1b92:	88 1f       	adc	r24, r24
    1b94:	bb 1f       	adc	r27, r27
    1b96:	26 17       	cp	r18, r22
    1b98:	37 07       	cpc	r19, r23
    1b9a:	48 07       	cpc	r20, r24
    1b9c:	ab 07       	cpc	r26, r27
    1b9e:	b0 e8       	ldi	r27, 0x80	; 128
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <__divsf3_pse+0x56>
    1ba2:	bb 0b       	sbc	r27, r27
    1ba4:	80 2d       	mov	r24, r0
    1ba6:	bf 01       	movw	r22, r30
    1ba8:	ff 27       	eor	r31, r31
    1baa:	93 58       	subi	r25, 0x83	; 131
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	3a f0       	brmi	.+14     	; 0x1bbe <__divsf3_pse+0x70>
    1bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	78 f0       	brcs	.+30     	; 0x1bd4 <__divsf3_pse+0x86>
    1bb6:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1bba:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>
    1bbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc0:	e4 f3       	brlt	.-8      	; 0x1bba <__divsf3_pse+0x6c>
    1bc2:	98 3e       	cpi	r25, 0xE8	; 232
    1bc4:	d4 f3       	brlt	.-12     	; 0x1bba <__divsf3_pse+0x6c>
    1bc6:	86 95       	lsr	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b7 95       	ror	r27
    1bce:	f7 95       	ror	r31
    1bd0:	9f 5f       	subi	r25, 0xFF	; 255
    1bd2:	c9 f7       	brne	.-14     	; 0x1bc6 <__divsf3_pse+0x78>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	91 1d       	adc	r25, r1
    1bd8:	96 95       	lsr	r25
    1bda:	87 95       	ror	r24
    1bdc:	97 f9       	bld	r25, 7
    1bde:	08 95       	ret
    1be0:	e1 e0       	ldi	r30, 0x01	; 1
    1be2:	66 0f       	add	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	bb 1f       	adc	r27, r27
    1bea:	62 17       	cp	r22, r18
    1bec:	73 07       	cpc	r23, r19
    1bee:	84 07       	cpc	r24, r20
    1bf0:	ba 07       	cpc	r27, r26
    1bf2:	20 f0       	brcs	.+8      	; 0x1bfc <__divsf3_pse+0xae>
    1bf4:	62 1b       	sub	r22, r18
    1bf6:	73 0b       	sbc	r23, r19
    1bf8:	84 0b       	sbc	r24, r20
    1bfa:	ba 0b       	sbc	r27, r26
    1bfc:	ee 1f       	adc	r30, r30
    1bfe:	88 f7       	brcc	.-30     	; 0x1be2 <__divsf3_pse+0x94>
    1c00:	e0 95       	com	r30
    1c02:	08 95       	ret

00001c04 <__fixunssfsi>:
    1c04:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_splitA>
    1c08:	88 f0       	brcs	.+34     	; 0x1c2c <__fixunssfsi+0x28>
    1c0a:	9f 57       	subi	r25, 0x7F	; 127
    1c0c:	98 f0       	brcs	.+38     	; 0x1c34 <__fixunssfsi+0x30>
    1c0e:	b9 2f       	mov	r27, r25
    1c10:	99 27       	eor	r25, r25
    1c12:	b7 51       	subi	r27, 0x17	; 23
    1c14:	b0 f0       	brcs	.+44     	; 0x1c42 <__fixunssfsi+0x3e>
    1c16:	e1 f0       	breq	.+56     	; 0x1c50 <__fixunssfsi+0x4c>
    1c18:	66 0f       	add	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	1a f0       	brmi	.+6      	; 0x1c28 <__fixunssfsi+0x24>
    1c22:	ba 95       	dec	r27
    1c24:	c9 f7       	brne	.-14     	; 0x1c18 <__fixunssfsi+0x14>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <__fixunssfsi+0x4c>
    1c28:	b1 30       	cpi	r27, 0x01	; 1
    1c2a:	91 f0       	breq	.+36     	; 0x1c50 <__fixunssfsi+0x4c>
    1c2c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__fp_zero>
    1c30:	b1 e0       	ldi	r27, 0x01	; 1
    1c32:	08 95       	ret
    1c34:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_zero>
    1c38:	67 2f       	mov	r22, r23
    1c3a:	78 2f       	mov	r23, r24
    1c3c:	88 27       	eor	r24, r24
    1c3e:	b8 5f       	subi	r27, 0xF8	; 248
    1c40:	39 f0       	breq	.+14     	; 0x1c50 <__fixunssfsi+0x4c>
    1c42:	b9 3f       	cpi	r27, 0xF9	; 249
    1c44:	cc f3       	brlt	.-14     	; 0x1c38 <__fixunssfsi+0x34>
    1c46:	86 95       	lsr	r24
    1c48:	77 95       	ror	r23
    1c4a:	67 95       	ror	r22
    1c4c:	b3 95       	inc	r27
    1c4e:	d9 f7       	brne	.-10     	; 0x1c46 <__fixunssfsi+0x42>
    1c50:	3e f4       	brtc	.+14     	; 0x1c60 <__fixunssfsi+0x5c>
    1c52:	90 95       	com	r25
    1c54:	80 95       	com	r24
    1c56:	70 95       	com	r23
    1c58:	61 95       	neg	r22
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	08 95       	ret

00001c62 <__floatunsisf>:
    1c62:	e8 94       	clt
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <__floatsisf+0x12>

00001c66 <__floatsisf>:
    1c66:	97 fb       	bst	r25, 7
    1c68:	3e f4       	brtc	.+14     	; 0x1c78 <__floatsisf+0x12>
    1c6a:	90 95       	com	r25
    1c6c:	80 95       	com	r24
    1c6e:	70 95       	com	r23
    1c70:	61 95       	neg	r22
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	99 23       	and	r25, r25
    1c7a:	a9 f0       	breq	.+42     	; 0x1ca6 <__floatsisf+0x40>
    1c7c:	f9 2f       	mov	r31, r25
    1c7e:	96 e9       	ldi	r25, 0x96	; 150
    1c80:	bb 27       	eor	r27, r27
    1c82:	93 95       	inc	r25
    1c84:	f6 95       	lsr	r31
    1c86:	87 95       	ror	r24
    1c88:	77 95       	ror	r23
    1c8a:	67 95       	ror	r22
    1c8c:	b7 95       	ror	r27
    1c8e:	f1 11       	cpse	r31, r1
    1c90:	f8 cf       	rjmp	.-16     	; 0x1c82 <__floatsisf+0x1c>
    1c92:	fa f4       	brpl	.+62     	; 0x1cd2 <__floatsisf+0x6c>
    1c94:	bb 0f       	add	r27, r27
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <__floatsisf+0x36>
    1c98:	60 ff       	sbrs	r22, 0
    1c9a:	1b c0       	rjmp	.+54     	; 0x1cd2 <__floatsisf+0x6c>
    1c9c:	6f 5f       	subi	r22, 0xFF	; 255
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	16 c0       	rjmp	.+44     	; 0x1cd2 <__floatsisf+0x6c>
    1ca6:	88 23       	and	r24, r24
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <__floatsisf+0x48>
    1caa:	96 e9       	ldi	r25, 0x96	; 150
    1cac:	11 c0       	rjmp	.+34     	; 0x1cd0 <__floatsisf+0x6a>
    1cae:	77 23       	and	r23, r23
    1cb0:	21 f0       	breq	.+8      	; 0x1cba <__floatsisf+0x54>
    1cb2:	9e e8       	ldi	r25, 0x8E	; 142
    1cb4:	87 2f       	mov	r24, r23
    1cb6:	76 2f       	mov	r23, r22
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <__floatsisf+0x5e>
    1cba:	66 23       	and	r22, r22
    1cbc:	71 f0       	breq	.+28     	; 0x1cda <__floatsisf+0x74>
    1cbe:	96 e8       	ldi	r25, 0x86	; 134
    1cc0:	86 2f       	mov	r24, r22
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	2a f0       	brmi	.+10     	; 0x1cd2 <__floatsisf+0x6c>
    1cc8:	9a 95       	dec	r25
    1cca:	66 0f       	add	r22, r22
    1ccc:	77 1f       	adc	r23, r23
    1cce:	88 1f       	adc	r24, r24
    1cd0:	da f7       	brpl	.-10     	; 0x1cc8 <__floatsisf+0x62>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	96 95       	lsr	r25
    1cd6:	87 95       	ror	r24
    1cd8:	97 f9       	bld	r25, 7
    1cda:	08 95       	ret

00001cdc <__fp_cmp>:
    1cdc:	99 0f       	add	r25, r25
    1cde:	00 08       	sbc	r0, r0
    1ce0:	55 0f       	add	r21, r21
    1ce2:	aa 0b       	sbc	r26, r26
    1ce4:	e0 e8       	ldi	r30, 0x80	; 128
    1ce6:	fe ef       	ldi	r31, 0xFE	; 254
    1ce8:	16 16       	cp	r1, r22
    1cea:	17 06       	cpc	r1, r23
    1cec:	e8 07       	cpc	r30, r24
    1cee:	f9 07       	cpc	r31, r25
    1cf0:	c0 f0       	brcs	.+48     	; 0x1d22 <__fp_cmp+0x46>
    1cf2:	12 16       	cp	r1, r18
    1cf4:	13 06       	cpc	r1, r19
    1cf6:	e4 07       	cpc	r30, r20
    1cf8:	f5 07       	cpc	r31, r21
    1cfa:	98 f0       	brcs	.+38     	; 0x1d22 <__fp_cmp+0x46>
    1cfc:	62 1b       	sub	r22, r18
    1cfe:	73 0b       	sbc	r23, r19
    1d00:	84 0b       	sbc	r24, r20
    1d02:	95 0b       	sbc	r25, r21
    1d04:	39 f4       	brne	.+14     	; 0x1d14 <__fp_cmp+0x38>
    1d06:	0a 26       	eor	r0, r26
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <__fp_cmp+0x46>
    1d0a:	23 2b       	or	r18, r19
    1d0c:	24 2b       	or	r18, r20
    1d0e:	25 2b       	or	r18, r21
    1d10:	21 f4       	brne	.+8      	; 0x1d1a <__fp_cmp+0x3e>
    1d12:	08 95       	ret
    1d14:	0a 26       	eor	r0, r26
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <__fp_cmp+0x3e>
    1d18:	a1 40       	sbci	r26, 0x01	; 1
    1d1a:	a6 95       	lsr	r26
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	81 1d       	adc	r24, r1
    1d20:	81 1d       	adc	r24, r1
    1d22:	08 95       	ret

00001d24 <__fp_inf>:
    1d24:	97 f9       	bld	r25, 7
    1d26:	9f 67       	ori	r25, 0x7F	; 127
    1d28:	80 e8       	ldi	r24, 0x80	; 128
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	08 95       	ret

00001d30 <__fp_nan>:
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	80 ec       	ldi	r24, 0xC0	; 192
    1d34:	08 95       	ret

00001d36 <__fp_pscA>:
    1d36:	00 24       	eor	r0, r0
    1d38:	0a 94       	dec	r0
    1d3a:	16 16       	cp	r1, r22
    1d3c:	17 06       	cpc	r1, r23
    1d3e:	18 06       	cpc	r1, r24
    1d40:	09 06       	cpc	r0, r25
    1d42:	08 95       	ret

00001d44 <__fp_pscB>:
    1d44:	00 24       	eor	r0, r0
    1d46:	0a 94       	dec	r0
    1d48:	12 16       	cp	r1, r18
    1d4a:	13 06       	cpc	r1, r19
    1d4c:	14 06       	cpc	r1, r20
    1d4e:	05 06       	cpc	r0, r21
    1d50:	08 95       	ret

00001d52 <__fp_round>:
    1d52:	09 2e       	mov	r0, r25
    1d54:	03 94       	inc	r0
    1d56:	00 0c       	add	r0, r0
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__fp_round+0xc>
    1d5a:	88 23       	and	r24, r24
    1d5c:	52 f0       	brmi	.+20     	; 0x1d72 <__fp_round+0x20>
    1d5e:	bb 0f       	add	r27, r27
    1d60:	40 f4       	brcc	.+16     	; 0x1d72 <__fp_round+0x20>
    1d62:	bf 2b       	or	r27, r31
    1d64:	11 f4       	brne	.+4      	; 0x1d6a <__fp_round+0x18>
    1d66:	60 ff       	sbrs	r22, 0
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <__fp_round+0x20>
    1d6a:	6f 5f       	subi	r22, 0xFF	; 255
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	08 95       	ret

00001d74 <__fp_split3>:
    1d74:	57 fd       	sbrc	r21, 7
    1d76:	90 58       	subi	r25, 0x80	; 128
    1d78:	44 0f       	add	r20, r20
    1d7a:	55 1f       	adc	r21, r21
    1d7c:	59 f0       	breq	.+22     	; 0x1d94 <__fp_splitA+0x10>
    1d7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <__fp_splitA+0x1a>
    1d82:	47 95       	ror	r20

00001d84 <__fp_splitA>:
    1d84:	88 0f       	add	r24, r24
    1d86:	97 fb       	bst	r25, 7
    1d88:	99 1f       	adc	r25, r25
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <__fp_splitA+0x20>
    1d8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8e:	79 f0       	breq	.+30     	; 0x1dae <__fp_splitA+0x2a>
    1d90:	87 95       	ror	r24
    1d92:	08 95       	ret
    1d94:	12 16       	cp	r1, r18
    1d96:	13 06       	cpc	r1, r19
    1d98:	14 06       	cpc	r1, r20
    1d9a:	55 1f       	adc	r21, r21
    1d9c:	f2 cf       	rjmp	.-28     	; 0x1d82 <__fp_split3+0xe>
    1d9e:	46 95       	lsr	r20
    1da0:	f1 df       	rcall	.-30     	; 0x1d84 <__fp_splitA>
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <__fp_splitA+0x30>
    1da4:	16 16       	cp	r1, r22
    1da6:	17 06       	cpc	r1, r23
    1da8:	18 06       	cpc	r1, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	f1 cf       	rjmp	.-30     	; 0x1d90 <__fp_splitA+0xc>
    1dae:	86 95       	lsr	r24
    1db0:	71 05       	cpc	r23, r1
    1db2:	61 05       	cpc	r22, r1
    1db4:	08 94       	sec
    1db6:	08 95       	ret

00001db8 <__fp_zero>:
    1db8:	e8 94       	clt

00001dba <__fp_szero>:
    1dba:	bb 27       	eor	r27, r27
    1dbc:	66 27       	eor	r22, r22
    1dbe:	77 27       	eor	r23, r23
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	97 f9       	bld	r25, 7
    1dc4:	08 95       	ret

00001dc6 <__mulsf3>:
    1dc6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__mulsf3x>
    1dca:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_round>
    1dce:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fp_pscA>
    1dd2:	38 f0       	brcs	.+14     	; 0x1de2 <__mulsf3+0x1c>
    1dd4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__fp_pscB>
    1dd8:	20 f0       	brcs	.+8      	; 0x1de2 <__mulsf3+0x1c>
    1dda:	95 23       	and	r25, r21
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <__mulsf3+0x1c>
    1dde:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1de2:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_nan>
    1de6:	11 24       	eor	r1, r1
    1de8:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>

00001dec <__mulsf3x>:
    1dec:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_split3>
    1df0:	70 f3       	brcs	.-36     	; 0x1dce <__mulsf3+0x8>

00001df2 <__mulsf3_pse>:
    1df2:	95 9f       	mul	r25, r21
    1df4:	c1 f3       	breq	.-16     	; 0x1de6 <__mulsf3+0x20>
    1df6:	95 0f       	add	r25, r21
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	55 1f       	adc	r21, r21
    1dfc:	62 9f       	mul	r22, r18
    1dfe:	f0 01       	movw	r30, r0
    1e00:	72 9f       	mul	r23, r18
    1e02:	bb 27       	eor	r27, r27
    1e04:	f0 0d       	add	r31, r0
    1e06:	b1 1d       	adc	r27, r1
    1e08:	63 9f       	mul	r22, r19
    1e0a:	aa 27       	eor	r26, r26
    1e0c:	f0 0d       	add	r31, r0
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	aa 1f       	adc	r26, r26
    1e12:	64 9f       	mul	r22, r20
    1e14:	66 27       	eor	r22, r22
    1e16:	b0 0d       	add	r27, r0
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	66 1f       	adc	r22, r22
    1e1c:	82 9f       	mul	r24, r18
    1e1e:	22 27       	eor	r18, r18
    1e20:	b0 0d       	add	r27, r0
    1e22:	a1 1d       	adc	r26, r1
    1e24:	62 1f       	adc	r22, r18
    1e26:	73 9f       	mul	r23, r19
    1e28:	b0 0d       	add	r27, r0
    1e2a:	a1 1d       	adc	r26, r1
    1e2c:	62 1f       	adc	r22, r18
    1e2e:	83 9f       	mul	r24, r19
    1e30:	a0 0d       	add	r26, r0
    1e32:	61 1d       	adc	r22, r1
    1e34:	22 1f       	adc	r18, r18
    1e36:	74 9f       	mul	r23, r20
    1e38:	33 27       	eor	r19, r19
    1e3a:	a0 0d       	add	r26, r0
    1e3c:	61 1d       	adc	r22, r1
    1e3e:	23 1f       	adc	r18, r19
    1e40:	84 9f       	mul	r24, r20
    1e42:	60 0d       	add	r22, r0
    1e44:	21 1d       	adc	r18, r1
    1e46:	82 2f       	mov	r24, r18
    1e48:	76 2f       	mov	r23, r22
    1e4a:	6a 2f       	mov	r22, r26
    1e4c:	11 24       	eor	r1, r1
    1e4e:	9f 57       	subi	r25, 0x7F	; 127
    1e50:	50 40       	sbci	r21, 0x00	; 0
    1e52:	9a f0       	brmi	.+38     	; 0x1e7a <__mulsf3_pse+0x88>
    1e54:	f1 f0       	breq	.+60     	; 0x1e92 <__mulsf3_pse+0xa0>
    1e56:	88 23       	and	r24, r24
    1e58:	4a f0       	brmi	.+18     	; 0x1e6c <__mulsf3_pse+0x7a>
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	66 1f       	adc	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	91 50       	subi	r25, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	a9 f7       	brne	.-22     	; 0x1e56 <__mulsf3_pse+0x64>
    1e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6e:	51 05       	cpc	r21, r1
    1e70:	80 f0       	brcs	.+32     	; 0x1e92 <__mulsf3_pse+0xa0>
    1e72:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1e76:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>
    1e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e7c:	e4 f3       	brlt	.-8      	; 0x1e76 <__mulsf3_pse+0x84>
    1e7e:	98 3e       	cpi	r25, 0xE8	; 232
    1e80:	d4 f3       	brlt	.-12     	; 0x1e76 <__mulsf3_pse+0x84>
    1e82:	86 95       	lsr	r24
    1e84:	77 95       	ror	r23
    1e86:	67 95       	ror	r22
    1e88:	b7 95       	ror	r27
    1e8a:	f7 95       	ror	r31
    1e8c:	e7 95       	ror	r30
    1e8e:	9f 5f       	subi	r25, 0xFF	; 255
    1e90:	c1 f7       	brne	.-16     	; 0x1e82 <__mulsf3_pse+0x90>
    1e92:	fe 2b       	or	r31, r30
    1e94:	88 0f       	add	r24, r24
    1e96:	91 1d       	adc	r25, r1
    1e98:	96 95       	lsr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	97 f9       	bld	r25, 7
    1e9e:	08 95       	ret

00001ea0 <__tablejump2__>:
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	05 90       	lpm	r0, Z+
    1ea6:	f4 91       	lpm	r31, Z
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	09 94       	ijmp

00001eac <strcat>:
    1eac:	fb 01       	movw	r30, r22
    1eae:	dc 01       	movw	r26, r24
    1eb0:	0d 90       	ld	r0, X+
    1eb2:	00 20       	and	r0, r0
    1eb4:	e9 f7       	brne	.-6      	; 0x1eb0 <strcat+0x4>
    1eb6:	11 97       	sbiw	r26, 0x01	; 1
    1eb8:	01 90       	ld	r0, Z+
    1eba:	0d 92       	st	X+, r0
    1ebc:	00 20       	and	r0, r0
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <strcat+0xc>
    1ec0:	08 95       	ret

00001ec2 <strcpy>:
    1ec2:	fb 01       	movw	r30, r22
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	01 90       	ld	r0, Z+
    1ec8:	0d 92       	st	X+, r0
    1eca:	00 20       	and	r0, r0
    1ecc:	e1 f7       	brne	.-8      	; 0x1ec6 <strcpy+0x4>
    1ece:	08 95       	ret

00001ed0 <sprintf>:
    1ed0:	ae e0       	ldi	r26, 0x0E	; 14
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ee e6       	ldi	r30, 0x6E	; 110
    1ed6:	ff e0       	ldi	r31, 0x0F	; 15
    1ed8:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__prologue_saves__+0x1c>
    1edc:	0d 89       	ldd	r16, Y+21	; 0x15
    1ede:	1e 89       	ldd	r17, Y+22	; 0x16
    1ee0:	86 e0       	ldi	r24, 0x06	; 6
    1ee2:	8c 83       	std	Y+4, r24	; 0x04
    1ee4:	09 83       	std	Y+1, r16	; 0x01
    1ee6:	1a 83       	std	Y+2, r17	; 0x02
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	9f e7       	ldi	r25, 0x7F	; 127
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	6f 89       	ldd	r22, Y+23	; 0x17
    1ef8:	78 8d       	ldd	r23, Y+24	; 0x18
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <vfprintf>
    1f02:	ef 81       	ldd	r30, Y+7	; 0x07
    1f04:	f8 85       	ldd	r31, Y+8	; 0x08
    1f06:	e0 0f       	add	r30, r16
    1f08:	f1 1f       	adc	r31, r17
    1f0a:	10 82       	st	Z, r1
    1f0c:	2e 96       	adiw	r28, 0x0e	; 14
    1f0e:	e4 e0       	ldi	r30, 0x04	; 4
    1f10:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__+0x1c>

00001f14 <vfprintf>:
    1f14:	ab e0       	ldi	r26, 0x0B	; 11
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e0 e9       	ldi	r30, 0x90	; 144
    1f1a:	ff e0       	ldi	r31, 0x0F	; 15
    1f1c:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__prologue_saves__>
    1f20:	6c 01       	movw	r12, r24
    1f22:	7b 01       	movw	r14, r22
    1f24:	8a 01       	movw	r16, r20
    1f26:	fc 01       	movw	r30, r24
    1f28:	16 82       	std	Z+6, r1	; 0x06
    1f2a:	17 82       	std	Z+7, r1	; 0x07
    1f2c:	83 81       	ldd	r24, Z+3	; 0x03
    1f2e:	81 ff       	sbrs	r24, 1
    1f30:	cc c1       	rjmp	.+920    	; 0x22ca <vfprintf+0x3b6>
    1f32:	ce 01       	movw	r24, r28
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	3c 01       	movw	r6, r24
    1f38:	f6 01       	movw	r30, r12
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	93 fd       	sbrc	r25, 3
    1f40:	85 91       	lpm	r24, Z+
    1f42:	93 ff       	sbrs	r25, 3
    1f44:	81 91       	ld	r24, Z+
    1f46:	7f 01       	movw	r14, r30
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <vfprintf+0x3a>
    1f4c:	ba c1       	rjmp	.+884    	; 0x22c2 <vfprintf+0x3ae>
    1f4e:	85 32       	cpi	r24, 0x25	; 37
    1f50:	39 f4       	brne	.+14     	; 0x1f60 <vfprintf+0x4c>
    1f52:	93 fd       	sbrc	r25, 3
    1f54:	85 91       	lpm	r24, Z+
    1f56:	93 ff       	sbrs	r25, 3
    1f58:	81 91       	ld	r24, Z+
    1f5a:	7f 01       	movw	r14, r30
    1f5c:	85 32       	cpi	r24, 0x25	; 37
    1f5e:	29 f4       	brne	.+10     	; 0x1f6a <vfprintf+0x56>
    1f60:	b6 01       	movw	r22, r12
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    1f68:	e7 cf       	rjmp	.-50     	; 0x1f38 <vfprintf+0x24>
    1f6a:	91 2c       	mov	r9, r1
    1f6c:	21 2c       	mov	r2, r1
    1f6e:	31 2c       	mov	r3, r1
    1f70:	ff e1       	ldi	r31, 0x1F	; 31
    1f72:	f3 15       	cp	r31, r3
    1f74:	d8 f0       	brcs	.+54     	; 0x1fac <vfprintf+0x98>
    1f76:	8b 32       	cpi	r24, 0x2B	; 43
    1f78:	79 f0       	breq	.+30     	; 0x1f98 <vfprintf+0x84>
    1f7a:	38 f4       	brcc	.+14     	; 0x1f8a <vfprintf+0x76>
    1f7c:	80 32       	cpi	r24, 0x20	; 32
    1f7e:	79 f0       	breq	.+30     	; 0x1f9e <vfprintf+0x8a>
    1f80:	83 32       	cpi	r24, 0x23	; 35
    1f82:	a1 f4       	brne	.+40     	; 0x1fac <vfprintf+0x98>
    1f84:	23 2d       	mov	r18, r3
    1f86:	20 61       	ori	r18, 0x10	; 16
    1f88:	1d c0       	rjmp	.+58     	; 0x1fc4 <vfprintf+0xb0>
    1f8a:	8d 32       	cpi	r24, 0x2D	; 45
    1f8c:	61 f0       	breq	.+24     	; 0x1fa6 <vfprintf+0x92>
    1f8e:	80 33       	cpi	r24, 0x30	; 48
    1f90:	69 f4       	brne	.+26     	; 0x1fac <vfprintf+0x98>
    1f92:	23 2d       	mov	r18, r3
    1f94:	21 60       	ori	r18, 0x01	; 1
    1f96:	16 c0       	rjmp	.+44     	; 0x1fc4 <vfprintf+0xb0>
    1f98:	83 2d       	mov	r24, r3
    1f9a:	82 60       	ori	r24, 0x02	; 2
    1f9c:	38 2e       	mov	r3, r24
    1f9e:	e3 2d       	mov	r30, r3
    1fa0:	e4 60       	ori	r30, 0x04	; 4
    1fa2:	3e 2e       	mov	r3, r30
    1fa4:	2a c0       	rjmp	.+84     	; 0x1ffa <vfprintf+0xe6>
    1fa6:	f3 2d       	mov	r31, r3
    1fa8:	f8 60       	ori	r31, 0x08	; 8
    1faa:	1d c0       	rjmp	.+58     	; 0x1fe6 <vfprintf+0xd2>
    1fac:	37 fc       	sbrc	r3, 7
    1fae:	2d c0       	rjmp	.+90     	; 0x200a <vfprintf+0xf6>
    1fb0:	20 ed       	ldi	r18, 0xD0	; 208
    1fb2:	28 0f       	add	r18, r24
    1fb4:	2a 30       	cpi	r18, 0x0A	; 10
    1fb6:	40 f0       	brcs	.+16     	; 0x1fc8 <vfprintf+0xb4>
    1fb8:	8e 32       	cpi	r24, 0x2E	; 46
    1fba:	b9 f4       	brne	.+46     	; 0x1fea <vfprintf+0xd6>
    1fbc:	36 fc       	sbrc	r3, 6
    1fbe:	81 c1       	rjmp	.+770    	; 0x22c2 <vfprintf+0x3ae>
    1fc0:	23 2d       	mov	r18, r3
    1fc2:	20 64       	ori	r18, 0x40	; 64
    1fc4:	32 2e       	mov	r3, r18
    1fc6:	19 c0       	rjmp	.+50     	; 0x1ffa <vfprintf+0xe6>
    1fc8:	36 fe       	sbrs	r3, 6
    1fca:	06 c0       	rjmp	.+12     	; 0x1fd8 <vfprintf+0xc4>
    1fcc:	8a e0       	ldi	r24, 0x0A	; 10
    1fce:	98 9e       	mul	r9, r24
    1fd0:	20 0d       	add	r18, r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	92 2e       	mov	r9, r18
    1fd6:	11 c0       	rjmp	.+34     	; 0x1ffa <vfprintf+0xe6>
    1fd8:	ea e0       	ldi	r30, 0x0A	; 10
    1fda:	2e 9e       	mul	r2, r30
    1fdc:	20 0d       	add	r18, r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	22 2e       	mov	r2, r18
    1fe2:	f3 2d       	mov	r31, r3
    1fe4:	f0 62       	ori	r31, 0x20	; 32
    1fe6:	3f 2e       	mov	r3, r31
    1fe8:	08 c0       	rjmp	.+16     	; 0x1ffa <vfprintf+0xe6>
    1fea:	8c 36       	cpi	r24, 0x6C	; 108
    1fec:	21 f4       	brne	.+8      	; 0x1ff6 <vfprintf+0xe2>
    1fee:	83 2d       	mov	r24, r3
    1ff0:	80 68       	ori	r24, 0x80	; 128
    1ff2:	38 2e       	mov	r3, r24
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0xe6>
    1ff6:	88 36       	cpi	r24, 0x68	; 104
    1ff8:	41 f4       	brne	.+16     	; 0x200a <vfprintf+0xf6>
    1ffa:	f7 01       	movw	r30, r14
    1ffc:	93 fd       	sbrc	r25, 3
    1ffe:	85 91       	lpm	r24, Z+
    2000:	93 ff       	sbrs	r25, 3
    2002:	81 91       	ld	r24, Z+
    2004:	7f 01       	movw	r14, r30
    2006:	81 11       	cpse	r24, r1
    2008:	b3 cf       	rjmp	.-154    	; 0x1f70 <vfprintf+0x5c>
    200a:	98 2f       	mov	r25, r24
    200c:	9f 7d       	andi	r25, 0xDF	; 223
    200e:	95 54       	subi	r25, 0x45	; 69
    2010:	93 30       	cpi	r25, 0x03	; 3
    2012:	28 f4       	brcc	.+10     	; 0x201e <vfprintf+0x10a>
    2014:	0c 5f       	subi	r16, 0xFC	; 252
    2016:	1f 4f       	sbci	r17, 0xFF	; 255
    2018:	9f e3       	ldi	r25, 0x3F	; 63
    201a:	99 83       	std	Y+1, r25	; 0x01
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <vfprintf+0x124>
    201e:	83 36       	cpi	r24, 0x63	; 99
    2020:	31 f0       	breq	.+12     	; 0x202e <vfprintf+0x11a>
    2022:	83 37       	cpi	r24, 0x73	; 115
    2024:	71 f0       	breq	.+28     	; 0x2042 <vfprintf+0x12e>
    2026:	83 35       	cpi	r24, 0x53	; 83
    2028:	09 f0       	breq	.+2      	; 0x202c <vfprintf+0x118>
    202a:	59 c0       	rjmp	.+178    	; 0x20de <vfprintf+0x1ca>
    202c:	21 c0       	rjmp	.+66     	; 0x2070 <vfprintf+0x15c>
    202e:	f8 01       	movw	r30, r16
    2030:	80 81       	ld	r24, Z
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	0e 5f       	subi	r16, 0xFE	; 254
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	88 24       	eor	r8, r8
    203a:	83 94       	inc	r8
    203c:	91 2c       	mov	r9, r1
    203e:	53 01       	movw	r10, r6
    2040:	13 c0       	rjmp	.+38     	; 0x2068 <vfprintf+0x154>
    2042:	28 01       	movw	r4, r16
    2044:	f2 e0       	ldi	r31, 0x02	; 2
    2046:	4f 0e       	add	r4, r31
    2048:	51 1c       	adc	r5, r1
    204a:	f8 01       	movw	r30, r16
    204c:	a0 80       	ld	r10, Z
    204e:	b1 80       	ldd	r11, Z+1	; 0x01
    2050:	36 fe       	sbrs	r3, 6
    2052:	03 c0       	rjmp	.+6      	; 0x205a <vfprintf+0x146>
    2054:	69 2d       	mov	r22, r9
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	02 c0       	rjmp	.+4      	; 0x205e <vfprintf+0x14a>
    205a:	6f ef       	ldi	r22, 0xFF	; 255
    205c:	7f ef       	ldi	r23, 0xFF	; 255
    205e:	c5 01       	movw	r24, r10
    2060:	0e 94 76 11 	call	0x22ec	; 0x22ec <strnlen>
    2064:	4c 01       	movw	r8, r24
    2066:	82 01       	movw	r16, r4
    2068:	f3 2d       	mov	r31, r3
    206a:	ff 77       	andi	r31, 0x7F	; 127
    206c:	3f 2e       	mov	r3, r31
    206e:	16 c0       	rjmp	.+44     	; 0x209c <vfprintf+0x188>
    2070:	28 01       	movw	r4, r16
    2072:	22 e0       	ldi	r18, 0x02	; 2
    2074:	42 0e       	add	r4, r18
    2076:	51 1c       	adc	r5, r1
    2078:	f8 01       	movw	r30, r16
    207a:	a0 80       	ld	r10, Z
    207c:	b1 80       	ldd	r11, Z+1	; 0x01
    207e:	36 fe       	sbrs	r3, 6
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <vfprintf+0x174>
    2082:	69 2d       	mov	r22, r9
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	02 c0       	rjmp	.+4      	; 0x208c <vfprintf+0x178>
    2088:	6f ef       	ldi	r22, 0xFF	; 255
    208a:	7f ef       	ldi	r23, 0xFF	; 255
    208c:	c5 01       	movw	r24, r10
    208e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <strnlen_P>
    2092:	4c 01       	movw	r8, r24
    2094:	f3 2d       	mov	r31, r3
    2096:	f0 68       	ori	r31, 0x80	; 128
    2098:	3f 2e       	mov	r3, r31
    209a:	82 01       	movw	r16, r4
    209c:	33 fc       	sbrc	r3, 3
    209e:	1b c0       	rjmp	.+54     	; 0x20d6 <vfprintf+0x1c2>
    20a0:	82 2d       	mov	r24, r2
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	88 16       	cp	r8, r24
    20a6:	99 06       	cpc	r9, r25
    20a8:	b0 f4       	brcc	.+44     	; 0x20d6 <vfprintf+0x1c2>
    20aa:	b6 01       	movw	r22, r12
    20ac:	80 e2       	ldi	r24, 0x20	; 32
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    20b4:	2a 94       	dec	r2
    20b6:	f4 cf       	rjmp	.-24     	; 0x20a0 <vfprintf+0x18c>
    20b8:	f5 01       	movw	r30, r10
    20ba:	37 fc       	sbrc	r3, 7
    20bc:	85 91       	lpm	r24, Z+
    20be:	37 fe       	sbrs	r3, 7
    20c0:	81 91       	ld	r24, Z+
    20c2:	5f 01       	movw	r10, r30
    20c4:	b6 01       	movw	r22, r12
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    20cc:	21 10       	cpse	r2, r1
    20ce:	2a 94       	dec	r2
    20d0:	21 e0       	ldi	r18, 0x01	; 1
    20d2:	82 1a       	sub	r8, r18
    20d4:	91 08       	sbc	r9, r1
    20d6:	81 14       	cp	r8, r1
    20d8:	91 04       	cpc	r9, r1
    20da:	71 f7       	brne	.-36     	; 0x20b8 <vfprintf+0x1a4>
    20dc:	e8 c0       	rjmp	.+464    	; 0x22ae <vfprintf+0x39a>
    20de:	84 36       	cpi	r24, 0x64	; 100
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <vfprintf+0x1d2>
    20e2:	89 36       	cpi	r24, 0x69	; 105
    20e4:	41 f5       	brne	.+80     	; 0x2136 <vfprintf+0x222>
    20e6:	f8 01       	movw	r30, r16
    20e8:	37 fe       	sbrs	r3, 7
    20ea:	07 c0       	rjmp	.+14     	; 0x20fa <vfprintf+0x1e6>
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	0c 5f       	subi	r16, 0xFC	; 252
    20f6:	1f 4f       	sbci	r17, 0xFF	; 255
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <vfprintf+0x1f6>
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	07 2e       	mov	r0, r23
    2100:	00 0c       	add	r0, r0
    2102:	88 0b       	sbc	r24, r24
    2104:	99 0b       	sbc	r25, r25
    2106:	0e 5f       	subi	r16, 0xFE	; 254
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	f3 2d       	mov	r31, r3
    210c:	ff 76       	andi	r31, 0x6F	; 111
    210e:	3f 2e       	mov	r3, r31
    2110:	97 ff       	sbrs	r25, 7
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <vfprintf+0x212>
    2114:	90 95       	com	r25
    2116:	80 95       	com	r24
    2118:	70 95       	com	r23
    211a:	61 95       	neg	r22
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	8f 4f       	sbci	r24, 0xFF	; 255
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	f0 68       	ori	r31, 0x80	; 128
    2124:	3f 2e       	mov	r3, r31
    2126:	2a e0       	ldi	r18, 0x0A	; 10
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	a3 01       	movw	r20, r6
    212c:	0e 94 bd 11 	call	0x237a	; 0x237a <__ultoa_invert>
    2130:	88 2e       	mov	r8, r24
    2132:	86 18       	sub	r8, r6
    2134:	45 c0       	rjmp	.+138    	; 0x21c0 <vfprintf+0x2ac>
    2136:	85 37       	cpi	r24, 0x75	; 117
    2138:	31 f4       	brne	.+12     	; 0x2146 <vfprintf+0x232>
    213a:	23 2d       	mov	r18, r3
    213c:	2f 7e       	andi	r18, 0xEF	; 239
    213e:	b2 2e       	mov	r11, r18
    2140:	2a e0       	ldi	r18, 0x0A	; 10
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	25 c0       	rjmp	.+74     	; 0x2190 <vfprintf+0x27c>
    2146:	93 2d       	mov	r25, r3
    2148:	99 7f       	andi	r25, 0xF9	; 249
    214a:	b9 2e       	mov	r11, r25
    214c:	8f 36       	cpi	r24, 0x6F	; 111
    214e:	c1 f0       	breq	.+48     	; 0x2180 <vfprintf+0x26c>
    2150:	18 f4       	brcc	.+6      	; 0x2158 <vfprintf+0x244>
    2152:	88 35       	cpi	r24, 0x58	; 88
    2154:	79 f0       	breq	.+30     	; 0x2174 <vfprintf+0x260>
    2156:	b5 c0       	rjmp	.+362    	; 0x22c2 <vfprintf+0x3ae>
    2158:	80 37       	cpi	r24, 0x70	; 112
    215a:	19 f0       	breq	.+6      	; 0x2162 <vfprintf+0x24e>
    215c:	88 37       	cpi	r24, 0x78	; 120
    215e:	21 f0       	breq	.+8      	; 0x2168 <vfprintf+0x254>
    2160:	b0 c0       	rjmp	.+352    	; 0x22c2 <vfprintf+0x3ae>
    2162:	e9 2f       	mov	r30, r25
    2164:	e0 61       	ori	r30, 0x10	; 16
    2166:	be 2e       	mov	r11, r30
    2168:	b4 fe       	sbrs	r11, 4
    216a:	0d c0       	rjmp	.+26     	; 0x2186 <vfprintf+0x272>
    216c:	fb 2d       	mov	r31, r11
    216e:	f4 60       	ori	r31, 0x04	; 4
    2170:	bf 2e       	mov	r11, r31
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <vfprintf+0x272>
    2174:	34 fe       	sbrs	r3, 4
    2176:	0a c0       	rjmp	.+20     	; 0x218c <vfprintf+0x278>
    2178:	29 2f       	mov	r18, r25
    217a:	26 60       	ori	r18, 0x06	; 6
    217c:	b2 2e       	mov	r11, r18
    217e:	06 c0       	rjmp	.+12     	; 0x218c <vfprintf+0x278>
    2180:	28 e0       	ldi	r18, 0x08	; 8
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <vfprintf+0x27c>
    2186:	20 e1       	ldi	r18, 0x10	; 16
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <vfprintf+0x27c>
    218c:	20 e1       	ldi	r18, 0x10	; 16
    218e:	32 e0       	ldi	r19, 0x02	; 2
    2190:	f8 01       	movw	r30, r16
    2192:	b7 fe       	sbrs	r11, 7
    2194:	07 c0       	rjmp	.+14     	; 0x21a4 <vfprintf+0x290>
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	0c 5f       	subi	r16, 0xFC	; 252
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <vfprintf+0x29c>
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 5f       	subi	r16, 0xFE	; 254
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	a3 01       	movw	r20, r6
    21b2:	0e 94 bd 11 	call	0x237a	; 0x237a <__ultoa_invert>
    21b6:	88 2e       	mov	r8, r24
    21b8:	86 18       	sub	r8, r6
    21ba:	fb 2d       	mov	r31, r11
    21bc:	ff 77       	andi	r31, 0x7F	; 127
    21be:	3f 2e       	mov	r3, r31
    21c0:	36 fe       	sbrs	r3, 6
    21c2:	0d c0       	rjmp	.+26     	; 0x21de <vfprintf+0x2ca>
    21c4:	23 2d       	mov	r18, r3
    21c6:	2e 7f       	andi	r18, 0xFE	; 254
    21c8:	a2 2e       	mov	r10, r18
    21ca:	89 14       	cp	r8, r9
    21cc:	58 f4       	brcc	.+22     	; 0x21e4 <vfprintf+0x2d0>
    21ce:	34 fe       	sbrs	r3, 4
    21d0:	0b c0       	rjmp	.+22     	; 0x21e8 <vfprintf+0x2d4>
    21d2:	32 fc       	sbrc	r3, 2
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <vfprintf+0x2d4>
    21d6:	83 2d       	mov	r24, r3
    21d8:	8e 7e       	andi	r24, 0xEE	; 238
    21da:	a8 2e       	mov	r10, r24
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <vfprintf+0x2d4>
    21de:	b8 2c       	mov	r11, r8
    21e0:	a3 2c       	mov	r10, r3
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <vfprintf+0x2d6>
    21e4:	b8 2c       	mov	r11, r8
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <vfprintf+0x2d6>
    21e8:	b9 2c       	mov	r11, r9
    21ea:	a4 fe       	sbrs	r10, 4
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <vfprintf+0x2f8>
    21ee:	fe 01       	movw	r30, r28
    21f0:	e8 0d       	add	r30, r8
    21f2:	f1 1d       	adc	r31, r1
    21f4:	80 81       	ld	r24, Z
    21f6:	80 33       	cpi	r24, 0x30	; 48
    21f8:	21 f4       	brne	.+8      	; 0x2202 <vfprintf+0x2ee>
    21fa:	9a 2d       	mov	r25, r10
    21fc:	99 7e       	andi	r25, 0xE9	; 233
    21fe:	a9 2e       	mov	r10, r25
    2200:	09 c0       	rjmp	.+18     	; 0x2214 <vfprintf+0x300>
    2202:	a2 fe       	sbrs	r10, 2
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <vfprintf+0x2fe>
    2206:	b3 94       	inc	r11
    2208:	b3 94       	inc	r11
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <vfprintf+0x300>
    220c:	8a 2d       	mov	r24, r10
    220e:	86 78       	andi	r24, 0x86	; 134
    2210:	09 f0       	breq	.+2      	; 0x2214 <vfprintf+0x300>
    2212:	b3 94       	inc	r11
    2214:	a3 fc       	sbrc	r10, 3
    2216:	11 c0       	rjmp	.+34     	; 0x223a <vfprintf+0x326>
    2218:	a0 fe       	sbrs	r10, 0
    221a:	06 c0       	rjmp	.+12     	; 0x2228 <vfprintf+0x314>
    221c:	b2 14       	cp	r11, r2
    221e:	88 f4       	brcc	.+34     	; 0x2242 <vfprintf+0x32e>
    2220:	28 0c       	add	r2, r8
    2222:	92 2c       	mov	r9, r2
    2224:	9b 18       	sub	r9, r11
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <vfprintf+0x330>
    2228:	b2 14       	cp	r11, r2
    222a:	60 f4       	brcc	.+24     	; 0x2244 <vfprintf+0x330>
    222c:	b6 01       	movw	r22, r12
    222e:	80 e2       	ldi	r24, 0x20	; 32
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    2236:	b3 94       	inc	r11
    2238:	f7 cf       	rjmp	.-18     	; 0x2228 <vfprintf+0x314>
    223a:	b2 14       	cp	r11, r2
    223c:	18 f4       	brcc	.+6      	; 0x2244 <vfprintf+0x330>
    223e:	2b 18       	sub	r2, r11
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <vfprintf+0x332>
    2242:	98 2c       	mov	r9, r8
    2244:	21 2c       	mov	r2, r1
    2246:	a4 fe       	sbrs	r10, 4
    2248:	10 c0       	rjmp	.+32     	; 0x226a <vfprintf+0x356>
    224a:	b6 01       	movw	r22, r12
    224c:	80 e3       	ldi	r24, 0x30	; 48
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    2254:	a2 fe       	sbrs	r10, 2
    2256:	17 c0       	rjmp	.+46     	; 0x2286 <vfprintf+0x372>
    2258:	a1 fc       	sbrc	r10, 1
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <vfprintf+0x34e>
    225c:	88 e7       	ldi	r24, 0x78	; 120
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <vfprintf+0x352>
    2262:	88 e5       	ldi	r24, 0x58	; 88
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	b6 01       	movw	r22, r12
    2268:	0c c0       	rjmp	.+24     	; 0x2282 <vfprintf+0x36e>
    226a:	8a 2d       	mov	r24, r10
    226c:	86 78       	andi	r24, 0x86	; 134
    226e:	59 f0       	breq	.+22     	; 0x2286 <vfprintf+0x372>
    2270:	a1 fe       	sbrs	r10, 1
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <vfprintf+0x364>
    2274:	8b e2       	ldi	r24, 0x2B	; 43
    2276:	01 c0       	rjmp	.+2      	; 0x227a <vfprintf+0x366>
    2278:	80 e2       	ldi	r24, 0x20	; 32
    227a:	a7 fc       	sbrc	r10, 7
    227c:	8d e2       	ldi	r24, 0x2D	; 45
    227e:	b6 01       	movw	r22, r12
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    2286:	89 14       	cp	r8, r9
    2288:	38 f4       	brcc	.+14     	; 0x2298 <vfprintf+0x384>
    228a:	b6 01       	movw	r22, r12
    228c:	80 e3       	ldi	r24, 0x30	; 48
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    2294:	9a 94       	dec	r9
    2296:	f7 cf       	rjmp	.-18     	; 0x2286 <vfprintf+0x372>
    2298:	8a 94       	dec	r8
    229a:	f3 01       	movw	r30, r6
    229c:	e8 0d       	add	r30, r8
    229e:	f1 1d       	adc	r31, r1
    22a0:	80 81       	ld	r24, Z
    22a2:	b6 01       	movw	r22, r12
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    22aa:	81 10       	cpse	r8, r1
    22ac:	f5 cf       	rjmp	.-22     	; 0x2298 <vfprintf+0x384>
    22ae:	22 20       	and	r2, r2
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <vfprintf+0x3a0>
    22b2:	42 ce       	rjmp	.-892    	; 0x1f38 <vfprintf+0x24>
    22b4:	b6 01       	movw	r22, r12
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 81 11 	call	0x2302	; 0x2302 <fputc>
    22be:	2a 94       	dec	r2
    22c0:	f6 cf       	rjmp	.-20     	; 0x22ae <vfprintf+0x39a>
    22c2:	f6 01       	movw	r30, r12
    22c4:	86 81       	ldd	r24, Z+6	; 0x06
    22c6:	97 81       	ldd	r25, Z+7	; 0x07
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <vfprintf+0x3ba>
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	9f ef       	ldi	r25, 0xFF	; 255
    22ce:	2b 96       	adiw	r28, 0x0b	; 11
    22d0:	e2 e1       	ldi	r30, 0x12	; 18
    22d2:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

000022d6 <strnlen_P>:
    22d6:	fc 01       	movw	r30, r24
    22d8:	05 90       	lpm	r0, Z+
    22da:	61 50       	subi	r22, 0x01	; 1
    22dc:	70 40       	sbci	r23, 0x00	; 0
    22de:	01 10       	cpse	r0, r1
    22e0:	d8 f7       	brcc	.-10     	; 0x22d8 <strnlen_P+0x2>
    22e2:	80 95       	com	r24
    22e4:	90 95       	com	r25
    22e6:	8e 0f       	add	r24, r30
    22e8:	9f 1f       	adc	r25, r31
    22ea:	08 95       	ret

000022ec <strnlen>:
    22ec:	fc 01       	movw	r30, r24
    22ee:	61 50       	subi	r22, 0x01	; 1
    22f0:	70 40       	sbci	r23, 0x00	; 0
    22f2:	01 90       	ld	r0, Z+
    22f4:	01 10       	cpse	r0, r1
    22f6:	d8 f7       	brcc	.-10     	; 0x22ee <strnlen+0x2>
    22f8:	80 95       	com	r24
    22fa:	90 95       	com	r25
    22fc:	8e 0f       	add	r24, r30
    22fe:	9f 1f       	adc	r25, r31
    2300:	08 95       	ret

00002302 <fputc>:
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	fb 01       	movw	r30, r22
    230c:	23 81       	ldd	r18, Z+3	; 0x03
    230e:	21 fd       	sbrc	r18, 1
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <fputc+0x16>
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	9f ef       	ldi	r25, 0xFF	; 255
    2316:	2c c0       	rjmp	.+88     	; 0x2370 <fputc+0x6e>
    2318:	22 ff       	sbrs	r18, 2
    231a:	16 c0       	rjmp	.+44     	; 0x2348 <fputc+0x46>
    231c:	46 81       	ldd	r20, Z+6	; 0x06
    231e:	57 81       	ldd	r21, Z+7	; 0x07
    2320:	24 81       	ldd	r18, Z+4	; 0x04
    2322:	35 81       	ldd	r19, Z+5	; 0x05
    2324:	42 17       	cp	r20, r18
    2326:	53 07       	cpc	r21, r19
    2328:	44 f4       	brge	.+16     	; 0x233a <fputc+0x38>
    232a:	a0 81       	ld	r26, Z
    232c:	b1 81       	ldd	r27, Z+1	; 0x01
    232e:	9d 01       	movw	r18, r26
    2330:	2f 5f       	subi	r18, 0xFF	; 255
    2332:	3f 4f       	sbci	r19, 0xFF	; 255
    2334:	20 83       	st	Z, r18
    2336:	31 83       	std	Z+1, r19	; 0x01
    2338:	8c 93       	st	X, r24
    233a:	26 81       	ldd	r18, Z+6	; 0x06
    233c:	37 81       	ldd	r19, Z+7	; 0x07
    233e:	2f 5f       	subi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	26 83       	std	Z+6, r18	; 0x06
    2344:	37 83       	std	Z+7, r19	; 0x07
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <fputc+0x6e>
    2348:	8b 01       	movw	r16, r22
    234a:	ec 01       	movw	r28, r24
    234c:	fb 01       	movw	r30, r22
    234e:	00 84       	ldd	r0, Z+8	; 0x08
    2350:	f1 85       	ldd	r31, Z+9	; 0x09
    2352:	e0 2d       	mov	r30, r0
    2354:	09 95       	icall
    2356:	89 2b       	or	r24, r25
    2358:	e1 f6       	brne	.-72     	; 0x2312 <fputc+0x10>
    235a:	d8 01       	movw	r26, r16
    235c:	16 96       	adiw	r26, 0x06	; 6
    235e:	8d 91       	ld	r24, X+
    2360:	9c 91       	ld	r25, X
    2362:	17 97       	sbiw	r26, 0x07	; 7
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	16 96       	adiw	r26, 0x06	; 6
    2368:	8d 93       	st	X+, r24
    236a:	9c 93       	st	X, r25
    236c:	17 97       	sbiw	r26, 0x07	; 7
    236e:	ce 01       	movw	r24, r28
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	08 95       	ret

0000237a <__ultoa_invert>:
    237a:	fa 01       	movw	r30, r20
    237c:	aa 27       	eor	r26, r26
    237e:	28 30       	cpi	r18, 0x08	; 8
    2380:	51 f1       	breq	.+84     	; 0x23d6 <__ultoa_invert+0x5c>
    2382:	20 31       	cpi	r18, 0x10	; 16
    2384:	81 f1       	breq	.+96     	; 0x23e6 <__ultoa_invert+0x6c>
    2386:	e8 94       	clt
    2388:	6f 93       	push	r22
    238a:	6e 7f       	andi	r22, 0xFE	; 254
    238c:	6e 5f       	subi	r22, 0xFE	; 254
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	8f 4f       	sbci	r24, 0xFF	; 255
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	af 4f       	sbci	r26, 0xFF	; 255
    2396:	b1 e0       	ldi	r27, 0x01	; 1
    2398:	3e d0       	rcall	.+124    	; 0x2416 <__ultoa_invert+0x9c>
    239a:	b4 e0       	ldi	r27, 0x04	; 4
    239c:	3c d0       	rcall	.+120    	; 0x2416 <__ultoa_invert+0x9c>
    239e:	67 0f       	add	r22, r23
    23a0:	78 1f       	adc	r23, r24
    23a2:	89 1f       	adc	r24, r25
    23a4:	9a 1f       	adc	r25, r26
    23a6:	a1 1d       	adc	r26, r1
    23a8:	68 0f       	add	r22, r24
    23aa:	79 1f       	adc	r23, r25
    23ac:	8a 1f       	adc	r24, r26
    23ae:	91 1d       	adc	r25, r1
    23b0:	a1 1d       	adc	r26, r1
    23b2:	6a 0f       	add	r22, r26
    23b4:	71 1d       	adc	r23, r1
    23b6:	81 1d       	adc	r24, r1
    23b8:	91 1d       	adc	r25, r1
    23ba:	a1 1d       	adc	r26, r1
    23bc:	20 d0       	rcall	.+64     	; 0x23fe <__ultoa_invert+0x84>
    23be:	09 f4       	brne	.+2      	; 0x23c2 <__ultoa_invert+0x48>
    23c0:	68 94       	set
    23c2:	3f 91       	pop	r19
    23c4:	2a e0       	ldi	r18, 0x0A	; 10
    23c6:	26 9f       	mul	r18, r22
    23c8:	11 24       	eor	r1, r1
    23ca:	30 19       	sub	r19, r0
    23cc:	30 5d       	subi	r19, 0xD0	; 208
    23ce:	31 93       	st	Z+, r19
    23d0:	de f6       	brtc	.-74     	; 0x2388 <__ultoa_invert+0xe>
    23d2:	cf 01       	movw	r24, r30
    23d4:	08 95       	ret
    23d6:	46 2f       	mov	r20, r22
    23d8:	47 70       	andi	r20, 0x07	; 7
    23da:	40 5d       	subi	r20, 0xD0	; 208
    23dc:	41 93       	st	Z+, r20
    23de:	b3 e0       	ldi	r27, 0x03	; 3
    23e0:	0f d0       	rcall	.+30     	; 0x2400 <__ultoa_invert+0x86>
    23e2:	c9 f7       	brne	.-14     	; 0x23d6 <__ultoa_invert+0x5c>
    23e4:	f6 cf       	rjmp	.-20     	; 0x23d2 <__ultoa_invert+0x58>
    23e6:	46 2f       	mov	r20, r22
    23e8:	4f 70       	andi	r20, 0x0F	; 15
    23ea:	40 5d       	subi	r20, 0xD0	; 208
    23ec:	4a 33       	cpi	r20, 0x3A	; 58
    23ee:	18 f0       	brcs	.+6      	; 0x23f6 <__ultoa_invert+0x7c>
    23f0:	49 5d       	subi	r20, 0xD9	; 217
    23f2:	31 fd       	sbrc	r19, 1
    23f4:	40 52       	subi	r20, 0x20	; 32
    23f6:	41 93       	st	Z+, r20
    23f8:	02 d0       	rcall	.+4      	; 0x23fe <__ultoa_invert+0x84>
    23fa:	a9 f7       	brne	.-22     	; 0x23e6 <__ultoa_invert+0x6c>
    23fc:	ea cf       	rjmp	.-44     	; 0x23d2 <__ultoa_invert+0x58>
    23fe:	b4 e0       	ldi	r27, 0x04	; 4
    2400:	a6 95       	lsr	r26
    2402:	97 95       	ror	r25
    2404:	87 95       	ror	r24
    2406:	77 95       	ror	r23
    2408:	67 95       	ror	r22
    240a:	ba 95       	dec	r27
    240c:	c9 f7       	brne	.-14     	; 0x2400 <__ultoa_invert+0x86>
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	61 05       	cpc	r22, r1
    2412:	71 05       	cpc	r23, r1
    2414:	08 95       	ret
    2416:	9b 01       	movw	r18, r22
    2418:	ac 01       	movw	r20, r24
    241a:	0a 2e       	mov	r0, r26
    241c:	06 94       	lsr	r0
    241e:	57 95       	ror	r21
    2420:	47 95       	ror	r20
    2422:	37 95       	ror	r19
    2424:	27 95       	ror	r18
    2426:	ba 95       	dec	r27
    2428:	c9 f7       	brne	.-14     	; 0x241c <__ultoa_invert+0xa2>
    242a:	62 0f       	add	r22, r18
    242c:	73 1f       	adc	r23, r19
    242e:	84 1f       	adc	r24, r20
    2430:	95 1f       	adc	r25, r21
    2432:	a0 1d       	adc	r26, r0
    2434:	08 95       	ret

00002436 <eeprom_read_block>:
    2436:	60 50       	subi	r22, 0x00	; 0
    2438:	7c 4e       	sbci	r23, 0xEC	; 236
    243a:	0c 94 87 12 	jmp	0x250e	; 0x250e <memcpy>

0000243e <eeprom_read_byte>:
    243e:	03 d0       	rcall	.+6      	; 0x2446 <eeprom_mapen>
    2440:	80 81       	ld	r24, Z
    2442:	99 27       	eor	r25, r25
    2444:	08 95       	ret

00002446 <eeprom_mapen>:
    2446:	fc 01       	movw	r30, r24
    2448:	e0 50       	subi	r30, 0x00	; 0
    244a:	fc 4e       	sbci	r31, 0xEC	; 236
    244c:	08 95       	ret

0000244e <eeprom_update_block>:
    244e:	dc 01       	movw	r26, r24
    2450:	a4 0f       	add	r26, r20
    2452:	b5 1f       	adc	r27, r21
    2454:	41 50       	subi	r20, 0x01	; 1
    2456:	50 40       	sbci	r21, 0x00	; 0
    2458:	48 f0       	brcs	.+18     	; 0x246c <eeprom_update_block+0x1e>
    245a:	cb 01       	movw	r24, r22
    245c:	84 0f       	add	r24, r20
    245e:	95 1f       	adc	r25, r21
    2460:	2e 91       	ld	r18, -X
    2462:	0e 94 38 12 	call	0x2470	; 0x2470 <eeprom_update_r18>
    2466:	41 50       	subi	r20, 0x01	; 1
    2468:	50 40       	sbci	r21, 0x00	; 0
    246a:	d0 f7       	brcc	.-12     	; 0x2460 <eeprom_update_block+0x12>
    246c:	08 95       	ret

0000246e <eeprom_update_byte>:
    246e:	26 2f       	mov	r18, r22

00002470 <eeprom_update_r18>:
    2470:	0e 94 23 12 	call	0x2446	; 0x2446 <eeprom_mapen>
    2474:	00 80       	ld	r0, Z
    2476:	02 16       	cp	r0, r18
    2478:	19 f0       	breq	.+6      	; 0x2480 <eeprom_update_r18+0x10>
    247a:	0e 94 43 12 	call	0x2486	; 0x2486 <eeprom_write_r18>
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	08 95       	ret

00002484 <eeprom_write_byte>:
    2484:	26 2f       	mov	r18, r22

00002486 <eeprom_write_r18>:
    2486:	af 93       	push	r26
    2488:	bf 93       	push	r27
    248a:	e0 e0       	ldi	r30, 0x00	; 0
    248c:	f0 e1       	ldi	r31, 0x10	; 16
    248e:	32 81       	ldd	r19, Z+2	; 0x02
    2490:	31 fd       	sbrc	r19, 1
    2492:	fd cf       	rjmp	.-6      	; 0x248e <eeprom_write_r18+0x8>
    2494:	dc 01       	movw	r26, r24
    2496:	a0 50       	subi	r26, 0x00	; 0
    2498:	bc 4e       	sbci	r27, 0xEC	; 236
    249a:	2c 93       	st	X, r18
    249c:	2d e9       	ldi	r18, 0x9D	; 157
    249e:	24 bf       	out	0x34, r18	; 52
    24a0:	23 e0       	ldi	r18, 0x03	; 3
    24a2:	20 83       	st	Z, r18
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	bf 91       	pop	r27
    24a8:	af 91       	pop	r26
    24aa:	08 95       	ret

000024ac <__prologue_saves__>:
    24ac:	2f 92       	push	r2
    24ae:	3f 92       	push	r3
    24b0:	4f 92       	push	r4
    24b2:	5f 92       	push	r5
    24b4:	6f 92       	push	r6
    24b6:	7f 92       	push	r7
    24b8:	8f 92       	push	r8
    24ba:	9f 92       	push	r9
    24bc:	af 92       	push	r10
    24be:	bf 92       	push	r11
    24c0:	cf 92       	push	r12
    24c2:	df 92       	push	r13
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	ca 1b       	sub	r28, r26
    24d6:	db 0b       	sbc	r29, r27
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	ed 01       	movw	r28, r26
    250c:	08 95       	ret

0000250e <memcpy>:
    250e:	fb 01       	movw	r30, r22
    2510:	dc 01       	movw	r26, r24
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <memcpy+0xa>
    2514:	01 90       	ld	r0, Z+
    2516:	0d 92       	st	X+, r0
    2518:	41 50       	subi	r20, 0x01	; 1
    251a:	50 40       	sbci	r21, 0x00	; 0
    251c:	d8 f7       	brcc	.-10     	; 0x2514 <memcpy+0x6>
    251e:	08 95       	ret

00002520 <_exit>:
    2520:	f8 94       	cli

00002522 <__stop_program>:
    2522:	ff cf       	rjmp	.-2      	; 0x2522 <__stop_program>
