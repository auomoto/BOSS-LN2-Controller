
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00002632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  000063fe  000023fe  00002492  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000022f  00802800  00802800  00002632  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002632  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000340  00000000  00000000  000026d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007478  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003515  00000000  00000000  00009e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026a0  00000000  00000000  0000d39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000608  00000000  00000000  0000fa40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002079  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d89  00000000  00000000  000120c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e0  00000000  00000000  00012e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_17>
      48:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_24>
      64:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_25>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	96 01       	movw	r18, r12
      a2:	b4 01       	movw	r22, r8
      a4:	8b 02       	muls	r24, r27
      a6:	c1 02       	muls	r28, r17
      a8:	f9 02       	muls	r31, r25
      aa:	31 03       	mulsu	r19, r17
      ac:	52 03       	mulsu	r21, r18
      ae:	81 03       	fmuls	r16, r17

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	2a e2       	ldi	r18, 0x2A	; 42
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	af 32       	cpi	r26, 0x2F	; 47
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 87 06 	call	0xd0e	; 0xd0e <main>
      d0:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:

volatile uint8_t button_pushed;

void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	6e ef       	ldi	r22, 0xFE	; 254
      e2:	73 e6       	ldi	r23, 0x63	; 99
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	6d e0       	ldi	r22, 0x0D	; 13
      ee:	74 e6       	ldi	r23, 0x64	; 100
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	c9 f1       	breq	.+114    	; 0x172 <__EEPROM_REGION_LENGTH__+0x72>
     100:	18 f4       	brcc	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	41 f0       	breq	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     106:	96 c0       	rjmp	.+300    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f4       	brne	.+2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     10c:	5f c0       	rjmp	.+190    	; 0x1cc <__EEPROM_REGION_LENGTH__+0xcc>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	7d c0       	rjmp	.+250    	; 0x20e <__EEPROM_REGION_LENGTH__+0x10e>
     114:	8f c0       	rjmp	.+286    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {				// See valves.h
     116:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     11a:	88 23       	and	r24, r24
     11c:	24 f4       	brge	.+8      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
				CLOSEVALVE(BLUVALVE);
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     124:	11 c0       	rjmp	.+34     	; 0x148 <__EEPROM_REGION_LENGTH__+0x48>
			} else if (BLUENABLED && BLUTHERMWARM) {
     126:	8c e0       	ldi	r24, 0x0C	; 12
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     12e:	88 23       	and	r24, r24
     130:	c1 f0       	breq	.+48     	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     132:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     136:	80 ff       	sbrs	r24, 0
     138:	0d c0       	rjmp	.+26     	; 0x154 <__EEPROM_REGION_LENGTH__+0x54>
				OPENVALVE(BLUVALVE);
     13a:	80 e8       	ldi	r24, 0x80	; 128
     13c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     140:	e7 e0       	ldi	r30, 0x07	; 7
     142:	f8 e2       	ldi	r31, 0x28	; 40
     144:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     146:	17 86       	std	Z+15, r1	; 0x0f
			}
			if (BLUENABLED && !BLUTHERMWARM) {
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     150:	88 23       	and	r24, r24
     152:	39 f0       	breq	.+14     	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     154:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     158:	80 fd       	sbrc	r24, 0
     15a:	03 c0       	rjmp	.+6      	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
				disp_coldtherm();
     15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     160:	69 c0       	rjmp	.+210    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
			} else if ((screen_value == SCRVALVES)) {
     162:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	09 f0       	breq	.+2      	; 0x16c <__EEPROM_REGION_LENGTH__+0x6c>
     16a:	64 c0       	rjmp	.+200    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
				display(SCRVALVES);
     16c:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     170:	61 c0       	rjmp	.+194    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {				// See valves.h
     172:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     176:	86 ff       	sbrs	r24, 6
     178:	04 c0       	rjmp	.+8      	; 0x182 <__EEPROM_REGION_LENGTH__+0x82>
				CLOSEVALVE(REDVALVE);
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     180:	11 c0       	rjmp	.+34     	; 0x1a4 <__EEPROM_REGION_LENGTH__+0xa4>
			} else if (REDENABLED && REDTHERMWARM) {
     182:	8d e0       	ldi	r24, 0x0D	; 13
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     18a:	88 23       	and	r24, r24
     18c:	c1 f0       	breq	.+48     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
     18e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     192:	81 ff       	sbrs	r24, 1
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <__EEPROM_REGION_LENGTH__+0xb0>
				OPENVALVE(REDVALVE);
     196:	80 e4       	ldi	r24, 0x40	; 64
     198:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     19c:	e7 e0       	ldi	r30, 0x07	; 7
     19e:	f8 e2       	ldi	r31, 0x28	; 40
     1a0:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1a2:	10 8a       	std	Z+16, r1	; 0x10
			}
			if (REDENABLED && !REDTHERMWARM) {
     1a4:	8d e0       	ldi	r24, 0x0D	; 13
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     1ac:	88 23       	and	r24, r24
     1ae:	39 f0       	breq	.+14     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
     1b0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1b4:	81 fd       	sbrc	r24, 1
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
				disp_coldtherm();
     1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1bc:	3b c0       	rjmp	.+118    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
			} else if ((screen_value == SCRVALVES)) {
     1be:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	b9 f5       	brne	.+110    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
				display(SCRVALVES);
     1c6:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     1ca:	34 c0       	rjmp	.+104    	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {				// See valves.h
     1cc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1d0:	85 ff       	sbrs	r24, 5
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__EEPROM_REGION_LENGTH__+0xdc>
				CLOSEVALVE(BUFVALVE);
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
			} else if (BUFTHERMWARM) {
     1dc:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1e0:	82 ff       	sbrs	r24, 2
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
				OPENVALVE(BUFVALVE);
     1e4:	80 e2       	ldi	r24, 0x20	; 32
     1e6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     1ea:	e7 e0       	ldi	r30, 0x07	; 7
     1ec:	f8 e2       	ldi	r31, 0x28	; 40
     1ee:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     1f0:	11 8a       	std	Z+17, r1	; 0x11
			}
			if (!BUFTHERMWARM) {
     1f2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1f6:	82 fd       	sbrc	r24, 2
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <__EEPROM_REGION_LENGTH__+0x100>
				disp_coldtherm();
     1fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1fe:	1a c0       	rjmp	.+52     	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
			} else if ((screen_value == SCRVALVES)) {
     200:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	b1 f4       	brne	.+44     	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
				display(SCRVALVES);
     208:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     20c:	13 c0       	rjmp	.+38     	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {				// See valves.h
     20e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     212:	84 ff       	sbrs	r24, 4
     214:	04 c0       	rjmp	.+8      	; 0x21e <__EEPROM_REGION_LENGTH__+0x11e>
				CLOSEVALVE(SUPVALVE);
     216:	80 e1       	ldi	r24, 0x10	; 16
     218:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     21c:	05 c0       	rjmp	.+10     	; 0x228 <__EEPROM_REGION_LENGTH__+0x128>
			} else {
				status.supply_button_pushed = TRUE;	// Button was pushed; cleared in handle_ticks()
     21e:	e7 e0       	ldi	r30, 0x07	; 7
     220:	f8 e2       	ldi	r31, 0x28	; 40
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	87 8b       	std	Z+23, r24	; 0x17
				status.supply_button_time = 0;		// # secs button has been held down
     226:	10 8e       	std	Z+24, r1	; 0x18
			}
			if ((screen_value == SCRVALVES)) {
     228:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	11 f4       	brne	.+4      	; 0x234 <__EEPROM_REGION_LENGTH__+0x134>
				display(SCRVALVES);
     230:	0e 94 85 01 	call	0x30a	; 0x30a <display>

		default:
			break;
	}

	button_pushed = FALSE;
     234:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
     238:	08 95       	ret

0000023a <clear_BUTTONS>:
}

void clear_BUTTONS(void)
{

	PORTB.INTFLAGS = 0x0F;	// Clear spurious interrupts at init
     23a:	8f e0       	ldi	r24, 0x0F	; 15
     23c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     240:	08 95       	ret

00000242 <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     242:	e0 e2       	ldi	r30, 0x20	; 32
     244:	f4 e0       	ldi	r31, 0x04	; 4
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     24a:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     24c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     24e:	81 8b       	std	Z+17, r24	; 0x11
     250:	08 95       	ret

00000252 <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	0f 92       	push	r0
     25a:	11 24       	eor	r1, r1
     25c:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     25e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     262:	82 ff       	sbrs	r24, 2
     264:	07 c0       	rjmp	.+14     	; 0x274 <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     272:	20 c0       	rjmp	.+64     	; 0x2b4 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     274:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     278:	83 ff       	sbrs	r24, 3
     27a:	07 c0       	rjmp	.+14     	; 0x28a <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     288:	15 c0       	rjmp	.+42     	; 0x2b4 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     28a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     28e:	80 ff       	sbrs	r24, 0
     290:	07 c0       	rjmp	.+14     	; 0x2a0 <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     29e:	0a c0       	rjmp	.+20     	; 0x2b4 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     2a0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2a4:	81 ff       	sbrs	r24, 1
     2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     2ae:	84 e0       	ldi	r24, 0x04	; 4
     2b0:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     2b4:	8f 91       	pop	r24
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     2c0:	4a e0       	ldi	r20, 0x0A	; 10
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	0e 94 88 11 	call	0x2310	; 0x2310 <eeprom_read_block>
     2cc:	08 95       	ret

000002ce <update_VERSION>:
}

void update_VERSION(void)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	2b 97       	sbiw	r28, 0x0b	; 11
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     2dc:	8b e0       	ldi	r24, 0x0B	; 11
     2de:	ed e1       	ldi	r30, 0x1D	; 29
     2e0:	f4 e6       	ldi	r31, 0x64	; 100
     2e2:	de 01       	movw	r26, r28
     2e4:	11 96       	adiw	r26, 0x01	; 1
     2e6:	01 90       	ld	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	8a 95       	dec	r24
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     2ee:	4a e0       	ldi	r20, 0x0A	; 10
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	ce 01       	movw	r24, r28
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	0e 94 94 11 	call	0x2328	; 0x2328 <eeprom_update_block>
}
     2fe:	2b 96       	adiw	r28, 0x0b	; 11
     300:	cd bf       	out	0x3d, r28	; 61
     302:	de bf       	out	0x3e, r29	; 62
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	aa 97       	sbiw	r28, 0x2a	; 42
     314:	cd bf       	out	0x3d, r28	; 61
     316:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	88 30       	cpi	r24, 0x08	; 8
     31c:	91 05       	cpc	r25, r1
     31e:	08 f0       	brcs	.+2      	; 0x322 <display+0x18>
     320:	1f c2       	rjmp	.+1086   	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     322:	fc 01       	movw	r30, r24
     324:	e0 5b       	subi	r30, 0xB0	; 176
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	e8 e2       	ldi	r30, 0x28	; 40
     330:	f4 e6       	ldi	r31, 0x64	; 100
     332:	de 01       	movw	r26, r28
     334:	11 96       	adiw	r26, 0x01	; 1
     336:	01 90       	ld	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	8a 95       	dec	r24
     33c:	e1 f7       	brne	.-8      	; 0x336 <display+0x2c>
			get_VERSION(status.version);
     33e:	87 e0       	ldi	r24, 0x07	; 7
     340:	98 e2       	ldi	r25, 0x28	; 40
     342:	0e 94 60 01 	call	0x2c0	; 0x2c0 <get_VERSION>
			strcpy(line2, "   ");
     346:	80 e2       	ldi	r24, 0x20	; 32
     348:	90 e2       	ldi	r25, 0x20	; 32
     34a:	8e 8b       	std	Y+22, r24	; 0x16
     34c:	9f 8b       	std	Y+23, r25	; 0x17
     34e:	80 e2       	ldi	r24, 0x20	; 32
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	88 8f       	std	Y+24, r24	; 0x18
     354:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     356:	67 e0       	ldi	r22, 0x07	; 7
     358:	78 e2       	ldi	r23, 0x28	; 40
     35a:	ce 01       	movw	r24, r28
     35c:	46 96       	adiw	r24, 0x16	; 22
     35e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>
			screen_value = SCRVERSION;
     362:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
     366:	10 c2       	rjmp	.+1056   	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     368:	80 e1       	ldi	r24, 0x10	; 16
     36a:	e7 e3       	ldi	r30, 0x37	; 55
     36c:	f4 e6       	ldi	r31, 0x64	; 100
     36e:	de 01       	movw	r26, r28
     370:	11 96       	adiw	r26, 0x01	; 1
     372:	01 90       	ld	r0, Z+
     374:	0d 92       	st	X+, r0
     376:	8a 95       	dec	r24
     378:	e1 f7       	brne	.-8      	; 0x372 <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     37a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     37e:	84 ff       	sbrs	r24, 4
     380:	0a c0       	rjmp	.+20     	; 0x396 <display+0x8c>
				strcpy(line2, " O  ");
     382:	85 e0       	ldi	r24, 0x05	; 5
     384:	e7 e4       	ldi	r30, 0x47	; 71
     386:	f4 e6       	ldi	r31, 0x64	; 100
     388:	de 01       	movw	r26, r28
     38a:	56 96       	adiw	r26, 0x16	; 22
     38c:	01 90       	ld	r0, Z+
     38e:	0d 92       	st	X+, r0
     390:	8a 95       	dec	r24
     392:	e1 f7       	brne	.-8      	; 0x38c <display+0x82>
     394:	09 c0       	rjmp	.+18     	; 0x3a8 <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	ec e4       	ldi	r30, 0x4C	; 76
     39a:	f4 e6       	ldi	r31, 0x64	; 100
     39c:	de 01       	movw	r26, r28
     39e:	56 96       	adiw	r26, 0x16	; 22
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	8a 95       	dec	r24
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     3a8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3ac:	85 ff       	sbrs	r24, 5
     3ae:	0e c0       	rjmp	.+28     	; 0x3cc <display+0xc2>
				strcat(line2, " O  ");
     3b0:	de 01       	movw	r26, r28
     3b2:	56 96       	adiw	r26, 0x16	; 22
     3b4:	0d 90       	ld	r0, X+
     3b6:	00 20       	and	r0, r0
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <display+0xaa>
     3ba:	11 97       	sbiw	r26, 0x01	; 1
     3bc:	85 e0       	ldi	r24, 0x05	; 5
     3be:	e7 e4       	ldi	r30, 0x47	; 71
     3c0:	f4 e6       	ldi	r31, 0x64	; 100
     3c2:	01 90       	ld	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	8a 95       	dec	r24
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <display+0xb8>
     3ca:	1f c0       	rjmp	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			} else if (status.maxopen_BUF) {
     3cc:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
     3d0:	88 23       	and	r24, r24
     3d2:	71 f0       	breq	.+28     	; 0x3f0 <display+0xe6>
				strcat(line2, " T  ");
     3d4:	de 01       	movw	r26, r28
     3d6:	56 96       	adiw	r26, 0x16	; 22
     3d8:	0d 90       	ld	r0, X+
     3da:	00 20       	and	r0, r0
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <display+0xce>
     3de:	11 97       	sbiw	r26, 0x01	; 1
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	e1 e5       	ldi	r30, 0x51	; 81
     3e4:	f4 e6       	ldi	r31, 0x64	; 100
     3e6:	01 90       	ld	r0, Z+
     3e8:	0d 92       	st	X+, r0
     3ea:	8a 95       	dec	r24
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <display+0xdc>
     3ee:	0d c0       	rjmp	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			} else {
				strcat(line2, " C  ");
     3f0:	de 01       	movw	r26, r28
     3f2:	56 96       	adiw	r26, 0x16	; 22
     3f4:	0d 90       	ld	r0, X+
     3f6:	00 20       	and	r0, r0
     3f8:	e9 f7       	brne	.-6      	; 0x3f4 <display+0xea>
     3fa:	11 97       	sbiw	r26, 0x01	; 1
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	ec e4       	ldi	r30, 0x4C	; 76
     400:	f4 e6       	ldi	r31, 0x64	; 100
     402:	01 90       	ld	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	8a 95       	dec	r24
     408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			}
			if (!REDENABLED) {					// eeprom.h
     40a:	8d e0       	ldi	r24, 0x0D	; 13
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     412:	81 11       	cpse	r24, r1
     414:	0e c0       	rjmp	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				strcat(line2, " X  ");
     416:	de 01       	movw	r26, r28
     418:	56 96       	adiw	r26, 0x16	; 22
     41a:	0d 90       	ld	r0, X+
     41c:	00 20       	and	r0, r0
     41e:	e9 f7       	brne	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     420:	11 97       	sbiw	r26, 0x01	; 1
     422:	85 e0       	ldi	r24, 0x05	; 5
     424:	e6 e5       	ldi	r30, 0x56	; 86
     426:	f4 e6       	ldi	r31, 0x64	; 100
     428:	01 90       	ld	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	8a 95       	dec	r24
     42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     430:	31 c0       	rjmp	.+98     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			} else if (REDVALVEOPEN) {			// valves.h
     432:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     436:	86 ff       	sbrs	r24, 6
     438:	0e c0       	rjmp	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
				strcat(line2, " O  ");
     43a:	de 01       	movw	r26, r28
     43c:	56 96       	adiw	r26, 0x16	; 22
     43e:	0d 90       	ld	r0, X+
     440:	00 20       	and	r0, r0
     442:	e9 f7       	brne	.-6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	e7 e4       	ldi	r30, 0x47	; 71
     44a:	f4 e6       	ldi	r31, 0x64	; 100
     44c:	01 90       	ld	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	8a 95       	dec	r24
     452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	1f c0       	rjmp	.+62     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			} else if (status.maxopen_RED) {
     456:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
     45a:	88 23       	and	r24, r24
     45c:	71 f0       	breq	.+28     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				strcat(line2, " T  ");
     45e:	de 01       	movw	r26, r28
     460:	56 96       	adiw	r26, 0x16	; 22
     462:	0d 90       	ld	r0, X+
     464:	00 20       	and	r0, r0
     466:	e9 f7       	brne	.-6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	e1 e5       	ldi	r30, 0x51	; 81
     46e:	f4 e6       	ldi	r31, 0x64	; 100
     470:	01 90       	ld	r0, Z+
     472:	0d 92       	st	X+, r0
     474:	8a 95       	dec	r24
     476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     478:	0d c0       	rjmp	.+26     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			} else {
				strcat(line2, " C  ");
     47a:	de 01       	movw	r26, r28
     47c:	56 96       	adiw	r26, 0x16	; 22
     47e:	0d 90       	ld	r0, X+
     480:	00 20       	and	r0, r0
     482:	e9 f7       	brne	.-6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     484:	11 97       	sbiw	r26, 0x01	; 1
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	ec e4       	ldi	r30, 0x4C	; 76
     48a:	f4 e6       	ldi	r31, 0x64	; 100
     48c:	01 90       	ld	r0, Z+
     48e:	0d 92       	st	X+, r0
     490:	8a 95       	dec	r24
     492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			}
			if (!BLUENABLED) {
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     49c:	81 11       	cpse	r24, r1
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				strcat(line2, " X");
     4a0:	fe 01       	movw	r30, r28
     4a2:	76 96       	adiw	r30, 0x16	; 22
     4a4:	01 90       	ld	r0, Z+
     4a6:	00 20       	and	r0, r0
     4a8:	e9 f7       	brne	.-6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	80 e2       	ldi	r24, 0x20	; 32
     4ae:	98 e5       	ldi	r25, 0x58	; 88
     4b0:	80 83       	st	Z, r24
     4b2:	91 83       	std	Z+1, r25	; 0x01
     4b4:	12 82       	std	Z+2, r1	; 0x02
     4b6:	2b c0       	rjmp	.+86     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			} else if (BLUVALVEOPEN) {			// valves.h
     4b8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     4bc:	88 23       	and	r24, r24
     4be:	64 f4       	brge	.+24     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				strcat(line2, " O");
     4c0:	fe 01       	movw	r30, r28
     4c2:	76 96       	adiw	r30, 0x16	; 22
     4c4:	01 90       	ld	r0, Z+
     4c6:	00 20       	and	r0, r0
     4c8:	e9 f7       	brne	.-6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	80 e2       	ldi	r24, 0x20	; 32
     4ce:	9f e4       	ldi	r25, 0x4F	; 79
     4d0:	80 83       	st	Z, r24
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	12 82       	std	Z+2, r1	; 0x02
     4d6:	1b c0       	rjmp	.+54     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			} else if (status.maxopen_BLU) {
     4d8:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
     4dc:	88 23       	and	r24, r24
     4de:	61 f0       	breq	.+24     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
				strcat(line2, " T");
     4e0:	fe 01       	movw	r30, r28
     4e2:	76 96       	adiw	r30, 0x16	; 22
     4e4:	01 90       	ld	r0, Z+
     4e6:	00 20       	and	r0, r0
     4e8:	e9 f7       	brne	.-6      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	94 e5       	ldi	r25, 0x54	; 84
     4f0:	80 83       	st	Z, r24
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	12 82       	std	Z+2, r1	; 0x02
     4f6:	0b c0       	rjmp	.+22     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			} else {
				strcat(line2, " C");
     4f8:	fe 01       	movw	r30, r28
     4fa:	76 96       	adiw	r30, 0x16	; 22
     4fc:	01 90       	ld	r0, Z+
     4fe:	00 20       	and	r0, r0
     500:	e9 f7       	brne	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     502:	31 97       	sbiw	r30, 0x01	; 1
     504:	80 e2       	ldi	r24, 0x20	; 32
     506:	93 e4       	ldi	r25, 0x43	; 67
     508:	80 83       	st	Z, r24
     50a:	91 83       	std	Z+1, r25	; 0x01
     50c:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     514:	39 c1       	rjmp	.+626    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	eb e5       	ldi	r30, 0x5B	; 91
     51a:	f4 e6       	ldi	r31, 0x64	; 100
     51c:	de 01       	movw	r26, r28
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	8a 95       	dec	r24
     526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			if (status.next_fill < 2) {
     528:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <status+0x15>
     52c:	82 30       	cpi	r24, 0x02	; 2
     52e:	98 f4       	brcc	.+38     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
				sprintf(line2, "%d minute", status.next_fill);
     530:	1f 92       	push	r1
     532:	8f 93       	push	r24
     534:	88 e6       	ldi	r24, 0x68	; 104
     536:	94 e6       	ldi	r25, 0x64	; 100
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	ce 01       	movw	r24, r28
     53e:	46 96       	adiw	r24, 0x16	; 22
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	12 c0       	rjmp	.+36     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     556:	1f 92       	push	r1
     558:	8f 93       	push	r24
     55a:	82 e7       	ldi	r24, 0x72	; 114
     55c:	94 e6       	ldi	r25, 0x64	; 100
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	ce 01       	movw	r24, r28
     564:	46 96       	adiw	r24, 0x16	; 22
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     580:	03 c1       	rjmp	.+518    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     582:	8e e0       	ldi	r24, 0x0E	; 14
     584:	ed e7       	ldi	r30, 0x7D	; 125
     586:	f4 e6       	ldi	r31, 0x64	; 100
     588:	de 01       	movw	r26, r28
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			if (FILLINTERVAL == 1) {			// eeprom.h
     594:	8a e0       	ldi	r24, 0x0A	; 10
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	99 f4       	brne	.+38     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
				sprintf(line2, "%d minute", FILLINTERVAL);
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	88 e6       	ldi	r24, 0x68	; 104
     5a6:	94 e6       	ldi	r25, 0x64	; 100
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	ce 01       	movw	r24, r28
     5ae:	46 96       	adiw	r24, 0x16	; 22
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	12 c0       	rjmp	.+36     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     5c6:	1f 92       	push	r1
     5c8:	8f 93       	push	r24
     5ca:	82 e7       	ldi	r24, 0x72	; 114
     5cc:	94 e6       	ldi	r25, 0x64	; 100
     5ce:	9f 93       	push	r25
     5d0:	8f 93       	push	r24
     5d2:	ce 01       	movw	r24, r28
     5d4:	46 96       	adiw	r24, 0x16	; 22
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     5f0:	cb c0       	rjmp	.+406    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     5f2:	8e e0       	ldi	r24, 0x0E	; 14
     5f4:	eb e8       	ldi	r30, 0x8B	; 139
     5f6:	f4 e6       	ldi	r31, 0x64	; 100
     5f8:	de 01       	movw	r26, r28
     5fa:	11 96       	adiw	r26, 0x01	; 1
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
			if (MAXOPENTIME < 2) {				// eeprom.h
     604:	8b e0       	ldi	r24, 0x0B	; 11
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	98 f4       	brcc	.+38     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
				sprintf(line2, "%d minute", MAXOPENTIME);
     610:	1f 92       	push	r1
     612:	8f 93       	push	r24
     614:	88 e6       	ldi	r24, 0x68	; 104
     616:	94 e6       	ldi	r25, 0x64	; 100
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	ce 01       	movw	r24, r28
     61e:	46 96       	adiw	r24, 0x16	; 22
     620:	9f 93       	push	r25
     622:	8f 93       	push	r24
     624:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	12 c0       	rjmp	.+36     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     636:	1f 92       	push	r1
     638:	8f 93       	push	r24
     63a:	82 e7       	ldi	r24, 0x72	; 114
     63c:	94 e6       	ldi	r25, 0x64	; 100
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	ce 01       	movw	r24, r28
     644:	46 96       	adiw	r24, 0x16	; 22
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     660:	93 c0       	rjmp	.+294    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     662:	8d e0       	ldi	r24, 0x0D	; 13
     664:	e9 e9       	ldi	r30, 0x99	; 153
     666:	f4 e6       	ldi	r31, 0x64	; 100
     668:	de 01       	movw	r26, r28
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
			sprintf(line2, "%d kPa", status.pressure);
     674:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <status+0x1a>
     678:	1f 92       	push	r1
     67a:	8f 93       	push	r24
     67c:	86 ea       	ldi	r24, 0xA6	; 166
     67e:	94 e6       	ldi	r25, 0x64	; 100
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	ce 01       	movw	r24, r28
     686:	46 96       	adiw	r24, 0x16	; 22
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
			screen_value = SCRPRESSURE;
     690:	85 e0       	ldi	r24, 0x05	; 5
     692:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	72 c0       	rjmp	.+228    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     6a4:	8c e0       	ldi	r24, 0x0C	; 12
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     6ac:	88 23       	and	r24, r24
     6ae:	99 f0       	breq	.+38     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
				strcpy(line1, "BLUE is ENABLED");
     6b0:	80 e1       	ldi	r24, 0x10	; 16
     6b2:	ed ea       	ldi	r30, 0xAD	; 173
     6b4:	f4 e6       	ldi	r31, 0x64	; 100
     6b6:	de 01       	movw	r26, r28
     6b8:	11 96       	adiw	r26, 0x01	; 1
     6ba:	01 90       	ld	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	8a 95       	dec	r24
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
				strcpy(line2, "Push to disable");
     6c2:	80 e1       	ldi	r24, 0x10	; 16
     6c4:	ed eb       	ldi	r30, 0xBD	; 189
     6c6:	f4 e6       	ldi	r31, 0x64	; 100
     6c8:	de 01       	movw	r26, r28
     6ca:	56 96       	adiw	r26, 0x16	; 22
     6cc:	01 90       	ld	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	8a 95       	dec	r24
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6d4:	12 c0       	rjmp	.+36     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
			} else {
				strcpy(line1, "Blue is DISABLED");
     6d6:	81 e1       	ldi	r24, 0x11	; 17
     6d8:	ed ec       	ldi	r30, 0xCD	; 205
     6da:	f4 e6       	ldi	r31, 0x64	; 100
     6dc:	de 01       	movw	r26, r28
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	8a 95       	dec	r24
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
				strcpy(line2, "Push to enable");
     6e8:	8f e0       	ldi	r24, 0x0F	; 15
     6ea:	ee ed       	ldi	r30, 0xDE	; 222
     6ec:	f4 e6       	ldi	r31, 0x64	; 100
     6ee:	de 01       	movw	r26, r28
     6f0:	56 96       	adiw	r26, 0x16	; 22
     6f2:	01 90       	ld	r0, Z+
     6f4:	0d 92       	st	X+, r0
     6f6:	8a 95       	dec	r24
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     6fa:	86 e0       	ldi	r24, 0x06	; 6
     6fc:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     700:	43 c0       	rjmp	.+134    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     702:	8d e0       	ldi	r24, 0x0D	; 13
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     70a:	88 23       	and	r24, r24
     70c:	99 f0       	breq	.+38     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
				strcpy(line1, "RED is ENABLED");
     70e:	8f e0       	ldi	r24, 0x0F	; 15
     710:	ed ee       	ldi	r30, 0xED	; 237
     712:	f4 e6       	ldi	r31, 0x64	; 100
     714:	de 01       	movw	r26, r28
     716:	11 96       	adiw	r26, 0x01	; 1
     718:	01 90       	ld	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	8a 95       	dec	r24
     71e:	e1 f7       	brne	.-8      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
				strcpy(line2, "Push to disable");
     720:	80 e1       	ldi	r24, 0x10	; 16
     722:	ed eb       	ldi	r30, 0xBD	; 189
     724:	f4 e6       	ldi	r31, 0x64	; 100
     726:	de 01       	movw	r26, r28
     728:	56 96       	adiw	r26, 0x16	; 22
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     732:	12 c0       	rjmp	.+36     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
			} else {
				strcpy(line1, "RED is DISABLED");
     734:	80 e1       	ldi	r24, 0x10	; 16
     736:	ec ef       	ldi	r30, 0xFC	; 252
     738:	f4 e6       	ldi	r31, 0x64	; 100
     73a:	de 01       	movw	r26, r28
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	01 90       	ld	r0, Z+
     740:	0d 92       	st	X+, r0
     742:	8a 95       	dec	r24
     744:	e1 f7       	brne	.-8      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
				strcpy(line2, "Push to enable");
     746:	8f e0       	ldi	r24, 0x0F	; 15
     748:	ee ed       	ldi	r30, 0xDE	; 222
     74a:	f4 e6       	ldi	r31, 0x64	; 100
     74c:	de 01       	movw	r26, r28
     74e:	56 96       	adiw	r26, 0x16	; 22
     750:	01 90       	ld	r0, Z+
     752:	0d 92       	st	X+, r0
     754:	8a 95       	dec	r24
     756:	e1 f7       	brne	.-8      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     75e:	14 c0       	rjmp	.+40     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

		default:
			strcpy(line1, "default");
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	ec e0       	ldi	r30, 0x0C	; 12
     764:	f5 e6       	ldi	r31, 0x65	; 101
     766:	de 01       	movw	r26, r28
     768:	11 96       	adiw	r26, 0x01	; 1
     76a:	01 90       	ld	r0, Z+
     76c:	0d 92       	st	X+, r0
     76e:	8a 95       	dec	r24
     770:	e1 f7       	brne	.-8      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
			strcpy(line2, "overrun");
     772:	88 e0       	ldi	r24, 0x08	; 8
     774:	e4 e1       	ldi	r30, 0x14	; 20
     776:	f5 e6       	ldi	r31, 0x65	; 101
     778:	de 01       	movw	r26, r28
     77a:	56 96       	adiw	r26, 0x16	; 22
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	8a 95       	dec	r24
     782:	e1 f7       	brne	.-8      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
			screen_value = SCRVERSION;			// encoder.h
     784:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	be 01       	movw	r22, r28
     78c:	6f 5f       	subi	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	writestr_OLED(0, line2, 2);
     796:	42 e0       	ldi	r20, 0x02	; 2
     798:	be 01       	movw	r22, r28
     79a:	6a 5e       	subi	r22, 0xEA	; 234
     79c:	7f 4f       	sbci	r23, 0xFF	; 255
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
}
     7a4:	aa 96       	adiw	r28, 0x2a	; 42
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     7b0:	8c e0       	ldi	r24, 0x0C	; 12
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	81 11       	cpse	r24, r1
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	8c e0       	ldi	r24, 0x0C	; 12
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	encoder_sensed = FALSE;
     7c6:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     7d0:	08 95       	ret

000007d2 <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     7d2:	8d e0       	ldi	r24, 0x0D	; 13
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	81 11       	cpse	r24, r1
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	8d e0       	ldi	r24, 0x0D	; 13
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	encoder_sensed = FALSE;
     7e8:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     7ec:	87 e0       	ldi	r24, 0x07	; 7
     7ee:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     7f2:	08 95       	ret

000007f4 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	65 97       	sbiw	r28, 0x15	; 21
     806:	cd bf       	out	0x3d, r28	; 61
     808:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;				// eeprom.h
     80a:	8a e0       	ldi	r24, 0x0A	; 10
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     812:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     816:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	a9 f4       	brne	.+42     	; 0x848 <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     81e:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     822:	1f 92       	push	r1
     824:	8f 93       	push	r24
     826:	88 e6       	ldi	r24, 0x68	; 104
     828:	94 e6       	ldi	r25, 0x64	; 100
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	ce 01       	movw	r24, r28
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	14 c0       	rjmp	.+40     	; 0x870 <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     848:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     84c:	1f 92       	push	r1
     84e:	8f 93       	push	r24
     850:	82 e7       	ldi	r24, 0x72	; 114
     852:	94 e6       	ldi	r25, 0x64	; 100
     854:	9f 93       	push	r25
     856:	8f 93       	push	r24
     858:	ce 01       	movw	r24, r28
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	6c e1       	ldi	r22, 0x1C	; 28
     874:	75 e6       	ldi	r23, 0x65	; 101
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     87c:	42 e0       	ldi	r20, 0x02	; 2
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     88a:	0f 2e       	mov	r0, r31
     88c:	fe ef       	ldi	r31, 0xFE	; 254
     88e:	ef 2e       	mov	r14, r31
     890:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     892:	68 94       	set
     894:	ff 24       	eor	r15, r15
     896:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     898:	02 e7       	ldi	r16, 0x72	; 114
     89a:	14 e6       	ldi	r17, 0x64	; 100
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     89c:	32 c0       	rjmp	.+100    	; 0x902 <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     89e:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     8a2:	87 30       	cpi	r24, 0x07	; 7
     8a4:	71 f5       	brne	.+92     	; 0x902 <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     8a6:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	18 f4       	brcc	.+6      	; 0x8b4 <change_FILLINT+0xc0>
				encoder_value = 2;
     8ae:	f0 92 24 28 	sts	0x2824, r15	; 0x802824 <encoder_value>
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     8b4:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8b8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ba:	11 f4       	brne	.+4      	; 0x8c0 <change_FILLINT+0xcc>
				encoder_value = 254;
     8bc:	e0 92 24 28 	sts	0x2824, r14	; 0x802824 <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8c0:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8c4:	1f 92       	push	r1
     8c6:	8f 93       	push	r24
     8c8:	1f 93       	push	r17
     8ca:	0f 93       	push	r16
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	8c 0f       	add	r24, r28
     8d2:	9d 1f       	adc	r25, r29
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	6d e2       	ldi	r22, 0x2D	; 45
     8e0:	75 e6       	ldi	r23, 0x65	; 101
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     8e8:	4f 2d       	mov	r20, r15
     8ea:	be 01       	movw	r22, r28
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     902:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     906:	85 30       	cpi	r24, 0x05	; 5
     908:	51 f6       	brne	.-108    	; 0x89e <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     90a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     90e:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     91a:	8b e0       	ldi	r24, 0x0B	; 11
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     922:	18 2f       	mov	r17, r24
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     92c:	18 17       	cp	r17, r24
     92e:	30 f0       	brcs	.+12     	; 0x93c <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     930:	6f ef       	ldi	r22, 0xFF	; 255
     932:	68 0f       	add	r22, r24
     934:	8b e0       	ldi	r24, 0x0B	; 11
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	}
	display(SCRFILLINT);
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	0e 94 85 01 	call	0x30a	; 0x30a <display>
}
     942:	65 96       	adiw	r28, 0x15	; 21
     944:	cd bf       	out	0x3d, r28	; 61
     946:	de bf       	out	0x3e, r29	; 62
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	08 95       	ret

00000956 <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	65 97       	sbiw	r28, 0x15	; 21
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;			// eeprom.h
     970:	8b e0       	ldi	r24, 0x0B	; 11
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     978:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     97c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	a9 f4       	brne	.+42     	; 0x9ae <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     984:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     988:	1f 92       	push	r1
     98a:	8f 93       	push	r24
     98c:	88 e6       	ldi	r24, 0x68	; 104
     98e:	94 e6       	ldi	r25, 0x64	; 100
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     9ae:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     9b2:	1f 92       	push	r1
     9b4:	8f 93       	push	r24
     9b6:	82 e7       	ldi	r24, 0x72	; 114
     9b8:	94 e6       	ldi	r25, 0x64	; 100
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	ce 01       	movw	r24, r28
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	6d e3       	ldi	r22, 0x3D	; 61
     9da:	75 e6       	ldi	r23, 0x65	; 101
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     9e2:	42 e0       	ldi	r20, 0x02	; 2
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     9f0:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     9f2:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     9f4:	0f 2e       	mov	r0, r31
     9f6:	f2 e7       	ldi	r31, 0x72	; 114
     9f8:	ef 2e       	mov	r14, r31
     9fa:	f4 e6       	ldi	r31, 0x64	; 100
     9fc:	ff 2e       	mov	r15, r31
     9fe:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     a00:	0f 2e       	mov	r0, r31
     a02:	f8 e6       	ldi	r31, 0x68	; 104
     a04:	cf 2e       	mov	r12, r31
     a06:	f4 e6       	ldi	r31, 0x64	; 100
     a08:	df 2e       	mov	r13, r31
     a0a:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a0c:	57 c0       	rjmp	.+174    	; 0xabc <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     a0e:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     a12:	87 30       	cpi	r24, 0x07	; 7
     a14:	09 f0       	breq	.+2      	; 0xa18 <change_MAXOPENTIME+0xc2>
     a16:	52 c0       	rjmp	.+164    	; 0xabc <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     a18:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a1c:	81 11       	cpse	r24, r1
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     a20:	10 93 24 28 	sts	0x2824, r17	; 0x802824 <encoder_value>
     a24:	06 c0       	rjmp	.+12     	; 0xa32 <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     a26:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a2a:	8f 3f       	cpi	r24, 0xFF	; 255
     a2c:	11 f4       	brne	.+4      	; 0xa32 <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     a2e:	00 93 24 28 	sts	0x2824, r16	; 0x802824 <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     a3a:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <encoder_value>
     a3e:	98 17       	cp	r25, r24
     a40:	18 f0       	brcs	.+6      	; 0xa48 <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			if (encoder_value == 1) {
     a48:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	a9 f4       	brne	.+42     	; 0xa7a <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     a50:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a54:	1f 92       	push	r1
     a56:	8f 93       	push	r24
     a58:	df 92       	push	r13
     a5a:	cf 92       	push	r12
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8c 0f       	add	r24, r28
     a62:	9d 1f       	adc	r25, r29
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	14 c0       	rjmp	.+40     	; 0xaa2 <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a7a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a7e:	1f 92       	push	r1
     a80:	8f 93       	push	r24
     a82:	ff 92       	push	r15
     a84:	ef 92       	push	r14
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	8c 0f       	add	r24, r28
     a8c:	9d 1f       	adc	r25, r29
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     aa2:	41 2f       	mov	r20, r17
     aa4:	6d e3       	ldi	r22, 0x3D	; 61
     aa6:	75 e6       	ldi	r23, 0x65	; 101
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     aae:	42 e0       	ldi	r20, 0x02	; 2
     ab0:	be 01       	movw	r22, r28
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     abc:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     ac0:	85 30       	cpi	r24, 0x05	; 5
     ac2:	09 f0       	breq	.+2      	; 0xac6 <change_MAXOPENTIME+0x170>
     ac4:	a4 cf       	rjmp	.-184    	; 0xa0e <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     ac6:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     aca:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     ace:	8b e0       	ldi	r24, 0x0B	; 11
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     ad6:	84 e0       	ldi	r24, 0x04	; 4
     ad8:	0e 94 85 01 	call	0x30a	; 0x30a <display>

}
     adc:	65 96       	adiw	r28, 0x15	; 21
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	08 95       	ret

00000af4 <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     af4:	e0 e4       	ldi	r30, 0x40	; 64
     af6:	f4 e0       	ldi	r31, 0x04	; 4
     af8:	8b e0       	ldi	r24, 0x0B	; 11
     afa:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     afc:	98 e0       	ldi	r25, 0x08	; 8
     afe:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     b00:	81 8b       	std	Z+17, r24	; 0x11
     b02:	08 95       	ret

00000b04 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     b04:	8c e0       	ldi	r24, 0x0C	; 12
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     b0c:	88 23       	and	r24, r24
     b0e:	79 f0       	breq	.+30     	; 0xb2e <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     b10:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b14:	88 23       	and	r24, r24
     b16:	5c f0       	brlt	.+22     	; 0xb2e <start_FILL+0x2a>
     b18:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b1c:	80 ff       	sbrs	r24, 0
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     b20:	80 e8       	ldi	r24, 0x80	; 128
     b22:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     b26:	e7 e0       	ldi	r30, 0x07	; 7
     b28:	f8 e2       	ldi	r31, 0x28	; 40
     b2a:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     b2c:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     b2e:	8d e0       	ldi	r24, 0x0D	; 13
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     b36:	88 23       	and	r24, r24
     b38:	79 f0       	breq	.+30     	; 0xb58 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     b3a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b3e:	86 fd       	sbrc	r24, 6
     b40:	0b c0       	rjmp	.+22     	; 0xb58 <start_FILL+0x54>
     b42:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b46:	81 ff       	sbrs	r24, 1
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     b50:	e7 e0       	ldi	r30, 0x07	; 7
     b52:	f8 e2       	ldi	r31, 0x28	; 40
     b54:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     b56:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     b58:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	11 f4       	brne	.+4      	; 0xb64 <start_FILL+0x60>
		display(SCRVALVES);
     b60:	0e 94 85 01 	call	0x30a	; 0x30a <display>
	}
	status.next_fill = FILLINTERVAL;
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     b6c:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <status+0x15>
     b70:	08 95       	ret

00000b72 <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     b72:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <display_off>
     b76:	88 23       	and	r24, r24
     b78:	29 f0       	breq	.+10     	; 0xb84 <handle_encoder+0x12>
		display(screen_value);
     b7a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b7e:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     b82:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     b84:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b88:	87 30       	cpi	r24, 0x07	; 7
     b8a:	a9 f4       	brne	.+42     	; 0xbb6 <handle_encoder+0x44>
		encoder_sensed = FALSE;
     b8c:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     b90:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b94:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <encoder_change>
     b98:	89 0f       	add	r24, r25
     b9a:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		if (screen_value < 0) {
     b9e:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     ba2:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     ba6:	87 70       	andi	r24, 0x07	; 7
     ba8:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		}
		display(screen_value);
     bac:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     bb0:	0e 94 85 01 	call	0x30a	; 0x30a <display>
     bb4:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     bb6:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     bba:	85 30       	cpi	r24, 0x05	; 5
     bbc:	f9 f4       	brne	.+62     	; 0xbfc <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     bbe:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		switch (screen_value) {
     bc2:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     bc6:	84 30       	cpi	r24, 0x04	; 4
     bc8:	89 f0       	breq	.+34     	; 0xbec <handle_encoder+0x7a>
     bca:	28 f4       	brcc	.+10     	; 0xbd6 <handle_encoder+0x64>
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	41 f0       	breq	.+16     	; 0xbe0 <handle_encoder+0x6e>
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	49 f0       	breq	.+18     	; 0xbe6 <handle_encoder+0x74>
     bd4:	08 95       	ret
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <handle_encoder+0x80>
     bda:	87 30       	cpi	r24, 0x07	; 7
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <handle_encoder+0x86>
     bde:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     be0:	0e 94 82 05 	call	0xb04	; 0xb04 <start_FILL>
				break;
     be4:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     be6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <change_FILLINT>
				break;
     bea:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     bec:	0e 94 ab 04 	call	0x956	; 0x956 <change_MAXOPENTIME>
				break;
     bf0:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     bf2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <change_DISABLEBLU>
				break;
     bf6:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     bf8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <change_DISABLERED>
     bfc:	08 95       	ret

00000bfe <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	8f 93       	push	r24
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     c0e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c12:	81 ff       	sbrs	r24, 1
     c14:	07 c0       	rjmp	.+14     	; 0xc24 <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     c24:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c28:	83 ff       	sbrs	r24, 3
     c2a:	1b c0       	rjmp	.+54     	; 0xc62 <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     c2c:	e0 e4       	ldi	r30, 0x40	; 64
     c2e:	f4 e0       	ldi	r31, 0x04	; 4
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     c34:	80 85       	ldd	r24, Z+8	; 0x08
     c36:	82 ff       	sbrs	r24, 2
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <__vector_24+0x4e>
			encoder_value++;
     c3a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     c4a:	08 c0       	rjmp	.+16     	; 0xc5c <__vector_24+0x5e>
		} else {
			encoder_value--;
     c4c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c50:	81 50       	subi	r24, 0x01	; 1
     c52:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = -1;
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
		}
		encoder_sensed = ENCODERA;
     c5c:	87 e0       	ldi	r24, 0x07	; 7
     c5e:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
	}
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	8f 91       	pop	r24
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <init_STATUS>:
	clear_BUTTONS();

}

void init_STATUS()
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29

	status.next_buftank_fill = BIGFILLINTERVAL;
     c76:	c7 e0       	ldi	r28, 0x07	; 7
     c78:	d8 e2       	ldi	r29, 0x28	; 40
     c7a:	8c e0       	ldi	r24, 0x0C	; 12
     c7c:	8e 8b       	std	Y+22, r24	; 0x16
	status.next_fill = FILLINTERVAL;
     c7e:	8a e0       	ldi	r24, 0x0A	; 10
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     c86:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     c88:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     c8a:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     c8c:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     c8e:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     c90:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     c92:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     c94:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     c96:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     c98:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     c9a:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     c9c:	0e 94 31 08 	call	0x1062	; 0x1062 <read_PRESSURE>
     ca0:	8a 8f       	std	Y+26, r24	; 0x1a

}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <init_PORTS>:

void init_PORTS(void)
{

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca8:	e0 e6       	ldi	r30, 0x60	; 96
     caa:	f4 e0       	ldi	r31, 0x04	; 4
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb0:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb2:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb8:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cba:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cbc:	87 8b       	std	Z+23, r24	; 0x17
     cbe:	08 95       	ret

00000cc0 <init>:
void init_STATUS(void);

void init(void)
{

	hour_flag = FALSE;
     cc0:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
	minute_flag = FALSE;
     cc4:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>
	seconds = 0;
     cc8:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     ccc:	0e 94 54 06 	call	0xca8	; 0xca8 <init_PORTS>
	init_VALVES();
     cd0:	0e 94 85 0c 	call	0x190a	; 0x190a <init_VALVES>
	init_TCB2();
     cd4:	0e 94 37 0a 	call	0x146e	; 0x146e <init_TCB2>
	init_USART();
     cd8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <init_USART>
	init_BUTTONS();
     cdc:	0e 94 21 01 	call	0x242	; 0x242 <init_BUTTONS>
	init_ENCODER();
     ce0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <init_ENCODER>
	init_TWI();
     ce4:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <init_TWI>
	init_RTC(511);
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 b9 09 	call	0x1372	; 0x1372 <init_RTC>
	init_ADC();
     cf0:	0e 94 05 08 	call	0x100a	; 0x100a <init_ADC>
	init_STATUS();
     cf4:	0e 94 39 06 	call	0xc72	; 0xc72 <init_STATUS>
	init_OLED(0);
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <init_OLED>
	update_VERSION();
     cfe:	0e 94 67 01 	call	0x2ce	; 0x2ce <update_VERSION>
	display(SCRVERSION);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 85 01 	call	0x30a	; 0x30a <display>
	clear_BUTTONS();
     d08:	0e 94 1d 01 	call	0x23a	; 0x23a <clear_BUTTONS>
     d0c:	08 95       	ret

00000d0e <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     d0e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <init>
	sei();
     d12:	78 94       	sei
			handle_minute();	// See rtc.c
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
		}
		if (recv0_buf.done) {	// Serial communication received
     d14:	ca e2       	ldi	r28, 0x2A	; 42
     d16:	d9 e2       	ldi	r29, 0x29	; 41
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     d18:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     d1c:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     d1e:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     d22:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     d26:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     d28:	0e 94 b9 05 	call	0xb72	; 0xb72 <handle_encoder>
		}
		if (hour_flag) {		// Things to do once an hour
     d2c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <hour_flag>
     d30:	81 11       	cpse	r24, r1
			handle_hour();		// See rtc.c
     d32:	0e 94 94 08 	call	0x1128	; 0x1128 <handle_hour>
		}
		if (minute_flag) {		// Things to do once a minute
     d36:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <minute_flag>
     d3a:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     d3c:	0e 94 97 08 	call	0x112e	; 0x112e <handle_minute>
		}
		if (tick) {				// Things to do once a second
     d40:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     d44:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     d46:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <handle_ticks>
		}
		if (recv0_buf.done) {	// Serial communication received
     d4a:	88 81       	ld	r24, Y
     d4c:	88 23       	and	r24, r24
     d4e:	21 f3       	breq	.-56     	; 0xd18 <main+0xa>
			handle_serial();	// See usart.c
     d50:	0e 94 1f 0b 	call	0x163e	; 0x163e <handle_serial>
     d54:	e1 cf       	rjmp	.-62     	; 0xd18 <main+0xa>

00000d56 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	d6 2f       	mov	r29, r22
     d5c:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <start_TWI>
	write_TWI(type);
     d64:	8d 2f       	mov	r24, r29
     d66:	0e 94 b8 0a 	call	0x1570	; 0x1570 <write_TWI>
	write_TWI(byteToSend);
     d6a:	8c 2f       	mov	r24, r28
     d6c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <write_TWI>
	stop_TWI();
     d70:	0e 94 b4 0a 	call	0x1568	; 0x1568 <stop_TWI>

}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d7a:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d7c:	e0 e0       	ldi	r30, 0x00	; 0
     d7e:	f4 e0       	ldi	r31, 0x04	; 4
     d80:	90 e8       	ldi	r25, 0x80	; 128
     d82:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d84:	91 83       	std	Z+1, r25	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d86:	a6 e4       	ldi	r26, 0x46	; 70
     d88:	b0 e1       	ldi	r27, 0x10	; 16
     d8a:	11 97       	sbiw	r26, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <init_OLED+0x10>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     d90:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d92:	88 23       	and	r24, r24
     d94:	11 f0       	breq	.+4      	; 0xd9a <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d96:	cd e3       	ldi	r28, 0x3D	; 61
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d9a:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d9c:	4a e2       	ldi	r20, 0x2A	; 42
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	8c 2f       	mov	r24, r28
     da2:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     da6:	41 e7       	ldi	r20, 0x71	; 113
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	8c 2f       	mov	r24, r28
     dac:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     db0:	4c e5       	ldi	r20, 0x5C	; 92
     db2:	60 e4       	ldi	r22, 0x40	; 64
     db4:	8c 2f       	mov	r24, r28
     db6:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     dba:	48 e2       	ldi	r20, 0x28	; 40
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	8c 2f       	mov	r24, r28
     dc0:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     dc4:	48 e0       	ldi	r20, 0x08	; 8
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	8c 2f       	mov	r24, r28
     dca:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     dce:	4a e2       	ldi	r20, 0x2A	; 42
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	8c 2f       	mov	r24, r28
     dd4:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dd8:	49 e7       	ldi	r20, 0x79	; 121
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	8c 2f       	mov	r24, r28
     dde:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     de2:	45 ed       	ldi	r20, 0xD5	; 213
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	8c 2f       	mov	r24, r28
     de8:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     dec:	40 e7       	ldi	r20, 0x70	; 112
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	8c 2f       	mov	r24, r28
     df2:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     df6:	48 e7       	ldi	r20, 0x78	; 120
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	8c 2f       	mov	r24, r28
     dfc:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     e00:	48 e0       	ldi	r20, 0x08	; 8
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	8c 2f       	mov	r24, r28
     e06:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     e0a:	46 e0       	ldi	r20, 0x06	; 6
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	8c 2f       	mov	r24, r28
     e10:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     e14:	42 e7       	ldi	r20, 0x72	; 114
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	8c 2f       	mov	r24, r28
     e1a:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	60 e4       	ldi	r22, 0x40	; 64
     e22:	8c 2f       	mov	r24, r28
     e24:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e28:	4a e2       	ldi	r20, 0x2A	; 42
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	8c 2f       	mov	r24, r28
     e2e:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e32:	49 e7       	ldi	r20, 0x79	; 121
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	8c 2f       	mov	r24, r28
     e38:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     e3c:	4a ed       	ldi	r20, 0xDA	; 218
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	8c 2f       	mov	r24, r28
     e42:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	8c 2f       	mov	r24, r28
     e4c:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     e50:	4c ed       	ldi	r20, 0xDC	; 220
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	8c 2f       	mov	r24, r28
     e56:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     e64:	41 e8       	ldi	r20, 0x81	; 129
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	8c 2f       	mov	r24, r28
     e6a:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     e6e:	4f e7       	ldi	r20, 0x7F	; 127
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	8c 2f       	mov	r24, r28
     e74:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e78:	49 ed       	ldi	r20, 0xD9	; 217
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	8c 2f       	mov	r24, r28
     e7e:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e82:	41 ef       	ldi	r20, 0xF1	; 241
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	8c 2f       	mov	r24, r28
     e88:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e8c:	4b ed       	ldi	r20, 0xDB	; 219
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	8c 2f       	mov	r24, r28
     e92:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e96:	40 e4       	ldi	r20, 0x40	; 64
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	8c 2f       	mov	r24, r28
     e9c:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     ea0:	48 e7       	ldi	r20, 0x78	; 120
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	8c 2f       	mov	r24, r28
     ea6:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     eaa:	48 e2       	ldi	r20, 0x28	; 40
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	8c 2f       	mov	r24, r28
     eb0:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	8c 2f       	mov	r24, r28
     ec4:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     ec8:	4c e0       	ldi	r20, 0x0C	; 12
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	8c 2f       	mov	r24, r28
     ece:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
     ed2:	ba e6       	ldi	r27, 0x6A	; 106
     ed4:	24 e0       	ldi	r18, 0x04	; 4
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	b1 50       	subi	r27, 0x01	; 1
     eda:	20 40       	sbci	r18, 0x00	; 0
     edc:	80 40       	sbci	r24, 0x00	; 0
     ede:	e1 f7       	brne	.-8      	; 0xed8 <init_OLED+0x15e>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     ee2:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     ee6:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>

}
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	e2 97       	sbiw	r28, 0x32	; 50
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     f08:	91 e1       	ldi	r25, 0x11	; 17
     f0a:	ee e4       	ldi	r30, 0x4E	; 78
     f0c:	f5 e6       	ldi	r31, 0x65	; 101
     f0e:	de 01       	movw	r26, r28
     f10:	92 96       	adiw	r26, 0x22	; 34
     f12:	01 90       	ld	r0, Z+
     f14:	0d 92       	st	X+, r0
     f16:	9a 95       	dec	r25
     f18:	e1 f7       	brne	.-8      	; 0xf12 <writestr_OLED+0x24>

	if (displaynumber == 0) {
     f1a:	88 23       	and	r24, r24
     f1c:	29 f0       	breq	.+10     	; 0xf28 <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     f1e:	0f 2e       	mov	r0, r31
     f20:	fd e3       	ldi	r31, 0x3D	; 61
     f22:	ff 2e       	mov	r15, r31
     f24:	f0 2d       	mov	r31, r0
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     f28:	0f 2e       	mov	r0, r31
     f2a:	fc e3       	ldi	r31, 0x3C	; 60
     f2c:	ff 2e       	mov	r15, r31
     f2e:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     f30:	8e 01       	movw	r16, r28
     f32:	0f 5f       	subi	r16, 0xFF	; 255
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <strcpy>
	if (strlen(strbuf) > 16) {
     f3c:	f8 01       	movw	r30, r16
     f3e:	01 90       	ld	r0, Z+
     f40:	00 20       	and	r0, r0
     f42:	e9 f7       	brne	.-6      	; 0xf3e <writestr_OLED+0x50>
     f44:	31 97       	sbiw	r30, 0x01	; 1
     f46:	e0 1b       	sub	r30, r16
     f48:	f1 0b       	sbc	r31, r17
     f4a:	71 97       	sbiw	r30, 0x11	; 17
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <writestr_OLED+0x62>
		strbuf[16] = '\0';
     f4e:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     f50:	be 01       	movw	r22, r28
     f52:	6e 5d       	subi	r22, 0xDE	; 222
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>

	if (lineno == 1) {
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	d8 12       	cpse	r13, r24
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	8f 2d       	mov	r24, r15
     f6a:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
     f6e:	19 c0       	rjmp	.+50     	; 0xfa2 <writestr_OLED+0xb4>
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f70:	40 ec       	ldi	r20, 0xC0	; 192
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	8f 2d       	mov	r24, r15
     f76:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
     f7a:	13 c0       	rjmp	.+38     	; 0xfa2 <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f7c:	f8 01       	movw	r30, r16
     f7e:	41 91       	ld	r20, Z+
     f80:	8f 01       	movw	r16, r30
     f82:	60 e4       	ldi	r22, 0x40	; 64
     f84:	8f 2d       	mov	r24, r15
     f86:	0e 94 ab 06 	call	0xd56	; 0xd56 <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f8a:	0c 15       	cp	r16, r12
     f8c:	1d 05       	cpc	r17, r13
     f8e:	b1 f7       	brne	.-20     	; 0xf7c <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
     f98:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
	display_off = FALSE;
     f9c:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <display_off>

}
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <writestr_OLED+0xc4>
     fa2:	8e 01       	movw	r16, r28
     fa4:	0f 5f       	subi	r16, 0xFF	; 255
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	6e 01       	movw	r12, r28
     faa:	f1 e1       	ldi	r31, 0x11	; 17
     fac:	cf 0e       	add	r12, r31
     fae:	d1 1c       	adc	r13, r1
     fb0:	e5 cf       	rjmp	.-54     	; 0xf7c <writestr_OLED+0x8e>
     fb2:	e2 96       	adiw	r28, 0x32	; 50
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	08 95       	ret

00000fc8 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	1f 92       	push	r1
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     fd6:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	be 01       	movw	r22, r28
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     fe4:	42 e0       	ldi	r20, 0x02	; 2
     fe6:	be 01       	movw	r22, r28
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	81 2f       	mov	r24, r17
     fee:	0e 94 77 07 	call	0xeee	; 0xeee <writestr_OLED>
	timerOLED = 0;
     ff2:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     ff6:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
	display_off = TRUE;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <display_off>

}
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	08 95       	ret

0000100a <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
    1010:	e0 e0       	ldi	r30, 0x00	; 0
    1012:	f6 e0       	ldi	r31, 0x06	; 6
    1014:	80 81       	ld	r24, Z
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    101a:	a0 ea       	ldi	r26, 0xA0	; 160
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	8c 91       	ld	r24, X
    1020:	80 63       	ori	r24, 0x30	; 48
    1022:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    1024:	a2 e0       	ldi	r26, 0x02	; 2
    1026:	b6 e0       	ldi	r27, 0x06	; 6
    1028:	8c 91       	ld	r24, X
    102a:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    102c:	8c 91       	ld	r24, X
    102e:	80 64       	ori	r24, 0x40	; 64
    1030:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    1032:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    1036:	80 81       	ld	r24, Z
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    103c:	e8 e0       	ldi	r30, 0x08	; 8
    103e:	f6 e0       	ldi	r31, 0x06	; 6
    1040:	80 81       	ld	r24, Z
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    1046:	80 81       	ld	r24, Z
    1048:	80 ff       	sbrs	r24, 0
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <init_ADC+0x4a>
		asm("nop");
    104c:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    104e:	80 81       	ld	r24, Z
    1050:	80 fd       	sbrc	r24, 0
    1052:	fc cf       	rjmp	.-8      	; 0x104c <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    1054:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1058:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    105c:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <status+0x1a>
    1060:	08 95       	ret

00001062 <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	0f 2e       	mov	r0, r31
    1076:	fa e0       	ldi	r31, 0x0A	; 10
    1078:	bf 2e       	mov	r11, r31
    107a:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    107c:	c1 2c       	mov	r12, r1
    107e:	d1 2c       	mov	r13, r1
    1080:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1082:	c8 e0       	ldi	r28, 0x08	; 8
    1084:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1086:	00 e1       	ldi	r16, 0x10	; 16
    1088:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    108a:	88 81       	ld	r24, Y
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1090:	88 81       	ld	r24, Y
    1092:	80 ff       	sbrs	r24, 0
    1094:	04 c0       	rjmp	.+8      	; 0x109e <read_PRESSURE+0x3c>
			asm("nop");
    1096:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1098:	88 81       	ld	r24, Y
    109a:	80 fd       	sbrc	r24, 0
    109c:	fc cf       	rjmp	.-8      	; 0x1096 <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    109e:	f8 01       	movw	r30, r16
    10a0:	60 81       	ld	r22, Z
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__floatunsisf>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	c7 01       	movw	r24, r14
    10b2:	b6 01       	movw	r22, r12
    10b4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__addsf3>
    10b8:	6b 01       	movw	r12, r22
    10ba:	7c 01       	movw	r14, r24
    10bc:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    10be:	b1 10       	cpse	r11, r1
    10c0:	e4 cf       	rjmp	.-56     	; 0x108a <read_PRESSURE+0x28>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__divsf3>
    10ce:	2e e5       	ldi	r18, 0x5E	; 94
    10d0:	3a eb       	ldi	r19, 0xBA	; 186
    10d2:	49 e5       	ldi	r20, 0x59	; 89
    10d4:	5f e3       	ldi	r21, 0x3F	; 63
    10d6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
    10da:	2f e1       	ldi	r18, 0x1F	; 31
    10dc:	35 e8       	ldi	r19, 0x85	; 133
    10de:	45 ec       	ldi	r20, 0xC5	; 197
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__subsf3>
    10e6:	6b 01       	movw	r12, r22
    10e8:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__cmpsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	1c f4       	brge	.+6      	; 0x10fe <read_PRESSURE+0x9c>
		value = 0.0;
    10f8:	c1 2c       	mov	r12, r1
    10fa:	d1 2c       	mov	r13, r1
    10fc:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	c7 01       	movw	r24, r14
    1108:	b6 01       	movw	r22, r12
    110a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__addsf3>
    110e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fixunssfsi>
    1112:	86 2f       	mov	r24, r22

}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	08 95       	ret

00001128 <handle_hour>:
THINGS TO DO EVERY HOUR
----------------------------------------------------------------------*/
void handle_hour(void)
{

	hour_flag = FALSE;
    1128:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
    112c:	08 95       	ret

0000112e <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    112e:	cf 93       	push	r28

	if (++minutes >= 60) {
    1130:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <minutes>
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <minutes>
    113a:	8c 33       	cpi	r24, 0x3C	; 60
    113c:	28 f0       	brcs	.+10     	; 0x1148 <handle_minute+0x1a>
		hour_flag = TRUE;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <hour_flag>
		minutes = 0;
    1144:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <minutes>
	}

	minute_flag = FALSE;
    1148:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>

	if (BLUVALVEOPEN) {
    114c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1150:	88 23       	and	r24, r24
    1152:	8c f4       	brge	.+34     	; 0x1176 <handle_minute+0x48>
		status.opentime_BLU++;
    1154:	e7 e0       	ldi	r30, 0x07	; 7
    1156:	f8 e2       	ldi	r31, 0x28	; 40
    1158:	c3 85       	ldd	r28, Z+11	; 0x0b
    115a:	cf 5f       	subi	r28, 0xFF	; 255
    115c:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    115e:	8b e0       	ldi	r24, 0x0B	; 11
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    1166:	c8 17       	cp	r28, r24
    1168:	30 f0       	brcs	.+12     	; 0x1176 <handle_minute+0x48>
			CLOSEVALVE(BLUVALVE);
    116a:	80 e8       	ldi	r24, 0x80	; 128
    116c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    1176:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    117a:	86 ff       	sbrs	r24, 6
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <handle_minute+0x72>
		status.opentime_RED++;
    117e:	e7 e0       	ldi	r30, 0x07	; 7
    1180:	f8 e2       	ldi	r31, 0x28	; 40
    1182:	c4 85       	ldd	r28, Z+12	; 0x0c
    1184:	cf 5f       	subi	r28, 0xFF	; 255
    1186:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    1188:	8b e0       	ldi	r24, 0x0B	; 11
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    1190:	c8 17       	cp	r28, r24
    1192:	30 f0       	brcs	.+12     	; 0x11a0 <handle_minute+0x72>
			CLOSEVALVE(REDVALVE);
    1194:	80 e4       	ldi	r24, 0x40	; 64
    1196:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    11a0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11a4:	85 ff       	sbrs	r24, 5
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <handle_minute+0xa0>
		status.opentime_BUF++;
    11a8:	e7 e0       	ldi	r30, 0x07	; 7
    11aa:	f8 e2       	ldi	r31, 0x28	; 40
    11ac:	85 85       	ldd	r24, Z+13	; 0x0d
    11ae:	8f 5f       	subi	r24, 0xFF	; 255
    11b0:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    11b2:	84 31       	cpi	r24, 0x14	; 20
    11b4:	60 f0       	brcs	.+24     	; 0x11ce <handle_minute+0xa0>
			CLOSEVALVE(BUFVALVE);
    11b6:	e0 e4       	ldi	r30, 0x40	; 64
    11b8:	f4 e0       	ldi	r31, 0x04	; 4
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    11be:	80 e1       	ldi	r24, 0x10	; 16
    11c0:	86 83       	std	Z+6, r24	; 0x06
			status.maxopen_BUF = TRUE;
    11c2:	e7 e0       	ldi	r30, 0x07	; 7
    11c4:	f8 e2       	ldi	r31, 0x28	; 40
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	81 8b       	std	Z+17, r24	; 0x11
			status.next_buftank_fill = BIGFILLINTERVAL;
    11ca:	8c e0       	ldi	r24, 0x0C	; 12
    11cc:	86 8b       	std	Z+22, r24	; 0x16
		}
	}

	if (SUPVALVEOPEN) {
    11ce:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11d2:	84 ff       	sbrs	r24, 4
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <handle_minute+0xb2>
		status.opentime_SUP++;				// Increment supply dewar valve time
    11d6:	e7 e0       	ldi	r30, 0x07	; 7
    11d8:	f8 e2       	ldi	r31, 0x28	; 40
    11da:	86 85       	ldd	r24, Z+14	; 0x0e
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    11e0:	e7 e0       	ldi	r30, 0x07	; 7
    11e2:	f8 e2       	ldi	r31, 0x28	; 40
    11e4:	85 89       	ldd	r24, Z+21	; 0x15
    11e6:	81 50       	subi	r24, 0x01	; 1
    11e8:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    11ea:	81 11       	cpse	r24, r1
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <handle_minute+0xc4>
		start_FILL();						// See encoder.c
    11ee:	0e 94 82 05 	call	0xb04	; 0xb04 <start_FILL>
	}
}
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <handle_ticks>:
THINGS TO DO EVERY SECOND
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    11f6:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {		// seconds incremented in ISR
    11fa:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    11fe:	8c 33       	cpi	r24, 0x3C	; 60
    1200:	28 f0       	brcs	.+10     	; 0x120c <handle_ticks+0x16>
		minute_flag = TRUE;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <minute_flag>
		seconds = 0;
    1208:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

	status.pressure = read_PRESSURE();				// LN2 pressure
    120c:	0e 94 31 08 	call	0x1062	; 0x1062 <read_PRESSURE>
    1210:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <status+0x1a>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    1214:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1218:	88 23       	and	r24, r24
    121a:	f4 f4       	brge	.+60     	; 0x1258 <handle_ticks+0x62>
    121c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1220:	80 fd       	sbrc	r24, 0
    1222:	1a c0       	rjmp	.+52     	; 0x1258 <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    1224:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <status+0x13>
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	30 f0       	brcs	.+12     	; 0x1238 <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    122c:	80 e8       	ldi	r24, 0x80	; 128
    122e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    1232:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <status+0x13>
    1236:	03 c0       	rjmp	.+6      	; 0x123e <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    123e:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	49 f4       	brne	.+18     	; 0x1258 <handle_ticks+0x62>
    1246:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    124a:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    124e:	89 2b       	or	r24, r25
    1250:	19 f0       	breq	.+6      	; 0x1258 <handle_ticks+0x62>
			display(SCRVALVES);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	0e 94 85 01 	call	0x30a	; 0x30a <display>
		}
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    1258:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    125c:	86 ff       	sbrs	r24, 6
    125e:	1e c0       	rjmp	.+60     	; 0x129c <handle_ticks+0xa6>
    1260:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1264:	81 fd       	sbrc	r24, 1
    1266:	1a c0       	rjmp	.+52     	; 0x129c <handle_ticks+0xa6>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    1268:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x14>
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	30 f0       	brcs	.+12     	; 0x127c <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    1270:	80 e4       	ldi	r24, 0x40	; 64
    1272:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    1276:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x14>
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1282:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	49 f4       	brne	.+18     	; 0x129c <handle_ticks+0xa6>
    128a:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    128e:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1292:	89 2b       	or	r24, r25
    1294:	19 f0       	breq	.+6      	; 0x129c <handle_ticks+0xa6>
			display(SCRVALVES);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0e 94 85 01 	call	0x30a	; 0x30a <display>
		}
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    129c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    12a0:	85 ff       	sbrs	r24, 5
    12a2:	2a c0       	rjmp	.+84     	; 0x12f8 <handle_ticks+0x102>
    12a4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12a8:	82 fd       	sbrc	r24, 2
    12aa:	26 c0       	rjmp	.+76     	; 0x12f8 <handle_ticks+0x102>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    12ac:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x12>
    12b0:	85 30       	cpi	r24, 0x05	; 5
    12b2:	90 f0       	brcs	.+36     	; 0x12d8 <handle_ticks+0xe2>
			CLOSEVALVE(BUFVALVE);
    12b4:	e0 e4       	ldi	r30, 0x40	; 64
    12b6:	f4 e0       	ldi	r31, 0x04	; 4
    12b8:	80 e2       	ldi	r24, 0x20	; 32
    12ba:	86 83       	std	Z+6, r24	; 0x06
			status.overfill_BUF = 0;
    12bc:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <status+0x12>
    12c0:	24 e5       	ldi	r18, 0x54	; 84
    12c2:	88 e5       	ldi	r24, 0x58	; 88
    12c4:	94 e1       	ldi	r25, 0x14	; 20
    12c6:	21 50       	subi	r18, 0x01	; 1
    12c8:	80 40       	sbci	r24, 0x00	; 0
    12ca:	90 40       	sbci	r25, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <handle_ticks+0xd0>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <handle_ticks+0xda>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <handle_ticks+0xdc>
			_delay_ms(2000);
			CLOSEVALVE(SUPVALVE);
    12d2:	80 e1       	ldi	r24, 0x10	; 16
    12d4:	86 83       	std	Z+6, r24	; 0x06
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <handle_ticks+0xe8>
		} else {
			status.overfill_BUF++;
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    12de:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	49 f4       	brne	.+18     	; 0x12f8 <handle_ticks+0x102>
    12e6:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12ea:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12ee:	89 2b       	or	r24, r25
    12f0:	d9 f1       	breq	.+118    	; 0x1368 <handle_ticks+0x172>
			display(SCRVALVES);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 85 01 	call	0x30a	; 0x30a <display>
		}
	}

	if (status.supply_button_pushed) {
    12f8:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
    12fc:	88 23       	and	r24, r24
    12fe:	e9 f0       	breq	.+58     	; 0x133a <handle_ticks+0x144>
		if (~PORTB.IN & PIN1_bm) {			// Button still pushed
    1300:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
    1304:	81 fd       	sbrc	r24, 1
    1306:	15 c0       	rjmp	.+42     	; 0x1332 <handle_ticks+0x13c>
			if (status.supply_button_time++ >= 2) {
    1308:	e7 e0       	ldi	r30, 0x07	; 7
    130a:	f8 e2       	ldi	r31, 0x28	; 40
    130c:	80 8d       	ldd	r24, Z+24	; 0x18
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	98 0f       	add	r25, r24
    1312:	90 8f       	std	Z+24, r25	; 0x18
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	88 f0       	brcs	.+34     	; 0x133a <handle_ticks+0x144>
				OPENVALVE(SUPVALVE);
    1318:	80 e1       	ldi	r24, 0x10	; 16
    131a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
    131e:	16 86       	std	Z+14, r1	; 0x0e
				status.supply_button_pushed = FALSE;
    1320:	17 8a       	std	Z+23, r1	; 0x17
				status.supply_button_time = 0;
    1322:	10 8e       	std	Z+24, r1	; 0x18
				if ((screen_value == SCRVALVES)) {
    1324:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	39 f4       	brne	.+14     	; 0x133a <handle_ticks+0x144>
					display(SCRVALVES);
    132c:	0e 94 85 01 	call	0x30a	; 0x30a <display>
    1330:	04 c0       	rjmp	.+8      	; 0x133a <handle_ticks+0x144>
				}
			}
		} else {								// Button was released
			status.supply_button_pushed = FALSE;
    1332:	e7 e0       	ldi	r30, 0x07	; 7
    1334:	f8 e2       	ldi	r31, 0x28	; 40
    1336:	17 8a       	std	Z+23, r1	; 0x17
			status.supply_button_time = 0;
    1338:	10 8e       	std	Z+24, r1	; 0x18
		}
	}

	if (timerOLED) {
    133a:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    133e:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	a9 f0       	breq	.+42     	; 0x1370 <handle_ticks+0x17a>
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    1346:	8b 30       	cpi	r24, 0x0B	; 11
    1348:	91 05       	cpc	r25, r1
    134a:	40 f0       	brcs	.+16     	; 0x135c <handle_ticks+0x166>
			clear_OLED(0);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <clear_OLED>
			timerOLED = 0;
    1352:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    1356:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
    135a:	08 95       	ret
		} else {
			timerOLED++;
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    1362:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
		}
	}

}
    1366:	08 95       	ret
		if ((screen_value == SCRVALVES) && timerOLED) {
			display(SCRVALVES);
		}
	}

	if (status.supply_button_pushed) {
    1368:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
    136c:	81 11       	cpse	r24, r1
    136e:	c8 cf       	rjmp	.-112    	; 0x1300 <handle_ticks+0x10a>
    1370:	08 95       	ret

00001372 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    1372:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1374:	e0 e6       	ldi	r30, 0x60	; 96
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    137a:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    137c:	98 ed       	ldi	r25, 0xD8	; 216
    137e:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1380:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1382:	83 81       	ldd	r24, Z+3	; 0x03
    1384:	86 ff       	sbrs	r24, 6
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <init_RTC+0x1e>
		asm("nop");
    1388:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	96 fd       	sbrc	r25, 6
    138e:	fc cf       	rjmp	.-8      	; 0x1388 <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1390:	e0 e6       	ldi	r30, 0x60	; 96
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    1396:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    1398:	88 ed       	ldi	r24, 0xD8	; 216
    139a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    139c:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    139e:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    13a0:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    13a2:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13a4:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    13a6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    13aa:	88 23       	and	r24, r24
    13ac:	31 f0       	breq	.+12     	; 0x13ba <init_RTC+0x48>
    13ae:	e0 e4       	ldi	r30, 0x40	; 64
    13b0:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    13b2:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	91 11       	cpse	r25, r1
    13b8:	fc cf       	rjmp	.-8      	; 0x13b2 <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    13ba:	e0 e4       	ldi	r30, 0x40	; 64
    13bc:	f1 e0       	ldi	r31, 0x01	; 1
    13be:	22 87       	std	Z+10, r18	; 0x0a
    13c0:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    13c6:	85 81       	ldd	r24, Z+5	; 0x05
    13c8:	81 60       	ori	r24, 0x01	; 1
    13ca:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    13cc:	81 eb       	ldi	r24, 0xB1	; 177
    13ce:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	81 60       	ori	r24, 0x01	; 1
    13d4:	82 83       	std	Z+2, r24	; 0x02
    13d6:	08 95       	ret

000013d8 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    13ec:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    13f6:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    1408:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <ticks_TCB0>
    140c:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    1410:	25 e0       	ldi	r18, 0x05	; 5
    1412:	3d e0       	ldi	r19, 0x0D	; 13
    1414:	ac 01       	movw	r20, r24
    1416:	42 9f       	mul	r20, r18
    1418:	c0 01       	movw	r24, r0
    141a:	43 9f       	mul	r20, r19
    141c:	90 0d       	add	r25, r0
    141e:	52 9f       	mul	r21, r18
    1420:	90 0d       	add	r25, r0
    1422:	11 24       	eor	r1, r1
    1424:	e0 e8       	ldi	r30, 0x80	; 128
    1426:	fa e0       	ldi	r31, 0x0A	; 10
    1428:	84 87       	std	Z+12, r24	; 0x0c
    142a:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    1430:	80 83       	st	Z, r24
    1432:	08 95       	ret

00001434 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    1434:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    1438:	08 95       	ret

0000143a <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    144e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1452:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <ticks_TCB0>
    145c:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <ticks_TCB0+0x1>

}
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <init_TCB2>:
By measurement, 0xFFFF gets 12.69 Hz
----------------------------------------------------------------------*/
void init_TCB2(void)
{

	PORTC_DIR |= PIN0_bm;					// PIN PC0 has haywire
    146e:	e0 e4       	ldi	r30, 0x40	; 64
    1470:	f4 e0       	ldi	r31, 0x04	; 4
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	80 83       	st	Z, r24
	PORTC_OUT |= PIN0_bm;					// to debouncer Osc-in
    1478:	e4 e4       	ldi	r30, 0x44	; 68
    147a:	f4 e0       	ldi	r31, 0x04	; 4
    147c:	80 81       	ld	r24, Z
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	80 83       	st	Z, r24
	TCB2.CCMP = F_CPU/(4 * TCB2FREQ) + 1;
    1482:	e0 ea       	ldi	r30, 0xA0	; 160
    1484:	fa e0       	ldi	r31, 0x0A	; 10
    1486:	8c e2       	ldi	r24, 0x2C	; 44
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	84 87       	std	Z+12, r24	; 0x0c
    148c:	95 87       	std	Z+13, r25	; 0x0d
	TCB2.CTRLA |= TCB_ENABLE_bm;			// Enable the timer
    148e:	80 81       	ld	r24, Z
    1490:	81 60       	ori	r24, 0x01	; 1
    1492:	80 83       	st	Z, r24
	TCB2.CTRLA |= TCB_CLKSEL_CLKDIV2_gc;	// 2X divider
    1494:	80 81       	ld	r24, Z
    1496:	82 60       	ori	r24, 0x02	; 2
    1498:	80 83       	st	Z, r24
	TCB2.INTCTRL |= TCB_CAPT_bm;			// Enable interrupts
    149a:	85 81       	ldd	r24, Z+5	; 0x05
    149c:	81 60       	ori	r24, 0x01	; 1
    149e:	85 83       	std	Z+5, r24	; 0x05
    14a0:	08 95       	ret

000014a2 <__vector_25>:

/*----------------------------------------------------------------------
Generate a square wave by toggling the state of PC0
----------------------------------------------------------------------*/
ISR(TCB2_INT_vect)
{
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	8f 93       	push	r24
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31

	TCB2.INTFLAGS = TCB_CAPT_bm;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
	PORTC.OUTTGL |= PIN0_bm;
    14b8:	e0 e4       	ldi	r30, 0x40	; 64
    14ba:	f4 e0       	ldi	r31, 0x04	; 4
    14bc:	87 81       	ldd	r24, Z+7	; 0x07
    14be:	81 60       	ori	r24, 0x01	; 1
    14c0:	87 83       	std	Z+7, r24	; 0x07

}
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	8f 91       	pop	r24
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    14d2:	e0 ea       	ldi	r30, 0xA0	; 160
    14d4:	f8 e0       	ldi	r31, 0x08	; 8
    14d6:	8b e0       	ldi	r24, 0x0B	; 11
    14d8:	86 83       	std	Z+6, r24	; 0x06
    14da:	83 81       	ldd	r24, Z+3	; 0x03
    14dc:	81 60       	ori	r24, 0x01	; 1
    14de:	83 83       	std	Z+3, r24	; 0x03
    14e0:	85 81       	ldd	r24, Z+5	; 0x05
    14e2:	81 60       	ori	r24, 0x01	; 1
    14e4:	85 83       	std	Z+5, r24	; 0x05
    14e6:	08 95       	ret

000014e8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    14e8:	61 30       	cpi	r22, 0x01	; 1
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <start_TWI+0xe>
		TWI0.MADDR = ((addr << 1) | 0x01);
    14ec:	88 0f       	add	r24, r24
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <start_TWI+0x14>
	} else {
		TWI0.MADDR = (addr << 1);
    14f6:	88 0f       	add	r24, r24
    14f8:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	start_TCB0(1);
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 04 0a 	call	0x1408	; 0x1408 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1504:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1508:	80 7c       	andi	r24, 0xC0	; 192
    150a:	b9 f4       	brne	.+46     	; 0x153a <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    150c:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1510:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1514:	0b 97       	sbiw	r24, 0x0b	; 11
    1516:	48 f4       	brcc	.+18     	; 0x152a <start_TWI+0x42>
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1518:	e0 ea       	ldi	r30, 0xA0	; 160
    151a:	f8 e0       	ldi	r31, 0x08	; 8
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    151e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1522:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1526:	0b 97       	sbiw	r24, 0x0b	; 11
    1528:	20 f0       	brcs	.+8      	; 0x1532 <start_TWI+0x4a>
			stop_TCB0();
    152a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <stop_TCB0>
			return(TWITIMEOUT);
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    1532:	00 00       	nop
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1534:	85 81       	ldd	r24, Z+5	; 0x05
    1536:	80 7c       	andi	r24, 0xC0	; 192
    1538:	91 f3       	breq	.-28     	; 0x151e <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    153a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    153e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1542:	82 fd       	sbrc	r24, 2
    1544:	0b c0       	rjmp	.+22     	; 0x155c <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    1546:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    154a:	83 fd       	sbrc	r24, 3
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    154e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1552:	89 2f       	mov	r24, r25
    1554:	80 71       	andi	r24, 0x10	; 16
    1556:	94 fd       	sbrc	r25, 4
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <start_TWI+0x7c>
    155a:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    155c:	83 e0       	ldi	r24, 0x03	; 3
    155e:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    1564:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    1566:	08 95       	ret

00001568 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    1568:	87 e0       	ldi	r24, 0x07	; 7
    156a:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    156e:	08 95       	ret

00001570 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1570:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1574:	96 fd       	sbrc	r25, 6
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <write_TWI+0x14>
    1578:	e0 ea       	ldi	r30, 0xA0	; 160
    157a:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    157c:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    157e:	95 81       	ldd	r25, Z+5	; 0x05
    1580:	96 ff       	sbrs	r25, 6
    1582:	fc cf       	rjmp	.-8      	; 0x157c <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    1584:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 04 0a 	call	0x1408	; 0x1408 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1590:	e0 ea       	ldi	r30, 0xA0	; 160
    1592:	f8 e0       	ldi	r31, 0x08	; 8
    1594:	0b c0       	rjmp	.+22     	; 0x15ac <write_TWI+0x3c>
		asm("nop");
    1596:	00 00       	nop
		if (ticks_TCB0 > 50) {
    1598:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    159c:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    15a0:	c3 97       	sbiw	r24, 0x33	; 51
    15a2:	20 f0       	brcs	.+8      	; 0x15ac <write_TWI+0x3c>
			stop_TCB0();
    15a4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <stop_TCB0>
			return(TWITIMEOUT);
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    15ac:	85 81       	ldd	r24, Z+5	; 0x05
    15ae:	86 ff       	sbrs	r24, 6
    15b0:	f2 cf       	rjmp	.-28     	; 0x1596 <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    15b2:	0e 94 1a 0a 	call	0x1434	; 0x1434 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    15b6:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    15ba:	89 2f       	mov	r24, r25
    15bc:	80 71       	andi	r24, 0x10	; 16
    15be:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    15c0:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    15c2:	08 95       	ret

000015c4 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    15c4:	e0 e0       	ldi	r30, 0x00	; 0
    15c6:	f4 e0       	ldi	r31, 0x04	; 4
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    15cc:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    15ce:	e0 e0       	ldi	r30, 0x00	; 0
    15d0:	f8 e0       	ldi	r31, 0x08	; 8
    15d2:	2d e6       	ldi	r18, 0x6D	; 109
    15d4:	35 e0       	ldi	r19, 0x05	; 5
    15d6:	20 87       	std	Z+8, r18	; 0x08
    15d8:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    15da:	95 81       	ldd	r25, Z+5	; 0x05
    15dc:	90 68       	ori	r25, 0x80	; 128
    15de:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    15e0:	96 81       	ldd	r25, Z+6	; 0x06
    15e2:	90 64       	ori	r25, 0x40	; 64
    15e4:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    15e6:	96 81       	ldd	r25, Z+6	; 0x06
    15e8:	90 68       	ori	r25, 0x80	; 128
    15ea:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    15ec:	10 92 2c 29 	sts	0x292C, r1	; 0x80292c <recv0_buf+0x101>
	send0_buf.length = 0;
    15f0:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <send0_buf+0x101>
	recv0_buf.nxfrd = 0;
    15f4:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <recv0_buf+0x100>
	send0_buf.nxfrd = 0;
    15f8:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	recv0_buf.done = FALSE;				// Ready to receive data
    15fc:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
	send0_buf.done = TRUE;				// No data to send
    1600:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    1604:	08 95       	ret

00001606 <send_USART>:
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
	uint8_t i;
	send0_buf.length = nbytes;
    1606:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <send0_buf+0x101>
	send0_buf.nxfrd = 0;
    160a:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	send0_buf.done = FALSE;
    160e:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <send0_buf+0xff>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    1612:	66 23       	and	r22, r22
    1614:	71 f0       	breq	.+28     	; 0x1632 <send_USART+0x2c>
    1616:	a8 2f       	mov	r26, r24
    1618:	b9 2f       	mov	r27, r25
    161a:	ed e2       	ldi	r30, 0x2D	; 45
    161c:	f9 e2       	ldi	r31, 0x29	; 41
    161e:	61 50       	subi	r22, 0x01	; 1
    1620:	26 2f       	mov	r18, r22
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	22 5d       	subi	r18, 0xD2	; 210
    1626:	36 4d       	sbci	r19, 0xD6	; 214
		send0_buf.data[i] = *data++;
    1628:	8d 91       	ld	r24, X+
    162a:	81 93       	st	Z+, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    162c:	e2 17       	cp	r30, r18
    162e:	f3 07       	cpc	r31, r19
    1630:	d9 f7       	brne	.-10     	; 0x1628 <send_USART+0x22>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    1632:	e0 e0       	ldi	r30, 0x00	; 0
    1634:	f8 e0       	ldi	r31, 0x08	; 8
    1636:	85 81       	ldd	r24, Z+5	; 0x05
    1638:	80 62       	ori	r24, 0x20	; 32
    163a:	85 83       	std	Z+5, r24	; 0x05
    163c:	08 95       	ret

0000163e <handle_serial>:

LN2,C,SUP,T,BUF,X,RED,C,BLU,111,NXT,222,MAX,333,INT,100,PRES,H,TBUF,H,TRED,H,TBLU

------------------------------------------------------------------------------*/
void handle_serial(void)
{
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	c3 5a       	subi	r28, 0xA3	; 163
    1658:	d1 09       	sbc	r29, r1
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	de bf       	out	0x3e, r29	; 62

	const char fmt0[] = "%c%c%c%c,%d,NXT,%d,MAX,%d,INT,%d,PRES,%c,TBUF,%c,TRED,%c,TBLU\r";
    165e:	8f e3       	ldi	r24, 0x3F	; 63
    1660:	ef e5       	ldi	r30, 0x5F	; 95
    1662:	f5 e6       	ldi	r31, 0x65	; 101
    1664:	de 01       	movw	r26, r28
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	01 90       	ld	r0, Z+
    166a:	0d 92       	st	X+, r0
    166c:	8a 95       	dec	r24
    166e:	e1 f7       	brne	.-8      	; 0x1668 <handle_serial+0x2a>
	char strbuf[100], supvalve, bufvalve, redvalve, bluvalve, bufther, redther, bluther;
	uint8_t nextfill, maxopen, fillint, pressure;

	recv0_buf.done = FALSE;
    1670:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
    1674:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1678:	84 fd       	sbrc	r24, 4
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <handle_serial+0x48>
		supvalve = 'O';
	} else {
		supvalve = 'C';
    167c:	0f 2e       	mov	r0, r31
    167e:	f3 e4       	ldi	r31, 0x43	; 67
    1680:	ff 2e       	mov	r15, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	04 c0       	rjmp	.+8      	; 0x168e <handle_serial+0x50>

	recv0_buf.done = FALSE;

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
		supvalve = 'O';
    1686:	0f 2e       	mov	r0, r31
    1688:	ff e4       	ldi	r31, 0x4F	; 79
    168a:	ff 2e       	mov	r15, r31
    168c:	f0 2d       	mov	r31, r0
	} else {
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
    168e:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
    1692:	81 11       	cpse	r24, r1
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <handle_serial+0x6a>
		bufvalve = 'T';
	} else if (BUFVALVEOPEN) {
    1696:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    169a:	85 fd       	sbrc	r24, 5
    169c:	0a c0       	rjmp	.+20     	; 0x16b2 <handle_serial+0x74>
		bufvalve = 'O';
	} else {
		bufvalve = 'C';
    169e:	0f 2e       	mov	r0, r31
    16a0:	f3 e4       	ldi	r31, 0x43	; 67
    16a2:	ef 2e       	mov	r14, r31
    16a4:	f0 2d       	mov	r31, r0
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <handle_serial+0x7c>
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
		bufvalve = 'T';
    16a8:	0f 2e       	mov	r0, r31
    16aa:	f4 e5       	ldi	r31, 0x54	; 84
    16ac:	ef 2e       	mov	r14, r31
    16ae:	f0 2d       	mov	r31, r0
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <handle_serial+0x7c>
	} else if (BUFVALVEOPEN) {
		bufvalve = 'O';
    16b2:	0f 2e       	mov	r0, r31
    16b4:	ff e4       	ldi	r31, 0x4F	; 79
    16b6:	ef 2e       	mov	r14, r31
    16b8:	f0 2d       	mov	r31, r0
	} else {
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
    16ba:	8d e0       	ldi	r24, 0x0D	; 13
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    16c2:	88 23       	and	r24, r24
    16c4:	69 f0       	breq	.+26     	; 0x16e0 <handle_serial+0xa2>
		redvalve = 'X';
	} else if (status.maxopen_RED) {
    16c6:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
    16ca:	81 11       	cpse	r24, r1
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <handle_serial+0xac>
		redvalve = 'T';
	} else if (REDVALVEOPEN) {
    16ce:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    16d2:	86 fd       	sbrc	r24, 6
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <handle_serial+0xb6>
		redvalve = 'O';
	} else {
		redvalve = 'C';
    16d6:	0f 2e       	mov	r0, r31
    16d8:	f3 e4       	ldi	r31, 0x43	; 67
    16da:	df 2e       	mov	r13, r31
    16dc:	f0 2d       	mov	r31, r0
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <handle_serial+0xbe>
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
		redvalve = 'X';
    16e0:	0f 2e       	mov	r0, r31
    16e2:	f8 e5       	ldi	r31, 0x58	; 88
    16e4:	df 2e       	mov	r13, r31
    16e6:	f0 2d       	mov	r31, r0
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <handle_serial+0xbe>
	} else if (status.maxopen_RED) {
		redvalve = 'T';
    16ea:	0f 2e       	mov	r0, r31
    16ec:	f4 e5       	ldi	r31, 0x54	; 84
    16ee:	df 2e       	mov	r13, r31
    16f0:	f0 2d       	mov	r31, r0
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <handle_serial+0xbe>
	} else if (REDVALVEOPEN) {
		redvalve = 'O';
    16f4:	0f 2e       	mov	r0, r31
    16f6:	ff e4       	ldi	r31, 0x4F	; 79
    16f8:	df 2e       	mov	r13, r31
    16fa:	f0 2d       	mov	r31, r0
	} else {
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
    16fc:	8c e0       	ldi	r24, 0x0C	; 12
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    1704:	88 23       	and	r24, r24
    1706:	69 f0       	breq	.+26     	; 0x1722 <handle_serial+0xe4>
		bluvalve = 'X';
	} else if (status.maxopen_BLU) {
    1708:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
    170c:	81 11       	cpse	r24, r1
    170e:	0e c0       	rjmp	.+28     	; 0x172c <handle_serial+0xee>
		bluvalve = 'T';
	} else if (BLUVALVEOPEN) {
    1710:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1714:	88 23       	and	r24, r24
    1716:	7c f0       	brlt	.+30     	; 0x1736 <handle_serial+0xf8>
		bluvalve = 'O';
	} else {
		bluvalve = 'C';
    1718:	0f 2e       	mov	r0, r31
    171a:	f3 e4       	ldi	r31, 0x43	; 67
    171c:	af 2e       	mov	r10, r31
    171e:	f0 2d       	mov	r31, r0
    1720:	0e c0       	rjmp	.+28     	; 0x173e <handle_serial+0x100>
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
		bluvalve = 'X';
    1722:	0f 2e       	mov	r0, r31
    1724:	f8 e5       	ldi	r31, 0x58	; 88
    1726:	af 2e       	mov	r10, r31
    1728:	f0 2d       	mov	r31, r0
    172a:	09 c0       	rjmp	.+18     	; 0x173e <handle_serial+0x100>
	} else if (status.maxopen_BLU) {
		bluvalve = 'T';
    172c:	0f 2e       	mov	r0, r31
    172e:	f4 e5       	ldi	r31, 0x54	; 84
    1730:	af 2e       	mov	r10, r31
    1732:	f0 2d       	mov	r31, r0
    1734:	04 c0       	rjmp	.+8      	; 0x173e <handle_serial+0x100>
	} else if (BLUVALVEOPEN) {
		bluvalve = 'O';
    1736:	0f 2e       	mov	r0, r31
    1738:	ff e4       	ldi	r31, 0x4F	; 79
    173a:	af 2e       	mov	r10, r31
    173c:	f0 2d       	mov	r31, r0
	} else {
		bluvalve = 'C';
	}

	// Fill interval
	fillint = FILLINTERVAL;
    173e:	8a e0       	ldi	r24, 0x0A	; 10
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    1746:	b8 2e       	mov	r11, r24

	// Next fill in
	nextfill = status.next_fill;
    1748:	07 e0       	ldi	r16, 0x07	; 7
    174a:	18 e2       	ldi	r17, 0x28	; 40
    174c:	f8 01       	movw	r30, r16
    174e:	c5 88       	ldd	r12, Z+21	; 0x15

	// Max open time
	maxopen = MAXOPENTIME;
    1750:	8b e0       	ldi	r24, 0x0B	; 11
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>

	// Pressure
	pressure = status.pressure;
    1758:	f8 01       	movw	r30, r16
    175a:	92 8d       	ldd	r25, Z+26	; 0x1a

	// BUF thermistor
	if (BUFTHERMWARM) {
    175c:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1760:	22 fd       	sbrc	r18, 2
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <handle_serial+0x12a>
		bufther = 'H';
	} else {
		bufther = 'C';
    1764:	23 e4       	ldi	r18, 0x43	; 67
    1766:	01 c0       	rjmp	.+2      	; 0x176a <handle_serial+0x12c>
	// Pressure
	pressure = status.pressure;

	// BUF thermistor
	if (BUFTHERMWARM) {
		bufther = 'H';
    1768:	28 e4       	ldi	r18, 0x48	; 72
	} else {
		bufther = 'C';
	}

	// Red thermistor
	if (REDTHERMWARM) {
    176a:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    176e:	31 fd       	sbrc	r19, 1
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <handle_serial+0x138>
		redther = 'H';
	} else {
		redther = 'C';
    1772:	33 e4       	ldi	r19, 0x43	; 67
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <handle_serial+0x13a>
		bufther = 'C';
	}

	// Red thermistor
	if (REDTHERMWARM) {
		redther = 'H';
    1776:	38 e4       	ldi	r19, 0x48	; 72
	} else {
		redther = 'C';
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
    1778:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    177c:	40 fd       	sbrc	r20, 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <handle_serial+0x146>
		bluther = 'H';
	} else {
		bluther = 'C';
    1780:	43 e4       	ldi	r20, 0x43	; 67
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <handle_serial+0x148>
		redther = 'C';
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
		bluther = 'H';
    1784:	48 e4       	ldi	r20, 0x48	; 72
	} else {
		bluther = 'C';
	}

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
    1786:	1f 92       	push	r1
    1788:	4f 93       	push	r20
    178a:	1f 92       	push	r1
    178c:	3f 93       	push	r19
    178e:	1f 92       	push	r1
    1790:	2f 93       	push	r18
    1792:	1f 92       	push	r1
    1794:	9f 93       	push	r25
    1796:	1f 92       	push	r1
    1798:	bf 92       	push	r11
    179a:	1f 92       	push	r1
    179c:	8f 93       	push	r24
    179e:	1f 92       	push	r1
    17a0:	cf 92       	push	r12
    17a2:	1f 92       	push	r1
    17a4:	af 92       	push	r10
    17a6:	1f 92       	push	r1
    17a8:	df 92       	push	r13
    17aa:	1f 92       	push	r1
    17ac:	ef 92       	push	r14
    17ae:	1f 92       	push	r1
    17b0:	ff 92       	push	r15
    17b2:	ce 01       	movw	r24, r28
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9f 93       	push	r25
    17b8:	8f 93       	push	r24
    17ba:	cf 96       	adiw	r24, 0x3f	; 63
    17bc:	9f 93       	push	r25
    17be:	8f 93       	push	r24
    17c0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
    17c4:	84 e6       	ldi	r24, 0x64	; 100
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 04 0a 	call	0x1408	; 0x1408 <start_TCB0>
	while (!send0_buf.done) {
    17cc:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <send0_buf+0xff>
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	81 11       	cpse	r24, r1
    17d6:	13 c0       	rjmp	.+38     	; 0x17fe <handle_serial+0x1c0>
		if (ticks_TCB0 > 10) {	// See timers.h
    17d8:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    17dc:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    17e0:	0b 97       	sbiw	r24, 0x0b	; 11
    17e2:	d0 f4       	brcc	.+52     	; 0x1818 <__DATA_REGION_LENGTH__+0x18>

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    17e4:	ec e2       	ldi	r30, 0x2C	; 44
    17e6:	fa e2       	ldi	r31, 0x2A	; 42
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <handle_serial+0x1b8>
		if (ticks_TCB0 > 10) {	// See timers.h
    17ea:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    17ee:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    17f2:	0b 97       	sbiw	r24, 0x0b	; 11
    17f4:	88 f4       	brcc	.+34     	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
			return;
		}
		asm("nop");
    17f6:	00 00       	nop

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    17f8:	80 81       	ld	r24, Z
    17fa:	88 23       	and	r24, r24
    17fc:	b1 f3       	breq	.-20     	; 0x17ea <handle_serial+0x1ac>
			return;
		}
		asm("nop");
	}

	send_USART((uint8_t*) strbuf, strlen(strbuf));
    17fe:	ce 01       	movw	r24, r28
    1800:	80 5c       	subi	r24, 0xC0	; 192
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	fc 01       	movw	r30, r24
    1806:	01 90       	ld	r0, Z+
    1808:	00 20       	and	r0, r0
    180a:	e9 f7       	brne	.-6      	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
    180c:	31 97       	sbiw	r30, 0x01	; 1
    180e:	bf 01       	movw	r22, r30
    1810:	68 1b       	sub	r22, r24
    1812:	79 0b       	sbc	r23, r25
    1814:	0e 94 03 0b 	call	0x1606	; 0x1606 <send_USART>

}
    1818:	cd 55       	subi	r28, 0x5D	; 93
    181a:	df 4f       	sbci	r29, 0xFF	; 255
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	08 95       	ret

00001836 <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    184c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    1850:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <recv0_buf+0x101>
    1854:	9f 3f       	cpi	r25, 0xFF	; 255
    1856:	b1 f0       	breq	.+44     	; 0x1884 <__vector_17+0x4e>
		if ((char) c == '\r') {
    1858:	8d 30       	cpi	r24, 0x0D	; 13
    185a:	51 f4       	brne	.+20     	; 0x1870 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    185c:	e0 91 2c 29 	lds	r30, 0x292C	; 0x80292c <recv0_buf+0x101>
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	e5 5d       	subi	r30, 0xD5	; 213
    1864:	f7 4d       	sbci	r31, 0xD7	; 215
    1866:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <recv0_buf+0xff>
    186e:	0a c0       	rjmp	.+20     	; 0x1884 <__vector_17+0x4e>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    1870:	ac e2       	ldi	r26, 0x2C	; 44
    1872:	b9 e2       	ldi	r27, 0x29	; 41
    1874:	ec 91       	ld	r30, X
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	9e 0f       	add	r25, r30
    187a:	9c 93       	st	X, r25
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	e5 5d       	subi	r30, 0xD5	; 213
    1880:	f7 4d       	sbci	r31, 0xD7	; 215
    1882:	80 83       	st	Z, r24
		}
	}
}
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	8f 93       	push	r24
    18a6:	9f 93       	push	r25
    18a8:	af 93       	push	r26
    18aa:	bf 93       	push	r27
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    18b4:	c0 e0       	ldi	r28, 0x00	; 0
    18b6:	d8 e0       	ldi	r29, 0x08	; 8
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	8f 7d       	andi	r24, 0xDF	; 223
    18bc:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    18be:	ad e2       	ldi	r26, 0x2D	; 45
    18c0:	ba e2       	ldi	r27, 0x2A	; 42
    18c2:	ec 91       	ld	r30, X
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8e 0f       	add	r24, r30
    18c8:	8c 93       	st	X, r24
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	e3 5d       	subi	r30, 0xD3	; 211
    18ce:	f6 4d       	sbci	r31, 0xD6	; 214
    18d0:	80 81       	ld	r24, Z
    18d2:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    18d4:	90 91 2e 2a 	lds	r25, 0x2A2E	; 0x802a2e <send0_buf+0x101>
    18d8:	8c 91       	ld	r24, X
    18da:	98 13       	cpse	r25, r24
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    18e6:	e0 e0       	ldi	r30, 0x00	; 0
    18e8:	f8 e0       	ldi	r31, 0x08	; 8
    18ea:	85 81       	ldd	r24, Z+5	; 0x05
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	85 83       	std	Z+5, r24	; 0x05
	}
}
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    190a:	e0 e4       	ldi	r30, 0x40	; 64
    190c:	f4 e0       	ldi	r31, 0x04	; 4
    190e:	80 ef       	ldi	r24, 0xF0	; 240
    1910:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1912:	81 83       	std	Z+1, r24	; 0x01
    1914:	08 95       	ret

00001916 <__subsf3>:
    1916:	50 58       	subi	r21, 0x80	; 128

00001918 <__addsf3>:
    1918:	bb 27       	eor	r27, r27
    191a:	aa 27       	eor	r26, r26
    191c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3x>
    1920:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_round>
    1924:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscA>
    1928:	38 f0       	brcs	.+14     	; 0x1938 <__addsf3+0x20>
    192a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscB>
    192e:	20 f0       	brcs	.+8      	; 0x1938 <__addsf3+0x20>
    1930:	39 f4       	brne	.+14     	; 0x1940 <__addsf3+0x28>
    1932:	9f 3f       	cpi	r25, 0xFF	; 255
    1934:	19 f4       	brne	.+6      	; 0x193c <__addsf3+0x24>
    1936:	26 f4       	brtc	.+8      	; 0x1940 <__addsf3+0x28>
    1938:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_nan>
    193c:	0e f4       	brtc	.+2      	; 0x1940 <__addsf3+0x28>
    193e:	e0 95       	com	r30
    1940:	e7 fb       	bst	r30, 7
    1942:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>

00001946 <__addsf3x>:
    1946:	e9 2f       	mov	r30, r25
    1948:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fp_split3>
    194c:	58 f3       	brcs	.-42     	; 0x1924 <__addsf3+0xc>
    194e:	ba 17       	cp	r27, r26
    1950:	62 07       	cpc	r22, r18
    1952:	73 07       	cpc	r23, r19
    1954:	84 07       	cpc	r24, r20
    1956:	95 07       	cpc	r25, r21
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__addsf3x+0x1c>
    195a:	79 f4       	brne	.+30     	; 0x197a <__addsf3x+0x34>
    195c:	a6 f5       	brtc	.+104    	; 0x19c6 <__addsf3x+0x80>
    195e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_zero>
    1962:	0e f4       	brtc	.+2      	; 0x1966 <__addsf3x+0x20>
    1964:	e0 95       	com	r30
    1966:	0b 2e       	mov	r0, r27
    1968:	ba 2f       	mov	r27, r26
    196a:	a0 2d       	mov	r26, r0
    196c:	0b 01       	movw	r0, r22
    196e:	b9 01       	movw	r22, r18
    1970:	90 01       	movw	r18, r0
    1972:	0c 01       	movw	r0, r24
    1974:	ca 01       	movw	r24, r20
    1976:	a0 01       	movw	r20, r0
    1978:	11 24       	eor	r1, r1
    197a:	ff 27       	eor	r31, r31
    197c:	59 1b       	sub	r21, r25
    197e:	99 f0       	breq	.+38     	; 0x19a6 <__addsf3x+0x60>
    1980:	59 3f       	cpi	r21, 0xF9	; 249
    1982:	50 f4       	brcc	.+20     	; 0x1998 <__addsf3x+0x52>
    1984:	50 3e       	cpi	r21, 0xE0	; 224
    1986:	68 f1       	brcs	.+90     	; 0x19e2 <__addsf3x+0x9c>
    1988:	1a 16       	cp	r1, r26
    198a:	f0 40       	sbci	r31, 0x00	; 0
    198c:	a2 2f       	mov	r26, r18
    198e:	23 2f       	mov	r18, r19
    1990:	34 2f       	mov	r19, r20
    1992:	44 27       	eor	r20, r20
    1994:	58 5f       	subi	r21, 0xF8	; 248
    1996:	f3 cf       	rjmp	.-26     	; 0x197e <__addsf3x+0x38>
    1998:	46 95       	lsr	r20
    199a:	37 95       	ror	r19
    199c:	27 95       	ror	r18
    199e:	a7 95       	ror	r26
    19a0:	f0 40       	sbci	r31, 0x00	; 0
    19a2:	53 95       	inc	r21
    19a4:	c9 f7       	brne	.-14     	; 0x1998 <__addsf3x+0x52>
    19a6:	7e f4       	brtc	.+30     	; 0x19c6 <__addsf3x+0x80>
    19a8:	1f 16       	cp	r1, r31
    19aa:	ba 0b       	sbc	r27, r26
    19ac:	62 0b       	sbc	r22, r18
    19ae:	73 0b       	sbc	r23, r19
    19b0:	84 0b       	sbc	r24, r20
    19b2:	ba f0       	brmi	.+46     	; 0x19e2 <__addsf3x+0x9c>
    19b4:	91 50       	subi	r25, 0x01	; 1
    19b6:	a1 f0       	breq	.+40     	; 0x19e0 <__addsf3x+0x9a>
    19b8:	ff 0f       	add	r31, r31
    19ba:	bb 1f       	adc	r27, r27
    19bc:	66 1f       	adc	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	c2 f7       	brpl	.-16     	; 0x19b4 <__addsf3x+0x6e>
    19c4:	0e c0       	rjmp	.+28     	; 0x19e2 <__addsf3x+0x9c>
    19c6:	ba 0f       	add	r27, r26
    19c8:	62 1f       	adc	r22, r18
    19ca:	73 1f       	adc	r23, r19
    19cc:	84 1f       	adc	r24, r20
    19ce:	48 f4       	brcc	.+18     	; 0x19e2 <__addsf3x+0x9c>
    19d0:	87 95       	ror	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	b7 95       	ror	r27
    19d8:	f7 95       	ror	r31
    19da:	9e 3f       	cpi	r25, 0xFE	; 254
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <__addsf3x+0x9a>
    19de:	b0 cf       	rjmp	.-160    	; 0x1940 <__addsf3+0x28>
    19e0:	93 95       	inc	r25
    19e2:	88 0f       	add	r24, r24
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <__addsf3x+0xa2>
    19e6:	99 27       	eor	r25, r25
    19e8:	ee 0f       	add	r30, r30
    19ea:	97 95       	ror	r25
    19ec:	87 95       	ror	r24
    19ee:	08 95       	ret

000019f0 <__cmpsf2>:
    19f0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fp_cmp>
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <__cmpsf2+0x8>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	08 95       	ret

000019fa <__divsf3>:
    19fa:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__divsf3x>
    19fe:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_round>
    1a02:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscB>
    1a06:	58 f0       	brcs	.+22     	; 0x1a1e <__divsf3+0x24>
    1a08:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscA>
    1a0c:	40 f0       	brcs	.+16     	; 0x1a1e <__divsf3+0x24>
    1a0e:	29 f4       	brne	.+10     	; 0x1a1a <__divsf3+0x20>
    1a10:	5f 3f       	cpi	r21, 0xFF	; 255
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <__divsf3+0x24>
    1a14:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1a18:	51 11       	cpse	r21, r1
    1a1a:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>
    1a1e:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_nan>

00001a22 <__divsf3x>:
    1a22:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fp_split3>
    1a26:	68 f3       	brcs	.-38     	; 0x1a02 <__divsf3+0x8>

00001a28 <__divsf3_pse>:
    1a28:	99 23       	and	r25, r25
    1a2a:	b1 f3       	breq	.-20     	; 0x1a18 <__divsf3+0x1e>
    1a2c:	55 23       	and	r21, r21
    1a2e:	91 f3       	breq	.-28     	; 0x1a14 <__divsf3+0x1a>
    1a30:	95 1b       	sub	r25, r21
    1a32:	55 0b       	sbc	r21, r21
    1a34:	bb 27       	eor	r27, r27
    1a36:	aa 27       	eor	r26, r26
    1a38:	62 17       	cp	r22, r18
    1a3a:	73 07       	cpc	r23, r19
    1a3c:	84 07       	cpc	r24, r20
    1a3e:	38 f0       	brcs	.+14     	; 0x1a4e <__divsf3_pse+0x26>
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	44 1f       	adc	r20, r20
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	a9 f3       	breq	.-22     	; 0x1a38 <__divsf3_pse+0x10>
    1a4e:	35 d0       	rcall	.+106    	; 0x1aba <__divsf3_pse+0x92>
    1a50:	0e 2e       	mov	r0, r30
    1a52:	3a f0       	brmi	.+14     	; 0x1a62 <__divsf3_pse+0x3a>
    1a54:	e0 e8       	ldi	r30, 0x80	; 128
    1a56:	32 d0       	rcall	.+100    	; 0x1abc <__divsf3_pse+0x94>
    1a58:	91 50       	subi	r25, 0x01	; 1
    1a5a:	50 40       	sbci	r21, 0x00	; 0
    1a5c:	e6 95       	lsr	r30
    1a5e:	00 1c       	adc	r0, r0
    1a60:	ca f7       	brpl	.-14     	; 0x1a54 <__divsf3_pse+0x2c>
    1a62:	2b d0       	rcall	.+86     	; 0x1aba <__divsf3_pse+0x92>
    1a64:	fe 2f       	mov	r31, r30
    1a66:	29 d0       	rcall	.+82     	; 0x1aba <__divsf3_pse+0x92>
    1a68:	66 0f       	add	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	26 17       	cp	r18, r22
    1a72:	37 07       	cpc	r19, r23
    1a74:	48 07       	cpc	r20, r24
    1a76:	ab 07       	cpc	r26, r27
    1a78:	b0 e8       	ldi	r27, 0x80	; 128
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <__divsf3_pse+0x56>
    1a7c:	bb 0b       	sbc	r27, r27
    1a7e:	80 2d       	mov	r24, r0
    1a80:	bf 01       	movw	r22, r30
    1a82:	ff 27       	eor	r31, r31
    1a84:	93 58       	subi	r25, 0x83	; 131
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	3a f0       	brmi	.+14     	; 0x1a98 <__divsf3_pse+0x70>
    1a8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	78 f0       	brcs	.+30     	; 0x1aae <__divsf3_pse+0x86>
    1a90:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1a94:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>
    1a98:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9a:	e4 f3       	brlt	.-8      	; 0x1a94 <__divsf3_pse+0x6c>
    1a9c:	98 3e       	cpi	r25, 0xE8	; 232
    1a9e:	d4 f3       	brlt	.-12     	; 0x1a94 <__divsf3_pse+0x6c>
    1aa0:	86 95       	lsr	r24
    1aa2:	77 95       	ror	r23
    1aa4:	67 95       	ror	r22
    1aa6:	b7 95       	ror	r27
    1aa8:	f7 95       	ror	r31
    1aaa:	9f 5f       	subi	r25, 0xFF	; 255
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__divsf3_pse+0x78>
    1aae:	88 0f       	add	r24, r24
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret
    1aba:	e1 e0       	ldi	r30, 0x01	; 1
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	62 17       	cp	r22, r18
    1ac6:	73 07       	cpc	r23, r19
    1ac8:	84 07       	cpc	r24, r20
    1aca:	ba 07       	cpc	r27, r26
    1acc:	20 f0       	brcs	.+8      	; 0x1ad6 <__divsf3_pse+0xae>
    1ace:	62 1b       	sub	r22, r18
    1ad0:	73 0b       	sbc	r23, r19
    1ad2:	84 0b       	sbc	r24, r20
    1ad4:	ba 0b       	sbc	r27, r26
    1ad6:	ee 1f       	adc	r30, r30
    1ad8:	88 f7       	brcc	.-30     	; 0x1abc <__divsf3_pse+0x94>
    1ada:	e0 95       	com	r30
    1adc:	08 95       	ret

00001ade <__fixunssfsi>:
    1ade:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_splitA>
    1ae2:	88 f0       	brcs	.+34     	; 0x1b06 <__fixunssfsi+0x28>
    1ae4:	9f 57       	subi	r25, 0x7F	; 127
    1ae6:	98 f0       	brcs	.+38     	; 0x1b0e <__fixunssfsi+0x30>
    1ae8:	b9 2f       	mov	r27, r25
    1aea:	99 27       	eor	r25, r25
    1aec:	b7 51       	subi	r27, 0x17	; 23
    1aee:	b0 f0       	brcs	.+44     	; 0x1b1c <__fixunssfsi+0x3e>
    1af0:	e1 f0       	breq	.+56     	; 0x1b2a <__fixunssfsi+0x4c>
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	1a f0       	brmi	.+6      	; 0x1b02 <__fixunssfsi+0x24>
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__fixunssfsi+0x14>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <__fixunssfsi+0x4c>
    1b02:	b1 30       	cpi	r27, 0x01	; 1
    1b04:	91 f0       	breq	.+36     	; 0x1b2a <__fixunssfsi+0x4c>
    1b06:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__fp_zero>
    1b0a:	b1 e0       	ldi	r27, 0x01	; 1
    1b0c:	08 95       	ret
    1b0e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_zero>
    1b12:	67 2f       	mov	r22, r23
    1b14:	78 2f       	mov	r23, r24
    1b16:	88 27       	eor	r24, r24
    1b18:	b8 5f       	subi	r27, 0xF8	; 248
    1b1a:	39 f0       	breq	.+14     	; 0x1b2a <__fixunssfsi+0x4c>
    1b1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1b1e:	cc f3       	brlt	.-14     	; 0x1b12 <__fixunssfsi+0x34>
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b3 95       	inc	r27
    1b28:	d9 f7       	brne	.-10     	; 0x1b20 <__fixunssfsi+0x42>
    1b2a:	3e f4       	brtc	.+14     	; 0x1b3a <__fixunssfsi+0x5c>
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__floatunsisf>:
    1b3c:	e8 94       	clt
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <__floatsisf+0x12>

00001b40 <__floatsisf>:
    1b40:	97 fb       	bst	r25, 7
    1b42:	3e f4       	brtc	.+14     	; 0x1b52 <__floatsisf+0x12>
    1b44:	90 95       	com	r25
    1b46:	80 95       	com	r24
    1b48:	70 95       	com	r23
    1b4a:	61 95       	neg	r22
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	99 23       	and	r25, r25
    1b54:	a9 f0       	breq	.+42     	; 0x1b80 <__floatsisf+0x40>
    1b56:	f9 2f       	mov	r31, r25
    1b58:	96 e9       	ldi	r25, 0x96	; 150
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	93 95       	inc	r25
    1b5e:	f6 95       	lsr	r31
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	b7 95       	ror	r27
    1b68:	f1 11       	cpse	r31, r1
    1b6a:	f8 cf       	rjmp	.-16     	; 0x1b5c <__floatsisf+0x1c>
    1b6c:	fa f4       	brpl	.+62     	; 0x1bac <__floatsisf+0x6c>
    1b6e:	bb 0f       	add	r27, r27
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <__floatsisf+0x36>
    1b72:	60 ff       	sbrs	r22, 0
    1b74:	1b c0       	rjmp	.+54     	; 0x1bac <__floatsisf+0x6c>
    1b76:	6f 5f       	subi	r22, 0xFF	; 255
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	16 c0       	rjmp	.+44     	; 0x1bac <__floatsisf+0x6c>
    1b80:	88 23       	and	r24, r24
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <__floatsisf+0x48>
    1b84:	96 e9       	ldi	r25, 0x96	; 150
    1b86:	11 c0       	rjmp	.+34     	; 0x1baa <__floatsisf+0x6a>
    1b88:	77 23       	and	r23, r23
    1b8a:	21 f0       	breq	.+8      	; 0x1b94 <__floatsisf+0x54>
    1b8c:	9e e8       	ldi	r25, 0x8E	; 142
    1b8e:	87 2f       	mov	r24, r23
    1b90:	76 2f       	mov	r23, r22
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <__floatsisf+0x5e>
    1b94:	66 23       	and	r22, r22
    1b96:	71 f0       	breq	.+28     	; 0x1bb4 <__floatsisf+0x74>
    1b98:	96 e8       	ldi	r25, 0x86	; 134
    1b9a:	86 2f       	mov	r24, r22
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	2a f0       	brmi	.+10     	; 0x1bac <__floatsisf+0x6c>
    1ba2:	9a 95       	dec	r25
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	da f7       	brpl	.-10     	; 0x1ba2 <__floatsisf+0x62>
    1bac:	88 0f       	add	r24, r24
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	97 f9       	bld	r25, 7
    1bb4:	08 95       	ret

00001bb6 <__fp_cmp>:
    1bb6:	99 0f       	add	r25, r25
    1bb8:	00 08       	sbc	r0, r0
    1bba:	55 0f       	add	r21, r21
    1bbc:	aa 0b       	sbc	r26, r26
    1bbe:	e0 e8       	ldi	r30, 0x80	; 128
    1bc0:	fe ef       	ldi	r31, 0xFE	; 254
    1bc2:	16 16       	cp	r1, r22
    1bc4:	17 06       	cpc	r1, r23
    1bc6:	e8 07       	cpc	r30, r24
    1bc8:	f9 07       	cpc	r31, r25
    1bca:	c0 f0       	brcs	.+48     	; 0x1bfc <__fp_cmp+0x46>
    1bcc:	12 16       	cp	r1, r18
    1bce:	13 06       	cpc	r1, r19
    1bd0:	e4 07       	cpc	r30, r20
    1bd2:	f5 07       	cpc	r31, r21
    1bd4:	98 f0       	brcs	.+38     	; 0x1bfc <__fp_cmp+0x46>
    1bd6:	62 1b       	sub	r22, r18
    1bd8:	73 0b       	sbc	r23, r19
    1bda:	84 0b       	sbc	r24, r20
    1bdc:	95 0b       	sbc	r25, r21
    1bde:	39 f4       	brne	.+14     	; 0x1bee <__fp_cmp+0x38>
    1be0:	0a 26       	eor	r0, r26
    1be2:	61 f0       	breq	.+24     	; 0x1bfc <__fp_cmp+0x46>
    1be4:	23 2b       	or	r18, r19
    1be6:	24 2b       	or	r18, r20
    1be8:	25 2b       	or	r18, r21
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <__fp_cmp+0x3e>
    1bec:	08 95       	ret
    1bee:	0a 26       	eor	r0, r26
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <__fp_cmp+0x3e>
    1bf2:	a1 40       	sbci	r26, 0x01	; 1
    1bf4:	a6 95       	lsr	r26
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	81 1d       	adc	r24, r1
    1bfa:	81 1d       	adc	r24, r1
    1bfc:	08 95       	ret

00001bfe <__fp_inf>:
    1bfe:	97 f9       	bld	r25, 7
    1c00:	9f 67       	ori	r25, 0x7F	; 127
    1c02:	80 e8       	ldi	r24, 0x80	; 128
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	08 95       	ret

00001c0a <__fp_nan>:
    1c0a:	9f ef       	ldi	r25, 0xFF	; 255
    1c0c:	80 ec       	ldi	r24, 0xC0	; 192
    1c0e:	08 95       	ret

00001c10 <__fp_pscA>:
    1c10:	00 24       	eor	r0, r0
    1c12:	0a 94       	dec	r0
    1c14:	16 16       	cp	r1, r22
    1c16:	17 06       	cpc	r1, r23
    1c18:	18 06       	cpc	r1, r24
    1c1a:	09 06       	cpc	r0, r25
    1c1c:	08 95       	ret

00001c1e <__fp_pscB>:
    1c1e:	00 24       	eor	r0, r0
    1c20:	0a 94       	dec	r0
    1c22:	12 16       	cp	r1, r18
    1c24:	13 06       	cpc	r1, r19
    1c26:	14 06       	cpc	r1, r20
    1c28:	05 06       	cpc	r0, r21
    1c2a:	08 95       	ret

00001c2c <__fp_round>:
    1c2c:	09 2e       	mov	r0, r25
    1c2e:	03 94       	inc	r0
    1c30:	00 0c       	add	r0, r0
    1c32:	11 f4       	brne	.+4      	; 0x1c38 <__fp_round+0xc>
    1c34:	88 23       	and	r24, r24
    1c36:	52 f0       	brmi	.+20     	; 0x1c4c <__fp_round+0x20>
    1c38:	bb 0f       	add	r27, r27
    1c3a:	40 f4       	brcc	.+16     	; 0x1c4c <__fp_round+0x20>
    1c3c:	bf 2b       	or	r27, r31
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <__fp_round+0x18>
    1c40:	60 ff       	sbrs	r22, 0
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <__fp_round+0x20>
    1c44:	6f 5f       	subi	r22, 0xFF	; 255
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	08 95       	ret

00001c4e <__fp_split3>:
    1c4e:	57 fd       	sbrc	r21, 7
    1c50:	90 58       	subi	r25, 0x80	; 128
    1c52:	44 0f       	add	r20, r20
    1c54:	55 1f       	adc	r21, r21
    1c56:	59 f0       	breq	.+22     	; 0x1c6e <__fp_splitA+0x10>
    1c58:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5a:	71 f0       	breq	.+28     	; 0x1c78 <__fp_splitA+0x1a>
    1c5c:	47 95       	ror	r20

00001c5e <__fp_splitA>:
    1c5e:	88 0f       	add	r24, r24
    1c60:	97 fb       	bst	r25, 7
    1c62:	99 1f       	adc	r25, r25
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <__fp_splitA+0x20>
    1c66:	9f 3f       	cpi	r25, 0xFF	; 255
    1c68:	79 f0       	breq	.+30     	; 0x1c88 <__fp_splitA+0x2a>
    1c6a:	87 95       	ror	r24
    1c6c:	08 95       	ret
    1c6e:	12 16       	cp	r1, r18
    1c70:	13 06       	cpc	r1, r19
    1c72:	14 06       	cpc	r1, r20
    1c74:	55 1f       	adc	r21, r21
    1c76:	f2 cf       	rjmp	.-28     	; 0x1c5c <__fp_split3+0xe>
    1c78:	46 95       	lsr	r20
    1c7a:	f1 df       	rcall	.-30     	; 0x1c5e <__fp_splitA>
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <__fp_splitA+0x30>
    1c7e:	16 16       	cp	r1, r22
    1c80:	17 06       	cpc	r1, r23
    1c82:	18 06       	cpc	r1, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	f1 cf       	rjmp	.-30     	; 0x1c6a <__fp_splitA+0xc>
    1c88:	86 95       	lsr	r24
    1c8a:	71 05       	cpc	r23, r1
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	08 94       	sec
    1c90:	08 95       	ret

00001c92 <__fp_zero>:
    1c92:	e8 94       	clt

00001c94 <__fp_szero>:
    1c94:	bb 27       	eor	r27, r27
    1c96:	66 27       	eor	r22, r22
    1c98:	77 27       	eor	r23, r23
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	97 f9       	bld	r25, 7
    1c9e:	08 95       	ret

00001ca0 <__mulsf3>:
    1ca0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__mulsf3x>
    1ca4:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_round>
    1ca8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscA>
    1cac:	38 f0       	brcs	.+14     	; 0x1cbc <__mulsf3+0x1c>
    1cae:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscB>
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <__mulsf3+0x1c>
    1cb4:	95 23       	and	r25, r21
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <__mulsf3+0x1c>
    1cb8:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1cbc:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_nan>
    1cc0:	11 24       	eor	r1, r1
    1cc2:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>

00001cc6 <__mulsf3x>:
    1cc6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fp_split3>
    1cca:	70 f3       	brcs	.-36     	; 0x1ca8 <__mulsf3+0x8>

00001ccc <__mulsf3_pse>:
    1ccc:	95 9f       	mul	r25, r21
    1cce:	c1 f3       	breq	.-16     	; 0x1cc0 <__mulsf3+0x20>
    1cd0:	95 0f       	add	r25, r21
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	62 9f       	mul	r22, r18
    1cd8:	f0 01       	movw	r30, r0
    1cda:	72 9f       	mul	r23, r18
    1cdc:	bb 27       	eor	r27, r27
    1cde:	f0 0d       	add	r31, r0
    1ce0:	b1 1d       	adc	r27, r1
    1ce2:	63 9f       	mul	r22, r19
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	f0 0d       	add	r31, r0
    1ce8:	b1 1d       	adc	r27, r1
    1cea:	aa 1f       	adc	r26, r26
    1cec:	64 9f       	mul	r22, r20
    1cee:	66 27       	eor	r22, r22
    1cf0:	b0 0d       	add	r27, r0
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	66 1f       	adc	r22, r22
    1cf6:	82 9f       	mul	r24, r18
    1cf8:	22 27       	eor	r18, r18
    1cfa:	b0 0d       	add	r27, r0
    1cfc:	a1 1d       	adc	r26, r1
    1cfe:	62 1f       	adc	r22, r18
    1d00:	73 9f       	mul	r23, r19
    1d02:	b0 0d       	add	r27, r0
    1d04:	a1 1d       	adc	r26, r1
    1d06:	62 1f       	adc	r22, r18
    1d08:	83 9f       	mul	r24, r19
    1d0a:	a0 0d       	add	r26, r0
    1d0c:	61 1d       	adc	r22, r1
    1d0e:	22 1f       	adc	r18, r18
    1d10:	74 9f       	mul	r23, r20
    1d12:	33 27       	eor	r19, r19
    1d14:	a0 0d       	add	r26, r0
    1d16:	61 1d       	adc	r22, r1
    1d18:	23 1f       	adc	r18, r19
    1d1a:	84 9f       	mul	r24, r20
    1d1c:	60 0d       	add	r22, r0
    1d1e:	21 1d       	adc	r18, r1
    1d20:	82 2f       	mov	r24, r18
    1d22:	76 2f       	mov	r23, r22
    1d24:	6a 2f       	mov	r22, r26
    1d26:	11 24       	eor	r1, r1
    1d28:	9f 57       	subi	r25, 0x7F	; 127
    1d2a:	50 40       	sbci	r21, 0x00	; 0
    1d2c:	9a f0       	brmi	.+38     	; 0x1d54 <__mulsf3_pse+0x88>
    1d2e:	f1 f0       	breq	.+60     	; 0x1d6c <__mulsf3_pse+0xa0>
    1d30:	88 23       	and	r24, r24
    1d32:	4a f0       	brmi	.+18     	; 0x1d46 <__mulsf3_pse+0x7a>
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	bb 1f       	adc	r27, r27
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	91 50       	subi	r25, 0x01	; 1
    1d42:	50 40       	sbci	r21, 0x00	; 0
    1d44:	a9 f7       	brne	.-22     	; 0x1d30 <__mulsf3_pse+0x64>
    1d46:	9e 3f       	cpi	r25, 0xFE	; 254
    1d48:	51 05       	cpc	r21, r1
    1d4a:	80 f0       	brcs	.+32     	; 0x1d6c <__mulsf3_pse+0xa0>
    1d4c:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1d50:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>
    1d54:	5f 3f       	cpi	r21, 0xFF	; 255
    1d56:	e4 f3       	brlt	.-8      	; 0x1d50 <__mulsf3_pse+0x84>
    1d58:	98 3e       	cpi	r25, 0xE8	; 232
    1d5a:	d4 f3       	brlt	.-12     	; 0x1d50 <__mulsf3_pse+0x84>
    1d5c:	86 95       	lsr	r24
    1d5e:	77 95       	ror	r23
    1d60:	67 95       	ror	r22
    1d62:	b7 95       	ror	r27
    1d64:	f7 95       	ror	r31
    1d66:	e7 95       	ror	r30
    1d68:	9f 5f       	subi	r25, 0xFF	; 255
    1d6a:	c1 f7       	brne	.-16     	; 0x1d5c <__mulsf3_pse+0x90>
    1d6c:	fe 2b       	or	r31, r30
    1d6e:	88 0f       	add	r24, r24
    1d70:	91 1d       	adc	r25, r1
    1d72:	96 95       	lsr	r25
    1d74:	87 95       	ror	r24
    1d76:	97 f9       	bld	r25, 7
    1d78:	08 95       	ret

00001d7a <__tablejump2__>:
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	05 90       	lpm	r0, Z+
    1d80:	f4 91       	lpm	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 94       	ijmp

00001d86 <strcat>:
    1d86:	fb 01       	movw	r30, r22
    1d88:	dc 01       	movw	r26, r24
    1d8a:	0d 90       	ld	r0, X+
    1d8c:	00 20       	and	r0, r0
    1d8e:	e9 f7       	brne	.-6      	; 0x1d8a <strcat+0x4>
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	01 90       	ld	r0, Z+
    1d94:	0d 92       	st	X+, r0
    1d96:	00 20       	and	r0, r0
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <strcat+0xc>
    1d9a:	08 95       	ret

00001d9c <strcpy>:
    1d9c:	fb 01       	movw	r30, r22
    1d9e:	dc 01       	movw	r26, r24
    1da0:	01 90       	ld	r0, Z+
    1da2:	0d 92       	st	X+, r0
    1da4:	00 20       	and	r0, r0
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <strcpy+0x4>
    1da8:	08 95       	ret

00001daa <sprintf>:
    1daa:	ae e0       	ldi	r26, 0x0E	; 14
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	eb ed       	ldi	r30, 0xDB	; 219
    1db0:	fe e0       	ldi	r31, 0x0E	; 14
    1db2:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x1c>
    1db6:	0d 89       	ldd	r16, Y+21	; 0x15
    1db8:	1e 89       	ldd	r17, Y+22	; 0x16
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	8c 83       	std	Y+4, r24	; 0x04
    1dbe:	09 83       	std	Y+1, r16	; 0x01
    1dc0:	1a 83       	std	Y+2, r17	; 0x02
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	9f e7       	ldi	r25, 0x7F	; 127
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	ae 01       	movw	r20, r28
    1dcc:	47 5e       	subi	r20, 0xE7	; 231
    1dce:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd0:	6f 89       	ldd	r22, Y+23	; 0x17
    1dd2:	78 8d       	ldd	r23, Y+24	; 0x18
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <vfprintf>
    1ddc:	ef 81       	ldd	r30, Y+7	; 0x07
    1dde:	f8 85       	ldd	r31, Y+8	; 0x08
    1de0:	e0 0f       	add	r30, r16
    1de2:	f1 1f       	adc	r31, r17
    1de4:	10 82       	st	Z, r1
    1de6:	2e 96       	adiw	r28, 0x0e	; 14
    1de8:	e4 e0       	ldi	r30, 0x04	; 4
    1dea:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__epilogue_restores__+0x1c>

00001dee <vfprintf>:
    1dee:	ab e0       	ldi	r26, 0x0B	; 11
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ed ef       	ldi	r30, 0xFD	; 253
    1df4:	fe e0       	ldi	r31, 0x0E	; 14
    1df6:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__>
    1dfa:	6c 01       	movw	r12, r24
    1dfc:	7b 01       	movw	r14, r22
    1dfe:	8a 01       	movw	r16, r20
    1e00:	fc 01       	movw	r30, r24
    1e02:	16 82       	std	Z+6, r1	; 0x06
    1e04:	17 82       	std	Z+7, r1	; 0x07
    1e06:	83 81       	ldd	r24, Z+3	; 0x03
    1e08:	81 ff       	sbrs	r24, 1
    1e0a:	cc c1       	rjmp	.+920    	; 0x21a4 <vfprintf+0x3b6>
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	3c 01       	movw	r6, r24
    1e12:	f6 01       	movw	r30, r12
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	f7 01       	movw	r30, r14
    1e18:	93 fd       	sbrc	r25, 3
    1e1a:	85 91       	lpm	r24, Z+
    1e1c:	93 ff       	sbrs	r25, 3
    1e1e:	81 91       	ld	r24, Z+
    1e20:	7f 01       	movw	r14, r30
    1e22:	88 23       	and	r24, r24
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <vfprintf+0x3a>
    1e26:	ba c1       	rjmp	.+884    	; 0x219c <vfprintf+0x3ae>
    1e28:	85 32       	cpi	r24, 0x25	; 37
    1e2a:	39 f4       	brne	.+14     	; 0x1e3a <vfprintf+0x4c>
    1e2c:	93 fd       	sbrc	r25, 3
    1e2e:	85 91       	lpm	r24, Z+
    1e30:	93 ff       	sbrs	r25, 3
    1e32:	81 91       	ld	r24, Z+
    1e34:	7f 01       	movw	r14, r30
    1e36:	85 32       	cpi	r24, 0x25	; 37
    1e38:	29 f4       	brne	.+10     	; 0x1e44 <vfprintf+0x56>
    1e3a:	b6 01       	movw	r22, r12
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    1e42:	e7 cf       	rjmp	.-50     	; 0x1e12 <vfprintf+0x24>
    1e44:	91 2c       	mov	r9, r1
    1e46:	21 2c       	mov	r2, r1
    1e48:	31 2c       	mov	r3, r1
    1e4a:	ff e1       	ldi	r31, 0x1F	; 31
    1e4c:	f3 15       	cp	r31, r3
    1e4e:	d8 f0       	brcs	.+54     	; 0x1e86 <vfprintf+0x98>
    1e50:	8b 32       	cpi	r24, 0x2B	; 43
    1e52:	79 f0       	breq	.+30     	; 0x1e72 <vfprintf+0x84>
    1e54:	38 f4       	brcc	.+14     	; 0x1e64 <vfprintf+0x76>
    1e56:	80 32       	cpi	r24, 0x20	; 32
    1e58:	79 f0       	breq	.+30     	; 0x1e78 <vfprintf+0x8a>
    1e5a:	83 32       	cpi	r24, 0x23	; 35
    1e5c:	a1 f4       	brne	.+40     	; 0x1e86 <vfprintf+0x98>
    1e5e:	23 2d       	mov	r18, r3
    1e60:	20 61       	ori	r18, 0x10	; 16
    1e62:	1d c0       	rjmp	.+58     	; 0x1e9e <vfprintf+0xb0>
    1e64:	8d 32       	cpi	r24, 0x2D	; 45
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <vfprintf+0x92>
    1e68:	80 33       	cpi	r24, 0x30	; 48
    1e6a:	69 f4       	brne	.+26     	; 0x1e86 <vfprintf+0x98>
    1e6c:	23 2d       	mov	r18, r3
    1e6e:	21 60       	ori	r18, 0x01	; 1
    1e70:	16 c0       	rjmp	.+44     	; 0x1e9e <vfprintf+0xb0>
    1e72:	83 2d       	mov	r24, r3
    1e74:	82 60       	ori	r24, 0x02	; 2
    1e76:	38 2e       	mov	r3, r24
    1e78:	e3 2d       	mov	r30, r3
    1e7a:	e4 60       	ori	r30, 0x04	; 4
    1e7c:	3e 2e       	mov	r3, r30
    1e7e:	2a c0       	rjmp	.+84     	; 0x1ed4 <vfprintf+0xe6>
    1e80:	f3 2d       	mov	r31, r3
    1e82:	f8 60       	ori	r31, 0x08	; 8
    1e84:	1d c0       	rjmp	.+58     	; 0x1ec0 <vfprintf+0xd2>
    1e86:	37 fc       	sbrc	r3, 7
    1e88:	2d c0       	rjmp	.+90     	; 0x1ee4 <vfprintf+0xf6>
    1e8a:	20 ed       	ldi	r18, 0xD0	; 208
    1e8c:	28 0f       	add	r18, r24
    1e8e:	2a 30       	cpi	r18, 0x0A	; 10
    1e90:	40 f0       	brcs	.+16     	; 0x1ea2 <vfprintf+0xb4>
    1e92:	8e 32       	cpi	r24, 0x2E	; 46
    1e94:	b9 f4       	brne	.+46     	; 0x1ec4 <vfprintf+0xd6>
    1e96:	36 fc       	sbrc	r3, 6
    1e98:	81 c1       	rjmp	.+770    	; 0x219c <vfprintf+0x3ae>
    1e9a:	23 2d       	mov	r18, r3
    1e9c:	20 64       	ori	r18, 0x40	; 64
    1e9e:	32 2e       	mov	r3, r18
    1ea0:	19 c0       	rjmp	.+50     	; 0x1ed4 <vfprintf+0xe6>
    1ea2:	36 fe       	sbrs	r3, 6
    1ea4:	06 c0       	rjmp	.+12     	; 0x1eb2 <vfprintf+0xc4>
    1ea6:	8a e0       	ldi	r24, 0x0A	; 10
    1ea8:	98 9e       	mul	r9, r24
    1eaa:	20 0d       	add	r18, r0
    1eac:	11 24       	eor	r1, r1
    1eae:	92 2e       	mov	r9, r18
    1eb0:	11 c0       	rjmp	.+34     	; 0x1ed4 <vfprintf+0xe6>
    1eb2:	ea e0       	ldi	r30, 0x0A	; 10
    1eb4:	2e 9e       	mul	r2, r30
    1eb6:	20 0d       	add	r18, r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	22 2e       	mov	r2, r18
    1ebc:	f3 2d       	mov	r31, r3
    1ebe:	f0 62       	ori	r31, 0x20	; 32
    1ec0:	3f 2e       	mov	r3, r31
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <vfprintf+0xe6>
    1ec4:	8c 36       	cpi	r24, 0x6C	; 108
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <vfprintf+0xe2>
    1ec8:	83 2d       	mov	r24, r3
    1eca:	80 68       	ori	r24, 0x80	; 128
    1ecc:	38 2e       	mov	r3, r24
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <vfprintf+0xe6>
    1ed0:	88 36       	cpi	r24, 0x68	; 104
    1ed2:	41 f4       	brne	.+16     	; 0x1ee4 <vfprintf+0xf6>
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	93 fd       	sbrc	r25, 3
    1ed8:	85 91       	lpm	r24, Z+
    1eda:	93 ff       	sbrs	r25, 3
    1edc:	81 91       	ld	r24, Z+
    1ede:	7f 01       	movw	r14, r30
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	b3 cf       	rjmp	.-154    	; 0x1e4a <vfprintf+0x5c>
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	9f 7d       	andi	r25, 0xDF	; 223
    1ee8:	95 54       	subi	r25, 0x45	; 69
    1eea:	93 30       	cpi	r25, 0x03	; 3
    1eec:	28 f4       	brcc	.+10     	; 0x1ef8 <vfprintf+0x10a>
    1eee:	0c 5f       	subi	r16, 0xFC	; 252
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	9f e3       	ldi	r25, 0x3F	; 63
    1ef4:	99 83       	std	Y+1, r25	; 0x01
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <vfprintf+0x124>
    1ef8:	83 36       	cpi	r24, 0x63	; 99
    1efa:	31 f0       	breq	.+12     	; 0x1f08 <vfprintf+0x11a>
    1efc:	83 37       	cpi	r24, 0x73	; 115
    1efe:	71 f0       	breq	.+28     	; 0x1f1c <vfprintf+0x12e>
    1f00:	83 35       	cpi	r24, 0x53	; 83
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <vfprintf+0x118>
    1f04:	59 c0       	rjmp	.+178    	; 0x1fb8 <vfprintf+0x1ca>
    1f06:	21 c0       	rjmp	.+66     	; 0x1f4a <vfprintf+0x15c>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	80 81       	ld	r24, Z
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	0e 5f       	subi	r16, 0xFE	; 254
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	88 24       	eor	r8, r8
    1f14:	83 94       	inc	r8
    1f16:	91 2c       	mov	r9, r1
    1f18:	53 01       	movw	r10, r6
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <vfprintf+0x154>
    1f1c:	28 01       	movw	r4, r16
    1f1e:	f2 e0       	ldi	r31, 0x02	; 2
    1f20:	4f 0e       	add	r4, r31
    1f22:	51 1c       	adc	r5, r1
    1f24:	f8 01       	movw	r30, r16
    1f26:	a0 80       	ld	r10, Z
    1f28:	b1 80       	ldd	r11, Z+1	; 0x01
    1f2a:	36 fe       	sbrs	r3, 6
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <vfprintf+0x146>
    1f2e:	69 2d       	mov	r22, r9
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x14a>
    1f34:	6f ef       	ldi	r22, 0xFF	; 255
    1f36:	7f ef       	ldi	r23, 0xFF	; 255
    1f38:	c5 01       	movw	r24, r10
    1f3a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <strnlen>
    1f3e:	4c 01       	movw	r8, r24
    1f40:	82 01       	movw	r16, r4
    1f42:	f3 2d       	mov	r31, r3
    1f44:	ff 77       	andi	r31, 0x7F	; 127
    1f46:	3f 2e       	mov	r3, r31
    1f48:	16 c0       	rjmp	.+44     	; 0x1f76 <vfprintf+0x188>
    1f4a:	28 01       	movw	r4, r16
    1f4c:	22 e0       	ldi	r18, 0x02	; 2
    1f4e:	42 0e       	add	r4, r18
    1f50:	51 1c       	adc	r5, r1
    1f52:	f8 01       	movw	r30, r16
    1f54:	a0 80       	ld	r10, Z
    1f56:	b1 80       	ldd	r11, Z+1	; 0x01
    1f58:	36 fe       	sbrs	r3, 6
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <vfprintf+0x174>
    1f5c:	69 2d       	mov	r22, r9
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <vfprintf+0x178>
    1f62:	6f ef       	ldi	r22, 0xFF	; 255
    1f64:	7f ef       	ldi	r23, 0xFF	; 255
    1f66:	c5 01       	movw	r24, r10
    1f68:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <strnlen_P>
    1f6c:	4c 01       	movw	r8, r24
    1f6e:	f3 2d       	mov	r31, r3
    1f70:	f0 68       	ori	r31, 0x80	; 128
    1f72:	3f 2e       	mov	r3, r31
    1f74:	82 01       	movw	r16, r4
    1f76:	33 fc       	sbrc	r3, 3
    1f78:	1b c0       	rjmp	.+54     	; 0x1fb0 <vfprintf+0x1c2>
    1f7a:	82 2d       	mov	r24, r2
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	88 16       	cp	r8, r24
    1f80:	99 06       	cpc	r9, r25
    1f82:	b0 f4       	brcc	.+44     	; 0x1fb0 <vfprintf+0x1c2>
    1f84:	b6 01       	movw	r22, r12
    1f86:	80 e2       	ldi	r24, 0x20	; 32
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    1f8e:	2a 94       	dec	r2
    1f90:	f4 cf       	rjmp	.-24     	; 0x1f7a <vfprintf+0x18c>
    1f92:	f5 01       	movw	r30, r10
    1f94:	37 fc       	sbrc	r3, 7
    1f96:	85 91       	lpm	r24, Z+
    1f98:	37 fe       	sbrs	r3, 7
    1f9a:	81 91       	ld	r24, Z+
    1f9c:	5f 01       	movw	r10, r30
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    1fa6:	21 10       	cpse	r2, r1
    1fa8:	2a 94       	dec	r2
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	82 1a       	sub	r8, r18
    1fae:	91 08       	sbc	r9, r1
    1fb0:	81 14       	cp	r8, r1
    1fb2:	91 04       	cpc	r9, r1
    1fb4:	71 f7       	brne	.-36     	; 0x1f92 <vfprintf+0x1a4>
    1fb6:	e8 c0       	rjmp	.+464    	; 0x2188 <vfprintf+0x39a>
    1fb8:	84 36       	cpi	r24, 0x64	; 100
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <vfprintf+0x1d2>
    1fbc:	89 36       	cpi	r24, 0x69	; 105
    1fbe:	41 f5       	brne	.+80     	; 0x2010 <vfprintf+0x222>
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	37 fe       	sbrs	r3, 7
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <vfprintf+0x1e6>
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	0c 5f       	subi	r16, 0xFC	; 252
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <vfprintf+0x1f6>
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	07 2e       	mov	r0, r23
    1fda:	00 0c       	add	r0, r0
    1fdc:	88 0b       	sbc	r24, r24
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	0e 5f       	subi	r16, 0xFE	; 254
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	ff 76       	andi	r31, 0x6F	; 111
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	97 ff       	sbrs	r25, 7
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <vfprintf+0x212>
    1fee:	90 95       	com	r25
    1ff0:	80 95       	com	r24
    1ff2:	70 95       	com	r23
    1ff4:	61 95       	neg	r22
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	f0 68       	ori	r31, 0x80	; 128
    1ffe:	3f 2e       	mov	r3, r31
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	a3 01       	movw	r20, r6
    2006:	0e 94 2a 11 	call	0x2254	; 0x2254 <__ultoa_invert>
    200a:	88 2e       	mov	r8, r24
    200c:	86 18       	sub	r8, r6
    200e:	45 c0       	rjmp	.+138    	; 0x209a <vfprintf+0x2ac>
    2010:	85 37       	cpi	r24, 0x75	; 117
    2012:	31 f4       	brne	.+12     	; 0x2020 <vfprintf+0x232>
    2014:	23 2d       	mov	r18, r3
    2016:	2f 7e       	andi	r18, 0xEF	; 239
    2018:	b2 2e       	mov	r11, r18
    201a:	2a e0       	ldi	r18, 0x0A	; 10
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	25 c0       	rjmp	.+74     	; 0x206a <vfprintf+0x27c>
    2020:	93 2d       	mov	r25, r3
    2022:	99 7f       	andi	r25, 0xF9	; 249
    2024:	b9 2e       	mov	r11, r25
    2026:	8f 36       	cpi	r24, 0x6F	; 111
    2028:	c1 f0       	breq	.+48     	; 0x205a <vfprintf+0x26c>
    202a:	18 f4       	brcc	.+6      	; 0x2032 <vfprintf+0x244>
    202c:	88 35       	cpi	r24, 0x58	; 88
    202e:	79 f0       	breq	.+30     	; 0x204e <vfprintf+0x260>
    2030:	b5 c0       	rjmp	.+362    	; 0x219c <vfprintf+0x3ae>
    2032:	80 37       	cpi	r24, 0x70	; 112
    2034:	19 f0       	breq	.+6      	; 0x203c <vfprintf+0x24e>
    2036:	88 37       	cpi	r24, 0x78	; 120
    2038:	21 f0       	breq	.+8      	; 0x2042 <vfprintf+0x254>
    203a:	b0 c0       	rjmp	.+352    	; 0x219c <vfprintf+0x3ae>
    203c:	e9 2f       	mov	r30, r25
    203e:	e0 61       	ori	r30, 0x10	; 16
    2040:	be 2e       	mov	r11, r30
    2042:	b4 fe       	sbrs	r11, 4
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <vfprintf+0x272>
    2046:	fb 2d       	mov	r31, r11
    2048:	f4 60       	ori	r31, 0x04	; 4
    204a:	bf 2e       	mov	r11, r31
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <vfprintf+0x272>
    204e:	34 fe       	sbrs	r3, 4
    2050:	0a c0       	rjmp	.+20     	; 0x2066 <vfprintf+0x278>
    2052:	29 2f       	mov	r18, r25
    2054:	26 60       	ori	r18, 0x06	; 6
    2056:	b2 2e       	mov	r11, r18
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x278>
    205a:	28 e0       	ldi	r18, 0x08	; 8
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	05 c0       	rjmp	.+10     	; 0x206a <vfprintf+0x27c>
    2060:	20 e1       	ldi	r18, 0x10	; 16
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	02 c0       	rjmp	.+4      	; 0x206a <vfprintf+0x27c>
    2066:	20 e1       	ldi	r18, 0x10	; 16
    2068:	32 e0       	ldi	r19, 0x02	; 2
    206a:	f8 01       	movw	r30, r16
    206c:	b7 fe       	sbrs	r11, 7
    206e:	07 c0       	rjmp	.+14     	; 0x207e <vfprintf+0x290>
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	0c 5f       	subi	r16, 0xFC	; 252
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	06 c0       	rjmp	.+12     	; 0x208a <vfprintf+0x29c>
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 5f       	subi	r16, 0xFE	; 254
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	a3 01       	movw	r20, r6
    208c:	0e 94 2a 11 	call	0x2254	; 0x2254 <__ultoa_invert>
    2090:	88 2e       	mov	r8, r24
    2092:	86 18       	sub	r8, r6
    2094:	fb 2d       	mov	r31, r11
    2096:	ff 77       	andi	r31, 0x7F	; 127
    2098:	3f 2e       	mov	r3, r31
    209a:	36 fe       	sbrs	r3, 6
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <vfprintf+0x2ca>
    209e:	23 2d       	mov	r18, r3
    20a0:	2e 7f       	andi	r18, 0xFE	; 254
    20a2:	a2 2e       	mov	r10, r18
    20a4:	89 14       	cp	r8, r9
    20a6:	58 f4       	brcc	.+22     	; 0x20be <vfprintf+0x2d0>
    20a8:	34 fe       	sbrs	r3, 4
    20aa:	0b c0       	rjmp	.+22     	; 0x20c2 <vfprintf+0x2d4>
    20ac:	32 fc       	sbrc	r3, 2
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <vfprintf+0x2d4>
    20b0:	83 2d       	mov	r24, r3
    20b2:	8e 7e       	andi	r24, 0xEE	; 238
    20b4:	a8 2e       	mov	r10, r24
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <vfprintf+0x2d4>
    20b8:	b8 2c       	mov	r11, r8
    20ba:	a3 2c       	mov	r10, r3
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <vfprintf+0x2d6>
    20be:	b8 2c       	mov	r11, r8
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <vfprintf+0x2d6>
    20c2:	b9 2c       	mov	r11, r9
    20c4:	a4 fe       	sbrs	r10, 4
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <vfprintf+0x2f8>
    20c8:	fe 01       	movw	r30, r28
    20ca:	e8 0d       	add	r30, r8
    20cc:	f1 1d       	adc	r31, r1
    20ce:	80 81       	ld	r24, Z
    20d0:	80 33       	cpi	r24, 0x30	; 48
    20d2:	21 f4       	brne	.+8      	; 0x20dc <vfprintf+0x2ee>
    20d4:	9a 2d       	mov	r25, r10
    20d6:	99 7e       	andi	r25, 0xE9	; 233
    20d8:	a9 2e       	mov	r10, r25
    20da:	09 c0       	rjmp	.+18     	; 0x20ee <vfprintf+0x300>
    20dc:	a2 fe       	sbrs	r10, 2
    20de:	06 c0       	rjmp	.+12     	; 0x20ec <vfprintf+0x2fe>
    20e0:	b3 94       	inc	r11
    20e2:	b3 94       	inc	r11
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <vfprintf+0x300>
    20e6:	8a 2d       	mov	r24, r10
    20e8:	86 78       	andi	r24, 0x86	; 134
    20ea:	09 f0       	breq	.+2      	; 0x20ee <vfprintf+0x300>
    20ec:	b3 94       	inc	r11
    20ee:	a3 fc       	sbrc	r10, 3
    20f0:	11 c0       	rjmp	.+34     	; 0x2114 <vfprintf+0x326>
    20f2:	a0 fe       	sbrs	r10, 0
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <vfprintf+0x314>
    20f6:	b2 14       	cp	r11, r2
    20f8:	88 f4       	brcc	.+34     	; 0x211c <vfprintf+0x32e>
    20fa:	28 0c       	add	r2, r8
    20fc:	92 2c       	mov	r9, r2
    20fe:	9b 18       	sub	r9, r11
    2100:	0e c0       	rjmp	.+28     	; 0x211e <vfprintf+0x330>
    2102:	b2 14       	cp	r11, r2
    2104:	60 f4       	brcc	.+24     	; 0x211e <vfprintf+0x330>
    2106:	b6 01       	movw	r22, r12
    2108:	80 e2       	ldi	r24, 0x20	; 32
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2110:	b3 94       	inc	r11
    2112:	f7 cf       	rjmp	.-18     	; 0x2102 <vfprintf+0x314>
    2114:	b2 14       	cp	r11, r2
    2116:	18 f4       	brcc	.+6      	; 0x211e <vfprintf+0x330>
    2118:	2b 18       	sub	r2, r11
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <vfprintf+0x332>
    211c:	98 2c       	mov	r9, r8
    211e:	21 2c       	mov	r2, r1
    2120:	a4 fe       	sbrs	r10, 4
    2122:	10 c0       	rjmp	.+32     	; 0x2144 <vfprintf+0x356>
    2124:	b6 01       	movw	r22, r12
    2126:	80 e3       	ldi	r24, 0x30	; 48
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    212e:	a2 fe       	sbrs	r10, 2
    2130:	17 c0       	rjmp	.+46     	; 0x2160 <vfprintf+0x372>
    2132:	a1 fc       	sbrc	r10, 1
    2134:	03 c0       	rjmp	.+6      	; 0x213c <vfprintf+0x34e>
    2136:	88 e7       	ldi	r24, 0x78	; 120
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <vfprintf+0x352>
    213c:	88 e5       	ldi	r24, 0x58	; 88
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	b6 01       	movw	r22, r12
    2142:	0c c0       	rjmp	.+24     	; 0x215c <vfprintf+0x36e>
    2144:	8a 2d       	mov	r24, r10
    2146:	86 78       	andi	r24, 0x86	; 134
    2148:	59 f0       	breq	.+22     	; 0x2160 <vfprintf+0x372>
    214a:	a1 fe       	sbrs	r10, 1
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <vfprintf+0x364>
    214e:	8b e2       	ldi	r24, 0x2B	; 43
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <vfprintf+0x366>
    2152:	80 e2       	ldi	r24, 0x20	; 32
    2154:	a7 fc       	sbrc	r10, 7
    2156:	8d e2       	ldi	r24, 0x2D	; 45
    2158:	b6 01       	movw	r22, r12
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2160:	89 14       	cp	r8, r9
    2162:	38 f4       	brcc	.+14     	; 0x2172 <vfprintf+0x384>
    2164:	b6 01       	movw	r22, r12
    2166:	80 e3       	ldi	r24, 0x30	; 48
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    216e:	9a 94       	dec	r9
    2170:	f7 cf       	rjmp	.-18     	; 0x2160 <vfprintf+0x372>
    2172:	8a 94       	dec	r8
    2174:	f3 01       	movw	r30, r6
    2176:	e8 0d       	add	r30, r8
    2178:	f1 1d       	adc	r31, r1
    217a:	80 81       	ld	r24, Z
    217c:	b6 01       	movw	r22, r12
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2184:	81 10       	cpse	r8, r1
    2186:	f5 cf       	rjmp	.-22     	; 0x2172 <vfprintf+0x384>
    2188:	22 20       	and	r2, r2
    218a:	09 f4       	brne	.+2      	; 0x218e <vfprintf+0x3a0>
    218c:	42 ce       	rjmp	.-892    	; 0x1e12 <vfprintf+0x24>
    218e:	b6 01       	movw	r22, r12
    2190:	80 e2       	ldi	r24, 0x20	; 32
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2198:	2a 94       	dec	r2
    219a:	f6 cf       	rjmp	.-20     	; 0x2188 <vfprintf+0x39a>
    219c:	f6 01       	movw	r30, r12
    219e:	86 81       	ldd	r24, Z+6	; 0x06
    21a0:	97 81       	ldd	r25, Z+7	; 0x07
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <vfprintf+0x3ba>
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	2b 96       	adiw	r28, 0x0b	; 11
    21aa:	e2 e1       	ldi	r30, 0x12	; 18
    21ac:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__epilogue_restores__>

000021b0 <strnlen_P>:
    21b0:	fc 01       	movw	r30, r24
    21b2:	05 90       	lpm	r0, Z+
    21b4:	61 50       	subi	r22, 0x01	; 1
    21b6:	70 40       	sbci	r23, 0x00	; 0
    21b8:	01 10       	cpse	r0, r1
    21ba:	d8 f7       	brcc	.-10     	; 0x21b2 <strnlen_P+0x2>
    21bc:	80 95       	com	r24
    21be:	90 95       	com	r25
    21c0:	8e 0f       	add	r24, r30
    21c2:	9f 1f       	adc	r25, r31
    21c4:	08 95       	ret

000021c6 <strnlen>:
    21c6:	fc 01       	movw	r30, r24
    21c8:	61 50       	subi	r22, 0x01	; 1
    21ca:	70 40       	sbci	r23, 0x00	; 0
    21cc:	01 90       	ld	r0, Z+
    21ce:	01 10       	cpse	r0, r1
    21d0:	d8 f7       	brcc	.-10     	; 0x21c8 <strnlen+0x2>
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	8e 0f       	add	r24, r30
    21d8:	9f 1f       	adc	r25, r31
    21da:	08 95       	ret

000021dc <fputc>:
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	fb 01       	movw	r30, r22
    21e6:	23 81       	ldd	r18, Z+3	; 0x03
    21e8:	21 fd       	sbrc	r18, 1
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <fputc+0x16>
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	9f ef       	ldi	r25, 0xFF	; 255
    21f0:	2c c0       	rjmp	.+88     	; 0x224a <fputc+0x6e>
    21f2:	22 ff       	sbrs	r18, 2
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <fputc+0x46>
    21f6:	46 81       	ldd	r20, Z+6	; 0x06
    21f8:	57 81       	ldd	r21, Z+7	; 0x07
    21fa:	24 81       	ldd	r18, Z+4	; 0x04
    21fc:	35 81       	ldd	r19, Z+5	; 0x05
    21fe:	42 17       	cp	r20, r18
    2200:	53 07       	cpc	r21, r19
    2202:	44 f4       	brge	.+16     	; 0x2214 <fputc+0x38>
    2204:	a0 81       	ld	r26, Z
    2206:	b1 81       	ldd	r27, Z+1	; 0x01
    2208:	9d 01       	movw	r18, r26
    220a:	2f 5f       	subi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	20 83       	st	Z, r18
    2210:	31 83       	std	Z+1, r19	; 0x01
    2212:	8c 93       	st	X, r24
    2214:	26 81       	ldd	r18, Z+6	; 0x06
    2216:	37 81       	ldd	r19, Z+7	; 0x07
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	26 83       	std	Z+6, r18	; 0x06
    221e:	37 83       	std	Z+7, r19	; 0x07
    2220:	14 c0       	rjmp	.+40     	; 0x224a <fputc+0x6e>
    2222:	8b 01       	movw	r16, r22
    2224:	ec 01       	movw	r28, r24
    2226:	fb 01       	movw	r30, r22
    2228:	00 84       	ldd	r0, Z+8	; 0x08
    222a:	f1 85       	ldd	r31, Z+9	; 0x09
    222c:	e0 2d       	mov	r30, r0
    222e:	09 95       	icall
    2230:	89 2b       	or	r24, r25
    2232:	e1 f6       	brne	.-72     	; 0x21ec <fputc+0x10>
    2234:	d8 01       	movw	r26, r16
    2236:	16 96       	adiw	r26, 0x06	; 6
    2238:	8d 91       	ld	r24, X+
    223a:	9c 91       	ld	r25, X
    223c:	17 97       	sbiw	r26, 0x07	; 7
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	16 96       	adiw	r26, 0x06	; 6
    2242:	8d 93       	st	X+, r24
    2244:	9c 93       	st	X, r25
    2246:	17 97       	sbiw	r26, 0x07	; 7
    2248:	ce 01       	movw	r24, r28
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <__ultoa_invert>:
    2254:	fa 01       	movw	r30, r20
    2256:	aa 27       	eor	r26, r26
    2258:	28 30       	cpi	r18, 0x08	; 8
    225a:	51 f1       	breq	.+84     	; 0x22b0 <__ultoa_invert+0x5c>
    225c:	20 31       	cpi	r18, 0x10	; 16
    225e:	81 f1       	breq	.+96     	; 0x22c0 <__ultoa_invert+0x6c>
    2260:	e8 94       	clt
    2262:	6f 93       	push	r22
    2264:	6e 7f       	andi	r22, 0xFE	; 254
    2266:	6e 5f       	subi	r22, 0xFE	; 254
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	8f 4f       	sbci	r24, 0xFF	; 255
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	af 4f       	sbci	r26, 0xFF	; 255
    2270:	b1 e0       	ldi	r27, 0x01	; 1
    2272:	3e d0       	rcall	.+124    	; 0x22f0 <__ultoa_invert+0x9c>
    2274:	b4 e0       	ldi	r27, 0x04	; 4
    2276:	3c d0       	rcall	.+120    	; 0x22f0 <__ultoa_invert+0x9c>
    2278:	67 0f       	add	r22, r23
    227a:	78 1f       	adc	r23, r24
    227c:	89 1f       	adc	r24, r25
    227e:	9a 1f       	adc	r25, r26
    2280:	a1 1d       	adc	r26, r1
    2282:	68 0f       	add	r22, r24
    2284:	79 1f       	adc	r23, r25
    2286:	8a 1f       	adc	r24, r26
    2288:	91 1d       	adc	r25, r1
    228a:	a1 1d       	adc	r26, r1
    228c:	6a 0f       	add	r22, r26
    228e:	71 1d       	adc	r23, r1
    2290:	81 1d       	adc	r24, r1
    2292:	91 1d       	adc	r25, r1
    2294:	a1 1d       	adc	r26, r1
    2296:	20 d0       	rcall	.+64     	; 0x22d8 <__ultoa_invert+0x84>
    2298:	09 f4       	brne	.+2      	; 0x229c <__ultoa_invert+0x48>
    229a:	68 94       	set
    229c:	3f 91       	pop	r19
    229e:	2a e0       	ldi	r18, 0x0A	; 10
    22a0:	26 9f       	mul	r18, r22
    22a2:	11 24       	eor	r1, r1
    22a4:	30 19       	sub	r19, r0
    22a6:	30 5d       	subi	r19, 0xD0	; 208
    22a8:	31 93       	st	Z+, r19
    22aa:	de f6       	brtc	.-74     	; 0x2262 <__ultoa_invert+0xe>
    22ac:	cf 01       	movw	r24, r30
    22ae:	08 95       	ret
    22b0:	46 2f       	mov	r20, r22
    22b2:	47 70       	andi	r20, 0x07	; 7
    22b4:	40 5d       	subi	r20, 0xD0	; 208
    22b6:	41 93       	st	Z+, r20
    22b8:	b3 e0       	ldi	r27, 0x03	; 3
    22ba:	0f d0       	rcall	.+30     	; 0x22da <__ultoa_invert+0x86>
    22bc:	c9 f7       	brne	.-14     	; 0x22b0 <__ultoa_invert+0x5c>
    22be:	f6 cf       	rjmp	.-20     	; 0x22ac <__ultoa_invert+0x58>
    22c0:	46 2f       	mov	r20, r22
    22c2:	4f 70       	andi	r20, 0x0F	; 15
    22c4:	40 5d       	subi	r20, 0xD0	; 208
    22c6:	4a 33       	cpi	r20, 0x3A	; 58
    22c8:	18 f0       	brcs	.+6      	; 0x22d0 <__ultoa_invert+0x7c>
    22ca:	49 5d       	subi	r20, 0xD9	; 217
    22cc:	31 fd       	sbrc	r19, 1
    22ce:	40 52       	subi	r20, 0x20	; 32
    22d0:	41 93       	st	Z+, r20
    22d2:	02 d0       	rcall	.+4      	; 0x22d8 <__ultoa_invert+0x84>
    22d4:	a9 f7       	brne	.-22     	; 0x22c0 <__ultoa_invert+0x6c>
    22d6:	ea cf       	rjmp	.-44     	; 0x22ac <__ultoa_invert+0x58>
    22d8:	b4 e0       	ldi	r27, 0x04	; 4
    22da:	a6 95       	lsr	r26
    22dc:	97 95       	ror	r25
    22de:	87 95       	ror	r24
    22e0:	77 95       	ror	r23
    22e2:	67 95       	ror	r22
    22e4:	ba 95       	dec	r27
    22e6:	c9 f7       	brne	.-14     	; 0x22da <__ultoa_invert+0x86>
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	61 05       	cpc	r22, r1
    22ec:	71 05       	cpc	r23, r1
    22ee:	08 95       	ret
    22f0:	9b 01       	movw	r18, r22
    22f2:	ac 01       	movw	r20, r24
    22f4:	0a 2e       	mov	r0, r26
    22f6:	06 94       	lsr	r0
    22f8:	57 95       	ror	r21
    22fa:	47 95       	ror	r20
    22fc:	37 95       	ror	r19
    22fe:	27 95       	ror	r18
    2300:	ba 95       	dec	r27
    2302:	c9 f7       	brne	.-14     	; 0x22f6 <__ultoa_invert+0xa2>
    2304:	62 0f       	add	r22, r18
    2306:	73 1f       	adc	r23, r19
    2308:	84 1f       	adc	r24, r20
    230a:	95 1f       	adc	r25, r21
    230c:	a0 1d       	adc	r26, r0
    230e:	08 95       	ret

00002310 <eeprom_read_block>:
    2310:	60 50       	subi	r22, 0x00	; 0
    2312:	7c 4e       	sbci	r23, 0xEC	; 236
    2314:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <memcpy>

00002318 <eeprom_read_byte>:
    2318:	03 d0       	rcall	.+6      	; 0x2320 <eeprom_mapen>
    231a:	80 81       	ld	r24, Z
    231c:	99 27       	eor	r25, r25
    231e:	08 95       	ret

00002320 <eeprom_mapen>:
    2320:	fc 01       	movw	r30, r24
    2322:	e0 50       	subi	r30, 0x00	; 0
    2324:	fc 4e       	sbci	r31, 0xEC	; 236
    2326:	08 95       	ret

00002328 <eeprom_update_block>:
    2328:	dc 01       	movw	r26, r24
    232a:	a4 0f       	add	r26, r20
    232c:	b5 1f       	adc	r27, r21
    232e:	41 50       	subi	r20, 0x01	; 1
    2330:	50 40       	sbci	r21, 0x00	; 0
    2332:	48 f0       	brcs	.+18     	; 0x2346 <eeprom_update_block+0x1e>
    2334:	cb 01       	movw	r24, r22
    2336:	84 0f       	add	r24, r20
    2338:	95 1f       	adc	r25, r21
    233a:	2e 91       	ld	r18, -X
    233c:	0e 94 a5 11 	call	0x234a	; 0x234a <eeprom_update_r18>
    2340:	41 50       	subi	r20, 0x01	; 1
    2342:	50 40       	sbci	r21, 0x00	; 0
    2344:	d0 f7       	brcc	.-12     	; 0x233a <eeprom_update_block+0x12>
    2346:	08 95       	ret

00002348 <eeprom_update_byte>:
    2348:	26 2f       	mov	r18, r22

0000234a <eeprom_update_r18>:
    234a:	0e 94 90 11 	call	0x2320	; 0x2320 <eeprom_mapen>
    234e:	00 80       	ld	r0, Z
    2350:	02 16       	cp	r0, r18
    2352:	19 f0       	breq	.+6      	; 0x235a <eeprom_update_r18+0x10>
    2354:	0e 94 b0 11 	call	0x2360	; 0x2360 <eeprom_write_r18>
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	08 95       	ret

0000235e <eeprom_write_byte>:
    235e:	26 2f       	mov	r18, r22

00002360 <eeprom_write_r18>:
    2360:	af 93       	push	r26
    2362:	bf 93       	push	r27
    2364:	e0 e0       	ldi	r30, 0x00	; 0
    2366:	f0 e1       	ldi	r31, 0x10	; 16
    2368:	32 81       	ldd	r19, Z+2	; 0x02
    236a:	31 fd       	sbrc	r19, 1
    236c:	fd cf       	rjmp	.-6      	; 0x2368 <eeprom_write_r18+0x8>
    236e:	dc 01       	movw	r26, r24
    2370:	a0 50       	subi	r26, 0x00	; 0
    2372:	bc 4e       	sbci	r27, 0xEC	; 236
    2374:	2c 93       	st	X, r18
    2376:	2d e9       	ldi	r18, 0x9D	; 157
    2378:	24 bf       	out	0x34, r18	; 52
    237a:	23 e0       	ldi	r18, 0x03	; 3
    237c:	20 83       	st	Z, r18
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	bf 91       	pop	r27
    2382:	af 91       	pop	r26
    2384:	08 95       	ret

00002386 <__prologue_saves__>:
    2386:	2f 92       	push	r2
    2388:	3f 92       	push	r3
    238a:	4f 92       	push	r4
    238c:	5f 92       	push	r5
    238e:	6f 92       	push	r6
    2390:	7f 92       	push	r7
    2392:	8f 92       	push	r8
    2394:	9f 92       	push	r9
    2396:	af 92       	push	r10
    2398:	bf 92       	push	r11
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	ca 1b       	sub	r28, r26
    23b0:	db 0b       	sbc	r29, r27
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	09 94       	ijmp

000023b8 <__epilogue_restores__>:
    23b8:	2a 88       	ldd	r2, Y+18	; 0x12
    23ba:	39 88       	ldd	r3, Y+17	; 0x11
    23bc:	48 88       	ldd	r4, Y+16	; 0x10
    23be:	5f 84       	ldd	r5, Y+15	; 0x0f
    23c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    23c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    23c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    23c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    23c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ca:	b9 84       	ldd	r11, Y+9	; 0x09
    23cc:	c8 84       	ldd	r12, Y+8	; 0x08
    23ce:	df 80       	ldd	r13, Y+7	; 0x07
    23d0:	ee 80       	ldd	r14, Y+6	; 0x06
    23d2:	fd 80       	ldd	r15, Y+5	; 0x05
    23d4:	0c 81       	ldd	r16, Y+4	; 0x04
    23d6:	1b 81       	ldd	r17, Y+3	; 0x03
    23d8:	aa 81       	ldd	r26, Y+2	; 0x02
    23da:	b9 81       	ldd	r27, Y+1	; 0x01
    23dc:	ce 0f       	add	r28, r30
    23de:	d1 1d       	adc	r29, r1
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	ed 01       	movw	r28, r26
    23e6:	08 95       	ret

000023e8 <memcpy>:
    23e8:	fb 01       	movw	r30, r22
    23ea:	dc 01       	movw	r26, r24
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <memcpy+0xa>
    23ee:	01 90       	ld	r0, Z+
    23f0:	0d 92       	st	X+, r0
    23f2:	41 50       	subi	r20, 0x01	; 1
    23f4:	50 40       	sbci	r21, 0x00	; 0
    23f6:	d8 f7       	brcc	.-10     	; 0x23ee <memcpy+0x6>
    23f8:	08 95       	ret

000023fa <_exit>:
    23fa:	f8 94       	cli

000023fc <__stop_program>:
    23fc:	ff cf       	rjmp	.-2      	; 0x23fc <__stop_program>
