
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00002576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  00006342  00002342  000023d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000022f  00802800  00802800  00002576  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  00002618  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000721d  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000034db  00000000  00000000  00009b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000025de  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005cc  00000000  00000000  0000f620  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002012  00000000  00000000  0000fbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d33  00000000  00000000  00011bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  00012931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_17>
      48:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	72 01       	movw	r14, r4
      a2:	90 01       	movw	r18, r0
      a4:	67 02       	muls	r22, r23
      a6:	9d 02       	muls	r25, r29
      a8:	d5 02       	muls	r29, r21
      aa:	0d 03       	fmul	r16, r21
      ac:	2e 03       	fmul	r18, r22
      ae:	5d 03       	fmul	r21, r21

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	2a e2       	ldi	r18, 0x2A	; 42
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	af 32       	cpi	r26, 0x2F	; 47
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <main>
      d0:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:

volatile uint8_t button_pushed;

void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 be 07 	call	0xf7c	; 0xf7c <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	62 e4       	ldi	r22, 0x42	; 66
      e2:	73 e6       	ldi	r23, 0x63	; 99
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	61 e5       	ldi	r22, 0x51	; 81
      ee:	73 e6       	ldi	r23, 0x63	; 99
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	69 f1       	breq	.+90     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
     100:	18 f4       	brcc	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	41 f0       	breq	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     106:	72 c0       	rjmp	.+228    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f4       	brne	.+2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     10c:	47 c0       	rjmp	.+142    	; 0x19c <__EEPROM_REGION_LENGTH__+0x9c>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	5f c0       	rjmp	.+190    	; 0x1d2 <__EEPROM_REGION_LENGTH__+0xd2>
     114:	6b c0       	rjmp	.+214    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {				// See valves.h
     116:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     11a:	88 23       	and	r24, r24
     11c:	24 f4       	brge	.+8      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
				CLOSEVALVE(BLUVALVE);
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     124:	63 c0       	rjmp	.+198    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else if (BLUENABLED && BLUTHERMWARM) {
     126:	8c e0       	ldi	r24, 0x0C	; 12
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     12e:	88 23       	and	r24, r24
     130:	09 f4       	brne	.+2      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
     132:	5c c0       	rjmp	.+184    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
     134:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     138:	80 ff       	sbrs	r24, 0
     13a:	08 c0       	rjmp	.+16     	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
				OPENVALVE(BLUVALVE);
     13c:	80 e8       	ldi	r24, 0x80	; 128
     13e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     142:	e7 e0       	ldi	r30, 0x07	; 7
     144:	f8 e2       	ldi	r31, 0x28	; 40
     146:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     148:	17 86       	std	Z+15, r1	; 0x0f
     14a:	50 c0       	rjmp	.+160    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else if (BLUENABLED && !BLUTHERMWARM) {
     14c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     150:	80 fd       	sbrc	r24, 0
     152:	4c c0       	rjmp	.+152    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
				disp_coldtherm();
     154:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     158:	49 c0       	rjmp	.+146    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {				// See valves.h
     15a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     15e:	86 ff       	sbrs	r24, 6
     160:	04 c0       	rjmp	.+8      	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
				CLOSEVALVE(REDVALVE);
     162:	80 e4       	ldi	r24, 0x40	; 64
     164:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     168:	41 c0       	rjmp	.+130    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else if (REDENABLED && REDTHERMWARM) {
     16a:	8d e0       	ldi	r24, 0x0D	; 13
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     172:	88 23       	and	r24, r24
     174:	d9 f1       	breq	.+118    	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
     176:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     17a:	81 ff       	sbrs	r24, 1
     17c:	08 c0       	rjmp	.+16     	; 0x18e <__EEPROM_REGION_LENGTH__+0x8e>
				OPENVALVE(REDVALVE);
     17e:	80 e4       	ldi	r24, 0x40	; 64
     180:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     184:	e7 e0       	ldi	r30, 0x07	; 7
     186:	f8 e2       	ldi	r31, 0x28	; 40
     188:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     18a:	10 8a       	std	Z+16, r1	; 0x10
     18c:	2f c0       	rjmp	.+94     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else if (REDENABLED && !REDTHERMWARM) {
     18e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     192:	81 fd       	sbrc	r24, 1
     194:	2b c0       	rjmp	.+86     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
				disp_coldtherm();
     196:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     19a:	28 c0       	rjmp	.+80     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {				// See valves.h
     19c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1a0:	85 ff       	sbrs	r24, 5
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__EEPROM_REGION_LENGTH__+0xac>
				CLOSEVALVE(BUFVALVE);
     1a4:	80 e2       	ldi	r24, 0x20	; 32
     1a6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1aa:	20 c0       	rjmp	.+64     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else if (BUFTHERMWARM) {
     1ac:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1b0:	82 ff       	sbrs	r24, 2
     1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <__EEPROM_REGION_LENGTH__+0xc4>
				OPENVALVE(BUFVALVE);
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     1ba:	e7 e0       	ldi	r30, 0x07	; 7
     1bc:	f8 e2       	ldi	r31, 0x28	; 40
     1be:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     1c0:	11 8a       	std	Z+17, r1	; 0x11
     1c2:	14 c0       	rjmp	.+40     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else if (!BUFTHERMWARM) {
     1c4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1c8:	82 fd       	sbrc	r24, 2
     1ca:	10 c0       	rjmp	.+32     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
				disp_coldtherm();
     1cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1d0:	0d c0       	rjmp	.+26     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {				// See valves.h
     1d2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1d6:	84 ff       	sbrs	r24, 4
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__EEPROM_REGION_LENGTH__+0xe2>
				CLOSEVALVE(SUPVALVE);
     1da:	80 e1       	ldi	r24, 0x10	; 16
     1dc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1e0:	05 c0       	rjmp	.+10     	; 0x1ec <__EEPROM_REGION_LENGTH__+0xec>
			} else {
				status.supply_button_pushed = TRUE;	// Button was pushed; cleared in handle_ticks()
     1e2:	e7 e0       	ldi	r30, 0x07	; 7
     1e4:	f8 e2       	ldi	r31, 0x28	; 40
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	87 8b       	std	Z+23, r24	; 0x17
				status.supply_button_time = 0;		// # secs button has been held down
     1ea:	10 8e       	std	Z+24, r1	; 0x18

		default:
			break;
	}

	button_pushed = FALSE;
     1ec:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
     1f0:	08 95       	ret

000001f2 <clear_BUTTONS>:
}

void clear_BUTTONS(void)
{

	PORTB.INTFLAGS = 0x0F;	// Clear spurious interrupts at init
     1f2:	8f e0       	ldi	r24, 0x0F	; 15
     1f4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1f8:	08 95       	ret

000001fa <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     1fa:	e0 e2       	ldi	r30, 0x20	; 32
     1fc:	f4 e0       	ldi	r31, 0x04	; 4
     1fe:	8b e0       	ldi	r24, 0x0B	; 11
     200:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     202:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     204:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     206:	81 8b       	std	Z+17, r24	; 0x11
     208:	08 95       	ret

0000020a <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     216:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     21a:	82 ff       	sbrs	r24, 2
     21c:	07 c0       	rjmp	.+14     	; 0x22c <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     21e:	84 e0       	ldi	r24, 0x04	; 4
     220:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     22a:	20 c0       	rjmp	.+64     	; 0x26c <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     22c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     230:	83 ff       	sbrs	r24, 3
     232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     234:	88 e0       	ldi	r24, 0x08	; 8
     236:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     240:	15 c0       	rjmp	.+42     	; 0x26c <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     242:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     246:	80 ff       	sbrs	r24, 0
     248:	07 c0       	rjmp	.+14     	; 0x258 <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     250:	83 e0       	ldi	r24, 0x03	; 3
     252:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     256:	0a c0       	rjmp	.+20     	; 0x26c <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     258:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     25c:	81 ff       	sbrs	r24, 1
     25e:	06 c0       	rjmp	.+12     	; 0x26c <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     266:	84 e0       	ldi	r24, 0x04	; 4
     268:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     26c:	8f 91       	pop	r24
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     278:	4a e0       	ldi	r20, 0x0A	; 10
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	0e 94 2a 11 	call	0x2254	; 0x2254 <eeprom_read_block>
     284:	08 95       	ret

00000286 <update_VERSION>:
}

void update_VERSION(void)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	2b 97       	sbiw	r28, 0x0b	; 11
     290:	cd bf       	out	0x3d, r28	; 61
     292:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     294:	8b e0       	ldi	r24, 0x0B	; 11
     296:	e1 e6       	ldi	r30, 0x61	; 97
     298:	f3 e6       	ldi	r31, 0x63	; 99
     29a:	de 01       	movw	r26, r28
     29c:	11 96       	adiw	r26, 0x01	; 1
     29e:	01 90       	ld	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	8a 95       	dec	r24
     2a4:	e1 f7       	brne	.-8      	; 0x29e <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     2a6:	4a e0       	ldi	r20, 0x0A	; 10
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	ce 01       	movw	r24, r28
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	0e 94 36 11 	call	0x226c	; 0x226c <eeprom_update_block>
}
     2b6:	2b 96       	adiw	r28, 0x0b	; 11
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	aa 97       	sbiw	r28, 0x2a	; 42
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	88 30       	cpi	r24, 0x08	; 8
     2d4:	91 05       	cpc	r25, r1
     2d6:	08 f0       	brcs	.+2      	; 0x2da <display+0x18>
     2d8:	1f c2       	rjmp	.+1086   	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
     2da:	fc 01       	movw	r30, r24
     2dc:	e0 5b       	subi	r30, 0xB0	; 176
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     2e4:	8f e0       	ldi	r24, 0x0F	; 15
     2e6:	ec e6       	ldi	r30, 0x6C	; 108
     2e8:	f3 e6       	ldi	r31, 0x63	; 99
     2ea:	de 01       	movw	r26, r28
     2ec:	11 96       	adiw	r26, 0x01	; 1
     2ee:	01 90       	ld	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	8a 95       	dec	r24
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <display+0x2c>
			get_VERSION(status.version);
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	98 e2       	ldi	r25, 0x28	; 40
     2fa:	0e 94 3c 01 	call	0x278	; 0x278 <get_VERSION>
			strcpy(line2, "   ");
     2fe:	80 e2       	ldi	r24, 0x20	; 32
     300:	90 e2       	ldi	r25, 0x20	; 32
     302:	8e 8b       	std	Y+22, r24	; 0x16
     304:	9f 8b       	std	Y+23, r25	; 0x17
     306:	80 e2       	ldi	r24, 0x20	; 32
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	88 8f       	std	Y+24, r24	; 0x18
     30c:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     30e:	67 e0       	ldi	r22, 0x07	; 7
     310:	78 e2       	ldi	r23, 0x28	; 40
     312:	ce 01       	movw	r24, r28
     314:	46 96       	adiw	r24, 0x16	; 22
     316:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strcat>
			screen_value = SCRVERSION;
     31a:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
     31e:	10 c2       	rjmp	.+1056   	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     320:	80 e1       	ldi	r24, 0x10	; 16
     322:	eb e7       	ldi	r30, 0x7B	; 123
     324:	f3 e6       	ldi	r31, 0x63	; 99
     326:	de 01       	movw	r26, r28
     328:	11 96       	adiw	r26, 0x01	; 1
     32a:	01 90       	ld	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	8a 95       	dec	r24
     330:	e1 f7       	brne	.-8      	; 0x32a <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     332:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     336:	84 ff       	sbrs	r24, 4
     338:	0a c0       	rjmp	.+20     	; 0x34e <display+0x8c>
				strcpy(line2, " O  ");
     33a:	85 e0       	ldi	r24, 0x05	; 5
     33c:	eb e8       	ldi	r30, 0x8B	; 139
     33e:	f3 e6       	ldi	r31, 0x63	; 99
     340:	de 01       	movw	r26, r28
     342:	56 96       	adiw	r26, 0x16	; 22
     344:	01 90       	ld	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	8a 95       	dec	r24
     34a:	e1 f7       	brne	.-8      	; 0x344 <display+0x82>
     34c:	09 c0       	rjmp	.+18     	; 0x360 <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     34e:	85 e0       	ldi	r24, 0x05	; 5
     350:	e0 e9       	ldi	r30, 0x90	; 144
     352:	f3 e6       	ldi	r31, 0x63	; 99
     354:	de 01       	movw	r26, r28
     356:	56 96       	adiw	r26, 0x16	; 22
     358:	01 90       	ld	r0, Z+
     35a:	0d 92       	st	X+, r0
     35c:	8a 95       	dec	r24
     35e:	e1 f7       	brne	.-8      	; 0x358 <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     360:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     364:	85 ff       	sbrs	r24, 5
     366:	0e c0       	rjmp	.+28     	; 0x384 <display+0xc2>
				strcat(line2, " O  ");
     368:	de 01       	movw	r26, r28
     36a:	56 96       	adiw	r26, 0x16	; 22
     36c:	0d 90       	ld	r0, X+
     36e:	00 20       	and	r0, r0
     370:	e9 f7       	brne	.-6      	; 0x36c <display+0xaa>
     372:	11 97       	sbiw	r26, 0x01	; 1
     374:	85 e0       	ldi	r24, 0x05	; 5
     376:	eb e8       	ldi	r30, 0x8B	; 139
     378:	f3 e6       	ldi	r31, 0x63	; 99
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <display+0xb8>
     382:	1f c0       	rjmp	.+62     	; 0x3c2 <display+0x100>
			} else if (status.maxopen_BUF) {
     384:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
     388:	88 23       	and	r24, r24
     38a:	71 f0       	breq	.+28     	; 0x3a8 <display+0xe6>
				strcat(line2, " T  ");
     38c:	de 01       	movw	r26, r28
     38e:	56 96       	adiw	r26, 0x16	; 22
     390:	0d 90       	ld	r0, X+
     392:	00 20       	and	r0, r0
     394:	e9 f7       	brne	.-6      	; 0x390 <display+0xce>
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	85 e0       	ldi	r24, 0x05	; 5
     39a:	e5 e9       	ldi	r30, 0x95	; 149
     39c:	f3 e6       	ldi	r31, 0x63	; 99
     39e:	01 90       	ld	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	8a 95       	dec	r24
     3a4:	e1 f7       	brne	.-8      	; 0x39e <display+0xdc>
     3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <display+0x100>
			} else {
				strcat(line2, " C  ");
     3a8:	de 01       	movw	r26, r28
     3aa:	56 96       	adiw	r26, 0x16	; 22
     3ac:	0d 90       	ld	r0, X+
     3ae:	00 20       	and	r0, r0
     3b0:	e9 f7       	brne	.-6      	; 0x3ac <display+0xea>
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	e0 e9       	ldi	r30, 0x90	; 144
     3b8:	f3 e6       	ldi	r31, 0x63	; 99
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	8a 95       	dec	r24
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <display+0xf8>
			}
			if (!REDENABLED) {					// eeprom.h
     3c2:	8d e0       	ldi	r24, 0x0D	; 13
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     3ca:	81 11       	cpse	r24, r1
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <display+0x128>
				strcat(line2, " X  ");
     3ce:	de 01       	movw	r26, r28
     3d0:	56 96       	adiw	r26, 0x16	; 22
     3d2:	0d 90       	ld	r0, X+
     3d4:	00 20       	and	r0, r0
     3d6:	e9 f7       	brne	.-6      	; 0x3d2 <display+0x110>
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	85 e0       	ldi	r24, 0x05	; 5
     3dc:	ea e9       	ldi	r30, 0x9A	; 154
     3de:	f3 e6       	ldi	r31, 0x63	; 99
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	8a 95       	dec	r24
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <display+0x11e>
     3e8:	31 c0       	rjmp	.+98     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else if (REDVALVEOPEN) {			// valves.h
     3ea:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3ee:	86 ff       	sbrs	r24, 6
     3f0:	0e c0       	rjmp	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				strcat(line2, " O  ");
     3f2:	de 01       	movw	r26, r28
     3f4:	56 96       	adiw	r26, 0x16	; 22
     3f6:	0d 90       	ld	r0, X+
     3f8:	00 20       	and	r0, r0
     3fa:	e9 f7       	brne	.-6      	; 0x3f6 <display+0x134>
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	85 e0       	ldi	r24, 0x05	; 5
     400:	eb e8       	ldi	r30, 0x8B	; 139
     402:	f3 e6       	ldi	r31, 0x63	; 99
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	8a 95       	dec	r24
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	1f c0       	rjmp	.+62     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else if (status.maxopen_RED) {
     40e:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
     412:	88 23       	and	r24, r24
     414:	71 f0       	breq	.+28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				strcat(line2, " T  ");
     416:	de 01       	movw	r26, r28
     418:	56 96       	adiw	r26, 0x16	; 22
     41a:	0d 90       	ld	r0, X+
     41c:	00 20       	and	r0, r0
     41e:	e9 f7       	brne	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     420:	11 97       	sbiw	r26, 0x01	; 1
     422:	85 e0       	ldi	r24, 0x05	; 5
     424:	e5 e9       	ldi	r30, 0x95	; 149
     426:	f3 e6       	ldi	r31, 0x63	; 99
     428:	01 90       	ld	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	8a 95       	dec	r24
     42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     430:	0d c0       	rjmp	.+26     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			} else {
				strcat(line2, " C  ");
     432:	de 01       	movw	r26, r28
     434:	56 96       	adiw	r26, 0x16	; 22
     436:	0d 90       	ld	r0, X+
     438:	00 20       	and	r0, r0
     43a:	e9 f7       	brne	.-6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43c:	11 97       	sbiw	r26, 0x01	; 1
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	e0 e9       	ldi	r30, 0x90	; 144
     442:	f3 e6       	ldi	r31, 0x63	; 99
     444:	01 90       	ld	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	8a 95       	dec	r24
     44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			}
			if (!BLUENABLED) {
     44c:	8c e0       	ldi	r24, 0x0C	; 12
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     454:	81 11       	cpse	r24, r1
     456:	0c c0       	rjmp	.+24     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				strcat(line2, " X");
     458:	fe 01       	movw	r30, r28
     45a:	76 96       	adiw	r30, 0x16	; 22
     45c:	01 90       	ld	r0, Z+
     45e:	00 20       	and	r0, r0
     460:	e9 f7       	brne	.-6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	98 e5       	ldi	r25, 0x58	; 88
     468:	80 83       	st	Z, r24
     46a:	91 83       	std	Z+1, r25	; 0x01
     46c:	12 82       	std	Z+2, r1	; 0x02
     46e:	2b c0       	rjmp	.+86     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			} else if (BLUVALVEOPEN) {			// valves.h
     470:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     474:	88 23       	and	r24, r24
     476:	64 f4       	brge	.+24     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				strcat(line2, " O");
     478:	fe 01       	movw	r30, r28
     47a:	76 96       	adiw	r30, 0x16	; 22
     47c:	01 90       	ld	r0, Z+
     47e:	00 20       	and	r0, r0
     480:	e9 f7       	brne	.-6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     482:	31 97       	sbiw	r30, 0x01	; 1
     484:	80 e2       	ldi	r24, 0x20	; 32
     486:	9f e4       	ldi	r25, 0x4F	; 79
     488:	80 83       	st	Z, r24
     48a:	91 83       	std	Z+1, r25	; 0x01
     48c:	12 82       	std	Z+2, r1	; 0x02
     48e:	1b c0       	rjmp	.+54     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			} else if (status.maxopen_BLU) {
     490:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
     494:	88 23       	and	r24, r24
     496:	61 f0       	breq	.+24     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				strcat(line2, " T");
     498:	fe 01       	movw	r30, r28
     49a:	76 96       	adiw	r30, 0x16	; 22
     49c:	01 90       	ld	r0, Z+
     49e:	00 20       	and	r0, r0
     4a0:	e9 f7       	brne	.-6      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	80 e2       	ldi	r24, 0x20	; 32
     4a6:	94 e5       	ldi	r25, 0x54	; 84
     4a8:	80 83       	st	Z, r24
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	12 82       	std	Z+2, r1	; 0x02
     4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			} else {
				strcat(line2, " C");
     4b0:	fe 01       	movw	r30, r28
     4b2:	76 96       	adiw	r30, 0x16	; 22
     4b4:	01 90       	ld	r0, Z+
     4b6:	00 20       	and	r0, r0
     4b8:	e9 f7       	brne	.-6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	93 e4       	ldi	r25, 0x43	; 67
     4c0:	80 83       	st	Z, r24
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     4cc:	39 c1       	rjmp	.+626    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     4ce:	8d e0       	ldi	r24, 0x0D	; 13
     4d0:	ef e9       	ldi	r30, 0x9F	; 159
     4d2:	f3 e6       	ldi	r31, 0x63	; 99
     4d4:	de 01       	movw	r26, r28
     4d6:	11 96       	adiw	r26, 0x01	; 1
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	8a 95       	dec	r24
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			if (status.next_fill < 2) {
     4e0:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <status+0x15>
     4e4:	82 30       	cpi	r24, 0x02	; 2
     4e6:	98 f4       	brcc	.+38     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
				sprintf(line2, "%d minute", status.next_fill);
     4e8:	1f 92       	push	r1
     4ea:	8f 93       	push	r24
     4ec:	8c ea       	ldi	r24, 0xAC	; 172
     4ee:	93 e6       	ldi	r25, 0x63	; 99
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	ce 01       	movw	r24, r28
     4f6:	46 96       	adiw	r24, 0x16	; 22
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	12 c0       	rjmp	.+36     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     50e:	1f 92       	push	r1
     510:	8f 93       	push	r24
     512:	86 eb       	ldi	r24, 0xB6	; 182
     514:	93 e6       	ldi	r25, 0x63	; 99
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	ce 01       	movw	r24, r28
     51c:	46 96       	adiw	r24, 0x16	; 22
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     538:	03 c1       	rjmp	.+518    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     53a:	8e e0       	ldi	r24, 0x0E	; 14
     53c:	e1 ec       	ldi	r30, 0xC1	; 193
     53e:	f3 e6       	ldi	r31, 0x63	; 99
     540:	de 01       	movw	r26, r28
     542:	11 96       	adiw	r26, 0x01	; 1
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	8a 95       	dec	r24
     54a:	e1 f7       	brne	.-8      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
			if (FILLINTERVAL == 1) {			// eeprom.h
     54c:	8a e0       	ldi	r24, 0x0A	; 10
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	99 f4       	brne	.+38     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				sprintf(line2, "%d minute", FILLINTERVAL);
     558:	1f 92       	push	r1
     55a:	8f 93       	push	r24
     55c:	8c ea       	ldi	r24, 0xAC	; 172
     55e:	93 e6       	ldi	r25, 0x63	; 99
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	ce 01       	movw	r24, r28
     566:	46 96       	adiw	r24, 0x16	; 22
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	12 c0       	rjmp	.+36     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     57e:	1f 92       	push	r1
     580:	8f 93       	push	r24
     582:	86 eb       	ldi	r24, 0xB6	; 182
     584:	93 e6       	ldi	r25, 0x63	; 99
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	ce 01       	movw	r24, r28
     58c:	46 96       	adiw	r24, 0x16	; 22
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     5a8:	cb c0       	rjmp	.+406    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     5aa:	8e e0       	ldi	r24, 0x0E	; 14
     5ac:	ef ec       	ldi	r30, 0xCF	; 207
     5ae:	f3 e6       	ldi	r31, 0x63	; 99
     5b0:	de 01       	movw	r26, r28
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	8a 95       	dec	r24
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			if (MAXOPENTIME < 2) {				// eeprom.h
     5bc:	8b e0       	ldi	r24, 0x0B	; 11
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	98 f4       	brcc	.+38     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
				sprintf(line2, "%d minute", MAXOPENTIME);
     5c8:	1f 92       	push	r1
     5ca:	8f 93       	push	r24
     5cc:	8c ea       	ldi	r24, 0xAC	; 172
     5ce:	93 e6       	ldi	r25, 0x63	; 99
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	ce 01       	movw	r24, r28
     5d6:	46 96       	adiw	r24, 0x16	; 22
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	12 c0       	rjmp	.+36     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     5ee:	1f 92       	push	r1
     5f0:	8f 93       	push	r24
     5f2:	86 eb       	ldi	r24, 0xB6	; 182
     5f4:	93 e6       	ldi	r25, 0x63	; 99
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	ce 01       	movw	r24, r28
     5fc:	46 96       	adiw	r24, 0x16	; 22
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     612:	84 e0       	ldi	r24, 0x04	; 4
     614:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     618:	93 c0       	rjmp	.+294    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	ed ed       	ldi	r30, 0xDD	; 221
     61e:	f3 e6       	ldi	r31, 0x63	; 99
     620:	de 01       	movw	r26, r28
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	01 90       	ld	r0, Z+
     626:	0d 92       	st	X+, r0
     628:	8a 95       	dec	r24
     62a:	e1 f7       	brne	.-8      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
			sprintf(line2, "%d kPa", status.pressure);
     62c:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <status+0x1a>
     630:	1f 92       	push	r1
     632:	8f 93       	push	r24
     634:	8a ee       	ldi	r24, 0xEA	; 234
     636:	93 e6       	ldi	r25, 0x63	; 99
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	ce 01       	movw	r24, r28
     63e:	46 96       	adiw	r24, 0x16	; 22
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
			screen_value = SCRPRESSURE;
     648:	85 e0       	ldi	r24, 0x05	; 5
     64a:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	72 c0       	rjmp	.+228    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     65c:	8c e0       	ldi	r24, 0x0C	; 12
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     664:	88 23       	and	r24, r24
     666:	99 f0       	breq	.+38     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
				strcpy(line1, "BLUE is ENABLED");
     668:	80 e1       	ldi	r24, 0x10	; 16
     66a:	e1 ef       	ldi	r30, 0xF1	; 241
     66c:	f3 e6       	ldi	r31, 0x63	; 99
     66e:	de 01       	movw	r26, r28
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	01 90       	ld	r0, Z+
     674:	0d 92       	st	X+, r0
     676:	8a 95       	dec	r24
     678:	e1 f7       	brne	.-8      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
				strcpy(line2, "Push to disable");
     67a:	80 e1       	ldi	r24, 0x10	; 16
     67c:	e1 e0       	ldi	r30, 0x01	; 1
     67e:	f4 e6       	ldi	r31, 0x64	; 100
     680:	de 01       	movw	r26, r28
     682:	56 96       	adiw	r26, 0x16	; 22
     684:	01 90       	ld	r0, Z+
     686:	0d 92       	st	X+, r0
     688:	8a 95       	dec	r24
     68a:	e1 f7       	brne	.-8      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     68c:	12 c0       	rjmp	.+36     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
			} else {
				strcpy(line1, "Blue is DISABLED");
     68e:	81 e1       	ldi	r24, 0x11	; 17
     690:	e1 e1       	ldi	r30, 0x11	; 17
     692:	f4 e6       	ldi	r31, 0x64	; 100
     694:	de 01       	movw	r26, r28
     696:	11 96       	adiw	r26, 0x01	; 1
     698:	01 90       	ld	r0, Z+
     69a:	0d 92       	st	X+, r0
     69c:	8a 95       	dec	r24
     69e:	e1 f7       	brne	.-8      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
				strcpy(line2, "Push to enable");
     6a0:	8f e0       	ldi	r24, 0x0F	; 15
     6a2:	e2 e2       	ldi	r30, 0x22	; 34
     6a4:	f4 e6       	ldi	r31, 0x64	; 100
     6a6:	de 01       	movw	r26, r28
     6a8:	56 96       	adiw	r26, 0x16	; 22
     6aa:	01 90       	ld	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	8a 95       	dec	r24
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     6b8:	43 c0       	rjmp	.+134    	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     6ba:	8d e0       	ldi	r24, 0x0D	; 13
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     6c2:	88 23       	and	r24, r24
     6c4:	99 f0       	breq	.+38     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
				strcpy(line1, "RED is ENABLED");
     6c6:	8f e0       	ldi	r24, 0x0F	; 15
     6c8:	e1 e3       	ldi	r30, 0x31	; 49
     6ca:	f4 e6       	ldi	r31, 0x64	; 100
     6cc:	de 01       	movw	r26, r28
     6ce:	11 96       	adiw	r26, 0x01	; 1
     6d0:	01 90       	ld	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	8a 95       	dec	r24
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
				strcpy(line2, "Push to disable");
     6d8:	80 e1       	ldi	r24, 0x10	; 16
     6da:	e1 e0       	ldi	r30, 0x01	; 1
     6dc:	f4 e6       	ldi	r31, 0x64	; 100
     6de:	de 01       	movw	r26, r28
     6e0:	56 96       	adiw	r26, 0x16	; 22
     6e2:	01 90       	ld	r0, Z+
     6e4:	0d 92       	st	X+, r0
     6e6:	8a 95       	dec	r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6ea:	12 c0       	rjmp	.+36     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
			} else {
				strcpy(line1, "RED is DISABLED");
     6ec:	80 e1       	ldi	r24, 0x10	; 16
     6ee:	e0 e4       	ldi	r30, 0x40	; 64
     6f0:	f4 e6       	ldi	r31, 0x64	; 100
     6f2:	de 01       	movw	r26, r28
     6f4:	11 96       	adiw	r26, 0x01	; 1
     6f6:	01 90       	ld	r0, Z+
     6f8:	0d 92       	st	X+, r0
     6fa:	8a 95       	dec	r24
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
				strcpy(line2, "Push to enable");
     6fe:	8f e0       	ldi	r24, 0x0F	; 15
     700:	e2 e2       	ldi	r30, 0x22	; 34
     702:	f4 e6       	ldi	r31, 0x64	; 100
     704:	de 01       	movw	r26, r28
     706:	56 96       	adiw	r26, 0x16	; 22
     708:	01 90       	ld	r0, Z+
     70a:	0d 92       	st	X+, r0
     70c:	8a 95       	dec	r24
     70e:	e1 f7       	brne	.-8      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     710:	87 e0       	ldi	r24, 0x07	; 7
     712:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     716:	14 c0       	rjmp	.+40     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>

		default:
			strcpy(line1, "default");
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	e0 e5       	ldi	r30, 0x50	; 80
     71c:	f4 e6       	ldi	r31, 0x64	; 100
     71e:	de 01       	movw	r26, r28
     720:	11 96       	adiw	r26, 0x01	; 1
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	8a 95       	dec	r24
     728:	e1 f7       	brne	.-8      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
			strcpy(line2, "overrun");
     72a:	88 e0       	ldi	r24, 0x08	; 8
     72c:	e8 e5       	ldi	r30, 0x58	; 88
     72e:	f4 e6       	ldi	r31, 0x64	; 100
     730:	de 01       	movw	r26, r28
     732:	56 96       	adiw	r26, 0x16	; 22
     734:	01 90       	ld	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	8a 95       	dec	r24
     73a:	e1 f7       	brne	.-8      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
			screen_value = SCRVERSION;			// encoder.h
     73c:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	writestr_OLED(0, line2, 2);
     74e:	42 e0       	ldi	r20, 0x02	; 2
     750:	be 01       	movw	r22, r28
     752:	6a 5e       	subi	r22, 0xEA	; 234
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
}
     75c:	aa 96       	adiw	r28, 0x2a	; 42
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	de bf       	out	0x3e, r29	; 62
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	81 11       	cpse	r24, r1
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	8c e0       	ldi	r24, 0x0C	; 12
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 46 11 	call	0x228c	; 0x228c <eeprom_update_byte>
	encoder_sensed = FALSE;
     77e:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     782:	86 e0       	ldi	r24, 0x06	; 6
     784:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
     788:	08 95       	ret

0000078a <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     78a:	8d e0       	ldi	r24, 0x0D	; 13
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	81 11       	cpse	r24, r1
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	8d e0       	ldi	r24, 0x0D	; 13
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 46 11 	call	0x228c	; 0x228c <eeprom_update_byte>
	encoder_sensed = FALSE;
     7a0:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     7a4:	87 e0       	ldi	r24, 0x07	; 7
     7a6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
     7aa:	08 95       	ret

000007ac <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	65 97       	sbiw	r28, 0x15	; 21
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;				// eeprom.h
     7c2:	8a e0       	ldi	r24, 0x0A	; 10
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     7ca:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     7ce:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	a9 f4       	brne	.+42     	; 0x800 <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     7d6:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     7da:	1f 92       	push	r1
     7dc:	8f 93       	push	r24
     7de:	8c ea       	ldi	r24, 0xAC	; 172
     7e0:	93 e6       	ldi	r25, 0x63	; 99
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	14 c0       	rjmp	.+40     	; 0x828 <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     800:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     804:	1f 92       	push	r1
     806:	8f 93       	push	r24
     808:	86 eb       	ldi	r24, 0xB6	; 182
     80a:	93 e6       	ldi	r25, 0x63	; 99
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	60 e6       	ldi	r22, 0x60	; 96
     82c:	74 e6       	ldi	r23, 0x64	; 100
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     834:	42 e0       	ldi	r20, 0x02	; 2
     836:	be 01       	movw	r22, r28
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     842:	0f 2e       	mov	r0, r31
     844:	fe ef       	ldi	r31, 0xFE	; 254
     846:	ef 2e       	mov	r14, r31
     848:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     84a:	68 94       	set
     84c:	ff 24       	eor	r15, r15
     84e:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     850:	06 eb       	ldi	r16, 0xB6	; 182
     852:	13 e6       	ldi	r17, 0x63	; 99
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     854:	32 c0       	rjmp	.+100    	; 0x8ba <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     856:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     85a:	87 30       	cpi	r24, 0x07	; 7
     85c:	71 f5       	brne	.+92     	; 0x8ba <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     85e:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	18 f4       	brcc	.+6      	; 0x86c <change_FILLINT+0xc0>
				encoder_value = 2;
     866:	f0 92 24 28 	sts	0x2824, r15	; 0x802824 <encoder_value>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     86c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     870:	8f 3f       	cpi	r24, 0xFF	; 255
     872:	11 f4       	brne	.+4      	; 0x878 <change_FILLINT+0xcc>
				encoder_value = 254;
     874:	e0 92 24 28 	sts	0x2824, r14	; 0x802824 <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     878:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     87c:	1f 92       	push	r1
     87e:	8f 93       	push	r24
     880:	1f 93       	push	r17
     882:	0f 93       	push	r16
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	8c 0f       	add	r24, r28
     88a:	9d 1f       	adc	r25, r29
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	61 e7       	ldi	r22, 0x71	; 113
     898:	74 e6       	ldi	r23, 0x64	; 100
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     8a0:	4f 2d       	mov	r20, r15
     8a2:	be 01       	movw	r22, r28
     8a4:	6f 5f       	subi	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8ba:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     8be:	85 30       	cpi	r24, 0x05	; 5
     8c0:	51 f6       	brne	.-108    	; 0x856 <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     8c2:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     8c6:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     8ca:	8a e0       	ldi	r24, 0x0A	; 10
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 46 11 	call	0x228c	; 0x228c <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     8d2:	8b e0       	ldi	r24, 0x0B	; 11
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     8da:	18 2f       	mov	r17, r24
     8dc:	8a e0       	ldi	r24, 0x0A	; 10
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     8e4:	18 17       	cp	r17, r24
     8e6:	30 f0       	brcs	.+12     	; 0x8f4 <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     8e8:	6f ef       	ldi	r22, 0xFF	; 255
     8ea:	68 0f       	add	r22, r24
     8ec:	8b e0       	ldi	r24, 0x0B	; 11
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 46 11 	call	0x228c	; 0x228c <eeprom_update_byte>
	}
	display(SCRFILLINT);
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
}
     8fa:	65 96       	adiw	r28, 0x15	; 21
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	65 97       	sbiw	r28, 0x15	; 21
     924:	cd bf       	out	0x3d, r28	; 61
     926:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;			// eeprom.h
     928:	8b e0       	ldi	r24, 0x0B	; 11
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     930:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     934:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	a9 f4       	brne	.+42     	; 0x966 <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     93c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     940:	1f 92       	push	r1
     942:	8f 93       	push	r24
     944:	8c ea       	ldi	r24, 0xAC	; 172
     946:	93 e6       	ldi	r25, 0x63	; 99
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	14 c0       	rjmp	.+40     	; 0x98e <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     966:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     96a:	1f 92       	push	r1
     96c:	8f 93       	push	r24
     96e:	86 eb       	ldi	r24, 0xB6	; 182
     970:	93 e6       	ldi	r25, 0x63	; 99
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	61 e8       	ldi	r22, 0x81	; 129
     992:	74 e6       	ldi	r23, 0x64	; 100
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     99a:	42 e0       	ldi	r20, 0x02	; 2
     99c:	be 01       	movw	r22, r28
     99e:	6f 5f       	subi	r22, 0xFF	; 255
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     9a8:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     9aa:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f6 eb       	ldi	r31, 0xB6	; 182
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f3 e6       	ldi	r31, 0x63	; 99
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     9b8:	0f 2e       	mov	r0, r31
     9ba:	fc ea       	ldi	r31, 0xAC	; 172
     9bc:	cf 2e       	mov	r12, r31
     9be:	f3 e6       	ldi	r31, 0x63	; 99
     9c0:	df 2e       	mov	r13, r31
     9c2:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     9c4:	57 c0       	rjmp	.+174    	; 0xa74 <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     9c6:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     9ca:	87 30       	cpi	r24, 0x07	; 7
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <change_MAXOPENTIME+0xc2>
     9ce:	52 c0       	rjmp	.+164    	; 0xa74 <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     9d0:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     9d4:	81 11       	cpse	r24, r1
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     9d8:	10 93 24 28 	sts	0x2824, r17	; 0x802824 <encoder_value>
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     9de:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     9e2:	8f 3f       	cpi	r24, 0xFF	; 255
     9e4:	11 f4       	brne	.+4      	; 0x9ea <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     9e6:	00 93 24 28 	sts	0x2824, r16	; 0x802824 <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     9ea:	8a e0       	ldi	r24, 0x0A	; 10
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     9f2:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <encoder_value>
     9f6:	98 17       	cp	r25, r24
     9f8:	18 f0       	brcs	.+6      	; 0xa00 <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     9fa:	81 50       	subi	r24, 0x01	; 1
     9fc:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			if (encoder_value == 1) {
     a00:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	a9 f4       	brne	.+42     	; 0xa32 <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     a08:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a0c:	1f 92       	push	r1
     a0e:	8f 93       	push	r24
     a10:	df 92       	push	r13
     a12:	cf 92       	push	r12
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	8c 0f       	add	r24, r28
     a1a:	9d 1f       	adc	r25, r29
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	14 c0       	rjmp	.+40     	; 0xa5a <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a32:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a36:	1f 92       	push	r1
     a38:	8f 93       	push	r24
     a3a:	ff 92       	push	r15
     a3c:	ef 92       	push	r14
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	8c 0f       	add	r24, r28
     a44:	9d 1f       	adc	r25, r29
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     a5a:	41 2f       	mov	r20, r17
     a5c:	61 e8       	ldi	r22, 0x81	; 129
     a5e:	74 e6       	ldi	r23, 0x64	; 100
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     a66:	42 e0       	ldi	r20, 0x02	; 2
     a68:	be 01       	movw	r22, r28
     a6a:	6f 5f       	subi	r22, 0xFF	; 255
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a74:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     a78:	85 30       	cpi	r24, 0x05	; 5
     a7a:	09 f0       	breq	.+2      	; 0xa7e <change_MAXOPENTIME+0x170>
     a7c:	a4 cf       	rjmp	.-184    	; 0x9c6 <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     a7e:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     a82:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     a86:	8b e0       	ldi	r24, 0x0B	; 11
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 46 11 	call	0x228c	; 0x228c <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>

}
     a94:	65 96       	adiw	r28, 0x15	; 21
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     aac:	e0 e4       	ldi	r30, 0x40	; 64
     aae:	f4 e0       	ldi	r31, 0x04	; 4
     ab0:	8b e0       	ldi	r24, 0x0B	; 11
     ab2:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     ab4:	98 e0       	ldi	r25, 0x08	; 8
     ab6:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     ab8:	81 8b       	std	Z+17, r24	; 0x11
     aba:	08 95       	ret

00000abc <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     abc:	8c e0       	ldi	r24, 0x0C	; 12
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     ac4:	88 23       	and	r24, r24
     ac6:	79 f0       	breq	.+30     	; 0xae6 <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     ac8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     acc:	88 23       	and	r24, r24
     ace:	5c f0       	brlt	.+22     	; 0xae6 <start_FILL+0x2a>
     ad0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     ad8:	80 e8       	ldi	r24, 0x80	; 128
     ada:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     ade:	e7 e0       	ldi	r30, 0x07	; 7
     ae0:	f8 e2       	ldi	r31, 0x28	; 40
     ae2:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     ae4:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     aee:	88 23       	and	r24, r24
     af0:	79 f0       	breq	.+30     	; 0xb10 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     af2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     af6:	86 fd       	sbrc	r24, 6
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <start_FILL+0x54>
     afa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     afe:	81 ff       	sbrs	r24, 1
     b00:	07 c0       	rjmp	.+14     	; 0xb10 <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     b02:	80 e4       	ldi	r24, 0x40	; 64
     b04:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     b08:	e7 e0       	ldi	r30, 0x07	; 7
     b0a:	f8 e2       	ldi	r31, 0x28	; 40
     b0c:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     b0e:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     b10:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	11 f4       	brne	.+4      	; 0xb1c <start_FILL+0x60>
		display(SCRVALVES);
     b18:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
	}
	status.next_fill = FILLINTERVAL;
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     b24:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <status+0x15>
     b28:	08 95       	ret

00000b2a <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     b2a:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <display_off>
     b2e:	88 23       	and	r24, r24
     b30:	29 f0       	breq	.+10     	; 0xb3c <handle_encoder+0x12>
		display(screen_value);
     b32:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b36:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
     b3a:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     b3c:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b40:	87 30       	cpi	r24, 0x07	; 7
     b42:	a9 f4       	brne	.+42     	; 0xb6e <handle_encoder+0x44>
		encoder_sensed = FALSE;
     b44:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     b48:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b4c:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <encoder_change>
     b50:	89 0f       	add	r24, r25
     b52:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		if (screen_value < 0) {
     b56:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     b5a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b5e:	87 70       	andi	r24, 0x07	; 7
     b60:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		}
		display(screen_value);
     b64:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b68:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
     b6c:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     b6e:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b72:	85 30       	cpi	r24, 0x05	; 5
     b74:	f9 f4       	brne	.+62     	; 0xbb4 <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     b76:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		switch (screen_value) {
     b7a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	89 f0       	breq	.+34     	; 0xba4 <handle_encoder+0x7a>
     b82:	28 f4       	brcc	.+10     	; 0xb8e <handle_encoder+0x64>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	41 f0       	breq	.+16     	; 0xb98 <handle_encoder+0x6e>
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	49 f0       	breq	.+18     	; 0xb9e <handle_encoder+0x74>
     b8c:	08 95       	ret
     b8e:	86 30       	cpi	r24, 0x06	; 6
     b90:	61 f0       	breq	.+24     	; 0xbaa <handle_encoder+0x80>
     b92:	87 30       	cpi	r24, 0x07	; 7
     b94:	69 f0       	breq	.+26     	; 0xbb0 <handle_encoder+0x86>
     b96:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     b98:	0e 94 5e 05 	call	0xabc	; 0xabc <start_FILL>
				break;
     b9c:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     b9e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <change_FILLINT>
				break;
     ba2:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     ba4:	0e 94 87 04 	call	0x90e	; 0x90e <change_MAXOPENTIME>
				break;
     ba8:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     baa:	0e 94 b4 03 	call	0x768	; 0x768 <change_DISABLEBLU>
				break;
     bae:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <change_DISABLERED>
     bb4:	08 95       	ret

00000bb6 <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	8f 93       	push	r24
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     bc6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     bca:	81 ff       	sbrs	r24, 1
     bcc:	07 c0       	rjmp	.+14     	; 0xbdc <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     bd4:	85 e0       	ldi	r24, 0x05	; 5
     bd6:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
     bda:	1f c0       	rjmp	.+62     	; 0xc1a <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     bdc:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     be0:	83 ff       	sbrs	r24, 3
     be2:	1b c0       	rjmp	.+54     	; 0xc1a <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     be4:	e0 e4       	ldi	r30, 0x40	; 64
     be6:	f4 e0       	ldi	r31, 0x04	; 4
     be8:	88 e0       	ldi	r24, 0x08	; 8
     bea:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     bec:	80 85       	ldd	r24, Z+8	; 0x08
     bee:	82 ff       	sbrs	r24, 2
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <__vector_24+0x4e>
			encoder_value++;
     bf2:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <__vector_24+0x5e>
		} else {
			encoder_value--;
     c04:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c08:	81 50       	subi	r24, 0x01	; 1
     c0a:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = -1;
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
		}
		encoder_sensed = ENCODERA;
     c14:	87 e0       	ldi	r24, 0x07	; 7
     c16:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
	}
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	8f 91       	pop	r24
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <init_STATUS>:
	clear_BUTTONS();

}

void init_STATUS()
{
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29

	status.next_buftank_fill = BIGFILLINTERVAL;
     c2e:	c7 e0       	ldi	r28, 0x07	; 7
     c30:	d8 e2       	ldi	r29, 0x28	; 40
     c32:	8c e0       	ldi	r24, 0x0C	; 12
     c34:	8e 8b       	std	Y+22, r24	; 0x16
	status.next_fill = FILLINTERVAL;
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
     c3e:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     c40:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     c42:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     c44:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     c46:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     c48:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     c4a:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     c4c:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     c4e:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     c50:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     c52:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     c54:	0e 94 0b 08 	call	0x1016	; 0x1016 <read_PRESSURE>
     c58:	8a 8f       	std	Y+26, r24	; 0x1a

}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <init_PORTS>:

void init_PORTS(void)
{

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c60:	e0 e6       	ldi	r30, 0x60	; 96
     c62:	f4 e0       	ldi	r31, 0x04	; 4
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c68:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c6a:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c6c:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c6e:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c70:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c72:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c74:	87 8b       	std	Z+23, r24	; 0x17
     c76:	08 95       	ret

00000c78 <init>:
void init_STATUS(void);

void init(void)
{

	hour_flag = FALSE;
     c78:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
	minute_flag = FALSE;
     c7c:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>
	seconds = 0;
     c80:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     c84:	0e 94 30 06 	call	0xc60	; 0xc60 <init_PORTS>
	init_VALVES();
     c88:	0e 94 27 0c 	call	0x184e	; 0x184e <init_VALVES>
	init_USART();
     c8c:	0e 94 84 0a 	call	0x1508	; 0x1508 <init_USART>
	init_BUTTONS();
     c90:	0e 94 fd 00 	call	0x1fa	; 0x1fa <init_BUTTONS>
	init_ENCODER();
     c94:	0e 94 56 05 	call	0xaac	; 0xaac <init_ENCODER>
	init_TWI();
     c98:	0e 94 0b 0a 	call	0x1416	; 0x1416 <init_TWI>
	init_RTC(511);
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	0e 94 8d 09 	call	0x131a	; 0x131a <init_RTC>
	init_ADC();
     ca4:	0e 94 df 07 	call	0xfbe	; 0xfbe <init_ADC>
	init_STATUS();
     ca8:	0e 94 15 06 	call	0xc2a	; 0xc2a <init_STATUS>
	init_OLED(0);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 97 06 	call	0xd2e	; 0xd2e <init_OLED>
	update_VERSION();
     cb2:	0e 94 43 01 	call	0x286	; 0x286 <update_VERSION>
	display(SCRVERSION);
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
	clear_BUTTONS();
     cbc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <clear_BUTTONS>
     cc0:	08 95       	ret

00000cc2 <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     cc2:	0e 94 3c 06 	call	0xc78	; 0xc78 <init>
	sei();
     cc6:	78 94       	sei
			handle_minute();	// See rtc.c
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
		}
		if (recv0_buf.done) {	// Serial communication received
     cc8:	ca e2       	ldi	r28, 0x2A	; 42
     cca:	d9 e2       	ldi	r29, 0x29	; 41
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     ccc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     cd0:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     cd2:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     cd6:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     cda:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     cdc:	0e 94 95 05 	call	0xb2a	; 0xb2a <handle_encoder>
		}
		if (hour_flag) {		// Things to do once an hour
     ce0:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <hour_flag>
     ce4:	81 11       	cpse	r24, r1
			handle_hour();		// See rtc.c
     ce6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <handle_hour>
		}
		if (minute_flag) {		// Things to do once a minute
     cea:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <minute_flag>
     cee:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     cf0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <handle_minute>
		}
		if (tick) {				// Things to do once a second
     cf4:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     cf8:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     cfa:	0e 94 d5 08 	call	0x11aa	; 0x11aa <handle_ticks>
		}
		if (recv0_buf.done) {	// Serial communication received
     cfe:	88 81       	ld	r24, Y
     d00:	88 23       	and	r24, r24
     d02:	21 f3       	breq	.-56     	; 0xccc <main+0xa>
			handle_serial();	// See usart.c
     d04:	0e 94 c1 0a 	call	0x1582	; 0x1582 <handle_serial>
     d08:	e1 cf       	rjmp	.-62     	; 0xccc <main+0xa>

00000d0a <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	d6 2f       	mov	r29, r22
     d10:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	0e 94 16 0a 	call	0x142c	; 0x142c <start_TWI>
	write_TWI(type);
     d18:	8d 2f       	mov	r24, r29
     d1a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_TWI>
	write_TWI(byteToSend);
     d1e:	8c 2f       	mov	r24, r28
     d20:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <write_TWI>
	stop_TWI();
     d24:	0e 94 56 0a 	call	0x14ac	; 0x14ac <stop_TWI>

}
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d2e:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d30:	e0 e0       	ldi	r30, 0x00	; 0
     d32:	f4 e0       	ldi	r31, 0x04	; 4
     d34:	90 e8       	ldi	r25, 0x80	; 128
     d36:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d38:	91 83       	std	Z+1, r25	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d3a:	a6 e4       	ldi	r26, 0x46	; 70
     d3c:	b0 e1       	ldi	r27, 0x10	; 16
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <init_OLED+0x10>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     d44:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d46:	88 23       	and	r24, r24
     d48:	11 f0       	breq	.+4      	; 0xd4e <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d4a:	cd e3       	ldi	r28, 0x3D	; 61
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d4e:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d50:	4a e2       	ldi	r20, 0x2A	; 42
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	8c 2f       	mov	r24, r28
     d56:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     d5a:	41 e7       	ldi	r20, 0x71	; 113
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	8c 2f       	mov	r24, r28
     d60:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     d64:	4c e5       	ldi	r20, 0x5C	; 92
     d66:	60 e4       	ldi	r22, 0x40	; 64
     d68:	8c 2f       	mov	r24, r28
     d6a:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     d6e:	48 e2       	ldi	r20, 0x28	; 40
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	8c 2f       	mov	r24, r28
     d74:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     d78:	48 e0       	ldi	r20, 0x08	; 8
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	8c 2f       	mov	r24, r28
     d7e:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     d82:	4a e2       	ldi	r20, 0x2A	; 42
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	8c 2f       	mov	r24, r28
     d88:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     d8c:	49 e7       	ldi	r20, 0x79	; 121
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	8c 2f       	mov	r24, r28
     d92:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     d96:	45 ed       	ldi	r20, 0xD5	; 213
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	8c 2f       	mov	r24, r28
     d9c:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     da0:	40 e7       	ldi	r20, 0x70	; 112
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	8c 2f       	mov	r24, r28
     da6:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     daa:	48 e7       	ldi	r20, 0x78	; 120
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	8c 2f       	mov	r24, r28
     db0:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     db4:	48 e0       	ldi	r20, 0x08	; 8
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	8c 2f       	mov	r24, r28
     dba:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     dbe:	46 e0       	ldi	r20, 0x06	; 6
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	8c 2f       	mov	r24, r28
     dc4:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     dc8:	42 e7       	ldi	r20, 0x72	; 114
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	8c 2f       	mov	r24, r28
     dce:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	60 e4       	ldi	r22, 0x40	; 64
     dd6:	8c 2f       	mov	r24, r28
     dd8:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     ddc:	4a e2       	ldi	r20, 0x2A	; 42
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	8c 2f       	mov	r24, r28
     de2:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     de6:	49 e7       	ldi	r20, 0x79	; 121
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	8c 2f       	mov	r24, r28
     dec:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     df0:	4a ed       	ldi	r20, 0xDA	; 218
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	8c 2f       	mov	r24, r28
     df6:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	8c 2f       	mov	r24, r28
     e00:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     e04:	4c ed       	ldi	r20, 0xDC	; 220
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	8c 2f       	mov	r24, r28
     e0a:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	8c 2f       	mov	r24, r28
     e14:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     e18:	41 e8       	ldi	r20, 0x81	; 129
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	8c 2f       	mov	r24, r28
     e1e:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	8c 2f       	mov	r24, r28
     e28:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e2c:	49 ed       	ldi	r20, 0xD9	; 217
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	8c 2f       	mov	r24, r28
     e32:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e36:	41 ef       	ldi	r20, 0xF1	; 241
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	8c 2f       	mov	r24, r28
     e3c:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e40:	4b ed       	ldi	r20, 0xDB	; 219
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	8c 2f       	mov	r24, r28
     e46:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e4a:	40 e4       	ldi	r20, 0x40	; 64
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	8c 2f       	mov	r24, r28
     e50:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e54:	48 e7       	ldi	r20, 0x78	; 120
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	8c 2f       	mov	r24, r28
     e5a:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e5e:	48 e2       	ldi	r20, 0x28	; 40
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	8c 2f       	mov	r24, r28
     e64:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	8c 2f       	mov	r24, r28
     e6e:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	8c 2f       	mov	r24, r28
     e78:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     e7c:	4c e0       	ldi	r20, 0x0C	; 12
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	8c 2f       	mov	r24, r28
     e82:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
     e86:	ba e6       	ldi	r27, 0x6A	; 106
     e88:	24 e0       	ldi	r18, 0x04	; 4
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	b1 50       	subi	r27, 0x01	; 1
     e8e:	20 40       	sbci	r18, 0x00	; 0
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	e1 f7       	brne	.-8      	; 0xe8c <init_OLED+0x15e>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     e96:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     e9a:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>

}
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	e2 97       	sbiw	r28, 0x32	; 50
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     ebc:	91 e1       	ldi	r25, 0x11	; 17
     ebe:	e2 e9       	ldi	r30, 0x92	; 146
     ec0:	f4 e6       	ldi	r31, 0x64	; 100
     ec2:	de 01       	movw	r26, r28
     ec4:	92 96       	adiw	r26, 0x22	; 34
     ec6:	01 90       	ld	r0, Z+
     ec8:	0d 92       	st	X+, r0
     eca:	9a 95       	dec	r25
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <writestr_OLED+0x24>

	if (displaynumber == 0) {
     ece:	88 23       	and	r24, r24
     ed0:	29 f0       	breq	.+10     	; 0xedc <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     ed2:	0f 2e       	mov	r0, r31
     ed4:	fd e3       	ldi	r31, 0x3D	; 61
     ed6:	ff 2e       	mov	r15, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     edc:	0f 2e       	mov	r0, r31
     ede:	fc e3       	ldi	r31, 0x3C	; 60
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     ee4:	8e 01       	movw	r16, r28
     ee6:	0f 5f       	subi	r16, 0xFF	; 255
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	c8 01       	movw	r24, r16
     eec:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <strcpy>
	if (strlen(strbuf) > 16) {
     ef0:	f8 01       	movw	r30, r16
     ef2:	01 90       	ld	r0, Z+
     ef4:	00 20       	and	r0, r0
     ef6:	e9 f7       	brne	.-6      	; 0xef2 <writestr_OLED+0x50>
     ef8:	31 97       	sbiw	r30, 0x01	; 1
     efa:	e0 1b       	sub	r30, r16
     efc:	f1 0b       	sbc	r31, r17
     efe:	71 97       	sbiw	r30, 0x11	; 17
     f00:	08 f0       	brcs	.+2      	; 0xf04 <writestr_OLED+0x62>
		strbuf[16] = '\0';
     f02:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     f04:	be 01       	movw	r22, r28
     f06:	6e 5d       	subi	r22, 0xDE	; 222
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <strcat>

	if (lineno == 1) {
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	d8 12       	cpse	r13, r24
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	8f 2d       	mov	r24, r15
     f1e:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
     f22:	19 c0       	rjmp	.+50     	; 0xf56 <writestr_OLED+0xb4>
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f24:	40 ec       	ldi	r20, 0xC0	; 192
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	8f 2d       	mov	r24, r15
     f2a:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
     f2e:	13 c0       	rjmp	.+38     	; 0xf56 <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f30:	f8 01       	movw	r30, r16
     f32:	41 91       	ld	r20, Z+
     f34:	8f 01       	movw	r16, r30
     f36:	60 e4       	ldi	r22, 0x40	; 64
     f38:	8f 2d       	mov	r24, r15
     f3a:	0e 94 85 06 	call	0xd0a	; 0xd0a <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f3e:	0c 15       	cp	r16, r12
     f40:	1d 05       	cpc	r17, r13
     f42:	b1 f7       	brne	.-20     	; 0xf30 <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
     f4c:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
	display_off = FALSE;
     f50:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <display_off>

}
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <writestr_OLED+0xc4>
     f56:	8e 01       	movw	r16, r28
     f58:	0f 5f       	subi	r16, 0xFF	; 255
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	6e 01       	movw	r12, r28
     f5e:	f1 e1       	ldi	r31, 0x11	; 17
     f60:	cf 0e       	add	r12, r31
     f62:	d1 1c       	adc	r13, r1
     f64:	e5 cf       	rjmp	.-54     	; 0xf30 <writestr_OLED+0x8e>
     f66:	e2 96       	adiw	r28, 0x32	; 50
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	1f 92       	push	r1
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     f8a:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	be 01       	movw	r22, r28
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     f98:	42 e0       	ldi	r20, 0x02	; 2
     f9a:	be 01       	movw	r22, r28
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	81 2f       	mov	r24, r17
     fa2:	0e 94 51 07 	call	0xea2	; 0xea2 <writestr_OLED>
	timerOLED = 0;
     fa6:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     faa:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
	display_off = TRUE;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <display_off>

}
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	08 95       	ret

00000fbe <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
     fc4:	e0 e0       	ldi	r30, 0x00	; 0
     fc6:	f6 e0       	ldi	r31, 0x06	; 6
     fc8:	80 81       	ld	r24, Z
     fca:	84 60       	ori	r24, 0x04	; 4
     fcc:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
     fce:	a0 ea       	ldi	r26, 0xA0	; 160
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	8c 91       	ld	r24, X
     fd4:	80 63       	ori	r24, 0x30	; 48
     fd6:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
     fd8:	a2 e0       	ldi	r26, 0x02	; 2
     fda:	b6 e0       	ldi	r27, 0x06	; 6
     fdc:	8c 91       	ld	r24, X
     fde:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
     fe0:	8c 91       	ld	r24, X
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
     fe6:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
     fea:	80 81       	ld	r24, Z
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
     ff0:	e8 e0       	ldi	r30, 0x08	; 8
     ff2:	f6 e0       	ldi	r31, 0x06	; 6
     ff4:	80 81       	ld	r24, Z
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
     ffa:	80 81       	ld	r24, Z
     ffc:	80 ff       	sbrs	r24, 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <init_ADC+0x4a>
		asm("nop");
    1000:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    1002:	80 81       	ld	r24, Z
    1004:	80 fd       	sbrc	r24, 0
    1006:	fc cf       	rjmp	.-8      	; 0x1000 <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    1008:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    100c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    1010:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <status+0x1a>
    1014:	08 95       	ret

00001016 <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	0f 2e       	mov	r0, r31
    102a:	fa e0       	ldi	r31, 0x0A	; 10
    102c:	bf 2e       	mov	r11, r31
    102e:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    1030:	c1 2c       	mov	r12, r1
    1032:	d1 2c       	mov	r13, r1
    1034:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1036:	c8 e0       	ldi	r28, 0x08	; 8
    1038:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    103a:	00 e1       	ldi	r16, 0x10	; 16
    103c:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    103e:	88 81       	ld	r24, Y
    1040:	81 60       	ori	r24, 0x01	; 1
    1042:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1044:	88 81       	ld	r24, Y
    1046:	80 ff       	sbrs	r24, 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <read_PRESSURE+0x3c>
			asm("nop");
    104a:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    104c:	88 81       	ld	r24, Y
    104e:	80 fd       	sbrc	r24, 0
    1050:	fc cf       	rjmp	.-8      	; 0x104a <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1052:	f8 01       	movw	r30, r16
    1054:	60 81       	ld	r22, Z
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__floatunsisf>
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	c7 01       	movw	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	0e 94 2e 0c 	call	0x185c	; 0x185c <__addsf3>
    106c:	6b 01       	movw	r12, r22
    106e:	7c 01       	movw	r14, r24
    1070:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    1072:	b1 10       	cpse	r11, r1
    1074:	e4 cf       	rjmp	.-56     	; 0x103e <read_PRESSURE+0x28>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 9f 0c 	call	0x193e	; 0x193e <__divsf3>
    1082:	2e e5       	ldi	r18, 0x5E	; 94
    1084:	3a eb       	ldi	r19, 0xBA	; 186
    1086:	49 e5       	ldi	r20, 0x59	; 89
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__mulsf3>
    108e:	2f e1       	ldi	r18, 0x1F	; 31
    1090:	35 e8       	ldi	r19, 0x85	; 133
    1092:	45 ec       	ldi	r20, 0xC5	; 197
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	0e 94 2d 0c 	call	0x185a	; 0x185a <__subsf3>
    109a:	6b 01       	movw	r12, r22
    109c:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	a9 01       	movw	r20, r18
    10a4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__cmpsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	1c f4       	brge	.+6      	; 0x10b2 <read_PRESSURE+0x9c>
		value = 0.0;
    10ac:	c1 2c       	mov	r12, r1
    10ae:	d1 2c       	mov	r13, r1
    10b0:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	c7 01       	movw	r24, r14
    10bc:	b6 01       	movw	r22, r12
    10be:	0e 94 2e 0c 	call	0x185c	; 0x185c <__addsf3>
    10c2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fixunssfsi>
    10c6:	86 2f       	mov	r24, r22

}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	08 95       	ret

000010dc <handle_hour>:
THINGS TO DO EVERY HOUR
----------------------------------------------------------------------*/
void handle_hour(void)
{

	hour_flag = FALSE;
    10dc:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
    10e0:	08 95       	ret

000010e2 <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    10e2:	cf 93       	push	r28

	if (++minutes >= 60) {
    10e4:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <minutes>
    10e8:	8f 5f       	subi	r24, 0xFF	; 255
    10ea:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <minutes>
    10ee:	8c 33       	cpi	r24, 0x3C	; 60
    10f0:	28 f0       	brcs	.+10     	; 0x10fc <handle_minute+0x1a>
		hour_flag = TRUE;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <hour_flag>
		minutes = 0;
    10f8:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <minutes>
	}

	minute_flag = FALSE;
    10fc:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>

	if (BLUVALVEOPEN) {
    1100:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1104:	88 23       	and	r24, r24
    1106:	8c f4       	brge	.+34     	; 0x112a <handle_minute+0x48>
		status.opentime_BLU++;
    1108:	e7 e0       	ldi	r30, 0x07	; 7
    110a:	f8 e2       	ldi	r31, 0x28	; 40
    110c:	c3 85       	ldd	r28, Z+11	; 0x0b
    110e:	cf 5f       	subi	r28, 0xFF	; 255
    1110:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    1112:	8b e0       	ldi	r24, 0x0B	; 11
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
    111a:	c8 17       	cp	r28, r24
    111c:	30 f0       	brcs	.+12     	; 0x112a <handle_minute+0x48>
			CLOSEVALVE(BLUVALVE);
    111e:	80 e8       	ldi	r24, 0x80	; 128
    1120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    112a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    112e:	86 ff       	sbrs	r24, 6
    1130:	11 c0       	rjmp	.+34     	; 0x1154 <handle_minute+0x72>
		status.opentime_RED++;
    1132:	e7 e0       	ldi	r30, 0x07	; 7
    1134:	f8 e2       	ldi	r31, 0x28	; 40
    1136:	c4 85       	ldd	r28, Z+12	; 0x0c
    1138:	cf 5f       	subi	r28, 0xFF	; 255
    113a:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    113c:	8b e0       	ldi	r24, 0x0B	; 11
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
    1144:	c8 17       	cp	r28, r24
    1146:	30 f0       	brcs	.+12     	; 0x1154 <handle_minute+0x72>
			CLOSEVALVE(REDVALVE);
    1148:	80 e4       	ldi	r24, 0x40	; 64
    114a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    1154:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1158:	85 ff       	sbrs	r24, 5
    115a:	13 c0       	rjmp	.+38     	; 0x1182 <handle_minute+0xa0>
		status.opentime_BUF++;
    115c:	e7 e0       	ldi	r30, 0x07	; 7
    115e:	f8 e2       	ldi	r31, 0x28	; 40
    1160:	85 85       	ldd	r24, Z+13	; 0x0d
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    1166:	84 31       	cpi	r24, 0x14	; 20
    1168:	60 f0       	brcs	.+24     	; 0x1182 <handle_minute+0xa0>
			CLOSEVALVE(BUFVALVE);
    116a:	e0 e4       	ldi	r30, 0x40	; 64
    116c:	f4 e0       	ldi	r31, 0x04	; 4
    116e:	80 e2       	ldi	r24, 0x20	; 32
    1170:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    1172:	80 e1       	ldi	r24, 0x10	; 16
    1174:	86 83       	std	Z+6, r24	; 0x06
			status.maxopen_BUF = TRUE;
    1176:	e7 e0       	ldi	r30, 0x07	; 7
    1178:	f8 e2       	ldi	r31, 0x28	; 40
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	81 8b       	std	Z+17, r24	; 0x11
			status.next_buftank_fill = BIGFILLINTERVAL;
    117e:	8c e0       	ldi	r24, 0x0C	; 12
    1180:	86 8b       	std	Z+22, r24	; 0x16
		}
	}

	if (SUPVALVEOPEN) {
    1182:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1186:	84 ff       	sbrs	r24, 4
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <handle_minute+0xb2>
		status.opentime_SUP++;				// Increment supply dewar valve time
    118a:	e7 e0       	ldi	r30, 0x07	; 7
    118c:	f8 e2       	ldi	r31, 0x28	; 40
    118e:	86 85       	ldd	r24, Z+14	; 0x0e
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    1194:	e7 e0       	ldi	r30, 0x07	; 7
    1196:	f8 e2       	ldi	r31, 0x28	; 40
    1198:	85 89       	ldd	r24, Z+21	; 0x15
    119a:	81 50       	subi	r24, 0x01	; 1
    119c:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    119e:	81 11       	cpse	r24, r1
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <handle_minute+0xc4>
		start_FILL();						// See encoder.c
    11a2:	0e 94 5e 05 	call	0xabc	; 0xabc <start_FILL>
	}
}
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <handle_ticks>:
THINGS TO DO EVERY SECOND
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    11aa:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {		// seconds incremented in ISR
    11ae:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    11b2:	8c 33       	cpi	r24, 0x3C	; 60
    11b4:	28 f0       	brcs	.+10     	; 0x11c0 <handle_ticks+0x16>
		minute_flag = TRUE;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <minute_flag>
		seconds = 0;
    11bc:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

	status.pressure = read_PRESSURE();				// LN2 pressure
    11c0:	0e 94 0b 08 	call	0x1016	; 0x1016 <read_PRESSURE>
    11c4:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <status+0x1a>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    11c8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11cc:	88 23       	and	r24, r24
    11ce:	f4 f4       	brge	.+60     	; 0x120c <handle_ticks+0x62>
    11d0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    11d4:	80 fd       	sbrc	r24, 0
    11d6:	1a c0       	rjmp	.+52     	; 0x120c <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    11d8:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <status+0x13>
    11dc:	85 30       	cpi	r24, 0x05	; 5
    11de:	30 f0       	brcs	.+12     	; 0x11ec <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    11e0:	80 e8       	ldi	r24, 0x80	; 128
    11e2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    11e6:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <status+0x13>
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    11f2:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	49 f4       	brne	.+18     	; 0x120c <handle_ticks+0x62>
    11fa:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    11fe:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1202:	89 2b       	or	r24, r25
    1204:	19 f0       	breq	.+6      	; 0x120c <handle_ticks+0x62>
			display(SCRVALVES);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
		}
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    120c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1210:	86 ff       	sbrs	r24, 6
    1212:	1e c0       	rjmp	.+60     	; 0x1250 <handle_ticks+0xa6>
    1214:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1218:	81 fd       	sbrc	r24, 1
    121a:	1a c0       	rjmp	.+52     	; 0x1250 <handle_ticks+0xa6>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    121c:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x14>
    1220:	85 30       	cpi	r24, 0x05	; 5
    1222:	30 f0       	brcs	.+12     	; 0x1230 <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    1224:	80 e4       	ldi	r24, 0x40	; 64
    1226:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    122a:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x14>
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1236:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	49 f4       	brne	.+18     	; 0x1250 <handle_ticks+0xa6>
    123e:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1242:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1246:	89 2b       	or	r24, r25
    1248:	19 f0       	breq	.+6      	; 0x1250 <handle_ticks+0xa6>
			display(SCRVALVES);
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
		}
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    1250:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1254:	85 ff       	sbrs	r24, 5
    1256:	2a c0       	rjmp	.+84     	; 0x12ac <handle_ticks+0x102>
    1258:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    125c:	82 fd       	sbrc	r24, 2
    125e:	26 c0       	rjmp	.+76     	; 0x12ac <handle_ticks+0x102>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    1260:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x12>
    1264:	85 30       	cpi	r24, 0x05	; 5
    1266:	90 f0       	brcs	.+36     	; 0x128c <handle_ticks+0xe2>
			CLOSEVALVE(BUFVALVE);
    1268:	e0 e4       	ldi	r30, 0x40	; 64
    126a:	f4 e0       	ldi	r31, 0x04	; 4
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	86 83       	std	Z+6, r24	; 0x06
			status.overfill_BUF = 0;
    1270:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <status+0x12>
    1274:	24 e5       	ldi	r18, 0x54	; 84
    1276:	88 e5       	ldi	r24, 0x58	; 88
    1278:	94 e1       	ldi	r25, 0x14	; 20
    127a:	21 50       	subi	r18, 0x01	; 1
    127c:	80 40       	sbci	r24, 0x00	; 0
    127e:	90 40       	sbci	r25, 0x00	; 0
    1280:	e1 f7       	brne	.-8      	; 0x127a <handle_ticks+0xd0>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <handle_ticks+0xda>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <handle_ticks+0xdc>
			_delay_ms(2000);
			CLOSEVALVE(SUPVALVE);
    1286:	80 e1       	ldi	r24, 0x10	; 16
    1288:	86 83       	std	Z+6, r24	; 0x06
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <handle_ticks+0xe8>
		} else {
			status.overfill_BUF++;
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1292:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	49 f4       	brne	.+18     	; 0x12ac <handle_ticks+0x102>
    129a:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    129e:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12a2:	89 2b       	or	r24, r25
    12a4:	a9 f1       	breq	.+106    	; 0x1310 <handle_ticks+0x166>
			display(SCRVALVES);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display>
		}
	}

	if (status.supply_button_pushed) {
    12ac:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
    12b0:	88 23       	and	r24, r24
    12b2:	b9 f0       	breq	.+46     	; 0x12e2 <handle_ticks+0x138>
		if (~PORTB.IN & PIN1_bm) {			// Button still pushed
    12b4:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
    12b8:	81 fd       	sbrc	r24, 1
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <handle_ticks+0x130>
			if (status.supply_button_time++ >= 2) {
    12bc:	e7 e0       	ldi	r30, 0x07	; 7
    12be:	f8 e2       	ldi	r31, 0x28	; 40
    12c0:	80 8d       	ldd	r24, Z+24	; 0x18
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	98 0f       	add	r25, r24
    12c6:	90 8f       	std	Z+24, r25	; 0x18
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	58 f0       	brcs	.+22     	; 0x12e2 <handle_ticks+0x138>
				OPENVALVE(SUPVALVE);
    12cc:	80 e1       	ldi	r24, 0x10	; 16
    12ce:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
    12d2:	16 86       	std	Z+14, r1	; 0x0e
				status.supply_button_pushed = FALSE;
    12d4:	17 8a       	std	Z+23, r1	; 0x17
				status.supply_button_time = 0;
    12d6:	10 8e       	std	Z+24, r1	; 0x18
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <handle_ticks+0x138>
			}
		} else {								// Button was released
			status.supply_button_pushed = FALSE;
    12da:	e7 e0       	ldi	r30, 0x07	; 7
    12dc:	f8 e2       	ldi	r31, 0x28	; 40
    12de:	17 8a       	std	Z+23, r1	; 0x17
			status.supply_button_time = 0;
    12e0:	10 8e       	std	Z+24, r1	; 0x18
		}
	}

	if (timerOLED) {
    12e2:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12e6:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	a9 f0       	breq	.+42     	; 0x1318 <handle_ticks+0x16e>
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    12ee:	8b 30       	cpi	r24, 0x0B	; 11
    12f0:	91 05       	cpc	r25, r1
    12f2:	40 f0       	brcs	.+16     	; 0x1304 <handle_ticks+0x15a>
			clear_OLED(0);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 be 07 	call	0xf7c	; 0xf7c <clear_OLED>
			timerOLED = 0;
    12fa:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    12fe:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
    1302:	08 95       	ret
		} else {
			timerOLED++;
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    130a:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
		}
	}

}
    130e:	08 95       	ret
		if ((screen_value == SCRVALVES) && timerOLED) {
			display(SCRVALVES);
		}
	}

	if (status.supply_button_pushed) {
    1310:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
    1314:	81 11       	cpse	r24, r1
    1316:	ce cf       	rjmp	.-100    	; 0x12b4 <handle_ticks+0x10a>
    1318:	08 95       	ret

0000131a <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    131a:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    131c:	e0 e6       	ldi	r30, 0x60	; 96
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    1322:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    1324:	98 ed       	ldi	r25, 0xD8	; 216
    1326:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1328:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	86 ff       	sbrs	r24, 6
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <init_RTC+0x1e>
		asm("nop");
    1330:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	96 fd       	sbrc	r25, 6
    1336:	fc cf       	rjmp	.-8      	; 0x1330 <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1338:	e0 e6       	ldi	r30, 0x60	; 96
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    133e:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    1340:	88 ed       	ldi	r24, 0xD8	; 216
    1342:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1344:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    1346:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    1348:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    134a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    134c:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    134e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    1352:	88 23       	and	r24, r24
    1354:	31 f0       	breq	.+12     	; 0x1362 <init_RTC+0x48>
    1356:	e0 e4       	ldi	r30, 0x40	; 64
    1358:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    135a:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	91 11       	cpse	r25, r1
    1360:	fc cf       	rjmp	.-8      	; 0x135a <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    1362:	e0 e4       	ldi	r30, 0x40	; 64
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	22 87       	std	Z+10, r18	; 0x0a
    1368:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    136e:	85 81       	ldd	r24, Z+5	; 0x05
    1370:	81 60       	ori	r24, 0x01	; 1
    1372:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    1374:	81 eb       	ldi	r24, 0xB1	; 177
    1376:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	82 83       	std	Z+2, r24	; 0x02
    137e:	08 95       	ret

00001380 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    1394:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    139e:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    13b0:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <ticks_TCB0>
    13b4:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    13b8:	25 e0       	ldi	r18, 0x05	; 5
    13ba:	3d e0       	ldi	r19, 0x0D	; 13
    13bc:	ac 01       	movw	r20, r24
    13be:	42 9f       	mul	r20, r18
    13c0:	c0 01       	movw	r24, r0
    13c2:	43 9f       	mul	r20, r19
    13c4:	90 0d       	add	r25, r0
    13c6:	52 9f       	mul	r21, r18
    13c8:	90 0d       	add	r25, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	e0 e8       	ldi	r30, 0x80	; 128
    13ce:	fa e0       	ldi	r31, 0x0A	; 10
    13d0:	84 87       	std	Z+12, r24	; 0x0c
    13d2:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    13d8:	80 83       	st	Z, r24
    13da:	08 95       	ret

000013dc <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    13dc:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    13e0:	08 95       	ret

000013e2 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    13f6:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    13fa:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <ticks_TCB0>
    1404:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <ticks_TCB0+0x1>

    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    1416:	e0 ea       	ldi	r30, 0xA0	; 160
    1418:	f8 e0       	ldi	r31, 0x08	; 8
    141a:	8b e0       	ldi	r24, 0x0B	; 11
    141c:	86 83       	std	Z+6, r24	; 0x06
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	83 83       	std	Z+3, r24	; 0x03
    1424:	85 81       	ldd	r24, Z+5	; 0x05
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	85 83       	std	Z+5, r24	; 0x05
    142a:	08 95       	ret

0000142c <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    142c:	61 30       	cpi	r22, 0x01	; 1
    142e:	29 f4       	brne	.+10     	; 0x143a <start_TWI+0xe>
		TWI0.MADDR = ((addr << 1) | 0x01);
    1430:	88 0f       	add	r24, r24
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <start_TWI+0x14>
	} else {
		TWI0.MADDR = (addr << 1);
    143a:	88 0f       	add	r24, r24
    143c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	start_TCB0(1);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1448:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    144c:	80 7c       	andi	r24, 0xC0	; 192
    144e:	b9 f4       	brne	.+46     	; 0x147e <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    1450:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1454:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1458:	0b 97       	sbiw	r24, 0x0b	; 11
    145a:	48 f4       	brcc	.+18     	; 0x146e <start_TWI+0x42>
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    145c:	e0 ea       	ldi	r30, 0xA0	; 160
    145e:	f8 e0       	ldi	r31, 0x08	; 8
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    1462:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1466:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    146a:	0b 97       	sbiw	r24, 0x0b	; 11
    146c:	20 f0       	brcs	.+8      	; 0x1476 <start_TWI+0x4a>
			stop_TCB0();
    146e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <stop_TCB0>
			return(TWITIMEOUT);
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    1476:	00 00       	nop
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1478:	85 81       	ldd	r24, Z+5	; 0x05
    147a:	80 7c       	andi	r24, 0xC0	; 192
    147c:	91 f3       	breq	.-28     	; 0x1462 <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    147e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    1482:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1486:	82 fd       	sbrc	r24, 2
    1488:	0b c0       	rjmp	.+22     	; 0x14a0 <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    148a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    148e:	83 fd       	sbrc	r24, 3
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    1492:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1496:	89 2f       	mov	r24, r25
    1498:	80 71       	andi	r24, 0x10	; 16
    149a:	94 fd       	sbrc	r25, 4
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <start_TWI+0x7c>
    149e:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    14a8:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    14aa:	08 95       	ret

000014ac <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    14ac:	87 e0       	ldi	r24, 0x07	; 7
    14ae:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    14b2:	08 95       	ret

000014b4 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    14b4:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14b8:	96 fd       	sbrc	r25, 6
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <write_TWI+0x14>
    14bc:	e0 ea       	ldi	r30, 0xA0	; 160
    14be:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    14c0:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    14c2:	95 81       	ldd	r25, Z+5	; 0x05
    14c4:	96 ff       	sbrs	r25, 6
    14c6:	fc cf       	rjmp	.-8      	; 0x14c0 <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    14c8:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    14d4:	e0 ea       	ldi	r30, 0xA0	; 160
    14d6:	f8 e0       	ldi	r31, 0x08	; 8
    14d8:	0b c0       	rjmp	.+22     	; 0x14f0 <write_TWI+0x3c>
		asm("nop");
    14da:	00 00       	nop
		if (ticks_TCB0 > 50) {
    14dc:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    14e0:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    14e4:	c3 97       	sbiw	r24, 0x33	; 51
    14e6:	20 f0       	brcs	.+8      	; 0x14f0 <write_TWI+0x3c>
			stop_TCB0();
    14e8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <stop_TCB0>
			return(TWITIMEOUT);
    14ec:	84 e0       	ldi	r24, 0x04	; 4
    14ee:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    14f0:	85 81       	ldd	r24, Z+5	; 0x05
    14f2:	86 ff       	sbrs	r24, 6
    14f4:	f2 cf       	rjmp	.-28     	; 0x14da <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    14f6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    14fa:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14fe:	89 2f       	mov	r24, r25
    1500:	80 71       	andi	r24, 0x10	; 16
    1502:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    1504:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    1506:	08 95       	ret

00001508 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    1508:	e0 e0       	ldi	r30, 0x00	; 0
    150a:	f4 e0       	ldi	r31, 0x04	; 4
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    1510:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    1512:	e0 e0       	ldi	r30, 0x00	; 0
    1514:	f8 e0       	ldi	r31, 0x08	; 8
    1516:	2d e6       	ldi	r18, 0x6D	; 109
    1518:	35 e0       	ldi	r19, 0x05	; 5
    151a:	20 87       	std	Z+8, r18	; 0x08
    151c:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	90 68       	ori	r25, 0x80	; 128
    1522:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    1524:	96 81       	ldd	r25, Z+6	; 0x06
    1526:	90 64       	ori	r25, 0x40	; 64
    1528:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    152a:	96 81       	ldd	r25, Z+6	; 0x06
    152c:	90 68       	ori	r25, 0x80	; 128
    152e:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    1530:	10 92 2c 29 	sts	0x292C, r1	; 0x80292c <recv0_buf+0x101>
	send0_buf.length = 0;
    1534:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <send0_buf+0x101>
	recv0_buf.nxfrd = 0;
    1538:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <recv0_buf+0x100>
	send0_buf.nxfrd = 0;
    153c:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	recv0_buf.done = FALSE;				// Ready to receive data
    1540:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
	send0_buf.done = TRUE;				// No data to send
    1544:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    1548:	08 95       	ret

0000154a <send_USART>:
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
	uint8_t i;
	send0_buf.length = nbytes;
    154a:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <send0_buf+0x101>
	send0_buf.nxfrd = 0;
    154e:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	send0_buf.done = FALSE;
    1552:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <send0_buf+0xff>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    1556:	66 23       	and	r22, r22
    1558:	71 f0       	breq	.+28     	; 0x1576 <send_USART+0x2c>
    155a:	a8 2f       	mov	r26, r24
    155c:	b9 2f       	mov	r27, r25
    155e:	ed e2       	ldi	r30, 0x2D	; 45
    1560:	f9 e2       	ldi	r31, 0x29	; 41
    1562:	61 50       	subi	r22, 0x01	; 1
    1564:	26 2f       	mov	r18, r22
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	22 5d       	subi	r18, 0xD2	; 210
    156a:	36 4d       	sbci	r19, 0xD6	; 214
		send0_buf.data[i] = *data++;
    156c:	8d 91       	ld	r24, X+
    156e:	81 93       	st	Z+, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    1570:	e2 17       	cp	r30, r18
    1572:	f3 07       	cpc	r31, r19
    1574:	d9 f7       	brne	.-10     	; 0x156c <send_USART+0x22>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    1576:	e0 e0       	ldi	r30, 0x00	; 0
    1578:	f8 e0       	ldi	r31, 0x08	; 8
    157a:	85 81       	ldd	r24, Z+5	; 0x05
    157c:	80 62       	ori	r24, 0x20	; 32
    157e:	85 83       	std	Z+5, r24	; 0x05
    1580:	08 95       	ret

00001582 <handle_serial>:

LN2,C,SUP,T,BUF,X,RED,C,BLU,111,NXT,222,MAX,333,INT,100,PRES,H,TBUF,H,TRED,H,TBLU

------------------------------------------------------------------------------*/
void handle_serial(void)
{
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	c3 5a       	subi	r28, 0xA3	; 163
    159c:	d1 09       	sbc	r29, r1
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	de bf       	out	0x3e, r29	; 62

	const char fmt0[] = "%c%c%c%c,%d,NXT,%d,MAX,%d,INT,%d,PRES,%c,TBUF,%c,TRED,%c,TBLU\r";
    15a2:	8f e3       	ldi	r24, 0x3F	; 63
    15a4:	e3 ea       	ldi	r30, 0xA3	; 163
    15a6:	f4 e6       	ldi	r31, 0x64	; 100
    15a8:	de 01       	movw	r26, r28
    15aa:	11 96       	adiw	r26, 0x01	; 1
    15ac:	01 90       	ld	r0, Z+
    15ae:	0d 92       	st	X+, r0
    15b0:	8a 95       	dec	r24
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <handle_serial+0x2a>
	char strbuf[100], supvalve, bufvalve, redvalve, bluvalve, bufther, redther, bluther;
	uint8_t nextfill, maxopen, fillint, pressure;

	recv0_buf.done = FALSE;
    15b4:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
    15b8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    15bc:	84 fd       	sbrc	r24, 4
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <handle_serial+0x48>
		supvalve = 'O';
	} else {
		supvalve = 'C';
    15c0:	0f 2e       	mov	r0, r31
    15c2:	f3 e4       	ldi	r31, 0x43	; 67
    15c4:	ff 2e       	mov	r15, r31
    15c6:	f0 2d       	mov	r31, r0
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <handle_serial+0x50>

	recv0_buf.done = FALSE;

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
		supvalve = 'O';
    15ca:	0f 2e       	mov	r0, r31
    15cc:	ff e4       	ldi	r31, 0x4F	; 79
    15ce:	ff 2e       	mov	r15, r31
    15d0:	f0 2d       	mov	r31, r0
	} else {
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
    15d2:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
    15d6:	81 11       	cpse	r24, r1
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <handle_serial+0x6a>
		bufvalve = 'T';
	} else if (BUFVALVEOPEN) {
    15da:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    15de:	85 fd       	sbrc	r24, 5
    15e0:	0a c0       	rjmp	.+20     	; 0x15f6 <handle_serial+0x74>
		bufvalve = 'O';
	} else {
		bufvalve = 'C';
    15e2:	0f 2e       	mov	r0, r31
    15e4:	f3 e4       	ldi	r31, 0x43	; 67
    15e6:	ef 2e       	mov	r14, r31
    15e8:	f0 2d       	mov	r31, r0
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <handle_serial+0x7c>
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
		bufvalve = 'T';
    15ec:	0f 2e       	mov	r0, r31
    15ee:	f4 e5       	ldi	r31, 0x54	; 84
    15f0:	ef 2e       	mov	r14, r31
    15f2:	f0 2d       	mov	r31, r0
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <handle_serial+0x7c>
	} else if (BUFVALVEOPEN) {
		bufvalve = 'O';
    15f6:	0f 2e       	mov	r0, r31
    15f8:	ff e4       	ldi	r31, 0x4F	; 79
    15fa:	ef 2e       	mov	r14, r31
    15fc:	f0 2d       	mov	r31, r0
	} else {
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
    15fe:	8d e0       	ldi	r24, 0x0D	; 13
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
    1606:	88 23       	and	r24, r24
    1608:	69 f0       	breq	.+26     	; 0x1624 <handle_serial+0xa2>
		redvalve = 'X';
	} else if (status.maxopen_RED) {
    160a:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
    160e:	81 11       	cpse	r24, r1
    1610:	0e c0       	rjmp	.+28     	; 0x162e <handle_serial+0xac>
		redvalve = 'T';
	} else if (REDVALVEOPEN) {
    1612:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1616:	86 fd       	sbrc	r24, 6
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <handle_serial+0xb6>
		redvalve = 'O';
	} else {
		redvalve = 'C';
    161a:	0f 2e       	mov	r0, r31
    161c:	f3 e4       	ldi	r31, 0x43	; 67
    161e:	df 2e       	mov	r13, r31
    1620:	f0 2d       	mov	r31, r0
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <handle_serial+0xbe>
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
		redvalve = 'X';
    1624:	0f 2e       	mov	r0, r31
    1626:	f8 e5       	ldi	r31, 0x58	; 88
    1628:	df 2e       	mov	r13, r31
    162a:	f0 2d       	mov	r31, r0
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <handle_serial+0xbe>
	} else if (status.maxopen_RED) {
		redvalve = 'T';
    162e:	0f 2e       	mov	r0, r31
    1630:	f4 e5       	ldi	r31, 0x54	; 84
    1632:	df 2e       	mov	r13, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <handle_serial+0xbe>
	} else if (REDVALVEOPEN) {
		redvalve = 'O';
    1638:	0f 2e       	mov	r0, r31
    163a:	ff e4       	ldi	r31, 0x4F	; 79
    163c:	df 2e       	mov	r13, r31
    163e:	f0 2d       	mov	r31, r0
	} else {
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
    1640:	8c e0       	ldi	r24, 0x0C	; 12
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
    1648:	88 23       	and	r24, r24
    164a:	69 f0       	breq	.+26     	; 0x1666 <handle_serial+0xe4>
		bluvalve = 'X';
	} else if (status.maxopen_BLU) {
    164c:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
    1650:	81 11       	cpse	r24, r1
    1652:	0e c0       	rjmp	.+28     	; 0x1670 <handle_serial+0xee>
		bluvalve = 'T';
	} else if (BLUVALVEOPEN) {
    1654:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1658:	88 23       	and	r24, r24
    165a:	7c f0       	brlt	.+30     	; 0x167a <handle_serial+0xf8>
		bluvalve = 'O';
	} else {
		bluvalve = 'C';
    165c:	0f 2e       	mov	r0, r31
    165e:	f3 e4       	ldi	r31, 0x43	; 67
    1660:	af 2e       	mov	r10, r31
    1662:	f0 2d       	mov	r31, r0
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <handle_serial+0x100>
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
		bluvalve = 'X';
    1666:	0f 2e       	mov	r0, r31
    1668:	f8 e5       	ldi	r31, 0x58	; 88
    166a:	af 2e       	mov	r10, r31
    166c:	f0 2d       	mov	r31, r0
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <handle_serial+0x100>
	} else if (status.maxopen_BLU) {
		bluvalve = 'T';
    1670:	0f 2e       	mov	r0, r31
    1672:	f4 e5       	ldi	r31, 0x54	; 84
    1674:	af 2e       	mov	r10, r31
    1676:	f0 2d       	mov	r31, r0
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <handle_serial+0x100>
	} else if (BLUVALVEOPEN) {
		bluvalve = 'O';
    167a:	0f 2e       	mov	r0, r31
    167c:	ff e4       	ldi	r31, 0x4F	; 79
    167e:	af 2e       	mov	r10, r31
    1680:	f0 2d       	mov	r31, r0
	} else {
		bluvalve = 'C';
	}

	// Fill interval
	fillint = FILLINTERVAL;
    1682:	8a e0       	ldi	r24, 0x0A	; 10
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>
    168a:	b8 2e       	mov	r11, r24

	// Next fill in
	nextfill = status.next_fill;
    168c:	07 e0       	ldi	r16, 0x07	; 7
    168e:	18 e2       	ldi	r17, 0x28	; 40
    1690:	f8 01       	movw	r30, r16
    1692:	c5 88       	ldd	r12, Z+21	; 0x15

	// Max open time
	maxopen = MAXOPENTIME;
    1694:	8b e0       	ldi	r24, 0x0B	; 11
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 2e 11 	call	0x225c	; 0x225c <eeprom_read_byte>

	// Pressure
	pressure = status.pressure;
    169c:	f8 01       	movw	r30, r16
    169e:	92 8d       	ldd	r25, Z+26	; 0x1a

	// BUF thermistor
	if (BUFTHERMWARM) {
    16a0:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16a4:	22 fd       	sbrc	r18, 2
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <handle_serial+0x12a>
		bufther = 'H';
	} else {
		bufther = 'C';
    16a8:	23 e4       	ldi	r18, 0x43	; 67
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <handle_serial+0x12c>
	// Pressure
	pressure = status.pressure;

	// BUF thermistor
	if (BUFTHERMWARM) {
		bufther = 'H';
    16ac:	28 e4       	ldi	r18, 0x48	; 72
	} else {
		bufther = 'C';
	}

	// Red thermistor
	if (REDTHERMWARM) {
    16ae:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16b2:	31 fd       	sbrc	r19, 1
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <handle_serial+0x138>
		redther = 'H';
	} else {
		redther = 'C';
    16b6:	33 e4       	ldi	r19, 0x43	; 67
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <handle_serial+0x13a>
		bufther = 'C';
	}

	// Red thermistor
	if (REDTHERMWARM) {
		redther = 'H';
    16ba:	38 e4       	ldi	r19, 0x48	; 72
	} else {
		redther = 'C';
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
    16bc:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16c0:	40 fd       	sbrc	r20, 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <handle_serial+0x146>
		bluther = 'H';
	} else {
		bluther = 'C';
    16c4:	43 e4       	ldi	r20, 0x43	; 67
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <handle_serial+0x148>
		redther = 'C';
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
		bluther = 'H';
    16c8:	48 e4       	ldi	r20, 0x48	; 72
	} else {
		bluther = 'C';
	}

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
    16ca:	1f 92       	push	r1
    16cc:	4f 93       	push	r20
    16ce:	1f 92       	push	r1
    16d0:	3f 93       	push	r19
    16d2:	1f 92       	push	r1
    16d4:	2f 93       	push	r18
    16d6:	1f 92       	push	r1
    16d8:	9f 93       	push	r25
    16da:	1f 92       	push	r1
    16dc:	bf 92       	push	r11
    16de:	1f 92       	push	r1
    16e0:	8f 93       	push	r24
    16e2:	1f 92       	push	r1
    16e4:	cf 92       	push	r12
    16e6:	1f 92       	push	r1
    16e8:	af 92       	push	r10
    16ea:	1f 92       	push	r1
    16ec:	df 92       	push	r13
    16ee:	1f 92       	push	r1
    16f0:	ef 92       	push	r14
    16f2:	1f 92       	push	r1
    16f4:	ff 92       	push	r15
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	9f 93       	push	r25
    16fc:	8f 93       	push	r24
    16fe:	cf 96       	adiw	r24, 0x3f	; 63
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	0e 94 77 0e 	call	0x1cee	; 0x1cee <sprintf>
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
    1708:	84 e6       	ldi	r24, 0x64	; 100
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <start_TCB0>
	while (!send0_buf.done) {
    1710:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <send0_buf+0xff>
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	81 11       	cpse	r24, r1
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <handle_serial+0x1c0>
		if (ticks_TCB0 > 10) {	// See timers.h
    171c:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1720:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1724:	0b 97       	sbiw	r24, 0x0b	; 11
    1726:	d0 f4       	brcc	.+52     	; 0x175c <handle_serial+0x1da>

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    1728:	ec e2       	ldi	r30, 0x2C	; 44
    172a:	fa e2       	ldi	r31, 0x2A	; 42
    172c:	06 c0       	rjmp	.+12     	; 0x173a <handle_serial+0x1b8>
		if (ticks_TCB0 > 10) {	// See timers.h
    172e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1732:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1736:	0b 97       	sbiw	r24, 0x0b	; 11
    1738:	88 f4       	brcc	.+34     	; 0x175c <handle_serial+0x1da>
			return;
		}
		asm("nop");
    173a:	00 00       	nop

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    173c:	80 81       	ld	r24, Z
    173e:	88 23       	and	r24, r24
    1740:	b1 f3       	breq	.-20     	; 0x172e <handle_serial+0x1ac>
			return;
		}
		asm("nop");
	}

	send_USART((uint8_t*) strbuf, strlen(strbuf));
    1742:	ce 01       	movw	r24, r28
    1744:	80 5c       	subi	r24, 0xC0	; 192
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	fc 01       	movw	r30, r24
    174a:	01 90       	ld	r0, Z+
    174c:	00 20       	and	r0, r0
    174e:	e9 f7       	brne	.-6      	; 0x174a <handle_serial+0x1c8>
    1750:	31 97       	sbiw	r30, 0x01	; 1
    1752:	bf 01       	movw	r22, r30
    1754:	68 1b       	sub	r22, r24
    1756:	79 0b       	sbc	r23, r25
    1758:	0e 94 a5 0a 	call	0x154a	; 0x154a <send_USART>

}
    175c:	cd 55       	subi	r28, 0x5D	; 93
    175e:	df 4f       	sbci	r29, 0xFF	; 255
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	08 95       	ret

0000177a <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    1790:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    1794:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <recv0_buf+0x101>
    1798:	9f 3f       	cpi	r25, 0xFF	; 255
    179a:	b1 f0       	breq	.+44     	; 0x17c8 <__vector_17+0x4e>
		if ((char) c == '\r') {
    179c:	8d 30       	cpi	r24, 0x0D	; 13
    179e:	51 f4       	brne	.+20     	; 0x17b4 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    17a0:	e0 91 2c 29 	lds	r30, 0x292C	; 0x80292c <recv0_buf+0x101>
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	e5 5d       	subi	r30, 0xD5	; 213
    17a8:	f7 4d       	sbci	r31, 0xD7	; 215
    17aa:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <recv0_buf+0xff>
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <__vector_17+0x4e>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    17b4:	ac e2       	ldi	r26, 0x2C	; 44
    17b6:	b9 e2       	ldi	r27, 0x29	; 41
    17b8:	ec 91       	ld	r30, X
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	9e 0f       	add	r25, r30
    17be:	9c 93       	st	X, r25
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	e5 5d       	subi	r30, 0xD5	; 213
    17c4:	f7 4d       	sbci	r31, 0xD7	; 215
    17c6:	80 83       	st	Z, r24
		}
	}
}
    17c8:	ff 91       	pop	r31
    17ca:	ef 91       	pop	r30
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    17f8:	c0 e0       	ldi	r28, 0x00	; 0
    17fa:	d8 e0       	ldi	r29, 0x08	; 8
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	8f 7d       	andi	r24, 0xDF	; 223
    1800:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    1802:	ad e2       	ldi	r26, 0x2D	; 45
    1804:	ba e2       	ldi	r27, 0x2A	; 42
    1806:	ec 91       	ld	r30, X
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	8e 0f       	add	r24, r30
    180c:	8c 93       	st	X, r24
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	e3 5d       	subi	r30, 0xD3	; 211
    1812:	f6 4d       	sbci	r31, 0xD6	; 214
    1814:	80 81       	ld	r24, Z
    1816:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    1818:	90 91 2e 2a 	lds	r25, 0x2A2E	; 0x802a2e <send0_buf+0x101>
    181c:	8c 91       	ld	r24, X
    181e:	98 13       	cpse	r25, r24
    1820:	04 c0       	rjmp	.+8      	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
		send0_buf.done = TRUE;				// Last character sent
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <__DATA_REGION_LENGTH__+0x34>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    182a:	e0 e0       	ldi	r30, 0x00	; 0
    182c:	f8 e0       	ldi	r31, 0x08	; 8
    182e:	85 81       	ldd	r24, Z+5	; 0x05
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	85 83       	std	Z+5, r24	; 0x05
	}
}
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    184e:	e0 e4       	ldi	r30, 0x40	; 64
    1850:	f4 e0       	ldi	r31, 0x04	; 4
    1852:	80 ef       	ldi	r24, 0xF0	; 240
    1854:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1856:	81 83       	std	Z+1, r24	; 0x01
    1858:	08 95       	ret

0000185a <__subsf3>:
    185a:	50 58       	subi	r21, 0x80	; 128

0000185c <__addsf3>:
    185c:	bb 27       	eor	r27, r27
    185e:	aa 27       	eor	r26, r26
    1860:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3x>
    1864:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__fp_round>
    1868:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fp_pscA>
    186c:	38 f0       	brcs	.+14     	; 0x187c <__addsf3+0x20>
    186e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscB>
    1872:	20 f0       	brcs	.+8      	; 0x187c <__addsf3+0x20>
    1874:	39 f4       	brne	.+14     	; 0x1884 <__addsf3+0x28>
    1876:	9f 3f       	cpi	r25, 0xFF	; 255
    1878:	19 f4       	brne	.+6      	; 0x1880 <__addsf3+0x24>
    187a:	26 f4       	brtc	.+8      	; 0x1884 <__addsf3+0x28>
    187c:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_nan>
    1880:	0e f4       	brtc	.+2      	; 0x1884 <__addsf3+0x28>
    1882:	e0 95       	com	r30
    1884:	e7 fb       	bst	r30, 7
    1886:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_inf>

0000188a <__addsf3x>:
    188a:	e9 2f       	mov	r30, r25
    188c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_split3>
    1890:	58 f3       	brcs	.-42     	; 0x1868 <__addsf3+0xc>
    1892:	ba 17       	cp	r27, r26
    1894:	62 07       	cpc	r22, r18
    1896:	73 07       	cpc	r23, r19
    1898:	84 07       	cpc	r24, r20
    189a:	95 07       	cpc	r25, r21
    189c:	20 f0       	brcs	.+8      	; 0x18a6 <__addsf3x+0x1c>
    189e:	79 f4       	brne	.+30     	; 0x18be <__addsf3x+0x34>
    18a0:	a6 f5       	brtc	.+104    	; 0x190a <__addsf3x+0x80>
    18a2:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__fp_zero>
    18a6:	0e f4       	brtc	.+2      	; 0x18aa <__addsf3x+0x20>
    18a8:	e0 95       	com	r30
    18aa:	0b 2e       	mov	r0, r27
    18ac:	ba 2f       	mov	r27, r26
    18ae:	a0 2d       	mov	r26, r0
    18b0:	0b 01       	movw	r0, r22
    18b2:	b9 01       	movw	r22, r18
    18b4:	90 01       	movw	r18, r0
    18b6:	0c 01       	movw	r0, r24
    18b8:	ca 01       	movw	r24, r20
    18ba:	a0 01       	movw	r20, r0
    18bc:	11 24       	eor	r1, r1
    18be:	ff 27       	eor	r31, r31
    18c0:	59 1b       	sub	r21, r25
    18c2:	99 f0       	breq	.+38     	; 0x18ea <__addsf3x+0x60>
    18c4:	59 3f       	cpi	r21, 0xF9	; 249
    18c6:	50 f4       	brcc	.+20     	; 0x18dc <__addsf3x+0x52>
    18c8:	50 3e       	cpi	r21, 0xE0	; 224
    18ca:	68 f1       	brcs	.+90     	; 0x1926 <__addsf3x+0x9c>
    18cc:	1a 16       	cp	r1, r26
    18ce:	f0 40       	sbci	r31, 0x00	; 0
    18d0:	a2 2f       	mov	r26, r18
    18d2:	23 2f       	mov	r18, r19
    18d4:	34 2f       	mov	r19, r20
    18d6:	44 27       	eor	r20, r20
    18d8:	58 5f       	subi	r21, 0xF8	; 248
    18da:	f3 cf       	rjmp	.-26     	; 0x18c2 <__addsf3x+0x38>
    18dc:	46 95       	lsr	r20
    18de:	37 95       	ror	r19
    18e0:	27 95       	ror	r18
    18e2:	a7 95       	ror	r26
    18e4:	f0 40       	sbci	r31, 0x00	; 0
    18e6:	53 95       	inc	r21
    18e8:	c9 f7       	brne	.-14     	; 0x18dc <__addsf3x+0x52>
    18ea:	7e f4       	brtc	.+30     	; 0x190a <__addsf3x+0x80>
    18ec:	1f 16       	cp	r1, r31
    18ee:	ba 0b       	sbc	r27, r26
    18f0:	62 0b       	sbc	r22, r18
    18f2:	73 0b       	sbc	r23, r19
    18f4:	84 0b       	sbc	r24, r20
    18f6:	ba f0       	brmi	.+46     	; 0x1926 <__addsf3x+0x9c>
    18f8:	91 50       	subi	r25, 0x01	; 1
    18fa:	a1 f0       	breq	.+40     	; 0x1924 <__addsf3x+0x9a>
    18fc:	ff 0f       	add	r31, r31
    18fe:	bb 1f       	adc	r27, r27
    1900:	66 1f       	adc	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	c2 f7       	brpl	.-16     	; 0x18f8 <__addsf3x+0x6e>
    1908:	0e c0       	rjmp	.+28     	; 0x1926 <__addsf3x+0x9c>
    190a:	ba 0f       	add	r27, r26
    190c:	62 1f       	adc	r22, r18
    190e:	73 1f       	adc	r23, r19
    1910:	84 1f       	adc	r24, r20
    1912:	48 f4       	brcc	.+18     	; 0x1926 <__addsf3x+0x9c>
    1914:	87 95       	ror	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b7 95       	ror	r27
    191c:	f7 95       	ror	r31
    191e:	9e 3f       	cpi	r25, 0xFE	; 254
    1920:	08 f0       	brcs	.+2      	; 0x1924 <__addsf3x+0x9a>
    1922:	b0 cf       	rjmp	.-160    	; 0x1884 <__addsf3+0x28>
    1924:	93 95       	inc	r25
    1926:	88 0f       	add	r24, r24
    1928:	08 f0       	brcs	.+2      	; 0x192c <__addsf3x+0xa2>
    192a:	99 27       	eor	r25, r25
    192c:	ee 0f       	add	r30, r30
    192e:	97 95       	ror	r25
    1930:	87 95       	ror	r24
    1932:	08 95       	ret

00001934 <__cmpsf2>:
    1934:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__fp_cmp>
    1938:	08 f4       	brcc	.+2      	; 0x193c <__cmpsf2+0x8>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	08 95       	ret

0000193e <__divsf3>:
    193e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__divsf3x>
    1942:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__fp_round>
    1946:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscB>
    194a:	58 f0       	brcs	.+22     	; 0x1962 <__divsf3+0x24>
    194c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fp_pscA>
    1950:	40 f0       	brcs	.+16     	; 0x1962 <__divsf3+0x24>
    1952:	29 f4       	brne	.+10     	; 0x195e <__divsf3+0x20>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	29 f0       	breq	.+10     	; 0x1962 <__divsf3+0x24>
    1958:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_inf>
    195c:	51 11       	cpse	r21, r1
    195e:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__fp_szero>
    1962:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_nan>

00001966 <__divsf3x>:
    1966:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_split3>
    196a:	68 f3       	brcs	.-38     	; 0x1946 <__divsf3+0x8>

0000196c <__divsf3_pse>:
    196c:	99 23       	and	r25, r25
    196e:	b1 f3       	breq	.-20     	; 0x195c <__divsf3+0x1e>
    1970:	55 23       	and	r21, r21
    1972:	91 f3       	breq	.-28     	; 0x1958 <__divsf3+0x1a>
    1974:	95 1b       	sub	r25, r21
    1976:	55 0b       	sbc	r21, r21
    1978:	bb 27       	eor	r27, r27
    197a:	aa 27       	eor	r26, r26
    197c:	62 17       	cp	r22, r18
    197e:	73 07       	cpc	r23, r19
    1980:	84 07       	cpc	r24, r20
    1982:	38 f0       	brcs	.+14     	; 0x1992 <__divsf3_pse+0x26>
    1984:	9f 5f       	subi	r25, 0xFF	; 255
    1986:	5f 4f       	sbci	r21, 0xFF	; 255
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	44 1f       	adc	r20, r20
    198e:	aa 1f       	adc	r26, r26
    1990:	a9 f3       	breq	.-22     	; 0x197c <__divsf3_pse+0x10>
    1992:	35 d0       	rcall	.+106    	; 0x19fe <__divsf3_pse+0x92>
    1994:	0e 2e       	mov	r0, r30
    1996:	3a f0       	brmi	.+14     	; 0x19a6 <__divsf3_pse+0x3a>
    1998:	e0 e8       	ldi	r30, 0x80	; 128
    199a:	32 d0       	rcall	.+100    	; 0x1a00 <__divsf3_pse+0x94>
    199c:	91 50       	subi	r25, 0x01	; 1
    199e:	50 40       	sbci	r21, 0x00	; 0
    19a0:	e6 95       	lsr	r30
    19a2:	00 1c       	adc	r0, r0
    19a4:	ca f7       	brpl	.-14     	; 0x1998 <__divsf3_pse+0x2c>
    19a6:	2b d0       	rcall	.+86     	; 0x19fe <__divsf3_pse+0x92>
    19a8:	fe 2f       	mov	r31, r30
    19aa:	29 d0       	rcall	.+82     	; 0x19fe <__divsf3_pse+0x92>
    19ac:	66 0f       	add	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	bb 1f       	adc	r27, r27
    19b4:	26 17       	cp	r18, r22
    19b6:	37 07       	cpc	r19, r23
    19b8:	48 07       	cpc	r20, r24
    19ba:	ab 07       	cpc	r26, r27
    19bc:	b0 e8       	ldi	r27, 0x80	; 128
    19be:	09 f0       	breq	.+2      	; 0x19c2 <__divsf3_pse+0x56>
    19c0:	bb 0b       	sbc	r27, r27
    19c2:	80 2d       	mov	r24, r0
    19c4:	bf 01       	movw	r22, r30
    19c6:	ff 27       	eor	r31, r31
    19c8:	93 58       	subi	r25, 0x83	; 131
    19ca:	5f 4f       	sbci	r21, 0xFF	; 255
    19cc:	3a f0       	brmi	.+14     	; 0x19dc <__divsf3_pse+0x70>
    19ce:	9e 3f       	cpi	r25, 0xFE	; 254
    19d0:	51 05       	cpc	r21, r1
    19d2:	78 f0       	brcs	.+30     	; 0x19f2 <__divsf3_pse+0x86>
    19d4:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_inf>
    19d8:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__fp_szero>
    19dc:	5f 3f       	cpi	r21, 0xFF	; 255
    19de:	e4 f3       	brlt	.-8      	; 0x19d8 <__divsf3_pse+0x6c>
    19e0:	98 3e       	cpi	r25, 0xE8	; 232
    19e2:	d4 f3       	brlt	.-12     	; 0x19d8 <__divsf3_pse+0x6c>
    19e4:	86 95       	lsr	r24
    19e6:	77 95       	ror	r23
    19e8:	67 95       	ror	r22
    19ea:	b7 95       	ror	r27
    19ec:	f7 95       	ror	r31
    19ee:	9f 5f       	subi	r25, 0xFF	; 255
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__divsf3_pse+0x78>
    19f2:	88 0f       	add	r24, r24
    19f4:	91 1d       	adc	r25, r1
    19f6:	96 95       	lsr	r25
    19f8:	87 95       	ror	r24
    19fa:	97 f9       	bld	r25, 7
    19fc:	08 95       	ret
    19fe:	e1 e0       	ldi	r30, 0x01	; 1
    1a00:	66 0f       	add	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	bb 1f       	adc	r27, r27
    1a08:	62 17       	cp	r22, r18
    1a0a:	73 07       	cpc	r23, r19
    1a0c:	84 07       	cpc	r24, r20
    1a0e:	ba 07       	cpc	r27, r26
    1a10:	20 f0       	brcs	.+8      	; 0x1a1a <__divsf3_pse+0xae>
    1a12:	62 1b       	sub	r22, r18
    1a14:	73 0b       	sbc	r23, r19
    1a16:	84 0b       	sbc	r24, r20
    1a18:	ba 0b       	sbc	r27, r26
    1a1a:	ee 1f       	adc	r30, r30
    1a1c:	88 f7       	brcc	.-30     	; 0x1a00 <__divsf3_pse+0x94>
    1a1e:	e0 95       	com	r30
    1a20:	08 95       	ret

00001a22 <__fixunssfsi>:
    1a22:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_splitA>
    1a26:	88 f0       	brcs	.+34     	; 0x1a4a <__fixunssfsi+0x28>
    1a28:	9f 57       	subi	r25, 0x7F	; 127
    1a2a:	98 f0       	brcs	.+38     	; 0x1a52 <__fixunssfsi+0x30>
    1a2c:	b9 2f       	mov	r27, r25
    1a2e:	99 27       	eor	r25, r25
    1a30:	b7 51       	subi	r27, 0x17	; 23
    1a32:	b0 f0       	brcs	.+44     	; 0x1a60 <__fixunssfsi+0x3e>
    1a34:	e1 f0       	breq	.+56     	; 0x1a6e <__fixunssfsi+0x4c>
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	1a f0       	brmi	.+6      	; 0x1a46 <__fixunssfsi+0x24>
    1a40:	ba 95       	dec	r27
    1a42:	c9 f7       	brne	.-14     	; 0x1a36 <__fixunssfsi+0x14>
    1a44:	14 c0       	rjmp	.+40     	; 0x1a6e <__fixunssfsi+0x4c>
    1a46:	b1 30       	cpi	r27, 0x01	; 1
    1a48:	91 f0       	breq	.+36     	; 0x1a6e <__fixunssfsi+0x4c>
    1a4a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fp_zero>
    1a4e:	b1 e0       	ldi	r27, 0x01	; 1
    1a50:	08 95       	ret
    1a52:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__fp_zero>
    1a56:	67 2f       	mov	r22, r23
    1a58:	78 2f       	mov	r23, r24
    1a5a:	88 27       	eor	r24, r24
    1a5c:	b8 5f       	subi	r27, 0xF8	; 248
    1a5e:	39 f0       	breq	.+14     	; 0x1a6e <__fixunssfsi+0x4c>
    1a60:	b9 3f       	cpi	r27, 0xF9	; 249
    1a62:	cc f3       	brlt	.-14     	; 0x1a56 <__fixunssfsi+0x34>
    1a64:	86 95       	lsr	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b3 95       	inc	r27
    1a6c:	d9 f7       	brne	.-10     	; 0x1a64 <__fixunssfsi+0x42>
    1a6e:	3e f4       	brtc	.+14     	; 0x1a7e <__fixunssfsi+0x5c>
    1a70:	90 95       	com	r25
    1a72:	80 95       	com	r24
    1a74:	70 95       	com	r23
    1a76:	61 95       	neg	r22
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	08 95       	ret

00001a80 <__floatunsisf>:
    1a80:	e8 94       	clt
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <__floatsisf+0x12>

00001a84 <__floatsisf>:
    1a84:	97 fb       	bst	r25, 7
    1a86:	3e f4       	brtc	.+14     	; 0x1a96 <__floatsisf+0x12>
    1a88:	90 95       	com	r25
    1a8a:	80 95       	com	r24
    1a8c:	70 95       	com	r23
    1a8e:	61 95       	neg	r22
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	8f 4f       	sbci	r24, 0xFF	; 255
    1a94:	9f 4f       	sbci	r25, 0xFF	; 255
    1a96:	99 23       	and	r25, r25
    1a98:	a9 f0       	breq	.+42     	; 0x1ac4 <__floatsisf+0x40>
    1a9a:	f9 2f       	mov	r31, r25
    1a9c:	96 e9       	ldi	r25, 0x96	; 150
    1a9e:	bb 27       	eor	r27, r27
    1aa0:	93 95       	inc	r25
    1aa2:	f6 95       	lsr	r31
    1aa4:	87 95       	ror	r24
    1aa6:	77 95       	ror	r23
    1aa8:	67 95       	ror	r22
    1aaa:	b7 95       	ror	r27
    1aac:	f1 11       	cpse	r31, r1
    1aae:	f8 cf       	rjmp	.-16     	; 0x1aa0 <__floatsisf+0x1c>
    1ab0:	fa f4       	brpl	.+62     	; 0x1af0 <__floatsisf+0x6c>
    1ab2:	bb 0f       	add	r27, r27
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <__floatsisf+0x36>
    1ab6:	60 ff       	sbrs	r22, 0
    1ab8:	1b c0       	rjmp	.+54     	; 0x1af0 <__floatsisf+0x6c>
    1aba:	6f 5f       	subi	r22, 0xFF	; 255
    1abc:	7f 4f       	sbci	r23, 0xFF	; 255
    1abe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	16 c0       	rjmp	.+44     	; 0x1af0 <__floatsisf+0x6c>
    1ac4:	88 23       	and	r24, r24
    1ac6:	11 f0       	breq	.+4      	; 0x1acc <__floatsisf+0x48>
    1ac8:	96 e9       	ldi	r25, 0x96	; 150
    1aca:	11 c0       	rjmp	.+34     	; 0x1aee <__floatsisf+0x6a>
    1acc:	77 23       	and	r23, r23
    1ace:	21 f0       	breq	.+8      	; 0x1ad8 <__floatsisf+0x54>
    1ad0:	9e e8       	ldi	r25, 0x8E	; 142
    1ad2:	87 2f       	mov	r24, r23
    1ad4:	76 2f       	mov	r23, r22
    1ad6:	05 c0       	rjmp	.+10     	; 0x1ae2 <__floatsisf+0x5e>
    1ad8:	66 23       	and	r22, r22
    1ada:	71 f0       	breq	.+28     	; 0x1af8 <__floatsisf+0x74>
    1adc:	96 e8       	ldi	r25, 0x86	; 134
    1ade:	86 2f       	mov	r24, r22
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	2a f0       	brmi	.+10     	; 0x1af0 <__floatsisf+0x6c>
    1ae6:	9a 95       	dec	r25
    1ae8:	66 0f       	add	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	da f7       	brpl	.-10     	; 0x1ae6 <__floatsisf+0x62>
    1af0:	88 0f       	add	r24, r24
    1af2:	96 95       	lsr	r25
    1af4:	87 95       	ror	r24
    1af6:	97 f9       	bld	r25, 7
    1af8:	08 95       	ret

00001afa <__fp_cmp>:
    1afa:	99 0f       	add	r25, r25
    1afc:	00 08       	sbc	r0, r0
    1afe:	55 0f       	add	r21, r21
    1b00:	aa 0b       	sbc	r26, r26
    1b02:	e0 e8       	ldi	r30, 0x80	; 128
    1b04:	fe ef       	ldi	r31, 0xFE	; 254
    1b06:	16 16       	cp	r1, r22
    1b08:	17 06       	cpc	r1, r23
    1b0a:	e8 07       	cpc	r30, r24
    1b0c:	f9 07       	cpc	r31, r25
    1b0e:	c0 f0       	brcs	.+48     	; 0x1b40 <__fp_cmp+0x46>
    1b10:	12 16       	cp	r1, r18
    1b12:	13 06       	cpc	r1, r19
    1b14:	e4 07       	cpc	r30, r20
    1b16:	f5 07       	cpc	r31, r21
    1b18:	98 f0       	brcs	.+38     	; 0x1b40 <__fp_cmp+0x46>
    1b1a:	62 1b       	sub	r22, r18
    1b1c:	73 0b       	sbc	r23, r19
    1b1e:	84 0b       	sbc	r24, r20
    1b20:	95 0b       	sbc	r25, r21
    1b22:	39 f4       	brne	.+14     	; 0x1b32 <__fp_cmp+0x38>
    1b24:	0a 26       	eor	r0, r26
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <__fp_cmp+0x46>
    1b28:	23 2b       	or	r18, r19
    1b2a:	24 2b       	or	r18, r20
    1b2c:	25 2b       	or	r18, r21
    1b2e:	21 f4       	brne	.+8      	; 0x1b38 <__fp_cmp+0x3e>
    1b30:	08 95       	ret
    1b32:	0a 26       	eor	r0, r26
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <__fp_cmp+0x3e>
    1b36:	a1 40       	sbci	r26, 0x01	; 1
    1b38:	a6 95       	lsr	r26
    1b3a:	8f ef       	ldi	r24, 0xFF	; 255
    1b3c:	81 1d       	adc	r24, r1
    1b3e:	81 1d       	adc	r24, r1
    1b40:	08 95       	ret

00001b42 <__fp_inf>:
    1b42:	97 f9       	bld	r25, 7
    1b44:	9f 67       	ori	r25, 0x7F	; 127
    1b46:	80 e8       	ldi	r24, 0x80	; 128
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	08 95       	ret

00001b4e <__fp_nan>:
    1b4e:	9f ef       	ldi	r25, 0xFF	; 255
    1b50:	80 ec       	ldi	r24, 0xC0	; 192
    1b52:	08 95       	ret

00001b54 <__fp_pscA>:
    1b54:	00 24       	eor	r0, r0
    1b56:	0a 94       	dec	r0
    1b58:	16 16       	cp	r1, r22
    1b5a:	17 06       	cpc	r1, r23
    1b5c:	18 06       	cpc	r1, r24
    1b5e:	09 06       	cpc	r0, r25
    1b60:	08 95       	ret

00001b62 <__fp_pscB>:
    1b62:	00 24       	eor	r0, r0
    1b64:	0a 94       	dec	r0
    1b66:	12 16       	cp	r1, r18
    1b68:	13 06       	cpc	r1, r19
    1b6a:	14 06       	cpc	r1, r20
    1b6c:	05 06       	cpc	r0, r21
    1b6e:	08 95       	ret

00001b70 <__fp_round>:
    1b70:	09 2e       	mov	r0, r25
    1b72:	03 94       	inc	r0
    1b74:	00 0c       	add	r0, r0
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <__fp_round+0xc>
    1b78:	88 23       	and	r24, r24
    1b7a:	52 f0       	brmi	.+20     	; 0x1b90 <__fp_round+0x20>
    1b7c:	bb 0f       	add	r27, r27
    1b7e:	40 f4       	brcc	.+16     	; 0x1b90 <__fp_round+0x20>
    1b80:	bf 2b       	or	r27, r31
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <__fp_round+0x18>
    1b84:	60 ff       	sbrs	r22, 0
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <__fp_round+0x20>
    1b88:	6f 5f       	subi	r22, 0xFF	; 255
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	08 95       	ret

00001b92 <__fp_split3>:
    1b92:	57 fd       	sbrc	r21, 7
    1b94:	90 58       	subi	r25, 0x80	; 128
    1b96:	44 0f       	add	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	59 f0       	breq	.+22     	; 0x1bb2 <__fp_splitA+0x10>
    1b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <__fp_splitA+0x1a>
    1ba0:	47 95       	ror	r20

00001ba2 <__fp_splitA>:
    1ba2:	88 0f       	add	r24, r24
    1ba4:	97 fb       	bst	r25, 7
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <__fp_splitA+0x20>
    1baa:	9f 3f       	cpi	r25, 0xFF	; 255
    1bac:	79 f0       	breq	.+30     	; 0x1bcc <__fp_splitA+0x2a>
    1bae:	87 95       	ror	r24
    1bb0:	08 95       	ret
    1bb2:	12 16       	cp	r1, r18
    1bb4:	13 06       	cpc	r1, r19
    1bb6:	14 06       	cpc	r1, r20
    1bb8:	55 1f       	adc	r21, r21
    1bba:	f2 cf       	rjmp	.-28     	; 0x1ba0 <__fp_split3+0xe>
    1bbc:	46 95       	lsr	r20
    1bbe:	f1 df       	rcall	.-30     	; 0x1ba2 <__fp_splitA>
    1bc0:	08 c0       	rjmp	.+16     	; 0x1bd2 <__fp_splitA+0x30>
    1bc2:	16 16       	cp	r1, r22
    1bc4:	17 06       	cpc	r1, r23
    1bc6:	18 06       	cpc	r1, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	f1 cf       	rjmp	.-30     	; 0x1bae <__fp_splitA+0xc>
    1bcc:	86 95       	lsr	r24
    1bce:	71 05       	cpc	r23, r1
    1bd0:	61 05       	cpc	r22, r1
    1bd2:	08 94       	sec
    1bd4:	08 95       	ret

00001bd6 <__fp_zero>:
    1bd6:	e8 94       	clt

00001bd8 <__fp_szero>:
    1bd8:	bb 27       	eor	r27, r27
    1bda:	66 27       	eor	r22, r22
    1bdc:	77 27       	eor	r23, r23
    1bde:	cb 01       	movw	r24, r22
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <__mulsf3>:
    1be4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__mulsf3x>
    1be8:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__fp_round>
    1bec:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fp_pscA>
    1bf0:	38 f0       	brcs	.+14     	; 0x1c00 <__mulsf3+0x1c>
    1bf2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_pscB>
    1bf6:	20 f0       	brcs	.+8      	; 0x1c00 <__mulsf3+0x1c>
    1bf8:	95 23       	and	r25, r21
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <__mulsf3+0x1c>
    1bfc:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_inf>
    1c00:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_nan>
    1c04:	11 24       	eor	r1, r1
    1c06:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__fp_szero>

00001c0a <__mulsf3x>:
    1c0a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_split3>
    1c0e:	70 f3       	brcs	.-36     	; 0x1bec <__mulsf3+0x8>

00001c10 <__mulsf3_pse>:
    1c10:	95 9f       	mul	r25, r21
    1c12:	c1 f3       	breq	.-16     	; 0x1c04 <__mulsf3+0x20>
    1c14:	95 0f       	add	r25, r21
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	55 1f       	adc	r21, r21
    1c1a:	62 9f       	mul	r22, r18
    1c1c:	f0 01       	movw	r30, r0
    1c1e:	72 9f       	mul	r23, r18
    1c20:	bb 27       	eor	r27, r27
    1c22:	f0 0d       	add	r31, r0
    1c24:	b1 1d       	adc	r27, r1
    1c26:	63 9f       	mul	r22, r19
    1c28:	aa 27       	eor	r26, r26
    1c2a:	f0 0d       	add	r31, r0
    1c2c:	b1 1d       	adc	r27, r1
    1c2e:	aa 1f       	adc	r26, r26
    1c30:	64 9f       	mul	r22, r20
    1c32:	66 27       	eor	r22, r22
    1c34:	b0 0d       	add	r27, r0
    1c36:	a1 1d       	adc	r26, r1
    1c38:	66 1f       	adc	r22, r22
    1c3a:	82 9f       	mul	r24, r18
    1c3c:	22 27       	eor	r18, r18
    1c3e:	b0 0d       	add	r27, r0
    1c40:	a1 1d       	adc	r26, r1
    1c42:	62 1f       	adc	r22, r18
    1c44:	73 9f       	mul	r23, r19
    1c46:	b0 0d       	add	r27, r0
    1c48:	a1 1d       	adc	r26, r1
    1c4a:	62 1f       	adc	r22, r18
    1c4c:	83 9f       	mul	r24, r19
    1c4e:	a0 0d       	add	r26, r0
    1c50:	61 1d       	adc	r22, r1
    1c52:	22 1f       	adc	r18, r18
    1c54:	74 9f       	mul	r23, r20
    1c56:	33 27       	eor	r19, r19
    1c58:	a0 0d       	add	r26, r0
    1c5a:	61 1d       	adc	r22, r1
    1c5c:	23 1f       	adc	r18, r19
    1c5e:	84 9f       	mul	r24, r20
    1c60:	60 0d       	add	r22, r0
    1c62:	21 1d       	adc	r18, r1
    1c64:	82 2f       	mov	r24, r18
    1c66:	76 2f       	mov	r23, r22
    1c68:	6a 2f       	mov	r22, r26
    1c6a:	11 24       	eor	r1, r1
    1c6c:	9f 57       	subi	r25, 0x7F	; 127
    1c6e:	50 40       	sbci	r21, 0x00	; 0
    1c70:	9a f0       	brmi	.+38     	; 0x1c98 <__mulsf3_pse+0x88>
    1c72:	f1 f0       	breq	.+60     	; 0x1cb0 <__mulsf3_pse+0xa0>
    1c74:	88 23       	and	r24, r24
    1c76:	4a f0       	brmi	.+18     	; 0x1c8a <__mulsf3_pse+0x7a>
    1c78:	ee 0f       	add	r30, r30
    1c7a:	ff 1f       	adc	r31, r31
    1c7c:	bb 1f       	adc	r27, r27
    1c7e:	66 1f       	adc	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	88 1f       	adc	r24, r24
    1c84:	91 50       	subi	r25, 0x01	; 1
    1c86:	50 40       	sbci	r21, 0x00	; 0
    1c88:	a9 f7       	brne	.-22     	; 0x1c74 <__mulsf3_pse+0x64>
    1c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c8c:	51 05       	cpc	r21, r1
    1c8e:	80 f0       	brcs	.+32     	; 0x1cb0 <__mulsf3_pse+0xa0>
    1c90:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_inf>
    1c94:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__fp_szero>
    1c98:	5f 3f       	cpi	r21, 0xFF	; 255
    1c9a:	e4 f3       	brlt	.-8      	; 0x1c94 <__mulsf3_pse+0x84>
    1c9c:	98 3e       	cpi	r25, 0xE8	; 232
    1c9e:	d4 f3       	brlt	.-12     	; 0x1c94 <__mulsf3_pse+0x84>
    1ca0:	86 95       	lsr	r24
    1ca2:	77 95       	ror	r23
    1ca4:	67 95       	ror	r22
    1ca6:	b7 95       	ror	r27
    1ca8:	f7 95       	ror	r31
    1caa:	e7 95       	ror	r30
    1cac:	9f 5f       	subi	r25, 0xFF	; 255
    1cae:	c1 f7       	brne	.-16     	; 0x1ca0 <__mulsf3_pse+0x90>
    1cb0:	fe 2b       	or	r31, r30
    1cb2:	88 0f       	add	r24, r24
    1cb4:	91 1d       	adc	r25, r1
    1cb6:	96 95       	lsr	r25
    1cb8:	87 95       	ror	r24
    1cba:	97 f9       	bld	r25, 7
    1cbc:	08 95       	ret

00001cbe <__tablejump2__>:
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	05 90       	lpm	r0, Z+
    1cc4:	f4 91       	lpm	r31, Z
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	09 94       	ijmp

00001cca <strcat>:
    1cca:	fb 01       	movw	r30, r22
    1ccc:	dc 01       	movw	r26, r24
    1cce:	0d 90       	ld	r0, X+
    1cd0:	00 20       	and	r0, r0
    1cd2:	e9 f7       	brne	.-6      	; 0x1cce <strcat+0x4>
    1cd4:	11 97       	sbiw	r26, 0x01	; 1
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	0d 92       	st	X+, r0
    1cda:	00 20       	and	r0, r0
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <strcat+0xc>
    1cde:	08 95       	ret

00001ce0 <strcpy>:
    1ce0:	fb 01       	movw	r30, r22
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	0d 92       	st	X+, r0
    1ce8:	00 20       	and	r0, r0
    1cea:	e1 f7       	brne	.-8      	; 0x1ce4 <strcpy+0x4>
    1cec:	08 95       	ret

00001cee <sprintf>:
    1cee:	ae e0       	ldi	r26, 0x0E	; 14
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	ed e7       	ldi	r30, 0x7D	; 125
    1cf4:	fe e0       	ldi	r31, 0x0E	; 14
    1cf6:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__prologue_saves__+0x1c>
    1cfa:	0d 89       	ldd	r16, Y+21	; 0x15
    1cfc:	1e 89       	ldd	r17, Y+22	; 0x16
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	8c 83       	std	Y+4, r24	; 0x04
    1d02:	09 83       	std	Y+1, r16	; 0x01
    1d04:	1a 83       	std	Y+2, r17	; 0x02
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	9f e7       	ldi	r25, 0x7F	; 127
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	ae 01       	movw	r20, r28
    1d10:	47 5e       	subi	r20, 0xE7	; 231
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	6f 89       	ldd	r22, Y+23	; 0x17
    1d16:	78 8d       	ldd	r23, Y+24	; 0x18
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <vfprintf>
    1d20:	ef 81       	ldd	r30, Y+7	; 0x07
    1d22:	f8 85       	ldd	r31, Y+8	; 0x08
    1d24:	e0 0f       	add	r30, r16
    1d26:	f1 1f       	adc	r31, r17
    1d28:	10 82       	st	Z, r1
    1d2a:	2e 96       	adiw	r28, 0x0e	; 14
    1d2c:	e4 e0       	ldi	r30, 0x04	; 4
    1d2e:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x1c>

00001d32 <vfprintf>:
    1d32:	ab e0       	ldi	r26, 0x0B	; 11
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	ef e9       	ldi	r30, 0x9F	; 159
    1d38:	fe e0       	ldi	r31, 0x0E	; 14
    1d3a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__>
    1d3e:	6c 01       	movw	r12, r24
    1d40:	7b 01       	movw	r14, r22
    1d42:	8a 01       	movw	r16, r20
    1d44:	fc 01       	movw	r30, r24
    1d46:	16 82       	std	Z+6, r1	; 0x06
    1d48:	17 82       	std	Z+7, r1	; 0x07
    1d4a:	83 81       	ldd	r24, Z+3	; 0x03
    1d4c:	81 ff       	sbrs	r24, 1
    1d4e:	cc c1       	rjmp	.+920    	; 0x20e8 <vfprintf+0x3b6>
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	3c 01       	movw	r6, r24
    1d56:	f6 01       	movw	r30, r12
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	93 fd       	sbrc	r25, 3
    1d5e:	85 91       	lpm	r24, Z+
    1d60:	93 ff       	sbrs	r25, 3
    1d62:	81 91       	ld	r24, Z+
    1d64:	7f 01       	movw	r14, r30
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <vfprintf+0x3a>
    1d6a:	ba c1       	rjmp	.+884    	; 0x20e0 <vfprintf+0x3ae>
    1d6c:	85 32       	cpi	r24, 0x25	; 37
    1d6e:	39 f4       	brne	.+14     	; 0x1d7e <vfprintf+0x4c>
    1d70:	93 fd       	sbrc	r25, 3
    1d72:	85 91       	lpm	r24, Z+
    1d74:	93 ff       	sbrs	r25, 3
    1d76:	81 91       	ld	r24, Z+
    1d78:	7f 01       	movw	r14, r30
    1d7a:	85 32       	cpi	r24, 0x25	; 37
    1d7c:	29 f4       	brne	.+10     	; 0x1d88 <vfprintf+0x56>
    1d7e:	b6 01       	movw	r22, r12
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    1d86:	e7 cf       	rjmp	.-50     	; 0x1d56 <vfprintf+0x24>
    1d88:	91 2c       	mov	r9, r1
    1d8a:	21 2c       	mov	r2, r1
    1d8c:	31 2c       	mov	r3, r1
    1d8e:	ff e1       	ldi	r31, 0x1F	; 31
    1d90:	f3 15       	cp	r31, r3
    1d92:	d8 f0       	brcs	.+54     	; 0x1dca <vfprintf+0x98>
    1d94:	8b 32       	cpi	r24, 0x2B	; 43
    1d96:	79 f0       	breq	.+30     	; 0x1db6 <vfprintf+0x84>
    1d98:	38 f4       	brcc	.+14     	; 0x1da8 <vfprintf+0x76>
    1d9a:	80 32       	cpi	r24, 0x20	; 32
    1d9c:	79 f0       	breq	.+30     	; 0x1dbc <vfprintf+0x8a>
    1d9e:	83 32       	cpi	r24, 0x23	; 35
    1da0:	a1 f4       	brne	.+40     	; 0x1dca <vfprintf+0x98>
    1da2:	23 2d       	mov	r18, r3
    1da4:	20 61       	ori	r18, 0x10	; 16
    1da6:	1d c0       	rjmp	.+58     	; 0x1de2 <vfprintf+0xb0>
    1da8:	8d 32       	cpi	r24, 0x2D	; 45
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <vfprintf+0x92>
    1dac:	80 33       	cpi	r24, 0x30	; 48
    1dae:	69 f4       	brne	.+26     	; 0x1dca <vfprintf+0x98>
    1db0:	23 2d       	mov	r18, r3
    1db2:	21 60       	ori	r18, 0x01	; 1
    1db4:	16 c0       	rjmp	.+44     	; 0x1de2 <vfprintf+0xb0>
    1db6:	83 2d       	mov	r24, r3
    1db8:	82 60       	ori	r24, 0x02	; 2
    1dba:	38 2e       	mov	r3, r24
    1dbc:	e3 2d       	mov	r30, r3
    1dbe:	e4 60       	ori	r30, 0x04	; 4
    1dc0:	3e 2e       	mov	r3, r30
    1dc2:	2a c0       	rjmp	.+84     	; 0x1e18 <vfprintf+0xe6>
    1dc4:	f3 2d       	mov	r31, r3
    1dc6:	f8 60       	ori	r31, 0x08	; 8
    1dc8:	1d c0       	rjmp	.+58     	; 0x1e04 <vfprintf+0xd2>
    1dca:	37 fc       	sbrc	r3, 7
    1dcc:	2d c0       	rjmp	.+90     	; 0x1e28 <vfprintf+0xf6>
    1dce:	20 ed       	ldi	r18, 0xD0	; 208
    1dd0:	28 0f       	add	r18, r24
    1dd2:	2a 30       	cpi	r18, 0x0A	; 10
    1dd4:	40 f0       	brcs	.+16     	; 0x1de6 <vfprintf+0xb4>
    1dd6:	8e 32       	cpi	r24, 0x2E	; 46
    1dd8:	b9 f4       	brne	.+46     	; 0x1e08 <vfprintf+0xd6>
    1dda:	36 fc       	sbrc	r3, 6
    1ddc:	81 c1       	rjmp	.+770    	; 0x20e0 <vfprintf+0x3ae>
    1dde:	23 2d       	mov	r18, r3
    1de0:	20 64       	ori	r18, 0x40	; 64
    1de2:	32 2e       	mov	r3, r18
    1de4:	19 c0       	rjmp	.+50     	; 0x1e18 <vfprintf+0xe6>
    1de6:	36 fe       	sbrs	r3, 6
    1de8:	06 c0       	rjmp	.+12     	; 0x1df6 <vfprintf+0xc4>
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	98 9e       	mul	r9, r24
    1dee:	20 0d       	add	r18, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	92 2e       	mov	r9, r18
    1df4:	11 c0       	rjmp	.+34     	; 0x1e18 <vfprintf+0xe6>
    1df6:	ea e0       	ldi	r30, 0x0A	; 10
    1df8:	2e 9e       	mul	r2, r30
    1dfa:	20 0d       	add	r18, r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	22 2e       	mov	r2, r18
    1e00:	f3 2d       	mov	r31, r3
    1e02:	f0 62       	ori	r31, 0x20	; 32
    1e04:	3f 2e       	mov	r3, r31
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <vfprintf+0xe6>
    1e08:	8c 36       	cpi	r24, 0x6C	; 108
    1e0a:	21 f4       	brne	.+8      	; 0x1e14 <vfprintf+0xe2>
    1e0c:	83 2d       	mov	r24, r3
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	38 2e       	mov	r3, r24
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <vfprintf+0xe6>
    1e14:	88 36       	cpi	r24, 0x68	; 104
    1e16:	41 f4       	brne	.+16     	; 0x1e28 <vfprintf+0xf6>
    1e18:	f7 01       	movw	r30, r14
    1e1a:	93 fd       	sbrc	r25, 3
    1e1c:	85 91       	lpm	r24, Z+
    1e1e:	93 ff       	sbrs	r25, 3
    1e20:	81 91       	ld	r24, Z+
    1e22:	7f 01       	movw	r14, r30
    1e24:	81 11       	cpse	r24, r1
    1e26:	b3 cf       	rjmp	.-154    	; 0x1d8e <vfprintf+0x5c>
    1e28:	98 2f       	mov	r25, r24
    1e2a:	9f 7d       	andi	r25, 0xDF	; 223
    1e2c:	95 54       	subi	r25, 0x45	; 69
    1e2e:	93 30       	cpi	r25, 0x03	; 3
    1e30:	28 f4       	brcc	.+10     	; 0x1e3c <vfprintf+0x10a>
    1e32:	0c 5f       	subi	r16, 0xFC	; 252
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	9f e3       	ldi	r25, 0x3F	; 63
    1e38:	99 83       	std	Y+1, r25	; 0x01
    1e3a:	0d c0       	rjmp	.+26     	; 0x1e56 <vfprintf+0x124>
    1e3c:	83 36       	cpi	r24, 0x63	; 99
    1e3e:	31 f0       	breq	.+12     	; 0x1e4c <vfprintf+0x11a>
    1e40:	83 37       	cpi	r24, 0x73	; 115
    1e42:	71 f0       	breq	.+28     	; 0x1e60 <vfprintf+0x12e>
    1e44:	83 35       	cpi	r24, 0x53	; 83
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <vfprintf+0x118>
    1e48:	59 c0       	rjmp	.+178    	; 0x1efc <vfprintf+0x1ca>
    1e4a:	21 c0       	rjmp	.+66     	; 0x1e8e <vfprintf+0x15c>
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 81       	ld	r24, Z
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	0e 5f       	subi	r16, 0xFE	; 254
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	88 24       	eor	r8, r8
    1e58:	83 94       	inc	r8
    1e5a:	91 2c       	mov	r9, r1
    1e5c:	53 01       	movw	r10, r6
    1e5e:	13 c0       	rjmp	.+38     	; 0x1e86 <vfprintf+0x154>
    1e60:	28 01       	movw	r4, r16
    1e62:	f2 e0       	ldi	r31, 0x02	; 2
    1e64:	4f 0e       	add	r4, r31
    1e66:	51 1c       	adc	r5, r1
    1e68:	f8 01       	movw	r30, r16
    1e6a:	a0 80       	ld	r10, Z
    1e6c:	b1 80       	ldd	r11, Z+1	; 0x01
    1e6e:	36 fe       	sbrs	r3, 6
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <vfprintf+0x146>
    1e72:	69 2d       	mov	r22, r9
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vfprintf+0x14a>
    1e78:	6f ef       	ldi	r22, 0xFF	; 255
    1e7a:	7f ef       	ldi	r23, 0xFF	; 255
    1e7c:	c5 01       	movw	r24, r10
    1e7e:	0e 94 85 10 	call	0x210a	; 0x210a <strnlen>
    1e82:	4c 01       	movw	r8, r24
    1e84:	82 01       	movw	r16, r4
    1e86:	f3 2d       	mov	r31, r3
    1e88:	ff 77       	andi	r31, 0x7F	; 127
    1e8a:	3f 2e       	mov	r3, r31
    1e8c:	16 c0       	rjmp	.+44     	; 0x1eba <vfprintf+0x188>
    1e8e:	28 01       	movw	r4, r16
    1e90:	22 e0       	ldi	r18, 0x02	; 2
    1e92:	42 0e       	add	r4, r18
    1e94:	51 1c       	adc	r5, r1
    1e96:	f8 01       	movw	r30, r16
    1e98:	a0 80       	ld	r10, Z
    1e9a:	b1 80       	ldd	r11, Z+1	; 0x01
    1e9c:	36 fe       	sbrs	r3, 6
    1e9e:	03 c0       	rjmp	.+6      	; 0x1ea6 <vfprintf+0x174>
    1ea0:	69 2d       	mov	r22, r9
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0x178>
    1ea6:	6f ef       	ldi	r22, 0xFF	; 255
    1ea8:	7f ef       	ldi	r23, 0xFF	; 255
    1eaa:	c5 01       	movw	r24, r10
    1eac:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <strnlen_P>
    1eb0:	4c 01       	movw	r8, r24
    1eb2:	f3 2d       	mov	r31, r3
    1eb4:	f0 68       	ori	r31, 0x80	; 128
    1eb6:	3f 2e       	mov	r3, r31
    1eb8:	82 01       	movw	r16, r4
    1eba:	33 fc       	sbrc	r3, 3
    1ebc:	1b c0       	rjmp	.+54     	; 0x1ef4 <vfprintf+0x1c2>
    1ebe:	82 2d       	mov	r24, r2
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	88 16       	cp	r8, r24
    1ec4:	99 06       	cpc	r9, r25
    1ec6:	b0 f4       	brcc	.+44     	; 0x1ef4 <vfprintf+0x1c2>
    1ec8:	b6 01       	movw	r22, r12
    1eca:	80 e2       	ldi	r24, 0x20	; 32
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    1ed2:	2a 94       	dec	r2
    1ed4:	f4 cf       	rjmp	.-24     	; 0x1ebe <vfprintf+0x18c>
    1ed6:	f5 01       	movw	r30, r10
    1ed8:	37 fc       	sbrc	r3, 7
    1eda:	85 91       	lpm	r24, Z+
    1edc:	37 fe       	sbrs	r3, 7
    1ede:	81 91       	ld	r24, Z+
    1ee0:	5f 01       	movw	r10, r30
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    1eea:	21 10       	cpse	r2, r1
    1eec:	2a 94       	dec	r2
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	82 1a       	sub	r8, r18
    1ef2:	91 08       	sbc	r9, r1
    1ef4:	81 14       	cp	r8, r1
    1ef6:	91 04       	cpc	r9, r1
    1ef8:	71 f7       	brne	.-36     	; 0x1ed6 <vfprintf+0x1a4>
    1efa:	e8 c0       	rjmp	.+464    	; 0x20cc <vfprintf+0x39a>
    1efc:	84 36       	cpi	r24, 0x64	; 100
    1efe:	11 f0       	breq	.+4      	; 0x1f04 <vfprintf+0x1d2>
    1f00:	89 36       	cpi	r24, 0x69	; 105
    1f02:	41 f5       	brne	.+80     	; 0x1f54 <vfprintf+0x222>
    1f04:	f8 01       	movw	r30, r16
    1f06:	37 fe       	sbrs	r3, 7
    1f08:	07 c0       	rjmp	.+14     	; 0x1f18 <vfprintf+0x1e6>
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	0c 5f       	subi	r16, 0xFC	; 252
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	08 c0       	rjmp	.+16     	; 0x1f28 <vfprintf+0x1f6>
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	07 2e       	mov	r0, r23
    1f1e:	00 0c       	add	r0, r0
    1f20:	88 0b       	sbc	r24, r24
    1f22:	99 0b       	sbc	r25, r25
    1f24:	0e 5f       	subi	r16, 0xFE	; 254
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	f3 2d       	mov	r31, r3
    1f2a:	ff 76       	andi	r31, 0x6F	; 111
    1f2c:	3f 2e       	mov	r3, r31
    1f2e:	97 ff       	sbrs	r25, 7
    1f30:	09 c0       	rjmp	.+18     	; 0x1f44 <vfprintf+0x212>
    1f32:	90 95       	com	r25
    1f34:	80 95       	com	r24
    1f36:	70 95       	com	r23
    1f38:	61 95       	neg	r22
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f40:	f0 68       	ori	r31, 0x80	; 128
    1f42:	3f 2e       	mov	r3, r31
    1f44:	2a e0       	ldi	r18, 0x0A	; 10
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	a3 01       	movw	r20, r6
    1f4a:	0e 94 cc 10 	call	0x2198	; 0x2198 <__ultoa_invert>
    1f4e:	88 2e       	mov	r8, r24
    1f50:	86 18       	sub	r8, r6
    1f52:	45 c0       	rjmp	.+138    	; 0x1fde <vfprintf+0x2ac>
    1f54:	85 37       	cpi	r24, 0x75	; 117
    1f56:	31 f4       	brne	.+12     	; 0x1f64 <vfprintf+0x232>
    1f58:	23 2d       	mov	r18, r3
    1f5a:	2f 7e       	andi	r18, 0xEF	; 239
    1f5c:	b2 2e       	mov	r11, r18
    1f5e:	2a e0       	ldi	r18, 0x0A	; 10
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	25 c0       	rjmp	.+74     	; 0x1fae <vfprintf+0x27c>
    1f64:	93 2d       	mov	r25, r3
    1f66:	99 7f       	andi	r25, 0xF9	; 249
    1f68:	b9 2e       	mov	r11, r25
    1f6a:	8f 36       	cpi	r24, 0x6F	; 111
    1f6c:	c1 f0       	breq	.+48     	; 0x1f9e <vfprintf+0x26c>
    1f6e:	18 f4       	brcc	.+6      	; 0x1f76 <vfprintf+0x244>
    1f70:	88 35       	cpi	r24, 0x58	; 88
    1f72:	79 f0       	breq	.+30     	; 0x1f92 <vfprintf+0x260>
    1f74:	b5 c0       	rjmp	.+362    	; 0x20e0 <vfprintf+0x3ae>
    1f76:	80 37       	cpi	r24, 0x70	; 112
    1f78:	19 f0       	breq	.+6      	; 0x1f80 <vfprintf+0x24e>
    1f7a:	88 37       	cpi	r24, 0x78	; 120
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <vfprintf+0x254>
    1f7e:	b0 c0       	rjmp	.+352    	; 0x20e0 <vfprintf+0x3ae>
    1f80:	e9 2f       	mov	r30, r25
    1f82:	e0 61       	ori	r30, 0x10	; 16
    1f84:	be 2e       	mov	r11, r30
    1f86:	b4 fe       	sbrs	r11, 4
    1f88:	0d c0       	rjmp	.+26     	; 0x1fa4 <vfprintf+0x272>
    1f8a:	fb 2d       	mov	r31, r11
    1f8c:	f4 60       	ori	r31, 0x04	; 4
    1f8e:	bf 2e       	mov	r11, r31
    1f90:	09 c0       	rjmp	.+18     	; 0x1fa4 <vfprintf+0x272>
    1f92:	34 fe       	sbrs	r3, 4
    1f94:	0a c0       	rjmp	.+20     	; 0x1faa <vfprintf+0x278>
    1f96:	29 2f       	mov	r18, r25
    1f98:	26 60       	ori	r18, 0x06	; 6
    1f9a:	b2 2e       	mov	r11, r18
    1f9c:	06 c0       	rjmp	.+12     	; 0x1faa <vfprintf+0x278>
    1f9e:	28 e0       	ldi	r18, 0x08	; 8
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <vfprintf+0x27c>
    1fa4:	20 e1       	ldi	r18, 0x10	; 16
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <vfprintf+0x27c>
    1faa:	20 e1       	ldi	r18, 0x10	; 16
    1fac:	32 e0       	ldi	r19, 0x02	; 2
    1fae:	f8 01       	movw	r30, r16
    1fb0:	b7 fe       	sbrs	r11, 7
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <vfprintf+0x290>
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	0c 5f       	subi	r16, 0xFC	; 252
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <vfprintf+0x29c>
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 5f       	subi	r16, 0xFE	; 254
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	a3 01       	movw	r20, r6
    1fd0:	0e 94 cc 10 	call	0x2198	; 0x2198 <__ultoa_invert>
    1fd4:	88 2e       	mov	r8, r24
    1fd6:	86 18       	sub	r8, r6
    1fd8:	fb 2d       	mov	r31, r11
    1fda:	ff 77       	andi	r31, 0x7F	; 127
    1fdc:	3f 2e       	mov	r3, r31
    1fde:	36 fe       	sbrs	r3, 6
    1fe0:	0d c0       	rjmp	.+26     	; 0x1ffc <vfprintf+0x2ca>
    1fe2:	23 2d       	mov	r18, r3
    1fe4:	2e 7f       	andi	r18, 0xFE	; 254
    1fe6:	a2 2e       	mov	r10, r18
    1fe8:	89 14       	cp	r8, r9
    1fea:	58 f4       	brcc	.+22     	; 0x2002 <vfprintf+0x2d0>
    1fec:	34 fe       	sbrs	r3, 4
    1fee:	0b c0       	rjmp	.+22     	; 0x2006 <vfprintf+0x2d4>
    1ff0:	32 fc       	sbrc	r3, 2
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <vfprintf+0x2d4>
    1ff4:	83 2d       	mov	r24, r3
    1ff6:	8e 7e       	andi	r24, 0xEE	; 238
    1ff8:	a8 2e       	mov	r10, r24
    1ffa:	05 c0       	rjmp	.+10     	; 0x2006 <vfprintf+0x2d4>
    1ffc:	b8 2c       	mov	r11, r8
    1ffe:	a3 2c       	mov	r10, r3
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <vfprintf+0x2d6>
    2002:	b8 2c       	mov	r11, r8
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <vfprintf+0x2d6>
    2006:	b9 2c       	mov	r11, r9
    2008:	a4 fe       	sbrs	r10, 4
    200a:	0f c0       	rjmp	.+30     	; 0x202a <vfprintf+0x2f8>
    200c:	fe 01       	movw	r30, r28
    200e:	e8 0d       	add	r30, r8
    2010:	f1 1d       	adc	r31, r1
    2012:	80 81       	ld	r24, Z
    2014:	80 33       	cpi	r24, 0x30	; 48
    2016:	21 f4       	brne	.+8      	; 0x2020 <vfprintf+0x2ee>
    2018:	9a 2d       	mov	r25, r10
    201a:	99 7e       	andi	r25, 0xE9	; 233
    201c:	a9 2e       	mov	r10, r25
    201e:	09 c0       	rjmp	.+18     	; 0x2032 <vfprintf+0x300>
    2020:	a2 fe       	sbrs	r10, 2
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <vfprintf+0x2fe>
    2024:	b3 94       	inc	r11
    2026:	b3 94       	inc	r11
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <vfprintf+0x300>
    202a:	8a 2d       	mov	r24, r10
    202c:	86 78       	andi	r24, 0x86	; 134
    202e:	09 f0       	breq	.+2      	; 0x2032 <vfprintf+0x300>
    2030:	b3 94       	inc	r11
    2032:	a3 fc       	sbrc	r10, 3
    2034:	11 c0       	rjmp	.+34     	; 0x2058 <vfprintf+0x326>
    2036:	a0 fe       	sbrs	r10, 0
    2038:	06 c0       	rjmp	.+12     	; 0x2046 <vfprintf+0x314>
    203a:	b2 14       	cp	r11, r2
    203c:	88 f4       	brcc	.+34     	; 0x2060 <vfprintf+0x32e>
    203e:	28 0c       	add	r2, r8
    2040:	92 2c       	mov	r9, r2
    2042:	9b 18       	sub	r9, r11
    2044:	0e c0       	rjmp	.+28     	; 0x2062 <vfprintf+0x330>
    2046:	b2 14       	cp	r11, r2
    2048:	60 f4       	brcc	.+24     	; 0x2062 <vfprintf+0x330>
    204a:	b6 01       	movw	r22, r12
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    2054:	b3 94       	inc	r11
    2056:	f7 cf       	rjmp	.-18     	; 0x2046 <vfprintf+0x314>
    2058:	b2 14       	cp	r11, r2
    205a:	18 f4       	brcc	.+6      	; 0x2062 <vfprintf+0x330>
    205c:	2b 18       	sub	r2, r11
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <vfprintf+0x332>
    2060:	98 2c       	mov	r9, r8
    2062:	21 2c       	mov	r2, r1
    2064:	a4 fe       	sbrs	r10, 4
    2066:	10 c0       	rjmp	.+32     	; 0x2088 <vfprintf+0x356>
    2068:	b6 01       	movw	r22, r12
    206a:	80 e3       	ldi	r24, 0x30	; 48
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    2072:	a2 fe       	sbrs	r10, 2
    2074:	17 c0       	rjmp	.+46     	; 0x20a4 <vfprintf+0x372>
    2076:	a1 fc       	sbrc	r10, 1
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <vfprintf+0x34e>
    207a:	88 e7       	ldi	r24, 0x78	; 120
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <vfprintf+0x352>
    2080:	88 e5       	ldi	r24, 0x58	; 88
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	b6 01       	movw	r22, r12
    2086:	0c c0       	rjmp	.+24     	; 0x20a0 <vfprintf+0x36e>
    2088:	8a 2d       	mov	r24, r10
    208a:	86 78       	andi	r24, 0x86	; 134
    208c:	59 f0       	breq	.+22     	; 0x20a4 <vfprintf+0x372>
    208e:	a1 fe       	sbrs	r10, 1
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x364>
    2092:	8b e2       	ldi	r24, 0x2B	; 43
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <vfprintf+0x366>
    2096:	80 e2       	ldi	r24, 0x20	; 32
    2098:	a7 fc       	sbrc	r10, 7
    209a:	8d e2       	ldi	r24, 0x2D	; 45
    209c:	b6 01       	movw	r22, r12
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    20a4:	89 14       	cp	r8, r9
    20a6:	38 f4       	brcc	.+14     	; 0x20b6 <vfprintf+0x384>
    20a8:	b6 01       	movw	r22, r12
    20aa:	80 e3       	ldi	r24, 0x30	; 48
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    20b2:	9a 94       	dec	r9
    20b4:	f7 cf       	rjmp	.-18     	; 0x20a4 <vfprintf+0x372>
    20b6:	8a 94       	dec	r8
    20b8:	f3 01       	movw	r30, r6
    20ba:	e8 0d       	add	r30, r8
    20bc:	f1 1d       	adc	r31, r1
    20be:	80 81       	ld	r24, Z
    20c0:	b6 01       	movw	r22, r12
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    20c8:	81 10       	cpse	r8, r1
    20ca:	f5 cf       	rjmp	.-22     	; 0x20b6 <vfprintf+0x384>
    20cc:	22 20       	and	r2, r2
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <vfprintf+0x3a0>
    20d0:	42 ce       	rjmp	.-892    	; 0x1d56 <vfprintf+0x24>
    20d2:	b6 01       	movw	r22, r12
    20d4:	80 e2       	ldi	r24, 0x20	; 32
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    20dc:	2a 94       	dec	r2
    20de:	f6 cf       	rjmp	.-20     	; 0x20cc <vfprintf+0x39a>
    20e0:	f6 01       	movw	r30, r12
    20e2:	86 81       	ldd	r24, Z+6	; 0x06
    20e4:	97 81       	ldd	r25, Z+7	; 0x07
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <vfprintf+0x3ba>
    20e8:	8f ef       	ldi	r24, 0xFF	; 255
    20ea:	9f ef       	ldi	r25, 0xFF	; 255
    20ec:	2b 96       	adiw	r28, 0x0b	; 11
    20ee:	e2 e1       	ldi	r30, 0x12	; 18
    20f0:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__epilogue_restores__>

000020f4 <strnlen_P>:
    20f4:	fc 01       	movw	r30, r24
    20f6:	05 90       	lpm	r0, Z+
    20f8:	61 50       	subi	r22, 0x01	; 1
    20fa:	70 40       	sbci	r23, 0x00	; 0
    20fc:	01 10       	cpse	r0, r1
    20fe:	d8 f7       	brcc	.-10     	; 0x20f6 <strnlen_P+0x2>
    2100:	80 95       	com	r24
    2102:	90 95       	com	r25
    2104:	8e 0f       	add	r24, r30
    2106:	9f 1f       	adc	r25, r31
    2108:	08 95       	ret

0000210a <strnlen>:
    210a:	fc 01       	movw	r30, r24
    210c:	61 50       	subi	r22, 0x01	; 1
    210e:	70 40       	sbci	r23, 0x00	; 0
    2110:	01 90       	ld	r0, Z+
    2112:	01 10       	cpse	r0, r1
    2114:	d8 f7       	brcc	.-10     	; 0x210c <strnlen+0x2>
    2116:	80 95       	com	r24
    2118:	90 95       	com	r25
    211a:	8e 0f       	add	r24, r30
    211c:	9f 1f       	adc	r25, r31
    211e:	08 95       	ret

00002120 <fputc>:
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	fb 01       	movw	r30, r22
    212a:	23 81       	ldd	r18, Z+3	; 0x03
    212c:	21 fd       	sbrc	r18, 1
    212e:	03 c0       	rjmp	.+6      	; 0x2136 <fputc+0x16>
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	9f ef       	ldi	r25, 0xFF	; 255
    2134:	2c c0       	rjmp	.+88     	; 0x218e <fputc+0x6e>
    2136:	22 ff       	sbrs	r18, 2
    2138:	16 c0       	rjmp	.+44     	; 0x2166 <fputc+0x46>
    213a:	46 81       	ldd	r20, Z+6	; 0x06
    213c:	57 81       	ldd	r21, Z+7	; 0x07
    213e:	24 81       	ldd	r18, Z+4	; 0x04
    2140:	35 81       	ldd	r19, Z+5	; 0x05
    2142:	42 17       	cp	r20, r18
    2144:	53 07       	cpc	r21, r19
    2146:	44 f4       	brge	.+16     	; 0x2158 <fputc+0x38>
    2148:	a0 81       	ld	r26, Z
    214a:	b1 81       	ldd	r27, Z+1	; 0x01
    214c:	9d 01       	movw	r18, r26
    214e:	2f 5f       	subi	r18, 0xFF	; 255
    2150:	3f 4f       	sbci	r19, 0xFF	; 255
    2152:	20 83       	st	Z, r18
    2154:	31 83       	std	Z+1, r19	; 0x01
    2156:	8c 93       	st	X, r24
    2158:	26 81       	ldd	r18, Z+6	; 0x06
    215a:	37 81       	ldd	r19, Z+7	; 0x07
    215c:	2f 5f       	subi	r18, 0xFF	; 255
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	26 83       	std	Z+6, r18	; 0x06
    2162:	37 83       	std	Z+7, r19	; 0x07
    2164:	14 c0       	rjmp	.+40     	; 0x218e <fputc+0x6e>
    2166:	8b 01       	movw	r16, r22
    2168:	ec 01       	movw	r28, r24
    216a:	fb 01       	movw	r30, r22
    216c:	00 84       	ldd	r0, Z+8	; 0x08
    216e:	f1 85       	ldd	r31, Z+9	; 0x09
    2170:	e0 2d       	mov	r30, r0
    2172:	09 95       	icall
    2174:	89 2b       	or	r24, r25
    2176:	e1 f6       	brne	.-72     	; 0x2130 <fputc+0x10>
    2178:	d8 01       	movw	r26, r16
    217a:	16 96       	adiw	r26, 0x06	; 6
    217c:	8d 91       	ld	r24, X+
    217e:	9c 91       	ld	r25, X
    2180:	17 97       	sbiw	r26, 0x07	; 7
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	16 96       	adiw	r26, 0x06	; 6
    2186:	8d 93       	st	X+, r24
    2188:	9c 93       	st	X, r25
    218a:	17 97       	sbiw	r26, 0x07	; 7
    218c:	ce 01       	movw	r24, r28
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	08 95       	ret

00002198 <__ultoa_invert>:
    2198:	fa 01       	movw	r30, r20
    219a:	aa 27       	eor	r26, r26
    219c:	28 30       	cpi	r18, 0x08	; 8
    219e:	51 f1       	breq	.+84     	; 0x21f4 <__ultoa_invert+0x5c>
    21a0:	20 31       	cpi	r18, 0x10	; 16
    21a2:	81 f1       	breq	.+96     	; 0x2204 <__ultoa_invert+0x6c>
    21a4:	e8 94       	clt
    21a6:	6f 93       	push	r22
    21a8:	6e 7f       	andi	r22, 0xFE	; 254
    21aa:	6e 5f       	subi	r22, 0xFE	; 254
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	af 4f       	sbci	r26, 0xFF	; 255
    21b4:	b1 e0       	ldi	r27, 0x01	; 1
    21b6:	3e d0       	rcall	.+124    	; 0x2234 <__ultoa_invert+0x9c>
    21b8:	b4 e0       	ldi	r27, 0x04	; 4
    21ba:	3c d0       	rcall	.+120    	; 0x2234 <__ultoa_invert+0x9c>
    21bc:	67 0f       	add	r22, r23
    21be:	78 1f       	adc	r23, r24
    21c0:	89 1f       	adc	r24, r25
    21c2:	9a 1f       	adc	r25, r26
    21c4:	a1 1d       	adc	r26, r1
    21c6:	68 0f       	add	r22, r24
    21c8:	79 1f       	adc	r23, r25
    21ca:	8a 1f       	adc	r24, r26
    21cc:	91 1d       	adc	r25, r1
    21ce:	a1 1d       	adc	r26, r1
    21d0:	6a 0f       	add	r22, r26
    21d2:	71 1d       	adc	r23, r1
    21d4:	81 1d       	adc	r24, r1
    21d6:	91 1d       	adc	r25, r1
    21d8:	a1 1d       	adc	r26, r1
    21da:	20 d0       	rcall	.+64     	; 0x221c <__ultoa_invert+0x84>
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <__ultoa_invert+0x48>
    21de:	68 94       	set
    21e0:	3f 91       	pop	r19
    21e2:	2a e0       	ldi	r18, 0x0A	; 10
    21e4:	26 9f       	mul	r18, r22
    21e6:	11 24       	eor	r1, r1
    21e8:	30 19       	sub	r19, r0
    21ea:	30 5d       	subi	r19, 0xD0	; 208
    21ec:	31 93       	st	Z+, r19
    21ee:	de f6       	brtc	.-74     	; 0x21a6 <__ultoa_invert+0xe>
    21f0:	cf 01       	movw	r24, r30
    21f2:	08 95       	ret
    21f4:	46 2f       	mov	r20, r22
    21f6:	47 70       	andi	r20, 0x07	; 7
    21f8:	40 5d       	subi	r20, 0xD0	; 208
    21fa:	41 93       	st	Z+, r20
    21fc:	b3 e0       	ldi	r27, 0x03	; 3
    21fe:	0f d0       	rcall	.+30     	; 0x221e <__ultoa_invert+0x86>
    2200:	c9 f7       	brne	.-14     	; 0x21f4 <__ultoa_invert+0x5c>
    2202:	f6 cf       	rjmp	.-20     	; 0x21f0 <__ultoa_invert+0x58>
    2204:	46 2f       	mov	r20, r22
    2206:	4f 70       	andi	r20, 0x0F	; 15
    2208:	40 5d       	subi	r20, 0xD0	; 208
    220a:	4a 33       	cpi	r20, 0x3A	; 58
    220c:	18 f0       	brcs	.+6      	; 0x2214 <__ultoa_invert+0x7c>
    220e:	49 5d       	subi	r20, 0xD9	; 217
    2210:	31 fd       	sbrc	r19, 1
    2212:	40 52       	subi	r20, 0x20	; 32
    2214:	41 93       	st	Z+, r20
    2216:	02 d0       	rcall	.+4      	; 0x221c <__ultoa_invert+0x84>
    2218:	a9 f7       	brne	.-22     	; 0x2204 <__ultoa_invert+0x6c>
    221a:	ea cf       	rjmp	.-44     	; 0x21f0 <__ultoa_invert+0x58>
    221c:	b4 e0       	ldi	r27, 0x04	; 4
    221e:	a6 95       	lsr	r26
    2220:	97 95       	ror	r25
    2222:	87 95       	ror	r24
    2224:	77 95       	ror	r23
    2226:	67 95       	ror	r22
    2228:	ba 95       	dec	r27
    222a:	c9 f7       	brne	.-14     	; 0x221e <__ultoa_invert+0x86>
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	61 05       	cpc	r22, r1
    2230:	71 05       	cpc	r23, r1
    2232:	08 95       	ret
    2234:	9b 01       	movw	r18, r22
    2236:	ac 01       	movw	r20, r24
    2238:	0a 2e       	mov	r0, r26
    223a:	06 94       	lsr	r0
    223c:	57 95       	ror	r21
    223e:	47 95       	ror	r20
    2240:	37 95       	ror	r19
    2242:	27 95       	ror	r18
    2244:	ba 95       	dec	r27
    2246:	c9 f7       	brne	.-14     	; 0x223a <__ultoa_invert+0xa2>
    2248:	62 0f       	add	r22, r18
    224a:	73 1f       	adc	r23, r19
    224c:	84 1f       	adc	r24, r20
    224e:	95 1f       	adc	r25, r21
    2250:	a0 1d       	adc	r26, r0
    2252:	08 95       	ret

00002254 <eeprom_read_block>:
    2254:	60 50       	subi	r22, 0x00	; 0
    2256:	7c 4e       	sbci	r23, 0xEC	; 236
    2258:	0c 94 96 11 	jmp	0x232c	; 0x232c <memcpy>

0000225c <eeprom_read_byte>:
    225c:	03 d0       	rcall	.+6      	; 0x2264 <eeprom_mapen>
    225e:	80 81       	ld	r24, Z
    2260:	99 27       	eor	r25, r25
    2262:	08 95       	ret

00002264 <eeprom_mapen>:
    2264:	fc 01       	movw	r30, r24
    2266:	e0 50       	subi	r30, 0x00	; 0
    2268:	fc 4e       	sbci	r31, 0xEC	; 236
    226a:	08 95       	ret

0000226c <eeprom_update_block>:
    226c:	dc 01       	movw	r26, r24
    226e:	a4 0f       	add	r26, r20
    2270:	b5 1f       	adc	r27, r21
    2272:	41 50       	subi	r20, 0x01	; 1
    2274:	50 40       	sbci	r21, 0x00	; 0
    2276:	48 f0       	brcs	.+18     	; 0x228a <eeprom_update_block+0x1e>
    2278:	cb 01       	movw	r24, r22
    227a:	84 0f       	add	r24, r20
    227c:	95 1f       	adc	r25, r21
    227e:	2e 91       	ld	r18, -X
    2280:	0e 94 47 11 	call	0x228e	; 0x228e <eeprom_update_r18>
    2284:	41 50       	subi	r20, 0x01	; 1
    2286:	50 40       	sbci	r21, 0x00	; 0
    2288:	d0 f7       	brcc	.-12     	; 0x227e <eeprom_update_block+0x12>
    228a:	08 95       	ret

0000228c <eeprom_update_byte>:
    228c:	26 2f       	mov	r18, r22

0000228e <eeprom_update_r18>:
    228e:	0e 94 32 11 	call	0x2264	; 0x2264 <eeprom_mapen>
    2292:	00 80       	ld	r0, Z
    2294:	02 16       	cp	r0, r18
    2296:	19 f0       	breq	.+6      	; 0x229e <eeprom_update_r18+0x10>
    2298:	0e 94 52 11 	call	0x22a4	; 0x22a4 <eeprom_write_r18>
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	08 95       	ret

000022a2 <eeprom_write_byte>:
    22a2:	26 2f       	mov	r18, r22

000022a4 <eeprom_write_r18>:
    22a4:	af 93       	push	r26
    22a6:	bf 93       	push	r27
    22a8:	e0 e0       	ldi	r30, 0x00	; 0
    22aa:	f0 e1       	ldi	r31, 0x10	; 16
    22ac:	32 81       	ldd	r19, Z+2	; 0x02
    22ae:	31 fd       	sbrc	r19, 1
    22b0:	fd cf       	rjmp	.-6      	; 0x22ac <eeprom_write_r18+0x8>
    22b2:	dc 01       	movw	r26, r24
    22b4:	a0 50       	subi	r26, 0x00	; 0
    22b6:	bc 4e       	sbci	r27, 0xEC	; 236
    22b8:	2c 93       	st	X, r18
    22ba:	2d e9       	ldi	r18, 0x9D	; 157
    22bc:	24 bf       	out	0x34, r18	; 52
    22be:	23 e0       	ldi	r18, 0x03	; 3
    22c0:	20 83       	st	Z, r18
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	08 95       	ret

000022ca <__prologue_saves__>:
    22ca:	2f 92       	push	r2
    22cc:	3f 92       	push	r3
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	ca 1b       	sub	r28, r26
    22f4:	db 0b       	sbc	r29, r27
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	09 94       	ijmp

000022fc <__epilogue_restores__>:
    22fc:	2a 88       	ldd	r2, Y+18	; 0x12
    22fe:	39 88       	ldd	r3, Y+17	; 0x11
    2300:	48 88       	ldd	r4, Y+16	; 0x10
    2302:	5f 84       	ldd	r5, Y+15	; 0x0f
    2304:	6e 84       	ldd	r6, Y+14	; 0x0e
    2306:	7d 84       	ldd	r7, Y+13	; 0x0d
    2308:	8c 84       	ldd	r8, Y+12	; 0x0c
    230a:	9b 84       	ldd	r9, Y+11	; 0x0b
    230c:	aa 84       	ldd	r10, Y+10	; 0x0a
    230e:	b9 84       	ldd	r11, Y+9	; 0x09
    2310:	c8 84       	ldd	r12, Y+8	; 0x08
    2312:	df 80       	ldd	r13, Y+7	; 0x07
    2314:	ee 80       	ldd	r14, Y+6	; 0x06
    2316:	fd 80       	ldd	r15, Y+5	; 0x05
    2318:	0c 81       	ldd	r16, Y+4	; 0x04
    231a:	1b 81       	ldd	r17, Y+3	; 0x03
    231c:	aa 81       	ldd	r26, Y+2	; 0x02
    231e:	b9 81       	ldd	r27, Y+1	; 0x01
    2320:	ce 0f       	add	r28, r30
    2322:	d1 1d       	adc	r29, r1
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	ed 01       	movw	r28, r26
    232a:	08 95       	ret

0000232c <memcpy>:
    232c:	fb 01       	movw	r30, r22
    232e:	dc 01       	movw	r26, r24
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <memcpy+0xa>
    2332:	01 90       	ld	r0, Z+
    2334:	0d 92       	st	X+, r0
    2336:	41 50       	subi	r20, 0x01	; 1
    2338:	50 40       	sbci	r21, 0x00	; 0
    233a:	d8 f7       	brcc	.-10     	; 0x2332 <memcpy+0x6>
    233c:	08 95       	ret

0000233e <_exit>:
    233e:	f8 94       	cli

00002340 <__stop_program>:
    2340:	ff cf       	rjmp	.-2      	; 0x2340 <__stop_program>
