
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000264a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  000063b6  000023b6  0000244a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000022f  00802800  00802800  0000264a  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000264a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000026e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000074a6  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003554  00000000  00000000  00009ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000283a  00000000  00000000  0000d41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000618  00000000  00000000  0000fc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002029  00000000  00000000  0001026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e73  00000000  00000000  00012295  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  00013108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_17>
      48:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	93 01       	movw	r18, r6
      a2:	b1 01       	movw	r22, r2
      a4:	88 02       	muls	r24, r24
      a6:	be 02       	muls	r27, r30
      a8:	f6 02       	muls	r31, r22
      aa:	2e 03       	fmul	r18, r22
      ac:	4f 03       	fmul	r20, r23
      ae:	7e 03       	fmul	r23, r22

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	2a e2       	ldi	r18, 0x2A	; 42
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	af 32       	cpi	r26, 0x2F	; 47
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
      d0:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:

volatile uint8_t button_pushed;

void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 df 07 	call	0xfbe	; 0xfbe <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	66 eb       	ldi	r22, 0xB6	; 182
      e2:	73 e6       	ldi	r23, 0x63	; 99
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	65 ec       	ldi	r22, 0xC5	; 197
      ee:	73 e6       	ldi	r23, 0x63	; 99
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	d1 f1       	breq	.+116    	; 0x174 <__EEPROM_REGION_LENGTH__+0x74>
     100:	18 f4       	brcc	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	41 f0       	breq	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     106:	8d c0       	rjmp	.+282    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f4       	brne	.+2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     10c:	55 c0       	rjmp	.+170    	; 0x1b8 <__EEPROM_REGION_LENGTH__+0xb8>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	7a c0       	rjmp	.+244    	; 0x208 <__EEPROM_REGION_LENGTH__+0x108>
     114:	86 c0       	rjmp	.+268    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {				// See valves.h
     116:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     11a:	88 23       	and	r24, r24
     11c:	24 f4       	brge	.+8      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
				CLOSEVALVE(BLUVALVE);
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     124:	7e c0       	rjmp	.+252    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else if (BLUENABLED && BLUTHERMWARM) {
     126:	8c e0       	ldi	r24, 0x0C	; 12
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     12e:	88 23       	and	r24, r24
     130:	09 f4       	brne	.+2      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
     132:	77 c0       	rjmp	.+238    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
     134:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     138:	80 ff       	sbrs	r24, 0
     13a:	08 c0       	rjmp	.+16     	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
				OPENVALVE(BLUVALVE);
     13c:	80 e8       	ldi	r24, 0x80	; 128
     13e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     142:	e7 e0       	ldi	r30, 0x07	; 7
     144:	f8 e2       	ldi	r31, 0x28	; 40
     146:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     148:	17 86       	std	Z+15, r1	; 0x0f
     14a:	6b c0       	rjmp	.+214    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else if (BLUENABLED && !BLUTHERMWARM) {
     14c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     150:	80 fd       	sbrc	r24, 0
     152:	67 c0       	rjmp	.+206    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
				disp_coldtherm();
     154:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	24 e5       	ldi	r18, 0x54	; 84
     15a:	88 e5       	ldi	r24, 0x58	; 88
     15c:	94 e1       	ldi	r25, 0x14	; 20
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	80 40       	sbci	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
     166:	00 c0       	rjmp	.+0      	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
     168:	00 c0       	rjmp	.+0      	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
				_delay_ms(2000);
				display(screen_value);
     16a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     16e:	0e 94 82 01 	call	0x304	; 0x304 <display>
     172:	57 c0       	rjmp	.+174    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {				// See valves.h
     174:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     178:	86 ff       	sbrs	r24, 6
     17a:	04 c0       	rjmp	.+8      	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
				CLOSEVALVE(REDVALVE);
     17c:	80 e4       	ldi	r24, 0x40	; 64
     17e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     182:	4f c0       	rjmp	.+158    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else if (REDENABLED && REDTHERMWARM) {
     184:	8d e0       	ldi	r24, 0x0D	; 13
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     18c:	88 23       	and	r24, r24
     18e:	09 f4       	brne	.+2      	; 0x192 <__EEPROM_REGION_LENGTH__+0x92>
     190:	48 c0       	rjmp	.+144    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
     192:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     196:	81 ff       	sbrs	r24, 1
     198:	08 c0       	rjmp	.+16     	; 0x1aa <__EEPROM_REGION_LENGTH__+0xaa>
				OPENVALVE(REDVALVE);
     19a:	80 e4       	ldi	r24, 0x40	; 64
     19c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     1a0:	e7 e0       	ldi	r30, 0x07	; 7
     1a2:	f8 e2       	ldi	r31, 0x28	; 40
     1a4:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1a6:	10 8a       	std	Z+16, r1	; 0x10
     1a8:	3c c0       	rjmp	.+120    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else if (REDENABLED && !REDTHERMWARM) {
     1aa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1ae:	81 fd       	sbrc	r24, 1
     1b0:	38 c0       	rjmp	.+112    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
				disp_coldtherm();
     1b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1b6:	35 c0       	rjmp	.+106    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
//				display(screen_value);
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {				// See valves.h
     1b8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1bc:	85 ff       	sbrs	r24, 5
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__EEPROM_REGION_LENGTH__+0xc8>
				CLOSEVALVE(BUFVALVE);
     1c0:	80 e2       	ldi	r24, 0x20	; 32
     1c2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1c6:	2d c0       	rjmp	.+90     	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else if (BUFTHERMWARM) {
     1c8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1cc:	82 ff       	sbrs	r24, 2
     1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <__EEPROM_REGION_LENGTH__+0xe0>
				OPENVALVE(BUFVALVE);
     1d0:	80 e2       	ldi	r24, 0x20	; 32
     1d2:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     1d6:	e7 e0       	ldi	r30, 0x07	; 7
     1d8:	f8 e2       	ldi	r31, 0x28	; 40
     1da:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     1dc:	11 8a       	std	Z+17, r1	; 0x11
     1de:	21 c0       	rjmp	.+66     	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else if (!BUFTHERMWARM) {
     1e0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1e4:	82 fd       	sbrc	r24, 2
     1e6:	1d c0       	rjmp	.+58     	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
				disp_coldtherm();
     1e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1ec:	24 e5       	ldi	r18, 0x54	; 84
     1ee:	88 e5       	ldi	r24, 0x58	; 88
     1f0:	94 e1       	ldi	r25, 0x14	; 20
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	80 40       	sbci	r24, 0x00	; 0
     1f6:	90 40       	sbci	r25, 0x00	; 0
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <__EEPROM_REGION_LENGTH__+0xf2>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <__EEPROM_REGION_LENGTH__+0xfc>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__EEPROM_REGION_LENGTH__+0xfe>
				_delay_ms(2000);
				display(screen_value);
     1fe:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     202:	0e 94 82 01 	call	0x304	; 0x304 <display>
     206:	0d c0       	rjmp	.+26     	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {				// See valves.h
     208:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     20c:	84 ff       	sbrs	r24, 4
     20e:	04 c0       	rjmp	.+8      	; 0x218 <__EEPROM_REGION_LENGTH__+0x118>
				CLOSEVALVE(SUPVALVE);
     210:	80 e1       	ldi	r24, 0x10	; 16
     212:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     216:	05 c0       	rjmp	.+10     	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
			} else {
// NEW
				status.supply_button_pushed = TRUE;	// Button was pushed; cleared in handle_ticks()
     218:	e7 e0       	ldi	r30, 0x07	; 7
     21a:	f8 e2       	ldi	r31, 0x28	; 40
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	87 8b       	std	Z+23, r24	; 0x17
				status.supply_button_time = 0;		// # secs button has been held down
     220:	10 8e       	std	Z+24, r1	; 0x18

		default:
			break;
	}

	button_pushed = FALSE;
     222:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>

	if (screen_value == SCRVALVES) {
     226:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	11 f4       	brne	.+4      	; 0x232 <__EEPROM_REGION_LENGTH__+0x132>
		display(SCRVALVES);
     22e:	0e 94 82 01 	call	0x304	; 0x304 <display>
     232:	08 95       	ret

00000234 <clear_BUTTONS>:
}

void clear_BUTTONS(void)
{

	PORTB.INTFLAGS = 0x0F;	// Clear spurious interrupts from debouncer?
     234:	8f e0       	ldi	r24, 0x0F	; 15
     236:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     23a:	08 95       	ret

0000023c <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     23c:	e0 e2       	ldi	r30, 0x20	; 32
     23e:	f4 e0       	ldi	r31, 0x04	; 4
     240:	8b e0       	ldi	r24, 0x0B	; 11
     242:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     244:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     246:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     248:	81 8b       	std	Z+17, r24	; 0x11
     24a:	08 95       	ret

0000024c <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     258:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     25c:	82 ff       	sbrs	r24, 2
     25e:	07 c0       	rjmp	.+14     	; 0x26e <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     260:	84 e0       	ldi	r24, 0x04	; 4
     262:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     26c:	20 c0       	rjmp	.+64     	; 0x2ae <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     26e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     272:	83 ff       	sbrs	r24, 3
     274:	07 c0       	rjmp	.+14     	; 0x284 <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     276:	88 e0       	ldi	r24, 0x08	; 8
     278:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     282:	15 c0       	rjmp	.+42     	; 0x2ae <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     284:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     288:	80 ff       	sbrs	r24, 0
     28a:	07 c0       	rjmp	.+14     	; 0x29a <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     292:	83 e0       	ldi	r24, 0x03	; 3
     294:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     298:	0a c0       	rjmp	.+20     	; 0x2ae <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     29a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     29e:	81 ff       	sbrs	r24, 1
     2a0:	06 c0       	rjmp	.+12     	; 0x2ae <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     2a8:	84 e0       	ldi	r24, 0x04	; 4
     2aa:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     2ae:	8f 91       	pop	r24
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     2ba:	4a e0       	ldi	r20, 0x0A	; 10
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <eeprom_read_block>
     2c6:	08 95       	ret

000002c8 <update_VERSION>:
}

void update_VERSION(void)
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	2b 97       	sbiw	r28, 0x0b	; 11
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     2d6:	8b e0       	ldi	r24, 0x0B	; 11
     2d8:	e5 ed       	ldi	r30, 0xD5	; 213
     2da:	f3 e6       	ldi	r31, 0x63	; 99
     2dc:	de 01       	movw	r26, r28
     2de:	11 96       	adiw	r26, 0x01	; 1
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     2e8:	4a e0       	ldi	r20, 0x0A	; 10
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	ce 01       	movw	r24, r28
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <eeprom_update_block>
}
     2f8:	2b 96       	adiw	r28, 0x0b	; 11
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	aa 97       	sbiw	r28, 0x2a	; 42
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	88 30       	cpi	r24, 0x08	; 8
     316:	91 05       	cpc	r25, r1
     318:	08 f0       	brcs	.+2      	; 0x31c <display+0x18>
     31a:	1f c2       	rjmp	.+1086   	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     31c:	fc 01       	movw	r30, r24
     31e:	e0 5b       	subi	r30, 0xB0	; 176
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     326:	8f e0       	ldi	r24, 0x0F	; 15
     328:	e0 ee       	ldi	r30, 0xE0	; 224
     32a:	f3 e6       	ldi	r31, 0x63	; 99
     32c:	de 01       	movw	r26, r28
     32e:	11 96       	adiw	r26, 0x01	; 1
     330:	01 90       	ld	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	8a 95       	dec	r24
     336:	e1 f7       	brne	.-8      	; 0x330 <display+0x2c>
			get_VERSION(status.version);
     338:	87 e0       	ldi	r24, 0x07	; 7
     33a:	98 e2       	ldi	r25, 0x28	; 40
     33c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <get_VERSION>
			strcpy(line2, "   ");
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	90 e2       	ldi	r25, 0x20	; 32
     344:	8e 8b       	std	Y+22, r24	; 0x16
     346:	9f 8b       	std	Y+23, r25	; 0x17
     348:	80 e2       	ldi	r24, 0x20	; 32
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	88 8f       	std	Y+24, r24	; 0x18
     34e:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     350:	67 e0       	ldi	r22, 0x07	; 7
     352:	78 e2       	ldi	r23, 0x28	; 40
     354:	ce 01       	movw	r24, r28
     356:	46 96       	adiw	r24, 0x16	; 22
     358:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <strcat>
			screen_value = SCRVERSION;
     35c:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
     360:	10 c2       	rjmp	.+1056   	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     362:	80 e1       	ldi	r24, 0x10	; 16
     364:	ef ee       	ldi	r30, 0xEF	; 239
     366:	f3 e6       	ldi	r31, 0x63	; 99
     368:	de 01       	movw	r26, r28
     36a:	11 96       	adiw	r26, 0x01	; 1
     36c:	01 90       	ld	r0, Z+
     36e:	0d 92       	st	X+, r0
     370:	8a 95       	dec	r24
     372:	e1 f7       	brne	.-8      	; 0x36c <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     374:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     378:	84 ff       	sbrs	r24, 4
     37a:	0a c0       	rjmp	.+20     	; 0x390 <display+0x8c>
				strcpy(line2, " O  ");
     37c:	85 e0       	ldi	r24, 0x05	; 5
     37e:	ef ef       	ldi	r30, 0xFF	; 255
     380:	f3 e6       	ldi	r31, 0x63	; 99
     382:	de 01       	movw	r26, r28
     384:	56 96       	adiw	r26, 0x16	; 22
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
     38c:	e1 f7       	brne	.-8      	; 0x386 <display+0x82>
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     390:	85 e0       	ldi	r24, 0x05	; 5
     392:	e4 e0       	ldi	r30, 0x04	; 4
     394:	f4 e6       	ldi	r31, 0x64	; 100
     396:	de 01       	movw	r26, r28
     398:	56 96       	adiw	r26, 0x16	; 22
     39a:	01 90       	ld	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	8a 95       	dec	r24
     3a0:	e1 f7       	brne	.-8      	; 0x39a <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     3a2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3a6:	85 ff       	sbrs	r24, 5
     3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <display+0xc2>
				strcat(line2, " O  ");
     3aa:	de 01       	movw	r26, r28
     3ac:	56 96       	adiw	r26, 0x16	; 22
     3ae:	0d 90       	ld	r0, X+
     3b0:	00 20       	and	r0, r0
     3b2:	e9 f7       	brne	.-6      	; 0x3ae <display+0xaa>
     3b4:	11 97       	sbiw	r26, 0x01	; 1
     3b6:	85 e0       	ldi	r24, 0x05	; 5
     3b8:	ef ef       	ldi	r30, 0xFF	; 255
     3ba:	f3 e6       	ldi	r31, 0x63	; 99
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <display+0xb8>
     3c4:	1f c0       	rjmp	.+62     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			} else if (status.maxopen_BUF) {
     3c6:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
     3ca:	88 23       	and	r24, r24
     3cc:	71 f0       	breq	.+28     	; 0x3ea <display+0xe6>
				strcat(line2, " T  ");
     3ce:	de 01       	movw	r26, r28
     3d0:	56 96       	adiw	r26, 0x16	; 22
     3d2:	0d 90       	ld	r0, X+
     3d4:	00 20       	and	r0, r0
     3d6:	e9 f7       	brne	.-6      	; 0x3d2 <display+0xce>
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	85 e0       	ldi	r24, 0x05	; 5
     3dc:	e9 e0       	ldi	r30, 0x09	; 9
     3de:	f4 e6       	ldi	r31, 0x64	; 100
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	8a 95       	dec	r24
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <display+0xdc>
     3e8:	0d c0       	rjmp	.+26     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			} else {
				strcat(line2, " C  ");
     3ea:	de 01       	movw	r26, r28
     3ec:	56 96       	adiw	r26, 0x16	; 22
     3ee:	0d 90       	ld	r0, X+
     3f0:	00 20       	and	r0, r0
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <display+0xea>
     3f4:	11 97       	sbiw	r26, 0x01	; 1
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	e4 e0       	ldi	r30, 0x04	; 4
     3fa:	f4 e6       	ldi	r31, 0x64	; 100
     3fc:	01 90       	ld	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	8a 95       	dec	r24
     402:	e1 f7       	brne	.-8      	; 0x3fc <display+0xf8>
			}
			if (!REDENABLED) {					// eeprom.h
     404:	8d e0       	ldi	r24, 0x0D	; 13
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     40c:	81 11       	cpse	r24, r1
     40e:	0e c0       	rjmp	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				strcat(line2, " X  ");
     410:	de 01       	movw	r26, r28
     412:	56 96       	adiw	r26, 0x16	; 22
     414:	0d 90       	ld	r0, X+
     416:	00 20       	and	r0, r0
     418:	e9 f7       	brne	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41a:	11 97       	sbiw	r26, 0x01	; 1
     41c:	85 e0       	ldi	r24, 0x05	; 5
     41e:	ee e0       	ldi	r30, 0x0E	; 14
     420:	f4 e6       	ldi	r31, 0x64	; 100
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	8a 95       	dec	r24
     428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42a:	31 c0       	rjmp	.+98     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			} else if (REDVALVEOPEN) {			// valves.h
     42c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     430:	86 ff       	sbrs	r24, 6
     432:	0e c0       	rjmp	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				strcat(line2, " O  ");
     434:	de 01       	movw	r26, r28
     436:	56 96       	adiw	r26, 0x16	; 22
     438:	0d 90       	ld	r0, X+
     43a:	00 20       	and	r0, r0
     43c:	e9 f7       	brne	.-6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	85 e0       	ldi	r24, 0x05	; 5
     442:	ef ef       	ldi	r30, 0xFF	; 255
     444:	f3 e6       	ldi	r31, 0x63	; 99
     446:	01 90       	ld	r0, Z+
     448:	0d 92       	st	X+, r0
     44a:	8a 95       	dec	r24
     44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	1f c0       	rjmp	.+62     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			} else if (status.maxopen_RED) {
     450:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
     454:	88 23       	and	r24, r24
     456:	71 f0       	breq	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
				strcat(line2, " T  ");
     458:	de 01       	movw	r26, r28
     45a:	56 96       	adiw	r26, 0x16	; 22
     45c:	0d 90       	ld	r0, X+
     45e:	00 20       	and	r0, r0
     460:	e9 f7       	brne	.-6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	85 e0       	ldi	r24, 0x05	; 5
     466:	e9 e0       	ldi	r30, 0x09	; 9
     468:	f4 e6       	ldi	r31, 0x64	; 100
     46a:	01 90       	ld	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	8a 95       	dec	r24
     470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     472:	0d c0       	rjmp	.+26     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			} else {
				strcat(line2, " C  ");
     474:	de 01       	movw	r26, r28
     476:	56 96       	adiw	r26, 0x16	; 22
     478:	0d 90       	ld	r0, X+
     47a:	00 20       	and	r0, r0
     47c:	e9 f7       	brne	.-6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     47e:	11 97       	sbiw	r26, 0x01	; 1
     480:	85 e0       	ldi	r24, 0x05	; 5
     482:	e4 e0       	ldi	r30, 0x04	; 4
     484:	f4 e6       	ldi	r31, 0x64	; 100
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			}
			if (!BLUENABLED) {
     48e:	8c e0       	ldi	r24, 0x0C	; 12
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     496:	81 11       	cpse	r24, r1
     498:	0c c0       	rjmp	.+24     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				strcat(line2, " X");
     49a:	fe 01       	movw	r30, r28
     49c:	76 96       	adiw	r30, 0x16	; 22
     49e:	01 90       	ld	r0, Z+
     4a0:	00 20       	and	r0, r0
     4a2:	e9 f7       	brne	.-6      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	98 e5       	ldi	r25, 0x58	; 88
     4aa:	80 83       	st	Z, r24
     4ac:	91 83       	std	Z+1, r25	; 0x01
     4ae:	12 82       	std	Z+2, r1	; 0x02
     4b0:	2b c0       	rjmp	.+86     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			} else if (BLUVALVEOPEN) {			// valves.h
     4b2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     4b6:	88 23       	and	r24, r24
     4b8:	64 f4       	brge	.+24     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
				strcat(line2, " O");
     4ba:	fe 01       	movw	r30, r28
     4bc:	76 96       	adiw	r30, 0x16	; 22
     4be:	01 90       	ld	r0, Z+
     4c0:	00 20       	and	r0, r0
     4c2:	e9 f7       	brne	.-6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	80 e2       	ldi	r24, 0x20	; 32
     4c8:	9f e4       	ldi	r25, 0x4F	; 79
     4ca:	80 83       	st	Z, r24
     4cc:	91 83       	std	Z+1, r25	; 0x01
     4ce:	12 82       	std	Z+2, r1	; 0x02
     4d0:	1b c0       	rjmp	.+54     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			} else if (status.maxopen_BLU) {
     4d2:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
     4d6:	88 23       	and	r24, r24
     4d8:	61 f0       	breq	.+24     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
				strcat(line2, " T");
     4da:	fe 01       	movw	r30, r28
     4dc:	76 96       	adiw	r30, 0x16	; 22
     4de:	01 90       	ld	r0, Z+
     4e0:	00 20       	and	r0, r0
     4e2:	e9 f7       	brne	.-6      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	80 e2       	ldi	r24, 0x20	; 32
     4e8:	94 e5       	ldi	r25, 0x54	; 84
     4ea:	80 83       	st	Z, r24
     4ec:	91 83       	std	Z+1, r25	; 0x01
     4ee:	12 82       	std	Z+2, r1	; 0x02
     4f0:	0b c0       	rjmp	.+22     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			} else {
				strcat(line2, " C");
     4f2:	fe 01       	movw	r30, r28
     4f4:	76 96       	adiw	r30, 0x16	; 22
     4f6:	01 90       	ld	r0, Z+
     4f8:	00 20       	and	r0, r0
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	80 e2       	ldi	r24, 0x20	; 32
     500:	93 e4       	ldi	r25, 0x43	; 67
     502:	80 83       	st	Z, r24
     504:	91 83       	std	Z+1, r25	; 0x01
     506:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     50e:	39 c1       	rjmp	.+626    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     510:	8d e0       	ldi	r24, 0x0D	; 13
     512:	e3 e1       	ldi	r30, 0x13	; 19
     514:	f4 e6       	ldi	r31, 0x64	; 100
     516:	de 01       	movw	r26, r28
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	8a 95       	dec	r24
     520:	e1 f7       	brne	.-8      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			if (status.next_fill < 2) {
     522:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <status+0x15>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	98 f4       	brcc	.+38     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
				sprintf(line2, "%d minute", status.next_fill);
     52a:	1f 92       	push	r1
     52c:	8f 93       	push	r24
     52e:	80 e2       	ldi	r24, 0x20	; 32
     530:	94 e6       	ldi	r25, 0x64	; 100
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	ce 01       	movw	r24, r28
     538:	46 96       	adiw	r24, 0x16	; 22
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	12 c0       	rjmp	.+36     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     550:	1f 92       	push	r1
     552:	8f 93       	push	r24
     554:	8a e2       	ldi	r24, 0x2A	; 42
     556:	94 e6       	ldi	r25, 0x64	; 100
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	ce 01       	movw	r24, r28
     55e:	46 96       	adiw	r24, 0x16	; 22
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     57a:	03 c1       	rjmp	.+518    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     57c:	8e e0       	ldi	r24, 0x0E	; 14
     57e:	e5 e3       	ldi	r30, 0x35	; 53
     580:	f4 e6       	ldi	r31, 0x64	; 100
     582:	de 01       	movw	r26, r28
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	01 90       	ld	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	8a 95       	dec	r24
     58c:	e1 f7       	brne	.-8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			if (FILLINTERVAL == 1) {			// eeprom.h
     58e:	8a e0       	ldi	r24, 0x0A	; 10
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	99 f4       	brne	.+38     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				sprintf(line2, "%d minute", FILLINTERVAL);
     59a:	1f 92       	push	r1
     59c:	8f 93       	push	r24
     59e:	80 e2       	ldi	r24, 0x20	; 32
     5a0:	94 e6       	ldi	r25, 0x64	; 100
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	ce 01       	movw	r24, r28
     5a8:	46 96       	adiw	r24, 0x16	; 22
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	12 c0       	rjmp	.+36     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     5c0:	1f 92       	push	r1
     5c2:	8f 93       	push	r24
     5c4:	8a e2       	ldi	r24, 0x2A	; 42
     5c6:	94 e6       	ldi	r25, 0x64	; 100
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	ce 01       	movw	r24, r28
     5ce:	46 96       	adiw	r24, 0x16	; 22
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     5ea:	cb c0       	rjmp	.+406    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     5ec:	8e e0       	ldi	r24, 0x0E	; 14
     5ee:	e3 e4       	ldi	r30, 0x43	; 67
     5f0:	f4 e6       	ldi	r31, 0x64	; 100
     5f2:	de 01       	movw	r26, r28
     5f4:	11 96       	adiw	r26, 0x01	; 1
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	8a 95       	dec	r24
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			if (MAXOPENTIME < 2) {				// eeprom.h
     5fe:	8b e0       	ldi	r24, 0x0B	; 11
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	98 f4       	brcc	.+38     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
				sprintf(line2, "%d minute", MAXOPENTIME);
     60a:	1f 92       	push	r1
     60c:	8f 93       	push	r24
     60e:	80 e2       	ldi	r24, 0x20	; 32
     610:	94 e6       	ldi	r25, 0x64	; 100
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	ce 01       	movw	r24, r28
     618:	46 96       	adiw	r24, 0x16	; 22
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	12 c0       	rjmp	.+36     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     630:	1f 92       	push	r1
     632:	8f 93       	push	r24
     634:	8a e2       	ldi	r24, 0x2A	; 42
     636:	94 e6       	ldi	r25, 0x64	; 100
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	ce 01       	movw	r24, r28
     63e:	46 96       	adiw	r24, 0x16	; 22
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     65a:	93 c0       	rjmp	.+294    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	e1 e5       	ldi	r30, 0x51	; 81
     660:	f4 e6       	ldi	r31, 0x64	; 100
     662:	de 01       	movw	r26, r28
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	01 90       	ld	r0, Z+
     668:	0d 92       	st	X+, r0
     66a:	8a 95       	dec	r24
     66c:	e1 f7       	brne	.-8      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
			sprintf(line2, "%d kPa", status.pressure);
     66e:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <status+0x1a>
     672:	1f 92       	push	r1
     674:	8f 93       	push	r24
     676:	8e e5       	ldi	r24, 0x5E	; 94
     678:	94 e6       	ldi	r25, 0x64	; 100
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	ce 01       	movw	r24, r28
     680:	46 96       	adiw	r24, 0x16	; 22
     682:	9f 93       	push	r25
     684:	8f 93       	push	r24
     686:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
			screen_value = SCRPRESSURE;
     68a:	85 e0       	ldi	r24, 0x05	; 5
     68c:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	72 c0       	rjmp	.+228    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     69e:	8c e0       	ldi	r24, 0x0C	; 12
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     6a6:	88 23       	and	r24, r24
     6a8:	99 f0       	breq	.+38     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
				strcpy(line1, "BLUE is ENABLED");
     6aa:	80 e1       	ldi	r24, 0x10	; 16
     6ac:	e5 e6       	ldi	r30, 0x65	; 101
     6ae:	f4 e6       	ldi	r31, 0x64	; 100
     6b0:	de 01       	movw	r26, r28
     6b2:	11 96       	adiw	r26, 0x01	; 1
     6b4:	01 90       	ld	r0, Z+
     6b6:	0d 92       	st	X+, r0
     6b8:	8a 95       	dec	r24
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
				strcpy(line2, "Push to disable");
     6bc:	80 e1       	ldi	r24, 0x10	; 16
     6be:	e5 e7       	ldi	r30, 0x75	; 117
     6c0:	f4 e6       	ldi	r31, 0x64	; 100
     6c2:	de 01       	movw	r26, r28
     6c4:	56 96       	adiw	r26, 0x16	; 22
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	8a 95       	dec	r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     6ce:	12 c0       	rjmp	.+36     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
			} else {
				strcpy(line1, "Blue is DISABLED");
     6d0:	81 e1       	ldi	r24, 0x11	; 17
     6d2:	e5 e8       	ldi	r30, 0x85	; 133
     6d4:	f4 e6       	ldi	r31, 0x64	; 100
     6d6:	de 01       	movw	r26, r28
     6d8:	11 96       	adiw	r26, 0x01	; 1
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	8a 95       	dec	r24
     6e0:	e1 f7       	brne	.-8      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
				strcpy(line2, "Push to enable");
     6e2:	8f e0       	ldi	r24, 0x0F	; 15
     6e4:	e6 e9       	ldi	r30, 0x96	; 150
     6e6:	f4 e6       	ldi	r31, 0x64	; 100
     6e8:	de 01       	movw	r26, r28
     6ea:	56 96       	adiw	r26, 0x16	; 22
     6ec:	01 90       	ld	r0, Z+
     6ee:	0d 92       	st	X+, r0
     6f0:	8a 95       	dec	r24
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     6f4:	86 e0       	ldi	r24, 0x06	; 6
     6f6:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     6fa:	43 c0       	rjmp	.+134    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     6fc:	8d e0       	ldi	r24, 0x0D	; 13
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     704:	88 23       	and	r24, r24
     706:	99 f0       	breq	.+38     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
				strcpy(line1, "RED is ENABLED");
     708:	8f e0       	ldi	r24, 0x0F	; 15
     70a:	e5 ea       	ldi	r30, 0xA5	; 165
     70c:	f4 e6       	ldi	r31, 0x64	; 100
     70e:	de 01       	movw	r26, r28
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	01 90       	ld	r0, Z+
     714:	0d 92       	st	X+, r0
     716:	8a 95       	dec	r24
     718:	e1 f7       	brne	.-8      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
				strcpy(line2, "Push to disable");
     71a:	80 e1       	ldi	r24, 0x10	; 16
     71c:	e5 e7       	ldi	r30, 0x75	; 117
     71e:	f4 e6       	ldi	r31, 0x64	; 100
     720:	de 01       	movw	r26, r28
     722:	56 96       	adiw	r26, 0x16	; 22
     724:	01 90       	ld	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	8a 95       	dec	r24
     72a:	e1 f7       	brne	.-8      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
     72c:	12 c0       	rjmp	.+36     	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
			} else {
				strcpy(line1, "RED is DISABLED");
     72e:	80 e1       	ldi	r24, 0x10	; 16
     730:	e4 eb       	ldi	r30, 0xB4	; 180
     732:	f4 e6       	ldi	r31, 0x64	; 100
     734:	de 01       	movw	r26, r28
     736:	11 96       	adiw	r26, 0x01	; 1
     738:	01 90       	ld	r0, Z+
     73a:	0d 92       	st	X+, r0
     73c:	8a 95       	dec	r24
     73e:	e1 f7       	brne	.-8      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
				strcpy(line2, "Push to enable");
     740:	8f e0       	ldi	r24, 0x0F	; 15
     742:	e6 e9       	ldi	r30, 0x96	; 150
     744:	f4 e6       	ldi	r31, 0x64	; 100
     746:	de 01       	movw	r26, r28
     748:	56 96       	adiw	r26, 0x16	; 22
     74a:	01 90       	ld	r0, Z+
     74c:	0d 92       	st	X+, r0
     74e:	8a 95       	dec	r24
     750:	e1 f7       	brne	.-8      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     752:	87 e0       	ldi	r24, 0x07	; 7
     754:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     758:	14 c0       	rjmp	.+40     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>

		default:
			strcpy(line1, "default");
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	e4 ec       	ldi	r30, 0xC4	; 196
     75e:	f4 e6       	ldi	r31, 0x64	; 100
     760:	de 01       	movw	r26, r28
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	8a 95       	dec	r24
     76a:	e1 f7       	brne	.-8      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			strcpy(line2, "overrun");
     76c:	88 e0       	ldi	r24, 0x08	; 8
     76e:	ec ec       	ldi	r30, 0xCC	; 204
     770:	f4 e6       	ldi	r31, 0x64	; 100
     772:	de 01       	movw	r26, r28
     774:	56 96       	adiw	r26, 0x16	; 22
     776:	01 90       	ld	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	8a 95       	dec	r24
     77c:	e1 f7       	brne	.-8      	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
			screen_value = SCRVERSION;			// encoder.h
     77e:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	writestr_OLED(0, line2, 2);
     790:	42 e0       	ldi	r20, 0x02	; 2
     792:	be 01       	movw	r22, r28
     794:	6a 5e       	subi	r22, 0xEA	; 234
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
}
     79e:	aa 96       	adiw	r28, 0x2a	; 42
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     7aa:	8c e0       	ldi	r24, 0x0C	; 12
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	81 11       	cpse	r24, r1
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	8c e0       	ldi	r24, 0x0C	; 12
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 80 11 	call	0x2300	; 0x2300 <eeprom_update_byte>
	encoder_sensed = FALSE;
     7c0:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	0e 94 82 01 	call	0x304	; 0x304 <display>
     7ca:	08 95       	ret

000007cc <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     7cc:	8d e0       	ldi	r24, 0x0D	; 13
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	81 11       	cpse	r24, r1
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	8d e0       	ldi	r24, 0x0D	; 13
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 80 11 	call	0x2300	; 0x2300 <eeprom_update_byte>
	encoder_sensed = FALSE;
     7e2:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     7e6:	87 e0       	ldi	r24, 0x07	; 7
     7e8:	0e 94 82 01 	call	0x304	; 0x304 <display>
     7ec:	08 95       	ret

000007ee <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	65 97       	sbiw	r28, 0x15	; 21
     800:	cd bf       	out	0x3d, r28	; 61
     802:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;				// eeprom.h
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     80c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     810:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	a9 f4       	brne	.+42     	; 0x842 <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     818:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     81c:	1f 92       	push	r1
     81e:	8f 93       	push	r24
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	94 e6       	ldi	r25, 0x64	; 100
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	14 c0       	rjmp	.+40     	; 0x86a <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     842:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	8a e2       	ldi	r24, 0x2A	; 42
     84c:	94 e6       	ldi	r25, 0x64	; 100
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	64 ed       	ldi	r22, 0xD4	; 212
     86e:	74 e6       	ldi	r23, 0x64	; 100
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     876:	42 e0       	ldi	r20, 0x02	; 2
     878:	be 01       	movw	r22, r28
     87a:	6f 5f       	subi	r22, 0xFF	; 255
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     884:	0f 2e       	mov	r0, r31
     886:	fe ef       	ldi	r31, 0xFE	; 254
     888:	ef 2e       	mov	r14, r31
     88a:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     88c:	68 94       	set
     88e:	ff 24       	eor	r15, r15
     890:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     892:	0a e2       	ldi	r16, 0x2A	; 42
     894:	14 e6       	ldi	r17, 0x64	; 100
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     896:	32 c0       	rjmp	.+100    	; 0x8fc <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     898:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     89c:	87 30       	cpi	r24, 0x07	; 7
     89e:	71 f5       	brne	.+92     	; 0x8fc <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     8a0:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	18 f4       	brcc	.+6      	; 0x8ae <change_FILLINT+0xc0>
				encoder_value = 2;
     8a8:	f0 92 24 28 	sts	0x2824, r15	; 0x802824 <encoder_value>
     8ac:	06 c0       	rjmp	.+12     	; 0x8ba <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     8ae:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8b2:	8f 3f       	cpi	r24, 0xFF	; 255
     8b4:	11 f4       	brne	.+4      	; 0x8ba <change_FILLINT+0xcc>
				encoder_value = 254;
     8b6:	e0 92 24 28 	sts	0x2824, r14	; 0x802824 <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8ba:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8be:	1f 92       	push	r1
     8c0:	8f 93       	push	r24
     8c2:	1f 93       	push	r17
     8c4:	0f 93       	push	r16
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	8c 0f       	add	r24, r28
     8cc:	9d 1f       	adc	r25, r29
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	65 ee       	ldi	r22, 0xE5	; 229
     8da:	74 e6       	ldi	r23, 0x64	; 100
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     8e2:	4f 2d       	mov	r20, r15
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8fc:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     900:	85 30       	cpi	r24, 0x05	; 5
     902:	51 f6       	brne	.-108    	; 0x898 <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     904:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     908:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     90c:	8a e0       	ldi	r24, 0x0A	; 10
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 80 11 	call	0x2300	; 0x2300 <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     914:	8b e0       	ldi	r24, 0x0B	; 11
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     91c:	18 2f       	mov	r17, r24
     91e:	8a e0       	ldi	r24, 0x0A	; 10
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     926:	18 17       	cp	r17, r24
     928:	30 f0       	brcs	.+12     	; 0x936 <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     92a:	6f ef       	ldi	r22, 0xFF	; 255
     92c:	68 0f       	add	r22, r24
     92e:	8b e0       	ldi	r24, 0x0B	; 11
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 80 11 	call	0x2300	; 0x2300 <eeprom_update_byte>
	}
	display(SCRFILLINT);
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	0e 94 82 01 	call	0x304	; 0x304 <display>
}
     93c:	65 96       	adiw	r28, 0x15	; 21
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	de bf       	out	0x3e, r29	; 62
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
     94c:	ef 90       	pop	r14
     94e:	08 95       	ret

00000950 <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	65 97       	sbiw	r28, 0x15	; 21
     966:	cd bf       	out	0x3d, r28	; 61
     968:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;			// eeprom.h
     96a:	8b e0       	ldi	r24, 0x0B	; 11
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     972:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     976:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	a9 f4       	brne	.+42     	; 0x9a8 <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     97e:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     982:	1f 92       	push	r1
     984:	8f 93       	push	r24
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	94 e6       	ldi	r25, 0x64	; 100
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	14 c0       	rjmp	.+40     	; 0x9d0 <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     9a8:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     9ac:	1f 92       	push	r1
     9ae:	8f 93       	push	r24
     9b0:	8a e2       	ldi	r24, 0x2A	; 42
     9b2:	94 e6       	ldi	r25, 0x64	; 100
     9b4:	9f 93       	push	r25
     9b6:	8f 93       	push	r24
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	65 ef       	ldi	r22, 0xF5	; 245
     9d4:	74 e6       	ldi	r23, 0x64	; 100
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     9dc:	42 e0       	ldi	r20, 0x02	; 2
     9de:	be 01       	movw	r22, r28
     9e0:	6f 5f       	subi	r22, 0xFF	; 255
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     9ea:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     9ec:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     9ee:	0f 2e       	mov	r0, r31
     9f0:	fa e2       	ldi	r31, 0x2A	; 42
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f4 e6       	ldi	r31, 0x64	; 100
     9f6:	ff 2e       	mov	r15, r31
     9f8:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f0 e2       	ldi	r31, 0x20	; 32
     9fe:	cf 2e       	mov	r12, r31
     a00:	f4 e6       	ldi	r31, 0x64	; 100
     a02:	df 2e       	mov	r13, r31
     a04:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a06:	57 c0       	rjmp	.+174    	; 0xab6 <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     a08:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     a0c:	87 30       	cpi	r24, 0x07	; 7
     a0e:	09 f0       	breq	.+2      	; 0xa12 <change_MAXOPENTIME+0xc2>
     a10:	52 c0       	rjmp	.+164    	; 0xab6 <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     a12:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a16:	81 11       	cpse	r24, r1
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     a1a:	10 93 24 28 	sts	0x2824, r17	; 0x802824 <encoder_value>
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     a20:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a24:	8f 3f       	cpi	r24, 0xFF	; 255
     a26:	11 f4       	brne	.+4      	; 0xa2c <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     a28:	00 93 24 28 	sts	0x2824, r16	; 0x802824 <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     a34:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <encoder_value>
     a38:	98 17       	cp	r25, r24
     a3a:	18 f0       	brcs	.+6      	; 0xa42 <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     a3c:	81 50       	subi	r24, 0x01	; 1
     a3e:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			if (encoder_value == 1) {
     a42:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	a9 f4       	brne	.+42     	; 0xa74 <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     a4a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a4e:	1f 92       	push	r1
     a50:	8f 93       	push	r24
     a52:	df 92       	push	r13
     a54:	cf 92       	push	r12
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	8c 0f       	add	r24, r28
     a5c:	9d 1f       	adc	r25, r29
     a5e:	9f 93       	push	r25
     a60:	8f 93       	push	r24
     a62:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	14 c0       	rjmp	.+40     	; 0xa9c <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a74:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a78:	1f 92       	push	r1
     a7a:	8f 93       	push	r24
     a7c:	ff 92       	push	r15
     a7e:	ef 92       	push	r14
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	8c 0f       	add	r24, r28
     a86:	9d 1f       	adc	r25, r29
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     a9c:	41 2f       	mov	r20, r17
     a9e:	65 ef       	ldi	r22, 0xF5	; 245
     aa0:	74 e6       	ldi	r23, 0x64	; 100
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     aa8:	42 e0       	ldi	r20, 0x02	; 2
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     ab6:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     aba:	85 30       	cpi	r24, 0x05	; 5
     abc:	09 f0       	breq	.+2      	; 0xac0 <change_MAXOPENTIME+0x170>
     abe:	a4 cf       	rjmp	.-184    	; 0xa08 <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     ac0:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     ac4:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     ac8:	8b e0       	ldi	r24, 0x0B	; 11
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 80 11 	call	0x2300	; 0x2300 <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	0e 94 82 01 	call	0x304	; 0x304 <display>

}
     ad6:	65 96       	adiw	r28, 0x15	; 21
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     aee:	e0 e4       	ldi	r30, 0x40	; 64
     af0:	f4 e0       	ldi	r31, 0x04	; 4
     af2:	8b e0       	ldi	r24, 0x0B	; 11
     af4:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     af6:	98 e0       	ldi	r25, 0x08	; 8
     af8:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     afa:	81 8b       	std	Z+17, r24	; 0x11
     afc:	08 95       	ret

00000afe <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     afe:	8c e0       	ldi	r24, 0x0C	; 12
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     b06:	88 23       	and	r24, r24
     b08:	79 f0       	breq	.+30     	; 0xb28 <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     b0a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b0e:	88 23       	and	r24, r24
     b10:	5c f0       	brlt	.+22     	; 0xb28 <start_FILL+0x2a>
     b12:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b16:	80 ff       	sbrs	r24, 0
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     b20:	e7 e0       	ldi	r30, 0x07	; 7
     b22:	f8 e2       	ldi	r31, 0x28	; 40
     b24:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     b26:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     b28:	8d e0       	ldi	r24, 0x0D	; 13
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     b30:	88 23       	and	r24, r24
     b32:	79 f0       	breq	.+30     	; 0xb52 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     b34:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b38:	86 fd       	sbrc	r24, 6
     b3a:	0b c0       	rjmp	.+22     	; 0xb52 <start_FILL+0x54>
     b3c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b40:	81 ff       	sbrs	r24, 1
     b42:	07 c0       	rjmp	.+14     	; 0xb52 <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     b4a:	e7 e0       	ldi	r30, 0x07	; 7
     b4c:	f8 e2       	ldi	r31, 0x28	; 40
     b4e:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     b50:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     b52:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	11 f4       	brne	.+4      	; 0xb5e <start_FILL+0x60>
		display(SCRVALVES);
     b5a:	0e 94 82 01 	call	0x304	; 0x304 <display>
	}
	status.next_fill = FILLINTERVAL;
     b5e:	8a e0       	ldi	r24, 0x0A	; 10
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     b66:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <status+0x15>
     b6a:	08 95       	ret

00000b6c <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     b6c:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <display_off>
     b70:	88 23       	and	r24, r24
     b72:	29 f0       	breq	.+10     	; 0xb7e <handle_encoder+0x12>
		display(screen_value);
     b74:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b78:	0e 94 82 01 	call	0x304	; 0x304 <display>
     b7c:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     b7e:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b82:	87 30       	cpi	r24, 0x07	; 7
     b84:	a9 f4       	brne	.+42     	; 0xbb0 <handle_encoder+0x44>
		encoder_sensed = FALSE;
     b86:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     b8a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b8e:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <encoder_change>
     b92:	89 0f       	add	r24, r25
     b94:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		if (screen_value < 0) {
     b98:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     b9c:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     ba0:	87 70       	andi	r24, 0x07	; 7
     ba2:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		}
		display(screen_value);
     ba6:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     baa:	0e 94 82 01 	call	0x304	; 0x304 <display>
     bae:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     bb0:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     bb4:	85 30       	cpi	r24, 0x05	; 5
     bb6:	f9 f4       	brne	.+62     	; 0xbf6 <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     bb8:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		switch (screen_value) {
     bbc:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     bc0:	84 30       	cpi	r24, 0x04	; 4
     bc2:	89 f0       	breq	.+34     	; 0xbe6 <handle_encoder+0x7a>
     bc4:	28 f4       	brcc	.+10     	; 0xbd0 <handle_encoder+0x64>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	41 f0       	breq	.+16     	; 0xbda <handle_encoder+0x6e>
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	49 f0       	breq	.+18     	; 0xbe0 <handle_encoder+0x74>
     bce:	08 95       	ret
     bd0:	86 30       	cpi	r24, 0x06	; 6
     bd2:	61 f0       	breq	.+24     	; 0xbec <handle_encoder+0x80>
     bd4:	87 30       	cpi	r24, 0x07	; 7
     bd6:	69 f0       	breq	.+26     	; 0xbf2 <handle_encoder+0x86>
     bd8:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     bda:	0e 94 7f 05 	call	0xafe	; 0xafe <start_FILL>
				break;
     bde:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     be0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <change_FILLINT>
				break;
     be4:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     be6:	0e 94 a8 04 	call	0x950	; 0x950 <change_MAXOPENTIME>
				break;
     bea:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     bec:	0e 94 d5 03 	call	0x7aa	; 0x7aa <change_DISABLEBLU>
				break;
     bf0:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     bf2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <change_DISABLERED>
     bf6:	08 95       	ret

00000bf8 <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	8f 93       	push	r24
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     c08:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c0c:	81 ff       	sbrs	r24, 1
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
     c1c:	1f c0       	rjmp	.+62     	; 0xc5c <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     c1e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c22:	83 ff       	sbrs	r24, 3
     c24:	1b c0       	rjmp	.+54     	; 0xc5c <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     c26:	e0 e4       	ldi	r30, 0x40	; 64
     c28:	f4 e0       	ldi	r31, 0x04	; 4
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     c2e:	80 85       	ldd	r24, Z+8	; 0x08
     c30:	82 ff       	sbrs	r24, 2
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <__vector_24+0x4e>
			encoder_value++;
     c34:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <__vector_24+0x5e>
		} else {
			encoder_value--;
     c46:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = -1;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
		}
		encoder_sensed = ENCODERA;
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
	}
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	8f 91       	pop	r24
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <init_STATUS>:
	clear_BUTTONS();

}

void init_STATUS()
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29

	status.next_buftank_fill = BIGFILLINTERVAL;
     c70:	c7 e0       	ldi	r28, 0x07	; 7
     c72:	d8 e2       	ldi	r29, 0x28	; 40
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	8e 8b       	std	Y+22, r24	; 0x16
	status.next_fill = FILLINTERVAL;
     c78:	8a e0       	ldi	r24, 0x0A	; 10
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
     c80:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     c82:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     c84:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     c86:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     c88:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     c8a:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     c8c:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     c8e:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     c90:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     c92:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     c94:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     c96:	0e 94 2c 08 	call	0x1058	; 0x1058 <read_PRESSURE>
     c9a:	8a 8f       	std	Y+26, r24	; 0x1a

}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <init_PORTS>:
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
*/
	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca2:	e0 e6       	ldi	r30, 0x60	; 96
     ca4:	f4 e0       	ldi	r31, 0x04	; 4
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     caa:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cac:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cae:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb0:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb2:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb4:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb6:	87 8b       	std	Z+23, r24	; 0x17
     cb8:	08 95       	ret

00000cba <init>:
void init_STATUS(void);

void init(void)
{

	hour_flag = FALSE;
     cba:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
	minute_flag = FALSE;
     cbe:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>
	seconds = 0;
     cc2:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     cc6:	0e 94 51 06 	call	0xca2	; 0xca2 <init_PORTS>
	init_VALVES();
     cca:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <init_VALVES>
	init_USART();
     cce:	0e 94 bd 0a 	call	0x157a	; 0x157a <init_USART>
	init_BUTTONS();
     cd2:	0e 94 1e 01 	call	0x23c	; 0x23c <init_BUTTONS>
	init_ENCODER();
     cd6:	0e 94 77 05 	call	0xaee	; 0xaee <init_ENCODER>
	init_TWI();
     cda:	0e 94 44 0a 	call	0x1488	; 0x1488 <init_TWI>
	init_RTC(511);
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 c6 09 	call	0x138c	; 0x138c <init_RTC>
	init_ADC();
     ce6:	0e 94 00 08 	call	0x1000	; 0x1000 <init_ADC>
	init_STATUS();
     cea:	0e 94 36 06 	call	0xc6c	; 0xc6c <init_STATUS>
	init_OLED(0);
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 b8 06 	call	0xd70	; 0xd70 <init_OLED>
	update_VERSION();
     cf4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <update_VERSION>
	display(SCRVERSION);
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 82 01 	call	0x304	; 0x304 <display>
	clear_BUTTONS();
     cfe:	0e 94 1a 01 	call	0x234	; 0x234 <clear_BUTTONS>
     d02:	08 95       	ret

00000d04 <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     d04:	0e 94 5d 06 	call	0xcba	; 0xcba <init>
	sei();
     d08:	78 94       	sei
			handle_minute();	// See rtc.c
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
		}
		if (recv0_buf.done) {	// Serial communication received
     d0a:	ca e2       	ldi	r28, 0x2A	; 42
     d0c:	d9 e2       	ldi	r29, 0x29	; 41
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     d0e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     d12:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     d14:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     d18:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     d1c:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     d1e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <handle_encoder>
		}
		if (hour_flag) {		// Things to do once an hour
     d22:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <hour_flag>
     d26:	81 11       	cpse	r24, r1
			handle_hour();		// See rtc.c
     d28:	0e 94 8f 08 	call	0x111e	; 0x111e <handle_hour>
		}
		if (minute_flag) {		// Things to do once a minute
     d2c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <minute_flag>
     d30:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     d32:	0e 94 aa 08 	call	0x1154	; 0x1154 <handle_minute>
		}
		if (tick) {				// Things to do once a second
     d36:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     d3a:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     d3c:	0e 94 0e 09 	call	0x121c	; 0x121c <handle_ticks>
		}
		if (recv0_buf.done) {	// Serial communication received
     d40:	88 81       	ld	r24, Y
     d42:	88 23       	and	r24, r24
     d44:	21 f3       	breq	.-56     	; 0xd0e <main+0xa>
			handle_serial();	// See usart.c
     d46:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <handle_serial>
     d4a:	e1 cf       	rjmp	.-62     	; 0xd0e <main+0xa>

00000d4c <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	d6 2f       	mov	r29, r22
     d52:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	0e 94 4f 0a 	call	0x149e	; 0x149e <start_TWI>
	write_TWI(type);
     d5a:	8d 2f       	mov	r24, r29
     d5c:	0e 94 93 0a 	call	0x1526	; 0x1526 <write_TWI>
	write_TWI(byteToSend);
     d60:	8c 2f       	mov	r24, r28
     d62:	0e 94 93 0a 	call	0x1526	; 0x1526 <write_TWI>
	stop_TWI();
     d66:	0e 94 8f 0a 	call	0x151e	; 0x151e <stop_TWI>

}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	08 95       	ret

00000d70 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d70:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f4 e0       	ldi	r31, 0x04	; 4
     d76:	90 e8       	ldi	r25, 0x80	; 128
     d78:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	a6 e4       	ldi	r26, 0x46	; 70
     d7e:	b0 e1       	ldi	r27, 0x10	; 16
     d80:	11 97       	sbiw	r26, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <init_OLED+0x10>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     d86:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d88:	88 23       	and	r24, r24
     d8a:	11 f0       	breq	.+4      	; 0xd90 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d8c:	cd e3       	ldi	r28, 0x3D	; 61
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d90:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d92:	4a e2       	ldi	r20, 0x2A	; 42
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	8c 2f       	mov	r24, r28
     d98:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     d9c:	41 e7       	ldi	r20, 0x71	; 113
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	8c 2f       	mov	r24, r28
     da2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     da6:	4c e5       	ldi	r20, 0x5C	; 92
     da8:	60 e4       	ldi	r22, 0x40	; 64
     daa:	8c 2f       	mov	r24, r28
     dac:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     db0:	48 e2       	ldi	r20, 0x28	; 40
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	8c 2f       	mov	r24, r28
     db6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     dba:	48 e0       	ldi	r20, 0x08	; 8
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	8c 2f       	mov	r24, r28
     dc0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     dc4:	4a e2       	ldi	r20, 0x2A	; 42
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	8c 2f       	mov	r24, r28
     dca:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dce:	49 e7       	ldi	r20, 0x79	; 121
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	8c 2f       	mov	r24, r28
     dd4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     dd8:	45 ed       	ldi	r20, 0xD5	; 213
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	8c 2f       	mov	r24, r28
     dde:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     de2:	40 e7       	ldi	r20, 0x70	; 112
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	8c 2f       	mov	r24, r28
     de8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     dec:	48 e7       	ldi	r20, 0x78	; 120
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	8c 2f       	mov	r24, r28
     df2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     df6:	48 e0       	ldi	r20, 0x08	; 8
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	8c 2f       	mov	r24, r28
     dfc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     e00:	46 e0       	ldi	r20, 0x06	; 6
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	8c 2f       	mov	r24, r28
     e06:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     e0a:	42 e7       	ldi	r20, 0x72	; 114
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	8c 2f       	mov	r24, r28
     e10:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	60 e4       	ldi	r22, 0x40	; 64
     e18:	8c 2f       	mov	r24, r28
     e1a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e1e:	4a e2       	ldi	r20, 0x2A	; 42
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	8c 2f       	mov	r24, r28
     e24:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e28:	49 e7       	ldi	r20, 0x79	; 121
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	8c 2f       	mov	r24, r28
     e2e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     e32:	4a ed       	ldi	r20, 0xDA	; 218
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	8c 2f       	mov	r24, r28
     e38:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	8c 2f       	mov	r24, r28
     e42:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     e46:	4c ed       	ldi	r20, 0xDC	; 220
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	8c 2f       	mov	r24, r28
     e4c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	8c 2f       	mov	r24, r28
     e56:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     e5a:	41 e8       	ldi	r20, 0x81	; 129
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	8c 2f       	mov	r24, r28
     e6a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e6e:	49 ed       	ldi	r20, 0xD9	; 217
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	8c 2f       	mov	r24, r28
     e74:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e78:	41 ef       	ldi	r20, 0xF1	; 241
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	8c 2f       	mov	r24, r28
     e7e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e82:	4b ed       	ldi	r20, 0xDB	; 219
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	8c 2f       	mov	r24, r28
     e88:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e8c:	40 e4       	ldi	r20, 0x40	; 64
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	8c 2f       	mov	r24, r28
     e92:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e96:	48 e7       	ldi	r20, 0x78	; 120
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	8c 2f       	mov	r24, r28
     e9c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     ea0:	48 e2       	ldi	r20, 0x28	; 40
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	8c 2f       	mov	r24, r28
     ea6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	8c 2f       	mov	r24, r28
     eb0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     ebe:	4c e0       	ldi	r20, 0x0C	; 12
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	8c 2f       	mov	r24, r28
     ec4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
     ec8:	ba e6       	ldi	r27, 0x6A	; 106
     eca:	24 e0       	ldi	r18, 0x04	; 4
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	b1 50       	subi	r27, 0x01	; 1
     ed0:	20 40       	sbci	r18, 0x00	; 0
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	e1 f7       	brne	.-8      	; 0xece <init_OLED+0x15e>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     ed8:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     edc:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
//	timeoutOLED = 5;

}
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	e2 97       	sbiw	r28, 0x32	; 50
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     efe:	91 e1       	ldi	r25, 0x11	; 17
     f00:	e6 e0       	ldi	r30, 0x06	; 6
     f02:	f5 e6       	ldi	r31, 0x65	; 101
     f04:	de 01       	movw	r26, r28
     f06:	92 96       	adiw	r26, 0x22	; 34
     f08:	01 90       	ld	r0, Z+
     f0a:	0d 92       	st	X+, r0
     f0c:	9a 95       	dec	r25
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <writestr_OLED+0x24>

	if (displaynumber == 0) {
     f10:	88 23       	and	r24, r24
     f12:	29 f0       	breq	.+10     	; 0xf1e <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     f14:	0f 2e       	mov	r0, r31
     f16:	fd e3       	ldi	r31, 0x3D	; 61
     f18:	ff 2e       	mov	r15, r31
     f1a:	f0 2d       	mov	r31, r0
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     f1e:	0f 2e       	mov	r0, r31
     f20:	fc e3       	ldi	r31, 0x3C	; 60
     f22:	ff 2e       	mov	r15, r31
     f24:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     f26:	8e 01       	movw	r16, r28
     f28:	0f 5f       	subi	r16, 0xFF	; 255
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <strcpy>
	if (strlen(strbuf) > 16) {
     f32:	f8 01       	movw	r30, r16
     f34:	01 90       	ld	r0, Z+
     f36:	00 20       	and	r0, r0
     f38:	e9 f7       	brne	.-6      	; 0xf34 <writestr_OLED+0x50>
     f3a:	31 97       	sbiw	r30, 0x01	; 1
     f3c:	e0 1b       	sub	r30, r16
     f3e:	f1 0b       	sbc	r31, r17
     f40:	71 97       	sbiw	r30, 0x11	; 17
     f42:	08 f0       	brcs	.+2      	; 0xf46 <writestr_OLED+0x62>
		strbuf[16] = '\0';
     f44:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     f46:	be 01       	movw	r22, r28
     f48:	6e 5d       	subi	r22, 0xDE	; 222
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	ce 01       	movw	r24, r28
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <strcat>

	if (lineno == 1) {
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	d8 12       	cpse	r13, r24
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	8f 2d       	mov	r24, r15
     f60:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <writestr_OLED+0xb4>
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f66:	40 ec       	ldi	r20, 0xC0	; 192
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	8f 2d       	mov	r24, r15
     f6c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
     f70:	13 c0       	rjmp	.+38     	; 0xf98 <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f72:	f8 01       	movw	r30, r16
     f74:	41 91       	ld	r20, Z+
     f76:	8f 01       	movw	r16, r30
     f78:	60 e4       	ldi	r22, 0x40	; 64
     f7a:	8f 2d       	mov	r24, r15
     f7c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f80:	0c 15       	cp	r16, r12
     f82:	1d 05       	cpc	r17, r13
     f84:	b1 f7       	brne	.-20     	; 0xf72 <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
     f8e:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
	display_off = FALSE;
     f92:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <display_off>

}
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <writestr_OLED+0xc4>
     f98:	8e 01       	movw	r16, r28
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	6e 01       	movw	r12, r28
     fa0:	f1 e1       	ldi	r31, 0x11	; 17
     fa2:	cf 0e       	add	r12, r31
     fa4:	d1 1c       	adc	r13, r1
     fa6:	e5 cf       	rjmp	.-54     	; 0xf72 <writestr_OLED+0x8e>
     fa8:	e2 96       	adiw	r28, 0x32	; 50
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	08 95       	ret

00000fbe <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	1f 92       	push	r1
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     fcc:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     fda:	42 e0       	ldi	r20, 0x02	; 2
     fdc:	be 01       	movw	r22, r28
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	81 2f       	mov	r24, r17
     fe4:	0e 94 72 07 	call	0xee4	; 0xee4 <writestr_OLED>
	timerOLED = 0;
     fe8:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     fec:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
	display_off = TRUE;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <display_off>

}
     ff6:	0f 90       	pop	r0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	08 95       	ret

00001000 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
    1000:	84 e0       	ldi	r24, 0x04	; 4
    1002:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
    1006:	e0 e0       	ldi	r30, 0x00	; 0
    1008:	f6 e0       	ldi	r31, 0x06	; 6
    100a:	80 81       	ld	r24, Z
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    1010:	a0 ea       	ldi	r26, 0xA0	; 160
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	8c 91       	ld	r24, X
    1016:	80 63       	ori	r24, 0x30	; 48
    1018:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    101a:	a2 e0       	ldi	r26, 0x02	; 2
    101c:	b6 e0       	ldi	r27, 0x06	; 6
    101e:	8c 91       	ld	r24, X
    1020:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    1022:	8c 91       	ld	r24, X
    1024:	80 64       	ori	r24, 0x40	; 64
    1026:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    1028:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    102c:	80 81       	ld	r24, Z
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    1032:	e8 e0       	ldi	r30, 0x08	; 8
    1034:	f6 e0       	ldi	r31, 0x06	; 6
    1036:	80 81       	ld	r24, Z
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    103c:	80 81       	ld	r24, Z
    103e:	80 ff       	sbrs	r24, 0
    1040:	04 c0       	rjmp	.+8      	; 0x104a <init_ADC+0x4a>
		asm("nop");
    1042:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    1044:	80 81       	ld	r24, Z
    1046:	80 fd       	sbrc	r24, 0
    1048:	fc cf       	rjmp	.-8      	; 0x1042 <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    104a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    104e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    1052:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <status+0x1a>
    1056:	08 95       	ret

00001058 <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	0f 2e       	mov	r0, r31
    106c:	fa e0       	ldi	r31, 0x0A	; 10
    106e:	bf 2e       	mov	r11, r31
    1070:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    1072:	c1 2c       	mov	r12, r1
    1074:	d1 2c       	mov	r13, r1
    1076:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1078:	c8 e0       	ldi	r28, 0x08	; 8
    107a:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    107c:	00 e1       	ldi	r16, 0x10	; 16
    107e:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1080:	88 81       	ld	r24, Y
    1082:	81 60       	ori	r24, 0x01	; 1
    1084:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1086:	88 81       	ld	r24, Y
    1088:	80 ff       	sbrs	r24, 0
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <read_PRESSURE+0x3c>
			asm("nop");
    108c:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    108e:	88 81       	ld	r24, Y
    1090:	80 fd       	sbrc	r24, 0
    1092:	fc cf       	rjmp	.-8      	; 0x108c <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1094:	f8 01       	movw	r30, r16
    1096:	60 81       	ld	r22, Z
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__floatunsisf>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
    10ae:	6b 01       	movw	r12, r22
    10b0:	7c 01       	movw	r14, r24
    10b2:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    10b4:	b1 10       	cpse	r11, r1
    10b6:	e4 cf       	rjmp	.-56     	; 0x1080 <read_PRESSURE+0x28>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e2       	ldi	r20, 0x20	; 32
    10be:	51 e4       	ldi	r21, 0x41	; 65
    10c0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divsf3>
    10c4:	2e e5       	ldi	r18, 0x5E	; 94
    10c6:	3a eb       	ldi	r19, 0xBA	; 186
    10c8:	49 e5       	ldi	r20, 0x59	; 89
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
    10d0:	2f e1       	ldi	r18, 0x1F	; 31
    10d2:	35 e8       	ldi	r19, 0x85	; 133
    10d4:	45 ec       	ldi	r20, 0xC5	; 197
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__subsf3>
    10dc:	6b 01       	movw	r12, r22
    10de:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__cmpsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	1c f4       	brge	.+6      	; 0x10f4 <read_PRESSURE+0x9c>
		value = 0.0;
    10ee:	c1 2c       	mov	r12, r1
    10f0:	d1 2c       	mov	r13, r1
    10f2:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	5f e3       	ldi	r21, 0x3F	; 63
    10fc:	c7 01       	movw	r24, r14
    10fe:	b6 01       	movw	r22, r12
    1100:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__addsf3>
    1104:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fixunssfsi>
    1108:	86 2f       	mov	r24, r22

}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	08 95       	ret

0000111e <handle_hour>:
THINGS TO DO EVERY HOUR
----------------------------------------------------------------------*/
void handle_hour(void)
{

	hour_flag = FALSE;
    111e:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>

	if (BIGTANK) {
		status.next_buftank_fill--;
    1122:	e7 e0       	ldi	r30, 0x07	; 7
    1124:	f8 e2       	ldi	r31, 0x28	; 40
    1126:	86 89       	ldd	r24, Z+22	; 0x16
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	86 8b       	std	Z+22, r24	; 0x16
		if (status.next_buftank_fill == 0) {
    112c:	81 11       	cpse	r24, r1
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <handle_hour+0x34>
			if (BUFTHERMWARM) {
    1130:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1134:	82 ff       	sbrs	r24, 2
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <handle_hour+0x34>
				OPENVALVE(BUFVALVE);
    1138:	a0 e4       	ldi	r26, 0x40	; 64
    113a:	b4 e0       	ldi	r27, 0x04	; 4
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	15 96       	adiw	r26, 0x05	; 5
    1140:	8c 93       	st	X, r24
    1142:	15 97       	sbiw	r26, 0x05	; 5
				status.opentime_BUF = 0;
    1144:	15 86       	std	Z+13, r1	; 0x0d
				OPENVALVE(SUPVALVE);
    1146:	80 e1       	ldi	r24, 0x10	; 16
    1148:	15 96       	adiw	r26, 0x05	; 5
    114a:	8c 93       	st	X, r24
				status.opentime_SUP = 0;
    114c:	16 86       	std	Z+14, r1	; 0x0e
				status.next_buftank_fill = BIGFILLINTERVAL;
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	86 8b       	std	Z+22, r24	; 0x16
    1152:	08 95       	ret

00001154 <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    1154:	cf 93       	push	r28

	if (++minutes >= 60) {
    1156:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <minutes>
    115a:	8f 5f       	subi	r24, 0xFF	; 255
    115c:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <minutes>
    1160:	8c 33       	cpi	r24, 0x3C	; 60
    1162:	28 f0       	brcs	.+10     	; 0x116e <handle_minute+0x1a>
		hour_flag = TRUE;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <hour_flag>
		minutes = 0;
    116a:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <minutes>
	}

	minute_flag = FALSE;
    116e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>

	if (BLUVALVEOPEN) {
    1172:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1176:	88 23       	and	r24, r24
    1178:	8c f4       	brge	.+34     	; 0x119c <handle_minute+0x48>
		status.opentime_BLU++;
    117a:	e7 e0       	ldi	r30, 0x07	; 7
    117c:	f8 e2       	ldi	r31, 0x28	; 40
    117e:	c3 85       	ldd	r28, Z+11	; 0x0b
    1180:	cf 5f       	subi	r28, 0xFF	; 255
    1182:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    1184:	8b e0       	ldi	r24, 0x0B	; 11
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
    118c:	c8 17       	cp	r28, r24
    118e:	30 f0       	brcs	.+12     	; 0x119c <handle_minute+0x48>
			CLOSEVALVE(BLUVALVE);
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    119c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11a0:	86 ff       	sbrs	r24, 6
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <handle_minute+0x72>
		status.opentime_RED++;
    11a4:	e7 e0       	ldi	r30, 0x07	; 7
    11a6:	f8 e2       	ldi	r31, 0x28	; 40
    11a8:	c4 85       	ldd	r28, Z+12	; 0x0c
    11aa:	cf 5f       	subi	r28, 0xFF	; 255
    11ac:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    11ae:	8b e0       	ldi	r24, 0x0B	; 11
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
    11b6:	c8 17       	cp	r28, r24
    11b8:	30 f0       	brcs	.+12     	; 0x11c6 <handle_minute+0x72>
			CLOSEVALVE(REDVALVE);
    11ba:	80 e4       	ldi	r24, 0x40	; 64
    11bc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    11c6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11ca:	85 ff       	sbrs	r24, 5
    11cc:	13 c0       	rjmp	.+38     	; 0x11f4 <handle_minute+0xa0>
		status.opentime_BUF++;
    11ce:	e7 e0       	ldi	r30, 0x07	; 7
    11d0:	f8 e2       	ldi	r31, 0x28	; 40
    11d2:	85 85       	ldd	r24, Z+13	; 0x0d
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    11d6:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    11d8:	84 31       	cpi	r24, 0x14	; 20
    11da:	60 f0       	brcs	.+24     	; 0x11f4 <handle_minute+0xa0>
			CLOSEVALVE(BUFVALVE);
    11dc:	e0 e4       	ldi	r30, 0x40	; 64
    11de:	f4 e0       	ldi	r31, 0x04	; 4
    11e0:	80 e2       	ldi	r24, 0x20	; 32
    11e2:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    11e4:	80 e1       	ldi	r24, 0x10	; 16
    11e6:	86 83       	std	Z+6, r24	; 0x06
			status.maxopen_BUF = TRUE;
    11e8:	e7 e0       	ldi	r30, 0x07	; 7
    11ea:	f8 e2       	ldi	r31, 0x28	; 40
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	81 8b       	std	Z+17, r24	; 0x11
			status.next_buftank_fill = BIGFILLINTERVAL;
    11f0:	8c e0       	ldi	r24, 0x0C	; 12
    11f2:	86 8b       	std	Z+22, r24	; 0x16
		}
	}

	if (SUPVALVEOPEN) {
    11f4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11f8:	84 ff       	sbrs	r24, 4
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <handle_minute+0xb2>
		status.opentime_SUP++;				// Increment supply dewar valve time
    11fc:	e7 e0       	ldi	r30, 0x07	; 7
    11fe:	f8 e2       	ldi	r31, 0x28	; 40
    1200:	86 85       	ldd	r24, Z+14	; 0x0e
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    1206:	e7 e0       	ldi	r30, 0x07	; 7
    1208:	f8 e2       	ldi	r31, 0x28	; 40
    120a:	85 89       	ldd	r24, Z+21	; 0x15
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    1210:	81 11       	cpse	r24, r1
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <handle_minute+0xc4>
		start_FILL();						// See encoder.c
    1214:	0e 94 7f 05 	call	0xafe	; 0xafe <start_FILL>
	}
}
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <handle_ticks>:
void handle_ticks(void)
{

//	static uint8_t oldpressure;

	tick = FALSE;
    121c:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {		// seconds incremented in ISR
    1220:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1224:	8c 33       	cpi	r24, 0x3C	; 60
    1226:	28 f0       	brcs	.+10     	; 0x1232 <handle_ticks+0x16>
		minute_flag = TRUE;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <minute_flag>
		seconds = 0;
    122e:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

//	oldpressure = status.pressure;
	status.pressure = read_PRESSURE();				// LN2 pressure
    1232:	0e 94 2c 08 	call	0x1058	; 0x1058 <read_PRESSURE>
    1236:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <status+0x1a>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    123a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    123e:	88 23       	and	r24, r24
    1240:	f4 f4       	brge	.+60     	; 0x127e <handle_ticks+0x62>
    1242:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1246:	80 fd       	sbrc	r24, 0
    1248:	1a c0       	rjmp	.+52     	; 0x127e <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    124a:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <status+0x13>
    124e:	85 30       	cpi	r24, 0x05	; 5
    1250:	30 f0       	brcs	.+12     	; 0x125e <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    1252:	80 e8       	ldi	r24, 0x80	; 128
    1254:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    1258:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <status+0x13>
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    125e:	8f 5f       	subi	r24, 0xFF	; 255
    1260:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1264:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	49 f4       	brne	.+18     	; 0x127e <handle_ticks+0x62>
    126c:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1270:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1274:	89 2b       	or	r24, r25
    1276:	19 f0       	breq	.+6      	; 0x127e <handle_ticks+0x62>
			display(SCRVALVES);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 82 01 	call	0x304	; 0x304 <display>
		}
//		status.opentime_BLU = 0;
//		status.maxopen_BLU = FALSE;
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    127e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1282:	86 ff       	sbrs	r24, 6
    1284:	1e c0       	rjmp	.+60     	; 0x12c2 <handle_ticks+0xa6>
    1286:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    128a:	81 fd       	sbrc	r24, 1
    128c:	1a c0       	rjmp	.+52     	; 0x12c2 <handle_ticks+0xa6>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    128e:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x14>
    1292:	85 30       	cpi	r24, 0x05	; 5
    1294:	30 f0       	brcs	.+12     	; 0x12a2 <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    1296:	80 e4       	ldi	r24, 0x40	; 64
    1298:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    129c:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x14>
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    12a8:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	49 f4       	brne	.+18     	; 0x12c2 <handle_ticks+0xa6>
    12b0:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12b4:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12b8:	89 2b       	or	r24, r25
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <handle_ticks+0xa6>
			display(SCRVALVES);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 82 01 	call	0x304	; 0x304 <display>
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    12c2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    12c6:	85 ff       	sbrs	r24, 5
    12c8:	2a c0       	rjmp	.+84     	; 0x131e <handle_ticks+0x102>
    12ca:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12ce:	82 fd       	sbrc	r24, 2
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <handle_ticks+0x102>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    12d2:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x12>
    12d6:	85 30       	cpi	r24, 0x05	; 5
    12d8:	90 f0       	brcs	.+36     	; 0x12fe <handle_ticks+0xe2>
			CLOSEVALVE(BUFVALVE);
    12da:	e0 e4       	ldi	r30, 0x40	; 64
    12dc:	f4 e0       	ldi	r31, 0x04	; 4
    12de:	80 e2       	ldi	r24, 0x20	; 32
    12e0:	86 83       	std	Z+6, r24	; 0x06
			status.overfill_BUF = 0;
    12e2:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <status+0x12>
    12e6:	24 e5       	ldi	r18, 0x54	; 84
    12e8:	88 e5       	ldi	r24, 0x58	; 88
    12ea:	94 e1       	ldi	r25, 0x14	; 20
    12ec:	21 50       	subi	r18, 0x01	; 1
    12ee:	80 40       	sbci	r24, 0x00	; 0
    12f0:	90 40       	sbci	r25, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <handle_ticks+0xd0>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <handle_ticks+0xda>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <handle_ticks+0xdc>
			_delay_ms(2000);
			CLOSEVALVE(SUPVALVE);
    12f8:	80 e1       	ldi	r24, 0x10	; 16
    12fa:	86 83       	std	Z+6, r24	; 0x06
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <handle_ticks+0xe8>
		} else {
			status.overfill_BUF++;
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1304:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	49 f4       	brne	.+18     	; 0x131e <handle_ticks+0x102>
    130c:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1310:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1314:	89 2b       	or	r24, r25
    1316:	a9 f1       	breq	.+106    	; 0x1382 <handle_ticks+0x166>
			display(SCRVALVES);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 82 01 	call	0x304	; 0x304 <display>
//		status.opentime_BUF = 0;
//		status.maxopen_BUF = FALSE;
	}

// NEW
	if (status.supply_button_pushed) {
    131e:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
    1322:	88 23       	and	r24, r24
    1324:	b9 f0       	breq	.+46     	; 0x1354 <handle_ticks+0x138>
		if (~PORTB.IN & PIN1_bm) {			// Button still pushed
    1326:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
    132a:	81 fd       	sbrc	r24, 1
    132c:	0f c0       	rjmp	.+30     	; 0x134c <handle_ticks+0x130>
			if (status.supply_button_time++ >= 2) {
    132e:	e7 e0       	ldi	r30, 0x07	; 7
    1330:	f8 e2       	ldi	r31, 0x28	; 40
    1332:	80 8d       	ldd	r24, Z+24	; 0x18
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	98 0f       	add	r25, r24
    1338:	90 8f       	std	Z+24, r25	; 0x18
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	58 f0       	brcs	.+22     	; 0x1354 <handle_ticks+0x138>
				OPENVALVE(SUPVALVE);
    133e:	80 e1       	ldi	r24, 0x10	; 16
    1340:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
    1344:	16 86       	std	Z+14, r1	; 0x0e
				status.supply_button_pushed = FALSE;
    1346:	17 8a       	std	Z+23, r1	; 0x17
				status.supply_button_time = 0;
    1348:	10 8e       	std	Z+24, r1	; 0x18
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <handle_ticks+0x138>
			}
		} else {								// Button was released
			status.supply_button_pushed = FALSE;
    134c:	e7 e0       	ldi	r30, 0x07	; 7
    134e:	f8 e2       	ldi	r31, 0x28	; 40
    1350:	17 8a       	std	Z+23, r1	; 0x17
			status.supply_button_time = 0;
    1352:	10 8e       	std	Z+24, r1	; 0x18
		}
	}
// NEW

	if (timerOLED) {
    1354:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1358:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	a9 f0       	breq	.+42     	; 0x138a <handle_ticks+0x16e>
//		if (timerOLED > timeoutOLED) {	// Display timeout
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    1360:	8b 30       	cpi	r24, 0x0B	; 11
    1362:	91 05       	cpc	r25, r1
    1364:	40 f0       	brcs	.+16     	; 0x1376 <handle_ticks+0x15a>
			clear_OLED(0);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 df 07 	call	0xfbe	; 0xfbe <clear_OLED>
			timerOLED = 0;
    136c:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    1370:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
    1374:	08 95       	ret
		} else {
			timerOLED++;
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    137c:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
/*
	if ((status.pressure != oldpressure) && !display_off) {
		display(SCRPRESSURE);
	}
*/
}
    1380:	08 95       	ret
//		status.opentime_BUF = 0;
//		status.maxopen_BUF = FALSE;
	}

// NEW
	if (status.supply_button_pushed) {
    1382:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
    1386:	81 11       	cpse	r24, r1
    1388:	ce cf       	rjmp	.-100    	; 0x1326 <handle_ticks+0x10a>
    138a:	08 95       	ret

0000138c <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    138c:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    138e:	e0 e6       	ldi	r30, 0x60	; 96
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    1394:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    1396:	98 ed       	ldi	r25, 0xD8	; 216
    1398:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    139a:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    139c:	83 81       	ldd	r24, Z+3	; 0x03
    139e:	86 ff       	sbrs	r24, 6
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <init_RTC+0x1e>
		asm("nop");
    13a2:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	96 fd       	sbrc	r25, 6
    13a8:	fc cf       	rjmp	.-8      	; 0x13a2 <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    13aa:	e0 e6       	ldi	r30, 0x60	; 96
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    13b0:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    13b2:	88 ed       	ldi	r24, 0xD8	; 216
    13b4:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13b6:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    13b8:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    13ba:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    13bc:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    13be:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    13c0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    13c4:	88 23       	and	r24, r24
    13c6:	31 f0       	breq	.+12     	; 0x13d4 <init_RTC+0x48>
    13c8:	e0 e4       	ldi	r30, 0x40	; 64
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    13cc:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	91 11       	cpse	r25, r1
    13d2:	fc cf       	rjmp	.-8      	; 0x13cc <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    13d4:	e0 e4       	ldi	r30, 0x40	; 64
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
    13d8:	22 87       	std	Z+10, r18	; 0x0a
    13da:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    13e0:	85 81       	ldd	r24, Z+5	; 0x05
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    13e6:	81 eb       	ldi	r24, 0xB1	; 177
    13e8:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	81 60       	ori	r24, 0x01	; 1
    13ee:	82 83       	std	Z+2, r24	; 0x02
    13f0:	08 95       	ret

000013f2 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	8f 93       	push	r24
    13fe:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    1406:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    1410:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    1422:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <ticks_TCB0>
    1426:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    142a:	25 e0       	ldi	r18, 0x05	; 5
    142c:	3d e0       	ldi	r19, 0x0D	; 13
    142e:	ac 01       	movw	r20, r24
    1430:	42 9f       	mul	r20, r18
    1432:	c0 01       	movw	r24, r0
    1434:	43 9f       	mul	r20, r19
    1436:	90 0d       	add	r25, r0
    1438:	52 9f       	mul	r21, r18
    143a:	90 0d       	add	r25, r0
    143c:	11 24       	eor	r1, r1
    143e:	e0 e8       	ldi	r30, 0x80	; 128
    1440:	fa e0       	ldi	r31, 0x0A	; 10
    1442:	84 87       	std	Z+12, r24	; 0x0c
    1444:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    144a:	80 83       	st	Z, r24
    144c:	08 95       	ret

0000144e <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    144e:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    1452:	08 95       	ret

00001454 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    1454:	1f 92       	push	r1
    1456:	0f 92       	push	r0
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	0f 92       	push	r0
    145c:	11 24       	eor	r1, r1
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    1468:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    146c:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <ticks_TCB0>
    1476:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <ticks_TCB0+0x1>

    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	0f 90       	pop	r0
    1484:	1f 90       	pop	r1
    1486:	18 95       	reti

00001488 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    1488:	e0 ea       	ldi	r30, 0xA0	; 160
    148a:	f8 e0       	ldi	r31, 0x08	; 8
    148c:	8b e0       	ldi	r24, 0x0B	; 11
    148e:	86 83       	std	Z+6, r24	; 0x06
    1490:	83 81       	ldd	r24, Z+3	; 0x03
    1492:	81 60       	ori	r24, 0x01	; 1
    1494:	83 83       	std	Z+3, r24	; 0x03
    1496:	85 81       	ldd	r24, Z+5	; 0x05
    1498:	81 60       	ori	r24, 0x01	; 1
    149a:	85 83       	std	Z+5, r24	; 0x05
    149c:	08 95       	ret

0000149e <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    149e:	61 30       	cpi	r22, 0x01	; 1
    14a0:	29 f4       	brne	.+10     	; 0x14ac <start_TWI+0xe>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    14a2:	88 0f       	add	r24, r24
    14a4:	81 60       	ori	r24, 0x01	; 1
    14a6:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <start_TWI+0x14>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    14ac:	88 0f       	add	r24, r24
    14ae:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 11 0a 	call	0x1422	; 0x1422 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14ba:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14be:	80 7c       	andi	r24, 0xC0	; 192
    14c0:	b9 f4       	brne	.+46     	; 0x14f0 <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    14c2:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    14c6:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    14ca:	0b 97       	sbiw	r24, 0x0b	; 11
    14cc:	48 f4       	brcc	.+18     	; 0x14e0 <start_TWI+0x42>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14ce:	e0 ea       	ldi	r30, 0xA0	; 160
    14d0:	f8 e0       	ldi	r31, 0x08	; 8
    14d2:	0a c0       	rjmp	.+20     	; 0x14e8 <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    14d4:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    14d8:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    14dc:	0b 97       	sbiw	r24, 0x0b	; 11
    14de:	20 f0       	brcs	.+8      	; 0x14e8 <start_TWI+0x4a>
			stop_TCB0();
    14e0:	0e 94 27 0a 	call	0x144e	; 0x144e <stop_TCB0>
			return(TWITIMEOUT);
    14e4:	84 e0       	ldi	r24, 0x04	; 4
    14e6:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    14e8:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14ea:	85 81       	ldd	r24, Z+5	; 0x05
    14ec:	80 7c       	andi	r24, 0xC0	; 192
    14ee:	91 f3       	breq	.-28     	; 0x14d4 <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    14f0:	0e 94 27 0a 	call	0x144e	; 0x144e <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    14f4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14f8:	82 fd       	sbrc	r24, 2
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    14fc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1500:	83 fd       	sbrc	r24, 3
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    1504:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1508:	89 2f       	mov	r24, r25
    150a:	80 71       	andi	r24, 0x10	; 16
    150c:	94 fd       	sbrc	r25, 4
    150e:	05 c0       	rjmp	.+10     	; 0x151a <start_TWI+0x7c>
    1510:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    151a:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    151c:	08 95       	ret

0000151e <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    151e:	87 e0       	ldi	r24, 0x07	; 7
    1520:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    1524:	08 95       	ret

00001526 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1526:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    152a:	96 fd       	sbrc	r25, 6
    152c:	06 c0       	rjmp	.+12     	; 0x153a <write_TWI+0x14>
    152e:	e0 ea       	ldi	r30, 0xA0	; 160
    1530:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    1532:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1534:	95 81       	ldd	r25, Z+5	; 0x05
    1536:	96 ff       	sbrs	r25, 6
    1538:	fc cf       	rjmp	.-8      	; 0x1532 <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    153a:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 11 0a 	call	0x1422	; 0x1422 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1546:	e0 ea       	ldi	r30, 0xA0	; 160
    1548:	f8 e0       	ldi	r31, 0x08	; 8
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <write_TWI+0x3c>
		asm("nop");
    154c:	00 00       	nop
		if (ticks_TCB0 > 50) {
    154e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1552:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1556:	c3 97       	sbiw	r24, 0x33	; 51
    1558:	20 f0       	brcs	.+8      	; 0x1562 <write_TWI+0x3c>
			stop_TCB0();
    155a:	0e 94 27 0a 	call	0x144e	; 0x144e <stop_TCB0>
			return(TWITIMEOUT);
    155e:	84 e0       	ldi	r24, 0x04	; 4
    1560:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1562:	85 81       	ldd	r24, Z+5	; 0x05
    1564:	86 ff       	sbrs	r24, 6
    1566:	f2 cf       	rjmp	.-28     	; 0x154c <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    1568:	0e 94 27 0a 	call	0x144e	; 0x144e <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    156c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1570:	89 2f       	mov	r24, r25
    1572:	80 71       	andi	r24, 0x10	; 16
    1574:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    1576:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    1578:	08 95       	ret

0000157a <init_USART>:
			return;
		}
		asm("nop");
	}
	send_USART((uint8_t*) strbuf, strlen(strbuf));
}
    157a:	e0 e0       	ldi	r30, 0x00	; 0
    157c:	f4 e0       	ldi	r31, 0x04	; 4
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	85 83       	std	Z+5, r24	; 0x05
    1582:	81 83       	std	Z+1, r24	; 0x01
    1584:	e0 e0       	ldi	r30, 0x00	; 0
    1586:	f8 e0       	ldi	r31, 0x08	; 8
    1588:	2d e6       	ldi	r18, 0x6D	; 109
    158a:	35 e0       	ldi	r19, 0x05	; 5
    158c:	20 87       	std	Z+8, r18	; 0x08
    158e:	31 87       	std	Z+9, r19	; 0x09
    1590:	95 81       	ldd	r25, Z+5	; 0x05
    1592:	90 68       	ori	r25, 0x80	; 128
    1594:	95 83       	std	Z+5, r25	; 0x05
    1596:	96 81       	ldd	r25, Z+6	; 0x06
    1598:	90 64       	ori	r25, 0x40	; 64
    159a:	96 83       	std	Z+6, r25	; 0x06
    159c:	96 81       	ldd	r25, Z+6	; 0x06
    159e:	90 68       	ori	r25, 0x80	; 128
    15a0:	96 83       	std	Z+6, r25	; 0x06
    15a2:	10 92 2c 29 	sts	0x292C, r1	; 0x80292c <recv0_buf+0x101>
    15a6:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <send0_buf+0x101>
    15aa:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <recv0_buf+0x100>
    15ae:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
    15b2:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
    15b6:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    15ba:	08 95       	ret

000015bc <send_USART>:
    15bc:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <send0_buf+0x101>
    15c0:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
    15c4:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <send0_buf+0xff>
    15c8:	66 23       	and	r22, r22
    15ca:	71 f0       	breq	.+28     	; 0x15e8 <send_USART+0x2c>
    15cc:	a8 2f       	mov	r26, r24
    15ce:	b9 2f       	mov	r27, r25
    15d0:	ed e2       	ldi	r30, 0x2D	; 45
    15d2:	f9 e2       	ldi	r31, 0x29	; 41
    15d4:	61 50       	subi	r22, 0x01	; 1
    15d6:	26 2f       	mov	r18, r22
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	22 5d       	subi	r18, 0xD2	; 210
    15dc:	36 4d       	sbci	r19, 0xD6	; 214
    15de:	8d 91       	ld	r24, X+
    15e0:	81 93       	st	Z+, r24
    15e2:	e2 17       	cp	r30, r18
    15e4:	f3 07       	cpc	r31, r19
    15e6:	d9 f7       	brne	.-10     	; 0x15de <send_USART+0x22>
    15e8:	e0 e0       	ldi	r30, 0x00	; 0
    15ea:	f8 e0       	ldi	r31, 0x08	; 8
    15ec:	85 81       	ldd	r24, Z+5	; 0x05
    15ee:	80 62       	ori	r24, 0x20	; 32
    15f0:	85 83       	std	Z+5, r24	; 0x05
    15f2:	08 95       	ret

000015f4 <handle_serial>:
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	ca 5b       	subi	r28, 0xBA	; 186
    160e:	d1 09       	sbc	r29, r1
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	86 e5       	ldi	r24, 0x56	; 86
    1616:	e7 e1       	ldi	r30, 0x17	; 23
    1618:	f5 e6       	ldi	r31, 0x65	; 101
    161a:	de 01       	movw	r26, r28
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	01 90       	ld	r0, Z+
    1620:	0d 92       	st	X+, r0
    1622:	8a 95       	dec	r24
    1624:	e1 f7       	brne	.-8      	; 0x161e <handle_serial+0x2a>
    1626:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
    162a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    162e:	84 fd       	sbrc	r24, 4
    1630:	05 c0       	rjmp	.+10     	; 0x163c <handle_serial+0x48>
    1632:	0f 2e       	mov	r0, r31
    1634:	f3 e4       	ldi	r31, 0x43	; 67
    1636:	ff 2e       	mov	r15, r31
    1638:	f0 2d       	mov	r31, r0
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <handle_serial+0x50>
    163c:	0f 2e       	mov	r0, r31
    163e:	ff e4       	ldi	r31, 0x4F	; 79
    1640:	ff 2e       	mov	r15, r31
    1642:	f0 2d       	mov	r31, r0
    1644:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
    1648:	81 11       	cpse	r24, r1
    164a:	09 c0       	rjmp	.+18     	; 0x165e <handle_serial+0x6a>
    164c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1650:	85 fd       	sbrc	r24, 5
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <handle_serial+0x74>
    1654:	0f 2e       	mov	r0, r31
    1656:	f3 e4       	ldi	r31, 0x43	; 67
    1658:	ef 2e       	mov	r14, r31
    165a:	f0 2d       	mov	r31, r0
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <handle_serial+0x7c>
    165e:	0f 2e       	mov	r0, r31
    1660:	f4 e5       	ldi	r31, 0x54	; 84
    1662:	ef 2e       	mov	r14, r31
    1664:	f0 2d       	mov	r31, r0
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <handle_serial+0x7c>
    1668:	0f 2e       	mov	r0, r31
    166a:	ff e4       	ldi	r31, 0x4F	; 79
    166c:	ef 2e       	mov	r14, r31
    166e:	f0 2d       	mov	r31, r0
    1670:	8d e0       	ldi	r24, 0x0D	; 13
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
    1678:	88 23       	and	r24, r24
    167a:	69 f0       	breq	.+26     	; 0x1696 <handle_serial+0xa2>
    167c:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
    1680:	81 11       	cpse	r24, r1
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <handle_serial+0xac>
    1684:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1688:	86 fd       	sbrc	r24, 6
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <handle_serial+0xb6>
    168c:	0f 2e       	mov	r0, r31
    168e:	f3 e4       	ldi	r31, 0x43	; 67
    1690:	df 2e       	mov	r13, r31
    1692:	f0 2d       	mov	r31, r0
    1694:	0e c0       	rjmp	.+28     	; 0x16b2 <handle_serial+0xbe>
    1696:	0f 2e       	mov	r0, r31
    1698:	f8 e5       	ldi	r31, 0x58	; 88
    169a:	df 2e       	mov	r13, r31
    169c:	f0 2d       	mov	r31, r0
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <handle_serial+0xbe>
    16a0:	0f 2e       	mov	r0, r31
    16a2:	f4 e5       	ldi	r31, 0x54	; 84
    16a4:	df 2e       	mov	r13, r31
    16a6:	f0 2d       	mov	r31, r0
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <handle_serial+0xbe>
    16aa:	0f 2e       	mov	r0, r31
    16ac:	ff e4       	ldi	r31, 0x4F	; 79
    16ae:	df 2e       	mov	r13, r31
    16b0:	f0 2d       	mov	r31, r0
    16b2:	8c e0       	ldi	r24, 0x0C	; 12
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
    16ba:	88 23       	and	r24, r24
    16bc:	69 f0       	breq	.+26     	; 0x16d8 <handle_serial+0xe4>
    16be:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
    16c2:	81 11       	cpse	r24, r1
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <handle_serial+0xee>
    16c6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    16ca:	88 23       	and	r24, r24
    16cc:	7c f0       	brlt	.+30     	; 0x16ec <handle_serial+0xf8>
    16ce:	0f 2e       	mov	r0, r31
    16d0:	f3 e4       	ldi	r31, 0x43	; 67
    16d2:	af 2e       	mov	r10, r31
    16d4:	f0 2d       	mov	r31, r0
    16d6:	0e c0       	rjmp	.+28     	; 0x16f4 <handle_serial+0x100>
    16d8:	0f 2e       	mov	r0, r31
    16da:	f8 e5       	ldi	r31, 0x58	; 88
    16dc:	af 2e       	mov	r10, r31
    16de:	f0 2d       	mov	r31, r0
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <handle_serial+0x100>
    16e2:	0f 2e       	mov	r0, r31
    16e4:	f4 e5       	ldi	r31, 0x54	; 84
    16e6:	af 2e       	mov	r10, r31
    16e8:	f0 2d       	mov	r31, r0
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <handle_serial+0x100>
    16ec:	0f 2e       	mov	r0, r31
    16ee:	ff e4       	ldi	r31, 0x4F	; 79
    16f0:	af 2e       	mov	r10, r31
    16f2:	f0 2d       	mov	r31, r0
    16f4:	8a e0       	ldi	r24, 0x0A	; 10
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
    16fc:	b8 2e       	mov	r11, r24
    16fe:	07 e0       	ldi	r16, 0x07	; 7
    1700:	18 e2       	ldi	r17, 0x28	; 40
    1702:	f8 01       	movw	r30, r16
    1704:	c5 88       	ldd	r12, Z+21	; 0x15
    1706:	8b e0       	ldi	r24, 0x0B	; 11
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <eeprom_read_byte>
    170e:	f8 01       	movw	r30, r16
    1710:	92 8d       	ldd	r25, Z+26	; 0x1a
    1712:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1716:	22 fd       	sbrc	r18, 2
    1718:	02 c0       	rjmp	.+4      	; 0x171e <handle_serial+0x12a>
    171a:	23 e4       	ldi	r18, 0x43	; 67
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <handle_serial+0x12c>
    171e:	28 e4       	ldi	r18, 0x48	; 72
    1720:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1724:	31 fd       	sbrc	r19, 1
    1726:	02 c0       	rjmp	.+4      	; 0x172c <handle_serial+0x138>
    1728:	33 e4       	ldi	r19, 0x43	; 67
    172a:	01 c0       	rjmp	.+2      	; 0x172e <handle_serial+0x13a>
    172c:	38 e4       	ldi	r19, 0x48	; 72
    172e:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1732:	40 fd       	sbrc	r20, 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <handle_serial+0x146>
    1736:	43 e4       	ldi	r20, 0x43	; 67
    1738:	01 c0       	rjmp	.+2      	; 0x173c <handle_serial+0x148>
    173a:	48 e4       	ldi	r20, 0x48	; 72
    173c:	1f 92       	push	r1
    173e:	4f 93       	push	r20
    1740:	1f 92       	push	r1
    1742:	3f 93       	push	r19
    1744:	1f 92       	push	r1
    1746:	2f 93       	push	r18
    1748:	1f 92       	push	r1
    174a:	9f 93       	push	r25
    174c:	1f 92       	push	r1
    174e:	bf 92       	push	r11
    1750:	1f 92       	push	r1
    1752:	8f 93       	push	r24
    1754:	1f 92       	push	r1
    1756:	cf 92       	push	r12
    1758:	1f 92       	push	r1
    175a:	af 92       	push	r10
    175c:	1f 92       	push	r1
    175e:	df 92       	push	r13
    1760:	1f 92       	push	r1
    1762:	ef 92       	push	r14
    1764:	1f 92       	push	r1
    1766:	ff 92       	push	r15
    1768:	ce 01       	movw	r24, r28
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	8a 5a       	subi	r24, 0xAA	; 170
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	9f 93       	push	r25
    1776:	8f 93       	push	r24
    1778:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <sprintf>
    177c:	84 e6       	ldi	r24, 0x64	; 100
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 11 0a 	call	0x1422	; 0x1422 <start_TCB0>
    1784:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <send0_buf+0xff>
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	81 11       	cpse	r24, r1
    178e:	13 c0       	rjmp	.+38     	; 0x17b6 <handle_serial+0x1c2>
    1790:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1794:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1798:	0b 97       	sbiw	r24, 0x0b	; 11
    179a:	d0 f4       	brcc	.+52     	; 0x17d0 <handle_serial+0x1dc>
    179c:	ec e2       	ldi	r30, 0x2C	; 44
    179e:	fa e2       	ldi	r31, 0x2A	; 42
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <handle_serial+0x1ba>
    17a2:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    17a6:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    17aa:	0b 97       	sbiw	r24, 0x0b	; 11
    17ac:	88 f4       	brcc	.+34     	; 0x17d0 <handle_serial+0x1dc>
    17ae:	00 00       	nop
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	b1 f3       	breq	.-20     	; 0x17a2 <handle_serial+0x1ae>
    17b6:	ce 01       	movw	r24, r28
    17b8:	89 5a       	subi	r24, 0xA9	; 169
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	fc 01       	movw	r30, r24
    17be:	01 90       	ld	r0, Z+
    17c0:	00 20       	and	r0, r0
    17c2:	e9 f7       	brne	.-6      	; 0x17be <handle_serial+0x1ca>
    17c4:	31 97       	sbiw	r30, 0x01	; 1
    17c6:	bf 01       	movw	r22, r30
    17c8:	68 1b       	sub	r22, r24
    17ca:	79 0b       	sbc	r23, r25
    17cc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <send_USART>
    17d0:	c6 54       	subi	r28, 0x46	; 70
    17d2:	df 4f       	sbci	r29, 0xFF	; 255
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	08 95       	ret

000017ee <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    1804:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    1808:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <recv0_buf+0x101>
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	b1 f0       	breq	.+44     	; 0x183c <__DATA_REGION_LENGTH__+0x3c>
		if ((char) c == '\r') {
    1810:	8d 30       	cpi	r24, 0x0D	; 13
    1812:	51 f4       	brne	.+20     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
			recv0_buf.data[recv0_buf.length] = '\0';
    1814:	e0 91 2c 29 	lds	r30, 0x292C	; 0x80292c <recv0_buf+0x101>
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	e5 5d       	subi	r30, 0xD5	; 213
    181c:	f7 4d       	sbci	r31, 0xD7	; 215
    181e:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <recv0_buf+0xff>
    1826:	0a c0       	rjmp	.+20     	; 0x183c <__DATA_REGION_LENGTH__+0x3c>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    1828:	ac e2       	ldi	r26, 0x2C	; 44
    182a:	b9 e2       	ldi	r27, 0x29	; 41
    182c:	ec 91       	ld	r30, X
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	9e 0f       	add	r25, r30
    1832:	9c 93       	st	X, r25
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	e5 5d       	subi	r30, 0xD5	; 213
    1838:	f7 4d       	sbci	r31, 0xD7	; 215
    183a:	80 83       	st	Z, r24
		}
	}
}
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    186c:	c0 e0       	ldi	r28, 0x00	; 0
    186e:	d8 e0       	ldi	r29, 0x08	; 8
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	8f 7d       	andi	r24, 0xDF	; 223
    1874:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    1876:	ad e2       	ldi	r26, 0x2D	; 45
    1878:	ba e2       	ldi	r27, 0x2A	; 42
    187a:	ec 91       	ld	r30, X
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	8e 0f       	add	r24, r30
    1880:	8c 93       	st	X, r24
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	e3 5d       	subi	r30, 0xD3	; 211
    1886:	f6 4d       	sbci	r31, 0xD6	; 214
    1888:	80 81       	ld	r24, Z
    188a:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    188c:	90 91 2e 2a 	lds	r25, 0x2A2E	; 0x802a2e <send0_buf+0x101>
    1890:	8c 91       	ld	r24, X
    1892:	98 13       	cpse	r25, r24
    1894:	04 c0       	rjmp	.+8      	; 0x189e <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    189e:	e0 e0       	ldi	r30, 0x00	; 0
    18a0:	f8 e0       	ldi	r31, 0x08	; 8
    18a2:	85 81       	ldd	r24, Z+5	; 0x05
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	85 83       	std	Z+5, r24	; 0x05
	}
}
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    18c2:	e0 e4       	ldi	r30, 0x40	; 64
    18c4:	f4 e0       	ldi	r31, 0x04	; 4
    18c6:	80 ef       	ldi	r24, 0xF0	; 240
    18c8:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    18ca:	81 83       	std	Z+1, r24	; 0x01
    18cc:	08 95       	ret

000018ce <__subsf3>:
    18ce:	50 58       	subi	r21, 0x80	; 128

000018d0 <__addsf3>:
    18d0:	bb 27       	eor	r27, r27
    18d2:	aa 27       	eor	r26, r26
    18d4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__addsf3x>
    18d8:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_round>
    18dc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_pscA>
    18e0:	38 f0       	brcs	.+14     	; 0x18f0 <__addsf3+0x20>
    18e2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fp_pscB>
    18e6:	20 f0       	brcs	.+8      	; 0x18f0 <__addsf3+0x20>
    18e8:	39 f4       	brne	.+14     	; 0x18f8 <__addsf3+0x28>
    18ea:	9f 3f       	cpi	r25, 0xFF	; 255
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <__addsf3+0x24>
    18ee:	26 f4       	brtc	.+8      	; 0x18f8 <__addsf3+0x28>
    18f0:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_nan>
    18f4:	0e f4       	brtc	.+2      	; 0x18f8 <__addsf3+0x28>
    18f6:	e0 95       	com	r30
    18f8:	e7 fb       	bst	r30, 7
    18fa:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>

000018fe <__addsf3x>:
    18fe:	e9 2f       	mov	r30, r25
    1900:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_split3>
    1904:	58 f3       	brcs	.-42     	; 0x18dc <__addsf3+0xc>
    1906:	ba 17       	cp	r27, r26
    1908:	62 07       	cpc	r22, r18
    190a:	73 07       	cpc	r23, r19
    190c:	84 07       	cpc	r24, r20
    190e:	95 07       	cpc	r25, r21
    1910:	20 f0       	brcs	.+8      	; 0x191a <__addsf3x+0x1c>
    1912:	79 f4       	brne	.+30     	; 0x1932 <__addsf3x+0x34>
    1914:	a6 f5       	brtc	.+104    	; 0x197e <__addsf3x+0x80>
    1916:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__fp_zero>
    191a:	0e f4       	brtc	.+2      	; 0x191e <__addsf3x+0x20>
    191c:	e0 95       	com	r30
    191e:	0b 2e       	mov	r0, r27
    1920:	ba 2f       	mov	r27, r26
    1922:	a0 2d       	mov	r26, r0
    1924:	0b 01       	movw	r0, r22
    1926:	b9 01       	movw	r22, r18
    1928:	90 01       	movw	r18, r0
    192a:	0c 01       	movw	r0, r24
    192c:	ca 01       	movw	r24, r20
    192e:	a0 01       	movw	r20, r0
    1930:	11 24       	eor	r1, r1
    1932:	ff 27       	eor	r31, r31
    1934:	59 1b       	sub	r21, r25
    1936:	99 f0       	breq	.+38     	; 0x195e <__addsf3x+0x60>
    1938:	59 3f       	cpi	r21, 0xF9	; 249
    193a:	50 f4       	brcc	.+20     	; 0x1950 <__addsf3x+0x52>
    193c:	50 3e       	cpi	r21, 0xE0	; 224
    193e:	68 f1       	brcs	.+90     	; 0x199a <__addsf3x+0x9c>
    1940:	1a 16       	cp	r1, r26
    1942:	f0 40       	sbci	r31, 0x00	; 0
    1944:	a2 2f       	mov	r26, r18
    1946:	23 2f       	mov	r18, r19
    1948:	34 2f       	mov	r19, r20
    194a:	44 27       	eor	r20, r20
    194c:	58 5f       	subi	r21, 0xF8	; 248
    194e:	f3 cf       	rjmp	.-26     	; 0x1936 <__addsf3x+0x38>
    1950:	46 95       	lsr	r20
    1952:	37 95       	ror	r19
    1954:	27 95       	ror	r18
    1956:	a7 95       	ror	r26
    1958:	f0 40       	sbci	r31, 0x00	; 0
    195a:	53 95       	inc	r21
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__addsf3x+0x52>
    195e:	7e f4       	brtc	.+30     	; 0x197e <__addsf3x+0x80>
    1960:	1f 16       	cp	r1, r31
    1962:	ba 0b       	sbc	r27, r26
    1964:	62 0b       	sbc	r22, r18
    1966:	73 0b       	sbc	r23, r19
    1968:	84 0b       	sbc	r24, r20
    196a:	ba f0       	brmi	.+46     	; 0x199a <__addsf3x+0x9c>
    196c:	91 50       	subi	r25, 0x01	; 1
    196e:	a1 f0       	breq	.+40     	; 0x1998 <__addsf3x+0x9a>
    1970:	ff 0f       	add	r31, r31
    1972:	bb 1f       	adc	r27, r27
    1974:	66 1f       	adc	r22, r22
    1976:	77 1f       	adc	r23, r23
    1978:	88 1f       	adc	r24, r24
    197a:	c2 f7       	brpl	.-16     	; 0x196c <__addsf3x+0x6e>
    197c:	0e c0       	rjmp	.+28     	; 0x199a <__addsf3x+0x9c>
    197e:	ba 0f       	add	r27, r26
    1980:	62 1f       	adc	r22, r18
    1982:	73 1f       	adc	r23, r19
    1984:	84 1f       	adc	r24, r20
    1986:	48 f4       	brcc	.+18     	; 0x199a <__addsf3x+0x9c>
    1988:	87 95       	ror	r24
    198a:	77 95       	ror	r23
    198c:	67 95       	ror	r22
    198e:	b7 95       	ror	r27
    1990:	f7 95       	ror	r31
    1992:	9e 3f       	cpi	r25, 0xFE	; 254
    1994:	08 f0       	brcs	.+2      	; 0x1998 <__addsf3x+0x9a>
    1996:	b0 cf       	rjmp	.-160    	; 0x18f8 <__addsf3+0x28>
    1998:	93 95       	inc	r25
    199a:	88 0f       	add	r24, r24
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <__addsf3x+0xa2>
    199e:	99 27       	eor	r25, r25
    19a0:	ee 0f       	add	r30, r30
    19a2:	97 95       	ror	r25
    19a4:	87 95       	ror	r24
    19a6:	08 95       	ret

000019a8 <__cmpsf2>:
    19a8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fp_cmp>
    19ac:	08 f4       	brcc	.+2      	; 0x19b0 <__cmpsf2+0x8>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	08 95       	ret

000019b2 <__divsf3>:
    19b2:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divsf3x>
    19b6:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_round>
    19ba:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fp_pscB>
    19be:	58 f0       	brcs	.+22     	; 0x19d6 <__divsf3+0x24>
    19c0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_pscA>
    19c4:	40 f0       	brcs	.+16     	; 0x19d6 <__divsf3+0x24>
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <__divsf3+0x20>
    19c8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <__divsf3+0x24>
    19cc:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    19d0:	51 11       	cpse	r21, r1
    19d2:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>
    19d6:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_nan>

000019da <__divsf3x>:
    19da:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_split3>
    19de:	68 f3       	brcs	.-38     	; 0x19ba <__divsf3+0x8>

000019e0 <__divsf3_pse>:
    19e0:	99 23       	and	r25, r25
    19e2:	b1 f3       	breq	.-20     	; 0x19d0 <__divsf3+0x1e>
    19e4:	55 23       	and	r21, r21
    19e6:	91 f3       	breq	.-28     	; 0x19cc <__divsf3+0x1a>
    19e8:	95 1b       	sub	r25, r21
    19ea:	55 0b       	sbc	r21, r21
    19ec:	bb 27       	eor	r27, r27
    19ee:	aa 27       	eor	r26, r26
    19f0:	62 17       	cp	r22, r18
    19f2:	73 07       	cpc	r23, r19
    19f4:	84 07       	cpc	r24, r20
    19f6:	38 f0       	brcs	.+14     	; 0x1a06 <__divsf3_pse+0x26>
    19f8:	9f 5f       	subi	r25, 0xFF	; 255
    19fa:	5f 4f       	sbci	r21, 0xFF	; 255
    19fc:	22 0f       	add	r18, r18
    19fe:	33 1f       	adc	r19, r19
    1a00:	44 1f       	adc	r20, r20
    1a02:	aa 1f       	adc	r26, r26
    1a04:	a9 f3       	breq	.-22     	; 0x19f0 <__divsf3_pse+0x10>
    1a06:	35 d0       	rcall	.+106    	; 0x1a72 <__divsf3_pse+0x92>
    1a08:	0e 2e       	mov	r0, r30
    1a0a:	3a f0       	brmi	.+14     	; 0x1a1a <__divsf3_pse+0x3a>
    1a0c:	e0 e8       	ldi	r30, 0x80	; 128
    1a0e:	32 d0       	rcall	.+100    	; 0x1a74 <__divsf3_pse+0x94>
    1a10:	91 50       	subi	r25, 0x01	; 1
    1a12:	50 40       	sbci	r21, 0x00	; 0
    1a14:	e6 95       	lsr	r30
    1a16:	00 1c       	adc	r0, r0
    1a18:	ca f7       	brpl	.-14     	; 0x1a0c <__divsf3_pse+0x2c>
    1a1a:	2b d0       	rcall	.+86     	; 0x1a72 <__divsf3_pse+0x92>
    1a1c:	fe 2f       	mov	r31, r30
    1a1e:	29 d0       	rcall	.+82     	; 0x1a72 <__divsf3_pse+0x92>
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	bb 1f       	adc	r27, r27
    1a28:	26 17       	cp	r18, r22
    1a2a:	37 07       	cpc	r19, r23
    1a2c:	48 07       	cpc	r20, r24
    1a2e:	ab 07       	cpc	r26, r27
    1a30:	b0 e8       	ldi	r27, 0x80	; 128
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <__divsf3_pse+0x56>
    1a34:	bb 0b       	sbc	r27, r27
    1a36:	80 2d       	mov	r24, r0
    1a38:	bf 01       	movw	r22, r30
    1a3a:	ff 27       	eor	r31, r31
    1a3c:	93 58       	subi	r25, 0x83	; 131
    1a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a40:	3a f0       	brmi	.+14     	; 0x1a50 <__divsf3_pse+0x70>
    1a42:	9e 3f       	cpi	r25, 0xFE	; 254
    1a44:	51 05       	cpc	r21, r1
    1a46:	78 f0       	brcs	.+30     	; 0x1a66 <__divsf3_pse+0x86>
    1a48:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1a4c:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>
    1a50:	5f 3f       	cpi	r21, 0xFF	; 255
    1a52:	e4 f3       	brlt	.-8      	; 0x1a4c <__divsf3_pse+0x6c>
    1a54:	98 3e       	cpi	r25, 0xE8	; 232
    1a56:	d4 f3       	brlt	.-12     	; 0x1a4c <__divsf3_pse+0x6c>
    1a58:	86 95       	lsr	r24
    1a5a:	77 95       	ror	r23
    1a5c:	67 95       	ror	r22
    1a5e:	b7 95       	ror	r27
    1a60:	f7 95       	ror	r31
    1a62:	9f 5f       	subi	r25, 0xFF	; 255
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <__divsf3_pse+0x78>
    1a66:	88 0f       	add	r24, r24
    1a68:	91 1d       	adc	r25, r1
    1a6a:	96 95       	lsr	r25
    1a6c:	87 95       	ror	r24
    1a6e:	97 f9       	bld	r25, 7
    1a70:	08 95       	ret
    1a72:	e1 e0       	ldi	r30, 0x01	; 1
    1a74:	66 0f       	add	r22, r22
    1a76:	77 1f       	adc	r23, r23
    1a78:	88 1f       	adc	r24, r24
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	62 17       	cp	r22, r18
    1a7e:	73 07       	cpc	r23, r19
    1a80:	84 07       	cpc	r24, r20
    1a82:	ba 07       	cpc	r27, r26
    1a84:	20 f0       	brcs	.+8      	; 0x1a8e <__divsf3_pse+0xae>
    1a86:	62 1b       	sub	r22, r18
    1a88:	73 0b       	sbc	r23, r19
    1a8a:	84 0b       	sbc	r24, r20
    1a8c:	ba 0b       	sbc	r27, r26
    1a8e:	ee 1f       	adc	r30, r30
    1a90:	88 f7       	brcc	.-30     	; 0x1a74 <__divsf3_pse+0x94>
    1a92:	e0 95       	com	r30
    1a94:	08 95       	ret

00001a96 <__fixunssfsi>:
    1a96:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fp_splitA>
    1a9a:	88 f0       	brcs	.+34     	; 0x1abe <__fixunssfsi+0x28>
    1a9c:	9f 57       	subi	r25, 0x7F	; 127
    1a9e:	98 f0       	brcs	.+38     	; 0x1ac6 <__fixunssfsi+0x30>
    1aa0:	b9 2f       	mov	r27, r25
    1aa2:	99 27       	eor	r25, r25
    1aa4:	b7 51       	subi	r27, 0x17	; 23
    1aa6:	b0 f0       	brcs	.+44     	; 0x1ad4 <__fixunssfsi+0x3e>
    1aa8:	e1 f0       	breq	.+56     	; 0x1ae2 <__fixunssfsi+0x4c>
    1aaa:	66 0f       	add	r22, r22
    1aac:	77 1f       	adc	r23, r23
    1aae:	88 1f       	adc	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	1a f0       	brmi	.+6      	; 0x1aba <__fixunssfsi+0x24>
    1ab4:	ba 95       	dec	r27
    1ab6:	c9 f7       	brne	.-14     	; 0x1aaa <__fixunssfsi+0x14>
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <__fixunssfsi+0x4c>
    1aba:	b1 30       	cpi	r27, 0x01	; 1
    1abc:	91 f0       	breq	.+36     	; 0x1ae2 <__fixunssfsi+0x4c>
    1abe:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__fp_zero>
    1ac2:	b1 e0       	ldi	r27, 0x01	; 1
    1ac4:	08 95       	ret
    1ac6:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__fp_zero>
    1aca:	67 2f       	mov	r22, r23
    1acc:	78 2f       	mov	r23, r24
    1ace:	88 27       	eor	r24, r24
    1ad0:	b8 5f       	subi	r27, 0xF8	; 248
    1ad2:	39 f0       	breq	.+14     	; 0x1ae2 <__fixunssfsi+0x4c>
    1ad4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ad6:	cc f3       	brlt	.-14     	; 0x1aca <__fixunssfsi+0x34>
    1ad8:	86 95       	lsr	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	b3 95       	inc	r27
    1ae0:	d9 f7       	brne	.-10     	; 0x1ad8 <__fixunssfsi+0x42>
    1ae2:	3e f4       	brtc	.+14     	; 0x1af2 <__fixunssfsi+0x5c>
    1ae4:	90 95       	com	r25
    1ae6:	80 95       	com	r24
    1ae8:	70 95       	com	r23
    1aea:	61 95       	neg	r22
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	08 95       	ret

00001af4 <__floatunsisf>:
    1af4:	e8 94       	clt
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <__floatsisf+0x12>

00001af8 <__floatsisf>:
    1af8:	97 fb       	bst	r25, 7
    1afa:	3e f4       	brtc	.+14     	; 0x1b0a <__floatsisf+0x12>
    1afc:	90 95       	com	r25
    1afe:	80 95       	com	r24
    1b00:	70 95       	com	r23
    1b02:	61 95       	neg	r22
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	8f 4f       	sbci	r24, 0xFF	; 255
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	99 23       	and	r25, r25
    1b0c:	a9 f0       	breq	.+42     	; 0x1b38 <__floatsisf+0x40>
    1b0e:	f9 2f       	mov	r31, r25
    1b10:	96 e9       	ldi	r25, 0x96	; 150
    1b12:	bb 27       	eor	r27, r27
    1b14:	93 95       	inc	r25
    1b16:	f6 95       	lsr	r31
    1b18:	87 95       	ror	r24
    1b1a:	77 95       	ror	r23
    1b1c:	67 95       	ror	r22
    1b1e:	b7 95       	ror	r27
    1b20:	f1 11       	cpse	r31, r1
    1b22:	f8 cf       	rjmp	.-16     	; 0x1b14 <__floatsisf+0x1c>
    1b24:	fa f4       	brpl	.+62     	; 0x1b64 <__floatsisf+0x6c>
    1b26:	bb 0f       	add	r27, r27
    1b28:	11 f4       	brne	.+4      	; 0x1b2e <__floatsisf+0x36>
    1b2a:	60 ff       	sbrs	r22, 0
    1b2c:	1b c0       	rjmp	.+54     	; 0x1b64 <__floatsisf+0x6c>
    1b2e:	6f 5f       	subi	r22, 0xFF	; 255
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    1b32:	8f 4f       	sbci	r24, 0xFF	; 255
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	16 c0       	rjmp	.+44     	; 0x1b64 <__floatsisf+0x6c>
    1b38:	88 23       	and	r24, r24
    1b3a:	11 f0       	breq	.+4      	; 0x1b40 <__floatsisf+0x48>
    1b3c:	96 e9       	ldi	r25, 0x96	; 150
    1b3e:	11 c0       	rjmp	.+34     	; 0x1b62 <__floatsisf+0x6a>
    1b40:	77 23       	and	r23, r23
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <__floatsisf+0x54>
    1b44:	9e e8       	ldi	r25, 0x8E	; 142
    1b46:	87 2f       	mov	r24, r23
    1b48:	76 2f       	mov	r23, r22
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <__floatsisf+0x5e>
    1b4c:	66 23       	and	r22, r22
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <__floatsisf+0x74>
    1b50:	96 e8       	ldi	r25, 0x86	; 134
    1b52:	86 2f       	mov	r24, r22
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	2a f0       	brmi	.+10     	; 0x1b64 <__floatsisf+0x6c>
    1b5a:	9a 95       	dec	r25
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	da f7       	brpl	.-10     	; 0x1b5a <__floatsisf+0x62>
    1b64:	88 0f       	add	r24, r24
    1b66:	96 95       	lsr	r25
    1b68:	87 95       	ror	r24
    1b6a:	97 f9       	bld	r25, 7
    1b6c:	08 95       	ret

00001b6e <__fp_cmp>:
    1b6e:	99 0f       	add	r25, r25
    1b70:	00 08       	sbc	r0, r0
    1b72:	55 0f       	add	r21, r21
    1b74:	aa 0b       	sbc	r26, r26
    1b76:	e0 e8       	ldi	r30, 0x80	; 128
    1b78:	fe ef       	ldi	r31, 0xFE	; 254
    1b7a:	16 16       	cp	r1, r22
    1b7c:	17 06       	cpc	r1, r23
    1b7e:	e8 07       	cpc	r30, r24
    1b80:	f9 07       	cpc	r31, r25
    1b82:	c0 f0       	brcs	.+48     	; 0x1bb4 <__fp_cmp+0x46>
    1b84:	12 16       	cp	r1, r18
    1b86:	13 06       	cpc	r1, r19
    1b88:	e4 07       	cpc	r30, r20
    1b8a:	f5 07       	cpc	r31, r21
    1b8c:	98 f0       	brcs	.+38     	; 0x1bb4 <__fp_cmp+0x46>
    1b8e:	62 1b       	sub	r22, r18
    1b90:	73 0b       	sbc	r23, r19
    1b92:	84 0b       	sbc	r24, r20
    1b94:	95 0b       	sbc	r25, r21
    1b96:	39 f4       	brne	.+14     	; 0x1ba6 <__fp_cmp+0x38>
    1b98:	0a 26       	eor	r0, r26
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <__fp_cmp+0x46>
    1b9c:	23 2b       	or	r18, r19
    1b9e:	24 2b       	or	r18, r20
    1ba0:	25 2b       	or	r18, r21
    1ba2:	21 f4       	brne	.+8      	; 0x1bac <__fp_cmp+0x3e>
    1ba4:	08 95       	ret
    1ba6:	0a 26       	eor	r0, r26
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <__fp_cmp+0x3e>
    1baa:	a1 40       	sbci	r26, 0x01	; 1
    1bac:	a6 95       	lsr	r26
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	81 1d       	adc	r24, r1
    1bb2:	81 1d       	adc	r24, r1
    1bb4:	08 95       	ret

00001bb6 <__fp_inf>:
    1bb6:	97 f9       	bld	r25, 7
    1bb8:	9f 67       	ori	r25, 0x7F	; 127
    1bba:	80 e8       	ldi	r24, 0x80	; 128
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	08 95       	ret

00001bc2 <__fp_nan>:
    1bc2:	9f ef       	ldi	r25, 0xFF	; 255
    1bc4:	80 ec       	ldi	r24, 0xC0	; 192
    1bc6:	08 95       	ret

00001bc8 <__fp_pscA>:
    1bc8:	00 24       	eor	r0, r0
    1bca:	0a 94       	dec	r0
    1bcc:	16 16       	cp	r1, r22
    1bce:	17 06       	cpc	r1, r23
    1bd0:	18 06       	cpc	r1, r24
    1bd2:	09 06       	cpc	r0, r25
    1bd4:	08 95       	ret

00001bd6 <__fp_pscB>:
    1bd6:	00 24       	eor	r0, r0
    1bd8:	0a 94       	dec	r0
    1bda:	12 16       	cp	r1, r18
    1bdc:	13 06       	cpc	r1, r19
    1bde:	14 06       	cpc	r1, r20
    1be0:	05 06       	cpc	r0, r21
    1be2:	08 95       	ret

00001be4 <__fp_round>:
    1be4:	09 2e       	mov	r0, r25
    1be6:	03 94       	inc	r0
    1be8:	00 0c       	add	r0, r0
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <__fp_round+0xc>
    1bec:	88 23       	and	r24, r24
    1bee:	52 f0       	brmi	.+20     	; 0x1c04 <__fp_round+0x20>
    1bf0:	bb 0f       	add	r27, r27
    1bf2:	40 f4       	brcc	.+16     	; 0x1c04 <__fp_round+0x20>
    1bf4:	bf 2b       	or	r27, r31
    1bf6:	11 f4       	brne	.+4      	; 0x1bfc <__fp_round+0x18>
    1bf8:	60 ff       	sbrs	r22, 0
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <__fp_round+0x20>
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	8f 4f       	sbci	r24, 0xFF	; 255
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	08 95       	ret

00001c06 <__fp_split3>:
    1c06:	57 fd       	sbrc	r21, 7
    1c08:	90 58       	subi	r25, 0x80	; 128
    1c0a:	44 0f       	add	r20, r20
    1c0c:	55 1f       	adc	r21, r21
    1c0e:	59 f0       	breq	.+22     	; 0x1c26 <__fp_splitA+0x10>
    1c10:	5f 3f       	cpi	r21, 0xFF	; 255
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <__fp_splitA+0x1a>
    1c14:	47 95       	ror	r20

00001c16 <__fp_splitA>:
    1c16:	88 0f       	add	r24, r24
    1c18:	97 fb       	bst	r25, 7
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <__fp_splitA+0x20>
    1c1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c20:	79 f0       	breq	.+30     	; 0x1c40 <__fp_splitA+0x2a>
    1c22:	87 95       	ror	r24
    1c24:	08 95       	ret
    1c26:	12 16       	cp	r1, r18
    1c28:	13 06       	cpc	r1, r19
    1c2a:	14 06       	cpc	r1, r20
    1c2c:	55 1f       	adc	r21, r21
    1c2e:	f2 cf       	rjmp	.-28     	; 0x1c14 <__fp_split3+0xe>
    1c30:	46 95       	lsr	r20
    1c32:	f1 df       	rcall	.-30     	; 0x1c16 <__fp_splitA>
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <__fp_splitA+0x30>
    1c36:	16 16       	cp	r1, r22
    1c38:	17 06       	cpc	r1, r23
    1c3a:	18 06       	cpc	r1, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	f1 cf       	rjmp	.-30     	; 0x1c22 <__fp_splitA+0xc>
    1c40:	86 95       	lsr	r24
    1c42:	71 05       	cpc	r23, r1
    1c44:	61 05       	cpc	r22, r1
    1c46:	08 94       	sec
    1c48:	08 95       	ret

00001c4a <__fp_zero>:
    1c4a:	e8 94       	clt

00001c4c <__fp_szero>:
    1c4c:	bb 27       	eor	r27, r27
    1c4e:	66 27       	eor	r22, r22
    1c50:	77 27       	eor	r23, r23
    1c52:	cb 01       	movw	r24, r22
    1c54:	97 f9       	bld	r25, 7
    1c56:	08 95       	ret

00001c58 <__mulsf3>:
    1c58:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__mulsf3x>
    1c5c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_round>
    1c60:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_pscA>
    1c64:	38 f0       	brcs	.+14     	; 0x1c74 <__mulsf3+0x1c>
    1c66:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fp_pscB>
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <__mulsf3+0x1c>
    1c6c:	95 23       	and	r25, r21
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <__mulsf3+0x1c>
    1c70:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1c74:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_nan>
    1c78:	11 24       	eor	r1, r1
    1c7a:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>

00001c7e <__mulsf3x>:
    1c7e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_split3>
    1c82:	70 f3       	brcs	.-36     	; 0x1c60 <__mulsf3+0x8>

00001c84 <__mulsf3_pse>:
    1c84:	95 9f       	mul	r25, r21
    1c86:	c1 f3       	breq	.-16     	; 0x1c78 <__mulsf3+0x20>
    1c88:	95 0f       	add	r25, r21
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	62 9f       	mul	r22, r18
    1c90:	f0 01       	movw	r30, r0
    1c92:	72 9f       	mul	r23, r18
    1c94:	bb 27       	eor	r27, r27
    1c96:	f0 0d       	add	r31, r0
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	63 9f       	mul	r22, r19
    1c9c:	aa 27       	eor	r26, r26
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	b1 1d       	adc	r27, r1
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	64 9f       	mul	r22, r20
    1ca6:	66 27       	eor	r22, r22
    1ca8:	b0 0d       	add	r27, r0
    1caa:	a1 1d       	adc	r26, r1
    1cac:	66 1f       	adc	r22, r22
    1cae:	82 9f       	mul	r24, r18
    1cb0:	22 27       	eor	r18, r18
    1cb2:	b0 0d       	add	r27, r0
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	62 1f       	adc	r22, r18
    1cb8:	73 9f       	mul	r23, r19
    1cba:	b0 0d       	add	r27, r0
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	83 9f       	mul	r24, r19
    1cc2:	a0 0d       	add	r26, r0
    1cc4:	61 1d       	adc	r22, r1
    1cc6:	22 1f       	adc	r18, r18
    1cc8:	74 9f       	mul	r23, r20
    1cca:	33 27       	eor	r19, r19
    1ccc:	a0 0d       	add	r26, r0
    1cce:	61 1d       	adc	r22, r1
    1cd0:	23 1f       	adc	r18, r19
    1cd2:	84 9f       	mul	r24, r20
    1cd4:	60 0d       	add	r22, r0
    1cd6:	21 1d       	adc	r18, r1
    1cd8:	82 2f       	mov	r24, r18
    1cda:	76 2f       	mov	r23, r22
    1cdc:	6a 2f       	mov	r22, r26
    1cde:	11 24       	eor	r1, r1
    1ce0:	9f 57       	subi	r25, 0x7F	; 127
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	9a f0       	brmi	.+38     	; 0x1d0c <__mulsf3_pse+0x88>
    1ce6:	f1 f0       	breq	.+60     	; 0x1d24 <__mulsf3_pse+0xa0>
    1ce8:	88 23       	and	r24, r24
    1cea:	4a f0       	brmi	.+18     	; 0x1cfe <__mulsf3_pse+0x7a>
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	91 50       	subi	r25, 0x01	; 1
    1cfa:	50 40       	sbci	r21, 0x00	; 0
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <__mulsf3_pse+0x64>
    1cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1d00:	51 05       	cpc	r21, r1
    1d02:	80 f0       	brcs	.+32     	; 0x1d24 <__mulsf3_pse+0xa0>
    1d04:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1d08:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>
    1d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d0e:	e4 f3       	brlt	.-8      	; 0x1d08 <__mulsf3_pse+0x84>
    1d10:	98 3e       	cpi	r25, 0xE8	; 232
    1d12:	d4 f3       	brlt	.-12     	; 0x1d08 <__mulsf3_pse+0x84>
    1d14:	86 95       	lsr	r24
    1d16:	77 95       	ror	r23
    1d18:	67 95       	ror	r22
    1d1a:	b7 95       	ror	r27
    1d1c:	f7 95       	ror	r31
    1d1e:	e7 95       	ror	r30
    1d20:	9f 5f       	subi	r25, 0xFF	; 255
    1d22:	c1 f7       	brne	.-16     	; 0x1d14 <__mulsf3_pse+0x90>
    1d24:	fe 2b       	or	r31, r30
    1d26:	88 0f       	add	r24, r24
    1d28:	91 1d       	adc	r25, r1
    1d2a:	96 95       	lsr	r25
    1d2c:	87 95       	ror	r24
    1d2e:	97 f9       	bld	r25, 7
    1d30:	08 95       	ret

00001d32 <__tablejump2__>:
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	05 90       	lpm	r0, Z+
    1d38:	f4 91       	lpm	r31, Z
    1d3a:	e0 2d       	mov	r30, r0
    1d3c:	09 94       	ijmp

00001d3e <strcat>:
    1d3e:	fb 01       	movw	r30, r22
    1d40:	dc 01       	movw	r26, r24
    1d42:	0d 90       	ld	r0, X+
    1d44:	00 20       	and	r0, r0
    1d46:	e9 f7       	brne	.-6      	; 0x1d42 <strcat+0x4>
    1d48:	11 97       	sbiw	r26, 0x01	; 1
    1d4a:	01 90       	ld	r0, Z+
    1d4c:	0d 92       	st	X+, r0
    1d4e:	00 20       	and	r0, r0
    1d50:	e1 f7       	brne	.-8      	; 0x1d4a <strcat+0xc>
    1d52:	08 95       	ret

00001d54 <strcpy>:
    1d54:	fb 01       	movw	r30, r22
    1d56:	dc 01       	movw	r26, r24
    1d58:	01 90       	ld	r0, Z+
    1d5a:	0d 92       	st	X+, r0
    1d5c:	00 20       	and	r0, r0
    1d5e:	e1 f7       	brne	.-8      	; 0x1d58 <strcpy+0x4>
    1d60:	08 95       	ret

00001d62 <sprintf>:
    1d62:	ae e0       	ldi	r26, 0x0E	; 14
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e7 eb       	ldi	r30, 0xB7	; 183
    1d68:	fe e0       	ldi	r31, 0x0E	; 14
    1d6a:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__prologue_saves__+0x1c>
    1d6e:	0d 89       	ldd	r16, Y+21	; 0x15
    1d70:	1e 89       	ldd	r17, Y+22	; 0x16
    1d72:	86 e0       	ldi	r24, 0x06	; 6
    1d74:	8c 83       	std	Y+4, r24	; 0x04
    1d76:	09 83       	std	Y+1, r16	; 0x01
    1d78:	1a 83       	std	Y+2, r17	; 0x02
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	9f e7       	ldi	r25, 0x7F	; 127
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	ae 01       	movw	r20, r28
    1d84:	47 5e       	subi	r20, 0xE7	; 231
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	6f 89       	ldd	r22, Y+23	; 0x17
    1d8a:	78 8d       	ldd	r23, Y+24	; 0x18
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <vfprintf>
    1d94:	ef 81       	ldd	r30, Y+7	; 0x07
    1d96:	f8 85       	ldd	r31, Y+8	; 0x08
    1d98:	e0 0f       	add	r30, r16
    1d9a:	f1 1f       	adc	r31, r17
    1d9c:	10 82       	st	Z, r1
    1d9e:	2e 96       	adiw	r28, 0x0e	; 14
    1da0:	e4 e0       	ldi	r30, 0x04	; 4
    1da2:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__+0x1c>

00001da6 <vfprintf>:
    1da6:	ab e0       	ldi	r26, 0x0B	; 11
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e9 ed       	ldi	r30, 0xD9	; 217
    1dac:	fe e0       	ldi	r31, 0x0E	; 14
    1dae:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__>
    1db2:	6c 01       	movw	r12, r24
    1db4:	7b 01       	movw	r14, r22
    1db6:	8a 01       	movw	r16, r20
    1db8:	fc 01       	movw	r30, r24
    1dba:	16 82       	std	Z+6, r1	; 0x06
    1dbc:	17 82       	std	Z+7, r1	; 0x07
    1dbe:	83 81       	ldd	r24, Z+3	; 0x03
    1dc0:	81 ff       	sbrs	r24, 1
    1dc2:	cc c1       	rjmp	.+920    	; 0x215c <vfprintf+0x3b6>
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	3c 01       	movw	r6, r24
    1dca:	f6 01       	movw	r30, r12
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	f7 01       	movw	r30, r14
    1dd0:	93 fd       	sbrc	r25, 3
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	93 ff       	sbrs	r25, 3
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	7f 01       	movw	r14, r30
    1dda:	88 23       	and	r24, r24
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <vfprintf+0x3a>
    1dde:	ba c1       	rjmp	.+884    	; 0x2154 <vfprintf+0x3ae>
    1de0:	85 32       	cpi	r24, 0x25	; 37
    1de2:	39 f4       	brne	.+14     	; 0x1df2 <vfprintf+0x4c>
    1de4:	93 fd       	sbrc	r25, 3
    1de6:	85 91       	lpm	r24, Z+
    1de8:	93 ff       	sbrs	r25, 3
    1dea:	81 91       	ld	r24, Z+
    1dec:	7f 01       	movw	r14, r30
    1dee:	85 32       	cpi	r24, 0x25	; 37
    1df0:	29 f4       	brne	.+10     	; 0x1dfc <vfprintf+0x56>
    1df2:	b6 01       	movw	r22, r12
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1dfa:	e7 cf       	rjmp	.-50     	; 0x1dca <vfprintf+0x24>
    1dfc:	91 2c       	mov	r9, r1
    1dfe:	21 2c       	mov	r2, r1
    1e00:	31 2c       	mov	r3, r1
    1e02:	ff e1       	ldi	r31, 0x1F	; 31
    1e04:	f3 15       	cp	r31, r3
    1e06:	d8 f0       	brcs	.+54     	; 0x1e3e <vfprintf+0x98>
    1e08:	8b 32       	cpi	r24, 0x2B	; 43
    1e0a:	79 f0       	breq	.+30     	; 0x1e2a <vfprintf+0x84>
    1e0c:	38 f4       	brcc	.+14     	; 0x1e1c <vfprintf+0x76>
    1e0e:	80 32       	cpi	r24, 0x20	; 32
    1e10:	79 f0       	breq	.+30     	; 0x1e30 <vfprintf+0x8a>
    1e12:	83 32       	cpi	r24, 0x23	; 35
    1e14:	a1 f4       	brne	.+40     	; 0x1e3e <vfprintf+0x98>
    1e16:	23 2d       	mov	r18, r3
    1e18:	20 61       	ori	r18, 0x10	; 16
    1e1a:	1d c0       	rjmp	.+58     	; 0x1e56 <vfprintf+0xb0>
    1e1c:	8d 32       	cpi	r24, 0x2D	; 45
    1e1e:	61 f0       	breq	.+24     	; 0x1e38 <vfprintf+0x92>
    1e20:	80 33       	cpi	r24, 0x30	; 48
    1e22:	69 f4       	brne	.+26     	; 0x1e3e <vfprintf+0x98>
    1e24:	23 2d       	mov	r18, r3
    1e26:	21 60       	ori	r18, 0x01	; 1
    1e28:	16 c0       	rjmp	.+44     	; 0x1e56 <vfprintf+0xb0>
    1e2a:	83 2d       	mov	r24, r3
    1e2c:	82 60       	ori	r24, 0x02	; 2
    1e2e:	38 2e       	mov	r3, r24
    1e30:	e3 2d       	mov	r30, r3
    1e32:	e4 60       	ori	r30, 0x04	; 4
    1e34:	3e 2e       	mov	r3, r30
    1e36:	2a c0       	rjmp	.+84     	; 0x1e8c <vfprintf+0xe6>
    1e38:	f3 2d       	mov	r31, r3
    1e3a:	f8 60       	ori	r31, 0x08	; 8
    1e3c:	1d c0       	rjmp	.+58     	; 0x1e78 <vfprintf+0xd2>
    1e3e:	37 fc       	sbrc	r3, 7
    1e40:	2d c0       	rjmp	.+90     	; 0x1e9c <vfprintf+0xf6>
    1e42:	20 ed       	ldi	r18, 0xD0	; 208
    1e44:	28 0f       	add	r18, r24
    1e46:	2a 30       	cpi	r18, 0x0A	; 10
    1e48:	40 f0       	brcs	.+16     	; 0x1e5a <vfprintf+0xb4>
    1e4a:	8e 32       	cpi	r24, 0x2E	; 46
    1e4c:	b9 f4       	brne	.+46     	; 0x1e7c <vfprintf+0xd6>
    1e4e:	36 fc       	sbrc	r3, 6
    1e50:	81 c1       	rjmp	.+770    	; 0x2154 <vfprintf+0x3ae>
    1e52:	23 2d       	mov	r18, r3
    1e54:	20 64       	ori	r18, 0x40	; 64
    1e56:	32 2e       	mov	r3, r18
    1e58:	19 c0       	rjmp	.+50     	; 0x1e8c <vfprintf+0xe6>
    1e5a:	36 fe       	sbrs	r3, 6
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0xc4>
    1e5e:	8a e0       	ldi	r24, 0x0A	; 10
    1e60:	98 9e       	mul	r9, r24
    1e62:	20 0d       	add	r18, r0
    1e64:	11 24       	eor	r1, r1
    1e66:	92 2e       	mov	r9, r18
    1e68:	11 c0       	rjmp	.+34     	; 0x1e8c <vfprintf+0xe6>
    1e6a:	ea e0       	ldi	r30, 0x0A	; 10
    1e6c:	2e 9e       	mul	r2, r30
    1e6e:	20 0d       	add	r18, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	22 2e       	mov	r2, r18
    1e74:	f3 2d       	mov	r31, r3
    1e76:	f0 62       	ori	r31, 0x20	; 32
    1e78:	3f 2e       	mov	r3, r31
    1e7a:	08 c0       	rjmp	.+16     	; 0x1e8c <vfprintf+0xe6>
    1e7c:	8c 36       	cpi	r24, 0x6C	; 108
    1e7e:	21 f4       	brne	.+8      	; 0x1e88 <vfprintf+0xe2>
    1e80:	83 2d       	mov	r24, r3
    1e82:	80 68       	ori	r24, 0x80	; 128
    1e84:	38 2e       	mov	r3, r24
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <vfprintf+0xe6>
    1e88:	88 36       	cpi	r24, 0x68	; 104
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c <vfprintf+0xf6>
    1e8c:	f7 01       	movw	r30, r14
    1e8e:	93 fd       	sbrc	r25, 3
    1e90:	85 91       	lpm	r24, Z+
    1e92:	93 ff       	sbrs	r25, 3
    1e94:	81 91       	ld	r24, Z+
    1e96:	7f 01       	movw	r14, r30
    1e98:	81 11       	cpse	r24, r1
    1e9a:	b3 cf       	rjmp	.-154    	; 0x1e02 <vfprintf+0x5c>
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	9f 7d       	andi	r25, 0xDF	; 223
    1ea0:	95 54       	subi	r25, 0x45	; 69
    1ea2:	93 30       	cpi	r25, 0x03	; 3
    1ea4:	28 f4       	brcc	.+10     	; 0x1eb0 <vfprintf+0x10a>
    1ea6:	0c 5f       	subi	r16, 0xFC	; 252
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	9f e3       	ldi	r25, 0x3F	; 63
    1eac:	99 83       	std	Y+1, r25	; 0x01
    1eae:	0d c0       	rjmp	.+26     	; 0x1eca <vfprintf+0x124>
    1eb0:	83 36       	cpi	r24, 0x63	; 99
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <vfprintf+0x11a>
    1eb4:	83 37       	cpi	r24, 0x73	; 115
    1eb6:	71 f0       	breq	.+28     	; 0x1ed4 <vfprintf+0x12e>
    1eb8:	83 35       	cpi	r24, 0x53	; 83
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <vfprintf+0x118>
    1ebc:	59 c0       	rjmp	.+178    	; 0x1f70 <vfprintf+0x1ca>
    1ebe:	21 c0       	rjmp	.+66     	; 0x1f02 <vfprintf+0x15c>
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	80 81       	ld	r24, Z
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	0e 5f       	subi	r16, 0xFE	; 254
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	88 24       	eor	r8, r8
    1ecc:	83 94       	inc	r8
    1ece:	91 2c       	mov	r9, r1
    1ed0:	53 01       	movw	r10, r6
    1ed2:	13 c0       	rjmp	.+38     	; 0x1efa <vfprintf+0x154>
    1ed4:	28 01       	movw	r4, r16
    1ed6:	f2 e0       	ldi	r31, 0x02	; 2
    1ed8:	4f 0e       	add	r4, r31
    1eda:	51 1c       	adc	r5, r1
    1edc:	f8 01       	movw	r30, r16
    1ede:	a0 80       	ld	r10, Z
    1ee0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ee2:	36 fe       	sbrs	r3, 6
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <vfprintf+0x146>
    1ee6:	69 2d       	mov	r22, r9
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0x14a>
    1eec:	6f ef       	ldi	r22, 0xFF	; 255
    1eee:	7f ef       	ldi	r23, 0xFF	; 255
    1ef0:	c5 01       	movw	r24, r10
    1ef2:	0e 94 bf 10 	call	0x217e	; 0x217e <strnlen>
    1ef6:	4c 01       	movw	r8, r24
    1ef8:	82 01       	movw	r16, r4
    1efa:	f3 2d       	mov	r31, r3
    1efc:	ff 77       	andi	r31, 0x7F	; 127
    1efe:	3f 2e       	mov	r3, r31
    1f00:	16 c0       	rjmp	.+44     	; 0x1f2e <vfprintf+0x188>
    1f02:	28 01       	movw	r4, r16
    1f04:	22 e0       	ldi	r18, 0x02	; 2
    1f06:	42 0e       	add	r4, r18
    1f08:	51 1c       	adc	r5, r1
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	a0 80       	ld	r10, Z
    1f0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1f10:	36 fe       	sbrs	r3, 6
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <vfprintf+0x174>
    1f14:	69 2d       	mov	r22, r9
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <vfprintf+0x178>
    1f1a:	6f ef       	ldi	r22, 0xFF	; 255
    1f1c:	7f ef       	ldi	r23, 0xFF	; 255
    1f1e:	c5 01       	movw	r24, r10
    1f20:	0e 94 b4 10 	call	0x2168	; 0x2168 <strnlen_P>
    1f24:	4c 01       	movw	r8, r24
    1f26:	f3 2d       	mov	r31, r3
    1f28:	f0 68       	ori	r31, 0x80	; 128
    1f2a:	3f 2e       	mov	r3, r31
    1f2c:	82 01       	movw	r16, r4
    1f2e:	33 fc       	sbrc	r3, 3
    1f30:	1b c0       	rjmp	.+54     	; 0x1f68 <vfprintf+0x1c2>
    1f32:	82 2d       	mov	r24, r2
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	88 16       	cp	r8, r24
    1f38:	99 06       	cpc	r9, r25
    1f3a:	b0 f4       	brcc	.+44     	; 0x1f68 <vfprintf+0x1c2>
    1f3c:	b6 01       	movw	r22, r12
    1f3e:	80 e2       	ldi	r24, 0x20	; 32
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1f46:	2a 94       	dec	r2
    1f48:	f4 cf       	rjmp	.-24     	; 0x1f32 <vfprintf+0x18c>
    1f4a:	f5 01       	movw	r30, r10
    1f4c:	37 fc       	sbrc	r3, 7
    1f4e:	85 91       	lpm	r24, Z+
    1f50:	37 fe       	sbrs	r3, 7
    1f52:	81 91       	ld	r24, Z+
    1f54:	5f 01       	movw	r10, r30
    1f56:	b6 01       	movw	r22, r12
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1f5e:	21 10       	cpse	r2, r1
    1f60:	2a 94       	dec	r2
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	82 1a       	sub	r8, r18
    1f66:	91 08       	sbc	r9, r1
    1f68:	81 14       	cp	r8, r1
    1f6a:	91 04       	cpc	r9, r1
    1f6c:	71 f7       	brne	.-36     	; 0x1f4a <vfprintf+0x1a4>
    1f6e:	e8 c0       	rjmp	.+464    	; 0x2140 <vfprintf+0x39a>
    1f70:	84 36       	cpi	r24, 0x64	; 100
    1f72:	11 f0       	breq	.+4      	; 0x1f78 <vfprintf+0x1d2>
    1f74:	89 36       	cpi	r24, 0x69	; 105
    1f76:	41 f5       	brne	.+80     	; 0x1fc8 <vfprintf+0x222>
    1f78:	f8 01       	movw	r30, r16
    1f7a:	37 fe       	sbrs	r3, 7
    1f7c:	07 c0       	rjmp	.+14     	; 0x1f8c <vfprintf+0x1e6>
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	0c 5f       	subi	r16, 0xFC	; 252
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	08 c0       	rjmp	.+16     	; 0x1f9c <vfprintf+0x1f6>
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	07 2e       	mov	r0, r23
    1f92:	00 0c       	add	r0, r0
    1f94:	88 0b       	sbc	r24, r24
    1f96:	99 0b       	sbc	r25, r25
    1f98:	0e 5f       	subi	r16, 0xFE	; 254
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	f3 2d       	mov	r31, r3
    1f9e:	ff 76       	andi	r31, 0x6F	; 111
    1fa0:	3f 2e       	mov	r3, r31
    1fa2:	97 ff       	sbrs	r25, 7
    1fa4:	09 c0       	rjmp	.+18     	; 0x1fb8 <vfprintf+0x212>
    1fa6:	90 95       	com	r25
    1fa8:	80 95       	com	r24
    1faa:	70 95       	com	r23
    1fac:	61 95       	neg	r22
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	f0 68       	ori	r31, 0x80	; 128
    1fb6:	3f 2e       	mov	r3, r31
    1fb8:	2a e0       	ldi	r18, 0x0A	; 10
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	a3 01       	movw	r20, r6
    1fbe:	0e 94 06 11 	call	0x220c	; 0x220c <__ultoa_invert>
    1fc2:	88 2e       	mov	r8, r24
    1fc4:	86 18       	sub	r8, r6
    1fc6:	45 c0       	rjmp	.+138    	; 0x2052 <vfprintf+0x2ac>
    1fc8:	85 37       	cpi	r24, 0x75	; 117
    1fca:	31 f4       	brne	.+12     	; 0x1fd8 <vfprintf+0x232>
    1fcc:	23 2d       	mov	r18, r3
    1fce:	2f 7e       	andi	r18, 0xEF	; 239
    1fd0:	b2 2e       	mov	r11, r18
    1fd2:	2a e0       	ldi	r18, 0x0A	; 10
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	25 c0       	rjmp	.+74     	; 0x2022 <vfprintf+0x27c>
    1fd8:	93 2d       	mov	r25, r3
    1fda:	99 7f       	andi	r25, 0xF9	; 249
    1fdc:	b9 2e       	mov	r11, r25
    1fde:	8f 36       	cpi	r24, 0x6F	; 111
    1fe0:	c1 f0       	breq	.+48     	; 0x2012 <vfprintf+0x26c>
    1fe2:	18 f4       	brcc	.+6      	; 0x1fea <vfprintf+0x244>
    1fe4:	88 35       	cpi	r24, 0x58	; 88
    1fe6:	79 f0       	breq	.+30     	; 0x2006 <vfprintf+0x260>
    1fe8:	b5 c0       	rjmp	.+362    	; 0x2154 <vfprintf+0x3ae>
    1fea:	80 37       	cpi	r24, 0x70	; 112
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <vfprintf+0x24e>
    1fee:	88 37       	cpi	r24, 0x78	; 120
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <vfprintf+0x254>
    1ff2:	b0 c0       	rjmp	.+352    	; 0x2154 <vfprintf+0x3ae>
    1ff4:	e9 2f       	mov	r30, r25
    1ff6:	e0 61       	ori	r30, 0x10	; 16
    1ff8:	be 2e       	mov	r11, r30
    1ffa:	b4 fe       	sbrs	r11, 4
    1ffc:	0d c0       	rjmp	.+26     	; 0x2018 <vfprintf+0x272>
    1ffe:	fb 2d       	mov	r31, r11
    2000:	f4 60       	ori	r31, 0x04	; 4
    2002:	bf 2e       	mov	r11, r31
    2004:	09 c0       	rjmp	.+18     	; 0x2018 <vfprintf+0x272>
    2006:	34 fe       	sbrs	r3, 4
    2008:	0a c0       	rjmp	.+20     	; 0x201e <vfprintf+0x278>
    200a:	29 2f       	mov	r18, r25
    200c:	26 60       	ori	r18, 0x06	; 6
    200e:	b2 2e       	mov	r11, r18
    2010:	06 c0       	rjmp	.+12     	; 0x201e <vfprintf+0x278>
    2012:	28 e0       	ldi	r18, 0x08	; 8
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	05 c0       	rjmp	.+10     	; 0x2022 <vfprintf+0x27c>
    2018:	20 e1       	ldi	r18, 0x10	; 16
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <vfprintf+0x27c>
    201e:	20 e1       	ldi	r18, 0x10	; 16
    2020:	32 e0       	ldi	r19, 0x02	; 2
    2022:	f8 01       	movw	r30, r16
    2024:	b7 fe       	sbrs	r11, 7
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <vfprintf+0x290>
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	0c 5f       	subi	r16, 0xFC	; 252
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <vfprintf+0x29c>
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 5f       	subi	r16, 0xFE	; 254
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	a3 01       	movw	r20, r6
    2044:	0e 94 06 11 	call	0x220c	; 0x220c <__ultoa_invert>
    2048:	88 2e       	mov	r8, r24
    204a:	86 18       	sub	r8, r6
    204c:	fb 2d       	mov	r31, r11
    204e:	ff 77       	andi	r31, 0x7F	; 127
    2050:	3f 2e       	mov	r3, r31
    2052:	36 fe       	sbrs	r3, 6
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <vfprintf+0x2ca>
    2056:	23 2d       	mov	r18, r3
    2058:	2e 7f       	andi	r18, 0xFE	; 254
    205a:	a2 2e       	mov	r10, r18
    205c:	89 14       	cp	r8, r9
    205e:	58 f4       	brcc	.+22     	; 0x2076 <vfprintf+0x2d0>
    2060:	34 fe       	sbrs	r3, 4
    2062:	0b c0       	rjmp	.+22     	; 0x207a <vfprintf+0x2d4>
    2064:	32 fc       	sbrc	r3, 2
    2066:	09 c0       	rjmp	.+18     	; 0x207a <vfprintf+0x2d4>
    2068:	83 2d       	mov	r24, r3
    206a:	8e 7e       	andi	r24, 0xEE	; 238
    206c:	a8 2e       	mov	r10, r24
    206e:	05 c0       	rjmp	.+10     	; 0x207a <vfprintf+0x2d4>
    2070:	b8 2c       	mov	r11, r8
    2072:	a3 2c       	mov	r10, r3
    2074:	03 c0       	rjmp	.+6      	; 0x207c <vfprintf+0x2d6>
    2076:	b8 2c       	mov	r11, r8
    2078:	01 c0       	rjmp	.+2      	; 0x207c <vfprintf+0x2d6>
    207a:	b9 2c       	mov	r11, r9
    207c:	a4 fe       	sbrs	r10, 4
    207e:	0f c0       	rjmp	.+30     	; 0x209e <vfprintf+0x2f8>
    2080:	fe 01       	movw	r30, r28
    2082:	e8 0d       	add	r30, r8
    2084:	f1 1d       	adc	r31, r1
    2086:	80 81       	ld	r24, Z
    2088:	80 33       	cpi	r24, 0x30	; 48
    208a:	21 f4       	brne	.+8      	; 0x2094 <vfprintf+0x2ee>
    208c:	9a 2d       	mov	r25, r10
    208e:	99 7e       	andi	r25, 0xE9	; 233
    2090:	a9 2e       	mov	r10, r25
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <vfprintf+0x300>
    2094:	a2 fe       	sbrs	r10, 2
    2096:	06 c0       	rjmp	.+12     	; 0x20a4 <vfprintf+0x2fe>
    2098:	b3 94       	inc	r11
    209a:	b3 94       	inc	r11
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <vfprintf+0x300>
    209e:	8a 2d       	mov	r24, r10
    20a0:	86 78       	andi	r24, 0x86	; 134
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <vfprintf+0x300>
    20a4:	b3 94       	inc	r11
    20a6:	a3 fc       	sbrc	r10, 3
    20a8:	11 c0       	rjmp	.+34     	; 0x20cc <vfprintf+0x326>
    20aa:	a0 fe       	sbrs	r10, 0
    20ac:	06 c0       	rjmp	.+12     	; 0x20ba <vfprintf+0x314>
    20ae:	b2 14       	cp	r11, r2
    20b0:	88 f4       	brcc	.+34     	; 0x20d4 <vfprintf+0x32e>
    20b2:	28 0c       	add	r2, r8
    20b4:	92 2c       	mov	r9, r2
    20b6:	9b 18       	sub	r9, r11
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <vfprintf+0x330>
    20ba:	b2 14       	cp	r11, r2
    20bc:	60 f4       	brcc	.+24     	; 0x20d6 <vfprintf+0x330>
    20be:	b6 01       	movw	r22, r12
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    20c8:	b3 94       	inc	r11
    20ca:	f7 cf       	rjmp	.-18     	; 0x20ba <vfprintf+0x314>
    20cc:	b2 14       	cp	r11, r2
    20ce:	18 f4       	brcc	.+6      	; 0x20d6 <vfprintf+0x330>
    20d0:	2b 18       	sub	r2, r11
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x332>
    20d4:	98 2c       	mov	r9, r8
    20d6:	21 2c       	mov	r2, r1
    20d8:	a4 fe       	sbrs	r10, 4
    20da:	10 c0       	rjmp	.+32     	; 0x20fc <vfprintf+0x356>
    20dc:	b6 01       	movw	r22, r12
    20de:	80 e3       	ldi	r24, 0x30	; 48
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    20e6:	a2 fe       	sbrs	r10, 2
    20e8:	17 c0       	rjmp	.+46     	; 0x2118 <vfprintf+0x372>
    20ea:	a1 fc       	sbrc	r10, 1
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <vfprintf+0x34e>
    20ee:	88 e7       	ldi	r24, 0x78	; 120
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x352>
    20f4:	88 e5       	ldi	r24, 0x58	; 88
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	b6 01       	movw	r22, r12
    20fa:	0c c0       	rjmp	.+24     	; 0x2114 <vfprintf+0x36e>
    20fc:	8a 2d       	mov	r24, r10
    20fe:	86 78       	andi	r24, 0x86	; 134
    2100:	59 f0       	breq	.+22     	; 0x2118 <vfprintf+0x372>
    2102:	a1 fe       	sbrs	r10, 1
    2104:	02 c0       	rjmp	.+4      	; 0x210a <vfprintf+0x364>
    2106:	8b e2       	ldi	r24, 0x2B	; 43
    2108:	01 c0       	rjmp	.+2      	; 0x210c <vfprintf+0x366>
    210a:	80 e2       	ldi	r24, 0x20	; 32
    210c:	a7 fc       	sbrc	r10, 7
    210e:	8d e2       	ldi	r24, 0x2D	; 45
    2110:	b6 01       	movw	r22, r12
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2118:	89 14       	cp	r8, r9
    211a:	38 f4       	brcc	.+14     	; 0x212a <vfprintf+0x384>
    211c:	b6 01       	movw	r22, r12
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2126:	9a 94       	dec	r9
    2128:	f7 cf       	rjmp	.-18     	; 0x2118 <vfprintf+0x372>
    212a:	8a 94       	dec	r8
    212c:	f3 01       	movw	r30, r6
    212e:	e8 0d       	add	r30, r8
    2130:	f1 1d       	adc	r31, r1
    2132:	80 81       	ld	r24, Z
    2134:	b6 01       	movw	r22, r12
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    213c:	81 10       	cpse	r8, r1
    213e:	f5 cf       	rjmp	.-22     	; 0x212a <vfprintf+0x384>
    2140:	22 20       	and	r2, r2
    2142:	09 f4       	brne	.+2      	; 0x2146 <vfprintf+0x3a0>
    2144:	42 ce       	rjmp	.-892    	; 0x1dca <vfprintf+0x24>
    2146:	b6 01       	movw	r22, r12
    2148:	80 e2       	ldi	r24, 0x20	; 32
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2150:	2a 94       	dec	r2
    2152:	f6 cf       	rjmp	.-20     	; 0x2140 <vfprintf+0x39a>
    2154:	f6 01       	movw	r30, r12
    2156:	86 81       	ldd	r24, Z+6	; 0x06
    2158:	97 81       	ldd	r25, Z+7	; 0x07
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <vfprintf+0x3ba>
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	9f ef       	ldi	r25, 0xFF	; 255
    2160:	2b 96       	adiw	r28, 0x0b	; 11
    2162:	e2 e1       	ldi	r30, 0x12	; 18
    2164:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__>

00002168 <strnlen_P>:
    2168:	fc 01       	movw	r30, r24
    216a:	05 90       	lpm	r0, Z+
    216c:	61 50       	subi	r22, 0x01	; 1
    216e:	70 40       	sbci	r23, 0x00	; 0
    2170:	01 10       	cpse	r0, r1
    2172:	d8 f7       	brcc	.-10     	; 0x216a <strnlen_P+0x2>
    2174:	80 95       	com	r24
    2176:	90 95       	com	r25
    2178:	8e 0f       	add	r24, r30
    217a:	9f 1f       	adc	r25, r31
    217c:	08 95       	ret

0000217e <strnlen>:
    217e:	fc 01       	movw	r30, r24
    2180:	61 50       	subi	r22, 0x01	; 1
    2182:	70 40       	sbci	r23, 0x00	; 0
    2184:	01 90       	ld	r0, Z+
    2186:	01 10       	cpse	r0, r1
    2188:	d8 f7       	brcc	.-10     	; 0x2180 <strnlen+0x2>
    218a:	80 95       	com	r24
    218c:	90 95       	com	r25
    218e:	8e 0f       	add	r24, r30
    2190:	9f 1f       	adc	r25, r31
    2192:	08 95       	ret

00002194 <fputc>:
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	fb 01       	movw	r30, r22
    219e:	23 81       	ldd	r18, Z+3	; 0x03
    21a0:	21 fd       	sbrc	r18, 1
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <fputc+0x16>
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	2c c0       	rjmp	.+88     	; 0x2202 <fputc+0x6e>
    21aa:	22 ff       	sbrs	r18, 2
    21ac:	16 c0       	rjmp	.+44     	; 0x21da <fputc+0x46>
    21ae:	46 81       	ldd	r20, Z+6	; 0x06
    21b0:	57 81       	ldd	r21, Z+7	; 0x07
    21b2:	24 81       	ldd	r18, Z+4	; 0x04
    21b4:	35 81       	ldd	r19, Z+5	; 0x05
    21b6:	42 17       	cp	r20, r18
    21b8:	53 07       	cpc	r21, r19
    21ba:	44 f4       	brge	.+16     	; 0x21cc <fputc+0x38>
    21bc:	a0 81       	ld	r26, Z
    21be:	b1 81       	ldd	r27, Z+1	; 0x01
    21c0:	9d 01       	movw	r18, r26
    21c2:	2f 5f       	subi	r18, 0xFF	; 255
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	20 83       	st	Z, r18
    21c8:	31 83       	std	Z+1, r19	; 0x01
    21ca:	8c 93       	st	X, r24
    21cc:	26 81       	ldd	r18, Z+6	; 0x06
    21ce:	37 81       	ldd	r19, Z+7	; 0x07
    21d0:	2f 5f       	subi	r18, 0xFF	; 255
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	26 83       	std	Z+6, r18	; 0x06
    21d6:	37 83       	std	Z+7, r19	; 0x07
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <fputc+0x6e>
    21da:	8b 01       	movw	r16, r22
    21dc:	ec 01       	movw	r28, r24
    21de:	fb 01       	movw	r30, r22
    21e0:	00 84       	ldd	r0, Z+8	; 0x08
    21e2:	f1 85       	ldd	r31, Z+9	; 0x09
    21e4:	e0 2d       	mov	r30, r0
    21e6:	09 95       	icall
    21e8:	89 2b       	or	r24, r25
    21ea:	e1 f6       	brne	.-72     	; 0x21a4 <fputc+0x10>
    21ec:	d8 01       	movw	r26, r16
    21ee:	16 96       	adiw	r26, 0x06	; 6
    21f0:	8d 91       	ld	r24, X+
    21f2:	9c 91       	ld	r25, X
    21f4:	17 97       	sbiw	r26, 0x07	; 7
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	16 96       	adiw	r26, 0x06	; 6
    21fa:	8d 93       	st	X+, r24
    21fc:	9c 93       	st	X, r25
    21fe:	17 97       	sbiw	r26, 0x07	; 7
    2200:	ce 01       	movw	r24, r28
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	08 95       	ret

0000220c <__ultoa_invert>:
    220c:	fa 01       	movw	r30, r20
    220e:	aa 27       	eor	r26, r26
    2210:	28 30       	cpi	r18, 0x08	; 8
    2212:	51 f1       	breq	.+84     	; 0x2268 <__ultoa_invert+0x5c>
    2214:	20 31       	cpi	r18, 0x10	; 16
    2216:	81 f1       	breq	.+96     	; 0x2278 <__ultoa_invert+0x6c>
    2218:	e8 94       	clt
    221a:	6f 93       	push	r22
    221c:	6e 7f       	andi	r22, 0xFE	; 254
    221e:	6e 5f       	subi	r22, 0xFE	; 254
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	8f 4f       	sbci	r24, 0xFF	; 255
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	af 4f       	sbci	r26, 0xFF	; 255
    2228:	b1 e0       	ldi	r27, 0x01	; 1
    222a:	3e d0       	rcall	.+124    	; 0x22a8 <__ultoa_invert+0x9c>
    222c:	b4 e0       	ldi	r27, 0x04	; 4
    222e:	3c d0       	rcall	.+120    	; 0x22a8 <__ultoa_invert+0x9c>
    2230:	67 0f       	add	r22, r23
    2232:	78 1f       	adc	r23, r24
    2234:	89 1f       	adc	r24, r25
    2236:	9a 1f       	adc	r25, r26
    2238:	a1 1d       	adc	r26, r1
    223a:	68 0f       	add	r22, r24
    223c:	79 1f       	adc	r23, r25
    223e:	8a 1f       	adc	r24, r26
    2240:	91 1d       	adc	r25, r1
    2242:	a1 1d       	adc	r26, r1
    2244:	6a 0f       	add	r22, r26
    2246:	71 1d       	adc	r23, r1
    2248:	81 1d       	adc	r24, r1
    224a:	91 1d       	adc	r25, r1
    224c:	a1 1d       	adc	r26, r1
    224e:	20 d0       	rcall	.+64     	; 0x2290 <__ultoa_invert+0x84>
    2250:	09 f4       	brne	.+2      	; 0x2254 <__ultoa_invert+0x48>
    2252:	68 94       	set
    2254:	3f 91       	pop	r19
    2256:	2a e0       	ldi	r18, 0x0A	; 10
    2258:	26 9f       	mul	r18, r22
    225a:	11 24       	eor	r1, r1
    225c:	30 19       	sub	r19, r0
    225e:	30 5d       	subi	r19, 0xD0	; 208
    2260:	31 93       	st	Z+, r19
    2262:	de f6       	brtc	.-74     	; 0x221a <__ultoa_invert+0xe>
    2264:	cf 01       	movw	r24, r30
    2266:	08 95       	ret
    2268:	46 2f       	mov	r20, r22
    226a:	47 70       	andi	r20, 0x07	; 7
    226c:	40 5d       	subi	r20, 0xD0	; 208
    226e:	41 93       	st	Z+, r20
    2270:	b3 e0       	ldi	r27, 0x03	; 3
    2272:	0f d0       	rcall	.+30     	; 0x2292 <__ultoa_invert+0x86>
    2274:	c9 f7       	brne	.-14     	; 0x2268 <__ultoa_invert+0x5c>
    2276:	f6 cf       	rjmp	.-20     	; 0x2264 <__ultoa_invert+0x58>
    2278:	46 2f       	mov	r20, r22
    227a:	4f 70       	andi	r20, 0x0F	; 15
    227c:	40 5d       	subi	r20, 0xD0	; 208
    227e:	4a 33       	cpi	r20, 0x3A	; 58
    2280:	18 f0       	brcs	.+6      	; 0x2288 <__ultoa_invert+0x7c>
    2282:	49 5d       	subi	r20, 0xD9	; 217
    2284:	31 fd       	sbrc	r19, 1
    2286:	40 52       	subi	r20, 0x20	; 32
    2288:	41 93       	st	Z+, r20
    228a:	02 d0       	rcall	.+4      	; 0x2290 <__ultoa_invert+0x84>
    228c:	a9 f7       	brne	.-22     	; 0x2278 <__ultoa_invert+0x6c>
    228e:	ea cf       	rjmp	.-44     	; 0x2264 <__ultoa_invert+0x58>
    2290:	b4 e0       	ldi	r27, 0x04	; 4
    2292:	a6 95       	lsr	r26
    2294:	97 95       	ror	r25
    2296:	87 95       	ror	r24
    2298:	77 95       	ror	r23
    229a:	67 95       	ror	r22
    229c:	ba 95       	dec	r27
    229e:	c9 f7       	brne	.-14     	; 0x2292 <__ultoa_invert+0x86>
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	61 05       	cpc	r22, r1
    22a4:	71 05       	cpc	r23, r1
    22a6:	08 95       	ret
    22a8:	9b 01       	movw	r18, r22
    22aa:	ac 01       	movw	r20, r24
    22ac:	0a 2e       	mov	r0, r26
    22ae:	06 94       	lsr	r0
    22b0:	57 95       	ror	r21
    22b2:	47 95       	ror	r20
    22b4:	37 95       	ror	r19
    22b6:	27 95       	ror	r18
    22b8:	ba 95       	dec	r27
    22ba:	c9 f7       	brne	.-14     	; 0x22ae <__ultoa_invert+0xa2>
    22bc:	62 0f       	add	r22, r18
    22be:	73 1f       	adc	r23, r19
    22c0:	84 1f       	adc	r24, r20
    22c2:	95 1f       	adc	r25, r21
    22c4:	a0 1d       	adc	r26, r0
    22c6:	08 95       	ret

000022c8 <eeprom_read_block>:
    22c8:	60 50       	subi	r22, 0x00	; 0
    22ca:	7c 4e       	sbci	r23, 0xEC	; 236
    22cc:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <memcpy>

000022d0 <eeprom_read_byte>:
    22d0:	03 d0       	rcall	.+6      	; 0x22d8 <eeprom_mapen>
    22d2:	80 81       	ld	r24, Z
    22d4:	99 27       	eor	r25, r25
    22d6:	08 95       	ret

000022d8 <eeprom_mapen>:
    22d8:	fc 01       	movw	r30, r24
    22da:	e0 50       	subi	r30, 0x00	; 0
    22dc:	fc 4e       	sbci	r31, 0xEC	; 236
    22de:	08 95       	ret

000022e0 <eeprom_update_block>:
    22e0:	dc 01       	movw	r26, r24
    22e2:	a4 0f       	add	r26, r20
    22e4:	b5 1f       	adc	r27, r21
    22e6:	41 50       	subi	r20, 0x01	; 1
    22e8:	50 40       	sbci	r21, 0x00	; 0
    22ea:	48 f0       	brcs	.+18     	; 0x22fe <eeprom_update_block+0x1e>
    22ec:	cb 01       	movw	r24, r22
    22ee:	84 0f       	add	r24, r20
    22f0:	95 1f       	adc	r25, r21
    22f2:	2e 91       	ld	r18, -X
    22f4:	0e 94 81 11 	call	0x2302	; 0x2302 <eeprom_update_r18>
    22f8:	41 50       	subi	r20, 0x01	; 1
    22fa:	50 40       	sbci	r21, 0x00	; 0
    22fc:	d0 f7       	brcc	.-12     	; 0x22f2 <eeprom_update_block+0x12>
    22fe:	08 95       	ret

00002300 <eeprom_update_byte>:
    2300:	26 2f       	mov	r18, r22

00002302 <eeprom_update_r18>:
    2302:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <eeprom_mapen>
    2306:	00 80       	ld	r0, Z
    2308:	02 16       	cp	r0, r18
    230a:	19 f0       	breq	.+6      	; 0x2312 <eeprom_update_r18+0x10>
    230c:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_write_r18>
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	08 95       	ret

00002316 <eeprom_write_byte>:
    2316:	26 2f       	mov	r18, r22

00002318 <eeprom_write_r18>:
    2318:	af 93       	push	r26
    231a:	bf 93       	push	r27
    231c:	e0 e0       	ldi	r30, 0x00	; 0
    231e:	f0 e1       	ldi	r31, 0x10	; 16
    2320:	32 81       	ldd	r19, Z+2	; 0x02
    2322:	31 fd       	sbrc	r19, 1
    2324:	fd cf       	rjmp	.-6      	; 0x2320 <eeprom_write_r18+0x8>
    2326:	dc 01       	movw	r26, r24
    2328:	a0 50       	subi	r26, 0x00	; 0
    232a:	bc 4e       	sbci	r27, 0xEC	; 236
    232c:	2c 93       	st	X, r18
    232e:	2d e9       	ldi	r18, 0x9D	; 157
    2330:	24 bf       	out	0x34, r18	; 52
    2332:	23 e0       	ldi	r18, 0x03	; 3
    2334:	20 83       	st	Z, r18
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	bf 91       	pop	r27
    233a:	af 91       	pop	r26
    233c:	08 95       	ret

0000233e <__prologue_saves__>:
    233e:	2f 92       	push	r2
    2340:	3f 92       	push	r3
    2342:	4f 92       	push	r4
    2344:	5f 92       	push	r5
    2346:	6f 92       	push	r6
    2348:	7f 92       	push	r7
    234a:	8f 92       	push	r8
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	ca 1b       	sub	r28, r26
    2368:	db 0b       	sbc	r29, r27
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	09 94       	ijmp

00002370 <__epilogue_restores__>:
    2370:	2a 88       	ldd	r2, Y+18	; 0x12
    2372:	39 88       	ldd	r3, Y+17	; 0x11
    2374:	48 88       	ldd	r4, Y+16	; 0x10
    2376:	5f 84       	ldd	r5, Y+15	; 0x0f
    2378:	6e 84       	ldd	r6, Y+14	; 0x0e
    237a:	7d 84       	ldd	r7, Y+13	; 0x0d
    237c:	8c 84       	ldd	r8, Y+12	; 0x0c
    237e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2380:	aa 84       	ldd	r10, Y+10	; 0x0a
    2382:	b9 84       	ldd	r11, Y+9	; 0x09
    2384:	c8 84       	ldd	r12, Y+8	; 0x08
    2386:	df 80       	ldd	r13, Y+7	; 0x07
    2388:	ee 80       	ldd	r14, Y+6	; 0x06
    238a:	fd 80       	ldd	r15, Y+5	; 0x05
    238c:	0c 81       	ldd	r16, Y+4	; 0x04
    238e:	1b 81       	ldd	r17, Y+3	; 0x03
    2390:	aa 81       	ldd	r26, Y+2	; 0x02
    2392:	b9 81       	ldd	r27, Y+1	; 0x01
    2394:	ce 0f       	add	r28, r30
    2396:	d1 1d       	adc	r29, r1
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	ed 01       	movw	r28, r26
    239e:	08 95       	ret

000023a0 <memcpy>:
    23a0:	fb 01       	movw	r30, r22
    23a2:	dc 01       	movw	r26, r24
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <memcpy+0xa>
    23a6:	01 90       	ld	r0, Z+
    23a8:	0d 92       	st	X+, r0
    23aa:	41 50       	subi	r20, 0x01	; 1
    23ac:	50 40       	sbci	r21, 0x00	; 0
    23ae:	d8 f7       	brcc	.-10     	; 0x23a6 <memcpy+0x6>
    23b0:	08 95       	ret

000023b2 <_exit>:
    23b2:	f8 94       	cli

000023b4 <__stop_program>:
    23b4:	ff cf       	rjmp	.-2      	; 0x23b4 <__stop_program>
