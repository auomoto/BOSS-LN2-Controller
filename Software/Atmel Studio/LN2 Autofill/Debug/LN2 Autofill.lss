
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00002608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000176  000063fe  000023fe  00002492  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000cc  00802800  00802800  00002608  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000318  00000000  00000000  000026a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a60  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000342d  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000250b  00000000  00000000  0000c84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000059c  00000000  00000000  0000ed58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f2c  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000be6  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  00011e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_17>
      48:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	40 01       	movw	r8, r0
      a2:	5e 01       	movw	r10, r28
      a4:	35 02       	muls	r19, r21
      a6:	6b 02       	muls	r22, r27
      a8:	a3 02       	muls	r26, r19
      aa:	db 02       	muls	r29, r27
      ac:	fc 02       	muls	r31, r28
      ae:	2b 03       	fmul	r18, r19

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	28 e2       	ldi	r18, 0x28	; 40
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	ac 3c       	cpi	r26, 0xCC	; 204
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 52 06 	call	0xca4	; 0xca4 <main>
      d0:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      d8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      dc:	82 30       	cpi	r24, 0x02	; 2
      de:	f9 f0       	breq	.+62     	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
      e0:	18 f4       	brcc	.+6      	; 0xe8 <handle_button+0x10>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	31 f0       	breq	.+12     	; 0xf2 <handle_button+0x1a>
      e6:	4e c0       	rjmp	.+156    	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	79 f1       	breq	.+94     	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
      ec:	84 30       	cpi	r24, 0x04	; 4
      ee:	e9 f1       	breq	.+122    	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
      f0:	49 c0       	rjmp	.+146    	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {
      f2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
      f6:	88 23       	and	r24, r24
      f8:	24 f4       	brge	.+8      	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
				CLOSEVALVE(BLUVALVE);
      fa:	80 e8       	ldi	r24, 0x80	; 128
      fc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     100:	41 c0       	rjmp	.+130    	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			} else if (BLUENABLED) {
     102:	8c e0       	ldi	r24, 0x0C	; 12
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     10a:	88 23       	and	r24, r24
     10c:	d9 f1       	breq	.+118    	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
				OPENVALVE(BLUVALVE);
     10e:	80 e8       	ldi	r24, 0x80	; 128
     110:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     114:	e4 e0       	ldi	r30, 0x04	; 4
     116:	f8 e2       	ldi	r31, 0x28	; 40
     118:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     11a:	17 86       	std	Z+15, r1	; 0x0f
     11c:	33 c0       	rjmp	.+102    	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {
     11e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     122:	86 ff       	sbrs	r24, 6
     124:	04 c0       	rjmp	.+8      	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
				CLOSEVALVE(REDVALVE);
     126:	80 e4       	ldi	r24, 0x40	; 64
     128:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     12c:	2b c0       	rjmp	.+86     	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			} else if (REDENABLED) {
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     136:	88 23       	and	r24, r24
     138:	29 f1       	breq	.+74     	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
				OPENVALVE(REDVALVE);
     13a:	80 e4       	ldi	r24, 0x40	; 64
     13c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     140:	e4 e0       	ldi	r30, 0x04	; 4
     142:	f8 e2       	ldi	r31, 0x28	; 40
     144:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     146:	10 8a       	std	Z+16, r1	; 0x10
     148:	1d c0       	rjmp	.+58     	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {
     14a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     14e:	85 ff       	sbrs	r24, 5
     150:	04 c0       	rjmp	.+8      	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
				CLOSEVALVE(BUFVALVE);
     152:	80 e2       	ldi	r24, 0x20	; 32
     154:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     158:	15 c0       	rjmp	.+42     	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			} else {
				OPENVALVE(BUFVALVE);
     15a:	80 e2       	ldi	r24, 0x20	; 32
     15c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     160:	e4 e0       	ldi	r30, 0x04	; 4
     162:	f8 e2       	ldi	r31, 0x28	; 40
     164:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     166:	11 8a       	std	Z+17, r1	; 0x11
     168:	0d c0       	rjmp	.+26     	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {
     16a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     16e:	84 ff       	sbrs	r24, 4
     170:	04 c0       	rjmp	.+8      	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
				CLOSEVALVE(SUPVALVE);
     172:	80 e1       	ldi	r24, 0x10	; 16
     174:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     178:	05 c0       	rjmp	.+10     	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
			} else {
				OPENVALVE(SUPVALVE);
     17a:	80 e1       	ldi	r24, 0x10	; 16
     17c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
     180:	10 92 12 28 	sts	0x2812, r1	; 0x802812 <status+0xe>

		default:
			break;
	}

	button_pushed = FALSE;
     184:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>

	if (screen_value == SCRVALVES) {
     188:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	11 f4       	brne	.+4      	; 0x194 <__EEPROM_REGION_LENGTH__+0x94>
		display(SCRVALVES);
     190:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
     194:	08 95       	ret

00000196 <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control switches
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     196:	e0 e2       	ldi	r30, 0x20	; 32
     198:	f4 e0       	ldi	r31, 0x04	; 4
     19a:	8b e0       	ldi	r24, 0x0B	; 11
     19c:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     19e:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     1a0:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     1a2:	81 8b       	std	Z+17, r24	; 0x11
     1a4:	08 95       	ret

000001a6 <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     1b2:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1b6:	82 ff       	sbrs	r24, 2
     1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     1ba:	84 e0       	ldi	r24, 0x04	; 4
     1bc:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     1c6:	20 c0       	rjmp	.+64     	; 0x208 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     1c8:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1cc:	83 ff       	sbrs	r24, 3
     1ce:	07 c0       	rjmp	.+14     	; 0x1de <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     1d0:	88 e0       	ldi	r24, 0x08	; 8
     1d2:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     1dc:	15 c0       	rjmp	.+42     	; 0x208 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     1de:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1e2:	80 ff       	sbrs	r24, 0
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     1f2:	0a c0       	rjmp	.+20     	; 0x208 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     1f4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1f8:	81 ff       	sbrs	r24, 1
     1fa:	06 c0       	rjmp	.+12     	; 0x208 <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     202:	84 e0       	ldi	r24, 0x04	; 4
     204:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     208:	8f 91       	pop	r24
     20a:	0f 90       	pop	r0
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	0f 90       	pop	r0
     210:	1f 90       	pop	r1
     212:	18 95       	reti

00000214 <get_VERSION>:
------------------------------------------------------------------------------*/

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     214:	4a e0       	ldi	r20, 0x0A	; 10
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	0e 94 88 11 	call	0x2310	; 0x2310 <eeprom_read_block>
     220:	08 95       	ret

00000222 <update_VERSION>:

}

void update_VERSION(void)
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	2b 97       	sbiw	r28, 0x0b	; 11
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     230:	8b e0       	ldi	r24, 0x0B	; 11
     232:	ee ef       	ldi	r30, 0xFE	; 254
     234:	f3 e6       	ldi	r31, 0x63	; 99
     236:	de 01       	movw	r26, r28
     238:	11 96       	adiw	r26, 0x01	; 1
     23a:	01 90       	ld	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	8a 95       	dec	r24
     240:	e1 f7       	brne	.-8      	; 0x23a <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     242:	4a e0       	ldi	r20, 0x0A	; 10
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 94 11 	call	0x2328	; 0x2328 <eeprom_update_block>

}
     252:	2b 96       	adiw	r28, 0x0b	; 11
     254:	cd bf       	out	0x3d, r28	; 61
     256:	de bf       	out	0x3e, r29	; 62
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	aa 97       	sbiw	r28, 0x2a	; 42
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	88 30       	cpi	r24, 0x08	; 8
     270:	91 05       	cpc	r25, r1
     272:	08 f0       	brcs	.+2      	; 0x276 <display+0x18>
     274:	1f c2       	rjmp	.+1086   	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     276:	fc 01       	movw	r30, r24
     278:	e0 5b       	subi	r30, 0xB0	; 176
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <__tablejump2__>
		case SCRVERSION:
			strcpy(line1, "  LN2 Autofill");
     280:	8f e0       	ldi	r24, 0x0F	; 15
     282:	e9 e0       	ldi	r30, 0x09	; 9
     284:	f4 e6       	ldi	r31, 0x64	; 100
     286:	de 01       	movw	r26, r28
     288:	11 96       	adiw	r26, 0x01	; 1
     28a:	01 90       	ld	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	8a 95       	dec	r24
     290:	e1 f7       	brne	.-8      	; 0x28a <display+0x2c>
			get_VERSION(status.version);
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	98 e2       	ldi	r25, 0x28	; 40
     296:	0e 94 0a 01 	call	0x214	; 0x214 <get_VERSION>
			strcpy(line2, "   ");
     29a:	80 e2       	ldi	r24, 0x20	; 32
     29c:	90 e2       	ldi	r25, 0x20	; 32
     29e:	8e 8b       	std	Y+22, r24	; 0x16
     2a0:	9f 8b       	std	Y+23, r25	; 0x17
     2a2:	80 e2       	ldi	r24, 0x20	; 32
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	88 8f       	std	Y+24, r24	; 0x18
     2a8:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     2aa:	64 e0       	ldi	r22, 0x04	; 4
     2ac:	78 e2       	ldi	r23, 0x28	; 40
     2ae:	ce 01       	movw	r24, r28
     2b0:	46 96       	adiw	r24, 0x16	; 22
     2b2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>
			screen_value = SCRVERSION;
     2b6:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <screen_value>
			break;
     2ba:	10 c2       	rjmp	.+1056   	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
	
		case SCRVALVES:
			strcpy(line1, "SUP BUF RED BLU");
     2bc:	80 e1       	ldi	r24, 0x10	; 16
     2be:	e8 e1       	ldi	r30, 0x18	; 24
     2c0:	f4 e6       	ldi	r31, 0x64	; 100
     2c2:	de 01       	movw	r26, r28
     2c4:	11 96       	adiw	r26, 0x01	; 1
     2c6:	01 90       	ld	r0, Z+
     2c8:	0d 92       	st	X+, r0
     2ca:	8a 95       	dec	r24
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <display+0x68>
			if (SUPVALVEOPEN) {
     2ce:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     2d2:	84 ff       	sbrs	r24, 4
     2d4:	0a c0       	rjmp	.+20     	; 0x2ea <display+0x8c>
				strcpy(line2, " O  ");
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	e8 e2       	ldi	r30, 0x28	; 40
     2da:	f4 e6       	ldi	r31, 0x64	; 100
     2dc:	de 01       	movw	r26, r28
     2de:	56 96       	adiw	r26, 0x16	; 22
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <display+0x82>
     2e8:	09 c0       	rjmp	.+18     	; 0x2fc <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     2ea:	85 e0       	ldi	r24, 0x05	; 5
     2ec:	ed e2       	ldi	r30, 0x2D	; 45
     2ee:	f4 e6       	ldi	r31, 0x64	; 100
     2f0:	de 01       	movw	r26, r28
     2f2:	56 96       	adiw	r26, 0x16	; 22
     2f4:	01 90       	ld	r0, Z+
     2f6:	0d 92       	st	X+, r0
     2f8:	8a 95       	dec	r24
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <display+0x96>
			}
			if (BUFVALVEOPEN) {
     2fc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     300:	85 ff       	sbrs	r24, 5
     302:	0e c0       	rjmp	.+28     	; 0x320 <display+0xc2>
				strcat(line2, " O  ");
     304:	de 01       	movw	r26, r28
     306:	56 96       	adiw	r26, 0x16	; 22
     308:	0d 90       	ld	r0, X+
     30a:	00 20       	and	r0, r0
     30c:	e9 f7       	brne	.-6      	; 0x308 <display+0xaa>
     30e:	11 97       	sbiw	r26, 0x01	; 1
     310:	85 e0       	ldi	r24, 0x05	; 5
     312:	e8 e2       	ldi	r30, 0x28	; 40
     314:	f4 e6       	ldi	r31, 0x64	; 100
     316:	01 90       	ld	r0, Z+
     318:	0d 92       	st	X+, r0
     31a:	8a 95       	dec	r24
     31c:	e1 f7       	brne	.-8      	; 0x316 <display+0xb8>
     31e:	1f c0       	rjmp	.+62     	; 0x35e <display+0x100>
			} else if (status.maxopen_BUF) {
     320:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
     324:	88 23       	and	r24, r24
     326:	71 f0       	breq	.+28     	; 0x344 <display+0xe6>
				strcat(line2, " T  ");
     328:	de 01       	movw	r26, r28
     32a:	56 96       	adiw	r26, 0x16	; 22
     32c:	0d 90       	ld	r0, X+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <display+0xce>
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	85 e0       	ldi	r24, 0x05	; 5
     336:	e2 e3       	ldi	r30, 0x32	; 50
     338:	f4 e6       	ldi	r31, 0x64	; 100
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <display+0xdc>
     342:	0d c0       	rjmp	.+26     	; 0x35e <display+0x100>
			} else {
				strcat(line2, " C  ");
     344:	de 01       	movw	r26, r28
     346:	56 96       	adiw	r26, 0x16	; 22
     348:	0d 90       	ld	r0, X+
     34a:	00 20       	and	r0, r0
     34c:	e9 f7       	brne	.-6      	; 0x348 <display+0xea>
     34e:	11 97       	sbiw	r26, 0x01	; 1
     350:	85 e0       	ldi	r24, 0x05	; 5
     352:	ed e2       	ldi	r30, 0x2D	; 45
     354:	f4 e6       	ldi	r31, 0x64	; 100
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	8a 95       	dec	r24
     35c:	e1 f7       	brne	.-8      	; 0x356 <display+0xf8>
			}
			if (!REDENABLED) {
     35e:	8d e0       	ldi	r24, 0x0D	; 13
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     366:	81 11       	cpse	r24, r1
     368:	0e c0       	rjmp	.+28     	; 0x386 <display+0x128>
				strcat(line2, " X  ");
     36a:	de 01       	movw	r26, r28
     36c:	56 96       	adiw	r26, 0x16	; 22
     36e:	0d 90       	ld	r0, X+
     370:	00 20       	and	r0, r0
     372:	e9 f7       	brne	.-6      	; 0x36e <display+0x110>
     374:	11 97       	sbiw	r26, 0x01	; 1
     376:	85 e0       	ldi	r24, 0x05	; 5
     378:	e7 e3       	ldi	r30, 0x37	; 55
     37a:	f4 e6       	ldi	r31, 0x64	; 100
     37c:	01 90       	ld	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	8a 95       	dec	r24
     382:	e1 f7       	brne	.-8      	; 0x37c <display+0x11e>
     384:	31 c0       	rjmp	.+98     	; 0x3e8 <display+0x18a>
			} else if (REDVALVEOPEN) {
     386:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     38a:	86 ff       	sbrs	r24, 6
     38c:	0e c0       	rjmp	.+28     	; 0x3aa <display+0x14c>
				strcat(line2, " O  ");
     38e:	de 01       	movw	r26, r28
     390:	56 96       	adiw	r26, 0x16	; 22
     392:	0d 90       	ld	r0, X+
     394:	00 20       	and	r0, r0
     396:	e9 f7       	brne	.-6      	; 0x392 <display+0x134>
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	85 e0       	ldi	r24, 0x05	; 5
     39c:	e8 e2       	ldi	r30, 0x28	; 40
     39e:	f4 e6       	ldi	r31, 0x64	; 100
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	8a 95       	dec	r24
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <display+0x142>
     3a8:	1f c0       	rjmp	.+62     	; 0x3e8 <display+0x18a>
			} else if (status.maxopen_RED) {
     3aa:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
     3ae:	88 23       	and	r24, r24
     3b0:	71 f0       	breq	.+28     	; 0x3ce <display+0x170>
				strcat(line2, " T  ");
     3b2:	de 01       	movw	r26, r28
     3b4:	56 96       	adiw	r26, 0x16	; 22
     3b6:	0d 90       	ld	r0, X+
     3b8:	00 20       	and	r0, r0
     3ba:	e9 f7       	brne	.-6      	; 0x3b6 <display+0x158>
     3bc:	11 97       	sbiw	r26, 0x01	; 1
     3be:	85 e0       	ldi	r24, 0x05	; 5
     3c0:	e2 e3       	ldi	r30, 0x32	; 50
     3c2:	f4 e6       	ldi	r31, 0x64	; 100
     3c4:	01 90       	ld	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	8a 95       	dec	r24
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <display+0x166>
     3cc:	0d c0       	rjmp	.+26     	; 0x3e8 <display+0x18a>
			} else {
				strcat(line2, " C  ");
     3ce:	de 01       	movw	r26, r28
     3d0:	56 96       	adiw	r26, 0x16	; 22
     3d2:	0d 90       	ld	r0, X+
     3d4:	00 20       	and	r0, r0
     3d6:	e9 f7       	brne	.-6      	; 0x3d2 <display+0x174>
     3d8:	11 97       	sbiw	r26, 0x01	; 1
     3da:	85 e0       	ldi	r24, 0x05	; 5
     3dc:	ed e2       	ldi	r30, 0x2D	; 45
     3de:	f4 e6       	ldi	r31, 0x64	; 100
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	8a 95       	dec	r24
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <display+0x182>
			}
			if (!BLUENABLED) {
     3e8:	8c e0       	ldi	r24, 0x0C	; 12
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     3f0:	81 11       	cpse	r24, r1
     3f2:	0c c0       	rjmp	.+24     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
				strcat(line2, " X");
     3f4:	fe 01       	movw	r30, r28
     3f6:	76 96       	adiw	r30, 0x16	; 22
     3f8:	01 90       	ld	r0, Z+
     3fa:	00 20       	and	r0, r0
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <display+0x19a>
     3fe:	31 97       	sbiw	r30, 0x01	; 1
     400:	80 e2       	ldi	r24, 0x20	; 32
     402:	98 e5       	ldi	r25, 0x58	; 88
     404:	80 83       	st	Z, r24
     406:	91 83       	std	Z+1, r25	; 0x01
     408:	12 82       	std	Z+2, r1	; 0x02
     40a:	2b c0       	rjmp	.+86     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			} else if (BLUVALVEOPEN) {
     40c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     410:	88 23       	and	r24, r24
     412:	64 f4       	brge	.+24     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				strcat(line2, " O");
     414:	fe 01       	movw	r30, r28
     416:	76 96       	adiw	r30, 0x16	; 22
     418:	01 90       	ld	r0, Z+
     41a:	00 20       	and	r0, r0
     41c:	e9 f7       	brne	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     41e:	31 97       	sbiw	r30, 0x01	; 1
     420:	80 e2       	ldi	r24, 0x20	; 32
     422:	9f e4       	ldi	r25, 0x4F	; 79
     424:	80 83       	st	Z, r24
     426:	91 83       	std	Z+1, r25	; 0x01
     428:	12 82       	std	Z+2, r1	; 0x02
     42a:	1b c0       	rjmp	.+54     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			} else if (status.maxopen_BLU) {
     42c:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
     430:	88 23       	and	r24, r24
     432:	61 f0       	breq	.+24     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				strcat(line2, " T");
     434:	fe 01       	movw	r30, r28
     436:	76 96       	adiw	r30, 0x16	; 22
     438:	01 90       	ld	r0, Z+
     43a:	00 20       	and	r0, r0
     43c:	e9 f7       	brne	.-6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	80 e2       	ldi	r24, 0x20	; 32
     442:	94 e5       	ldi	r25, 0x54	; 84
     444:	80 83       	st	Z, r24
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	12 82       	std	Z+2, r1	; 0x02
     44a:	0b c0       	rjmp	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			} else {
				strcat(line2, " C");
     44c:	fe 01       	movw	r30, r28
     44e:	76 96       	adiw	r30, 0x16	; 22
     450:	01 90       	ld	r0, Z+
     452:	00 20       	and	r0, r0
     454:	e9 f7       	brne	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	80 e2       	ldi	r24, 0x20	; 32
     45a:	93 e4       	ldi	r25, 0x43	; 67
     45c:	80 83       	st	Z, r24
     45e:	91 83       	std	Z+1, r25	; 0x01
     460:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     468:	39 c1       	rjmp	.+626    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     46a:	8d e0       	ldi	r24, 0x0D	; 13
     46c:	ec e3       	ldi	r30, 0x3C	; 60
     46e:	f4 e6       	ldi	r31, 0x64	; 100
     470:	de 01       	movw	r26, r28
     472:	11 96       	adiw	r26, 0x01	; 1
     474:	01 90       	ld	r0, Z+
     476:	0d 92       	st	X+, r0
     478:	8a 95       	dec	r24
     47a:	e1 f7       	brne	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			if (status.next_fill < 2) {
     47c:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0x12>
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	98 f4       	brcc	.+38     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
				sprintf(line2, "%d minute", status.next_fill);
     484:	1f 92       	push	r1
     486:	8f 93       	push	r24
     488:	89 e4       	ldi	r24, 0x49	; 73
     48a:	94 e6       	ldi	r25, 0x64	; 100
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	ce 01       	movw	r24, r28
     492:	46 96       	adiw	r24, 0x16	; 22
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	12 c0       	rjmp	.+36     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     4aa:	1f 92       	push	r1
     4ac:	8f 93       	push	r24
     4ae:	83 e5       	ldi	r24, 0x53	; 83
     4b0:	94 e6       	ldi	r25, 0x64	; 100
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	ce 01       	movw	r24, r28
     4b8:	46 96       	adiw	r24, 0x16	; 22
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     4d4:	03 c1       	rjmp	.+518    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     4d6:	8e e0       	ldi	r24, 0x0E	; 14
     4d8:	ee e5       	ldi	r30, 0x5E	; 94
     4da:	f4 e6       	ldi	r31, 0x64	; 100
     4dc:	de 01       	movw	r26, r28
     4de:	11 96       	adiw	r26, 0x01	; 1
     4e0:	01 90       	ld	r0, Z+
     4e2:	0d 92       	st	X+, r0
     4e4:	8a 95       	dec	r24
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
			if (FILLINTERVAL == 1) {
     4e8:	8a e0       	ldi	r24, 0x0A	; 10
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	99 f4       	brne	.+38     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
				sprintf(line2, "%d minute", FILLINTERVAL);
     4f4:	1f 92       	push	r1
     4f6:	8f 93       	push	r24
     4f8:	89 e4       	ldi	r24, 0x49	; 73
     4fa:	94 e6       	ldi	r25, 0x64	; 100
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	ce 01       	movw	r24, r28
     502:	46 96       	adiw	r24, 0x16	; 22
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	12 c0       	rjmp	.+36     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     51a:	1f 92       	push	r1
     51c:	8f 93       	push	r24
     51e:	83 e5       	ldi	r24, 0x53	; 83
     520:	94 e6       	ldi	r25, 0x64	; 100
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	ce 01       	movw	r24, r28
     528:	46 96       	adiw	r24, 0x16	; 22
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     544:	cb c0       	rjmp	.+406    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
			
		case SCRMAXOPENTIME:
			strcpy(line1, "Max open time");
     546:	8e e0       	ldi	r24, 0x0E	; 14
     548:	ec e6       	ldi	r30, 0x6C	; 108
     54a:	f4 e6       	ldi	r31, 0x64	; 100
     54c:	de 01       	movw	r26, r28
     54e:	11 96       	adiw	r26, 0x01	; 1
     550:	01 90       	ld	r0, Z+
     552:	0d 92       	st	X+, r0
     554:	8a 95       	dec	r24
     556:	e1 f7       	brne	.-8      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
			if (MAXOPENTIME < 2) {
     558:	8b e0       	ldi	r24, 0x0B	; 11
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     560:	82 30       	cpi	r24, 0x02	; 2
     562:	98 f4       	brcc	.+38     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
				sprintf(line2, "%d minute", MAXOPENTIME);
     564:	1f 92       	push	r1
     566:	8f 93       	push	r24
     568:	89 e4       	ldi	r24, 0x49	; 73
     56a:	94 e6       	ldi	r25, 0x64	; 100
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	ce 01       	movw	r24, r28
     572:	46 96       	adiw	r24, 0x16	; 22
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	12 c0       	rjmp	.+36     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     58a:	1f 92       	push	r1
     58c:	8f 93       	push	r24
     58e:	83 e5       	ldi	r24, 0x53	; 83
     590:	94 e6       	ldi	r25, 0x64	; 100
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	ce 01       	movw	r24, r28
     598:	46 96       	adiw	r24, 0x16	; 22
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     5b4:	93 c0       	rjmp	.+294    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>

		case SCRPRESSURE:
			strcpy(line1, "LN2 pressure");
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	ea e7       	ldi	r30, 0x7A	; 122
     5ba:	f4 e6       	ldi	r31, 0x64	; 100
     5bc:	de 01       	movw	r26, r28
     5be:	11 96       	adiw	r26, 0x01	; 1
     5c0:	01 90       	ld	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	8a 95       	dec	r24
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
			sprintf(line2, "%d kPa", status.pressure);
     5c8:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x14>
     5cc:	1f 92       	push	r1
     5ce:	8f 93       	push	r24
     5d0:	87 e8       	ldi	r24, 0x87	; 135
     5d2:	94 e6       	ldi	r25, 0x64	; 100
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	ce 01       	movw	r24, r28
     5da:	46 96       	adiw	r24, 0x16	; 22
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
			screen_value = SCRPRESSURE;
     5e4:	85 e0       	ldi	r24, 0x05	; 5
     5e6:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	72 c0       	rjmp	.+228    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>

		case SCRDISABLEBLU:
			if (BLUENABLED) {
     5f8:	8c e0       	ldi	r24, 0x0C	; 12
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     600:	88 23       	and	r24, r24
     602:	99 f0       	breq	.+38     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
				strcpy(line1, "BLUE is ENABLED");
     604:	80 e1       	ldi	r24, 0x10	; 16
     606:	ee e8       	ldi	r30, 0x8E	; 142
     608:	f4 e6       	ldi	r31, 0x64	; 100
     60a:	de 01       	movw	r26, r28
     60c:	11 96       	adiw	r26, 0x01	; 1
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	8a 95       	dec	r24
     614:	e1 f7       	brne	.-8      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
				strcpy(line2, "Push to disable");
     616:	80 e1       	ldi	r24, 0x10	; 16
     618:	ee e9       	ldi	r30, 0x9E	; 158
     61a:	f4 e6       	ldi	r31, 0x64	; 100
     61c:	de 01       	movw	r26, r28
     61e:	56 96       	adiw	r26, 0x16	; 22
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	8a 95       	dec	r24
     626:	e1 f7       	brne	.-8      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     628:	12 c0       	rjmp	.+36     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
			} else {
				strcpy(line1, "Blue is DISABLED");
     62a:	81 e1       	ldi	r24, 0x11	; 17
     62c:	ee ea       	ldi	r30, 0xAE	; 174
     62e:	f4 e6       	ldi	r31, 0x64	; 100
     630:	de 01       	movw	r26, r28
     632:	11 96       	adiw	r26, 0x01	; 1
     634:	01 90       	ld	r0, Z+
     636:	0d 92       	st	X+, r0
     638:	8a 95       	dec	r24
     63a:	e1 f7       	brne	.-8      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
				strcpy(line2, "Push to enable");
     63c:	8f e0       	ldi	r24, 0x0F	; 15
     63e:	ef eb       	ldi	r30, 0xBF	; 191
     640:	f4 e6       	ldi	r31, 0x64	; 100
     642:	de 01       	movw	r26, r28
     644:	56 96       	adiw	r26, 0x16	; 22
     646:	01 90       	ld	r0, Z+
     648:	0d 92       	st	X+, r0
     64a:	8a 95       	dec	r24
     64c:	e1 f7       	brne	.-8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
			}
			screen_value = SCRDISABLEBLU;
     64e:	86 e0       	ldi	r24, 0x06	; 6
     650:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     654:	43 c0       	rjmp	.+134    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>

		case SCRDISABLERED:
			if (REDENABLED) {
     656:	8d e0       	ldi	r24, 0x0D	; 13
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     65e:	88 23       	and	r24, r24
     660:	99 f0       	breq	.+38     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
				strcpy(line1, "RED is ENABLED");
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	ee ec       	ldi	r30, 0xCE	; 206
     666:	f4 e6       	ldi	r31, 0x64	; 100
     668:	de 01       	movw	r26, r28
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
				strcpy(line2, "Push to disable");
     674:	80 e1       	ldi	r24, 0x10	; 16
     676:	ee e9       	ldi	r30, 0x9E	; 158
     678:	f4 e6       	ldi	r31, 0x64	; 100
     67a:	de 01       	movw	r26, r28
     67c:	56 96       	adiw	r26, 0x16	; 22
     67e:	01 90       	ld	r0, Z+
     680:	0d 92       	st	X+, r0
     682:	8a 95       	dec	r24
     684:	e1 f7       	brne	.-8      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     686:	12 c0       	rjmp	.+36     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
			} else {
				strcpy(line1, "RED is DISABLED");
     688:	80 e1       	ldi	r24, 0x10	; 16
     68a:	ed ed       	ldi	r30, 0xDD	; 221
     68c:	f4 e6       	ldi	r31, 0x64	; 100
     68e:	de 01       	movw	r26, r28
     690:	11 96       	adiw	r26, 0x01	; 1
     692:	01 90       	ld	r0, Z+
     694:	0d 92       	st	X+, r0
     696:	8a 95       	dec	r24
     698:	e1 f7       	brne	.-8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
				strcpy(line2, "Push to enable");
     69a:	8f e0       	ldi	r24, 0x0F	; 15
     69c:	ef eb       	ldi	r30, 0xBF	; 191
     69e:	f4 e6       	ldi	r31, 0x64	; 100
     6a0:	de 01       	movw	r26, r28
     6a2:	56 96       	adiw	r26, 0x16	; 22
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
			}
			screen_value = SCRDISABLERED;
     6ac:	87 e0       	ldi	r24, 0x07	; 7
     6ae:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     6b2:	14 c0       	rjmp	.+40     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>

		default:
			strcpy(line1, "default");
     6b4:	88 e0       	ldi	r24, 0x08	; 8
     6b6:	ed ee       	ldi	r30, 0xED	; 237
     6b8:	f4 e6       	ldi	r31, 0x64	; 100
     6ba:	de 01       	movw	r26, r28
     6bc:	11 96       	adiw	r26, 0x01	; 1
     6be:	01 90       	ld	r0, Z+
     6c0:	0d 92       	st	X+, r0
     6c2:	8a 95       	dec	r24
     6c4:	e1 f7       	brne	.-8      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
			strcpy(line2, "overrun");
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	e5 ef       	ldi	r30, 0xF5	; 245
     6ca:	f4 e6       	ldi	r31, 0x64	; 100
     6cc:	de 01       	movw	r26, r28
     6ce:	56 96       	adiw	r26, 0x16	; 22
     6d0:	01 90       	ld	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	8a 95       	dec	r24
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
			screen_value = SCRVERSION;
     6d8:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	writestr_OLED(0, line2, 2);
     6ea:	42 e0       	ldi	r20, 0x02	; 2
     6ec:	be 01       	movw	r22, r28
     6ee:	6a 5e       	subi	r22, 0xEA	; 234
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
}
     6f8:	aa 96       	adiw	r28, 0x2a	; 42
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     704:	8c e0       	ldi	r24, 0x0C	; 12
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	81 11       	cpse	r24, r1
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	encoder_sensed = FALSE;
     71a:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	display(SCRDISABLEBLU);
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
     724:	08 95       	ret

00000726 <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     726:	8d e0       	ldi	r24, 0x0D	; 13
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	81 11       	cpse	r24, r1
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	8d e0       	ldi	r24, 0x0D	; 13
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	encoder_sensed = FALSE;
     73c:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	display(SCRDISABLERED);
     740:	87 e0       	ldi	r24, 0x07	; 7
     742:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
     746:	08 95       	ret

00000748 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob allows you to change the fill interval in minutes.
	Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	65 97       	sbiw	r28, 0x15	; 21
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;
     75e:	8a e0       	ldi	r24, 0x0A	; 10
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     766:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
	if (encoder_value == 1) {
     76a:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	a9 f4       	brne	.+42     	; 0x79c <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     772:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     776:	1f 92       	push	r1
     778:	8f 93       	push	r24
     77a:	89 e4       	ldi	r24, 0x49	; 73
     77c:	94 e6       	ldi	r25, 0x64	; 100
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	14 c0       	rjmp	.+40     	; 0x7c4 <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     79c:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     7a0:	1f 92       	push	r1
     7a2:	8f 93       	push	r24
     7a4:	83 e5       	ldi	r24, 0x53	; 83
     7a6:	94 e6       	ldi	r25, 0x64	; 100
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	6d ef       	ldi	r22, 0xFD	; 253
     7c8:	74 e6       	ldi	r23, 0x64	; 100
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     7d0:	42 e0       	ldi	r20, 0x02	; 2
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     7de:	0f 2e       	mov	r0, r31
     7e0:	fe ef       	ldi	r31, 0xFE	; 254
     7e2:	ef 2e       	mov	r14, r31
     7e4:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     7e6:	68 94       	set
     7e8:	ff 24       	eor	r15, r15
     7ea:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     7ec:	03 e5       	ldi	r16, 0x53	; 83
     7ee:	14 e6       	ldi	r17, 0x64	; 100
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     7f0:	32 c0       	rjmp	.+100    	; 0x856 <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     7f2:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     7f6:	87 30       	cpi	r24, 0x07	; 7
     7f8:	71 f5       	brne	.+92     	; 0x856 <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     7fa:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	18 f4       	brcc	.+6      	; 0x808 <change_FILLINT+0xc0>
				encoder_value = 2;
     802:	f0 92 1b 28 	sts	0x281B, r15	; 0x80281b <encoder_value>
     806:	06 c0       	rjmp	.+12     	; 0x814 <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     808:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     80c:	8f 3f       	cpi	r24, 0xFF	; 255
     80e:	11 f4       	brne	.+4      	; 0x814 <change_FILLINT+0xcc>
				encoder_value = 254;
     810:	e0 92 1b 28 	sts	0x281B, r14	; 0x80281b <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     814:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     818:	1f 92       	push	r1
     81a:	8f 93       	push	r24
     81c:	1f 93       	push	r17
     81e:	0f 93       	push	r16
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	8c 0f       	add	r24, r28
     826:	9d 1f       	adc	r25, r29
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	6e e0       	ldi	r22, 0x0E	; 14
     834:	75 e6       	ldi	r23, 0x65	; 101
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     83c:	4f 2d       	mov	r20, r15
     83e:	be 01       	movw	r22, r28
     840:	6f 5f       	subi	r22, 0xFF	; 255
     842:	7f 4f       	sbci	r23, 0xFF	; 255
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     856:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     85a:	85 30       	cpi	r24, 0x05	; 5
     85c:	51 f6       	brne	.-108    	; 0x7f2 <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     85e:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     862:	60 91 1b 28 	lds	r22, 0x281B	; 0x80281b <encoder_value>
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     86e:	8b e0       	ldi	r24, 0x0B	; 11
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     876:	18 2f       	mov	r17, r24
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     880:	18 17       	cp	r17, r24
     882:	30 f0       	brcs	.+12     	; 0x890 <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     884:	6f ef       	ldi	r22, 0xFF	; 255
     886:	68 0f       	add	r22, r24
     888:	8b e0       	ldi	r24, 0x0B	; 11
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	}
	display(SCRFILLINT);
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
	
}
     896:	65 96       	adiw	r28, 0x15	; 21
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	08 95       	ret

000008aa <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	65 97       	sbiw	r28, 0x15	; 21
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;
     8c4:	8b e0       	ldi	r24, 0x0B	; 11
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     8cc:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
	if (encoder_value == 1) {
     8d0:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	a9 f4       	brne	.+42     	; 0x902 <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     8d8:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8dc:	1f 92       	push	r1
     8de:	8f 93       	push	r24
     8e0:	89 e4       	ldi	r24, 0x49	; 73
     8e2:	94 e6       	ldi	r25, 0x64	; 100
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	ce 01       	movw	r24, r28
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	14 c0       	rjmp	.+40     	; 0x92a <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     902:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     906:	1f 92       	push	r1
     908:	8f 93       	push	r24
     90a:	83 e5       	ldi	r24, 0x53	; 83
     90c:	94 e6       	ldi	r25, 0x64	; 100
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	6e e1       	ldi	r22, 0x1E	; 30
     92e:	75 e6       	ldi	r23, 0x65	; 101
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     936:	42 e0       	ldi	r20, 0x02	; 2
     938:	be 01       	movw	r22, r28
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     944:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     946:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     948:	0f 2e       	mov	r0, r31
     94a:	f3 e5       	ldi	r31, 0x53	; 83
     94c:	ef 2e       	mov	r14, r31
     94e:	f4 e6       	ldi	r31, 0x64	; 100
     950:	ff 2e       	mov	r15, r31
     952:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     954:	0f 2e       	mov	r0, r31
     956:	f9 e4       	ldi	r31, 0x49	; 73
     958:	cf 2e       	mov	r12, r31
     95a:	f4 e6       	ldi	r31, 0x64	; 100
     95c:	df 2e       	mov	r13, r31
     95e:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     960:	57 c0       	rjmp	.+174    	; 0xa10 <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     962:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     966:	87 30       	cpi	r24, 0x07	; 7
     968:	09 f0       	breq	.+2      	; 0x96c <change_MAXOPENTIME+0xc2>
     96a:	52 c0       	rjmp	.+164    	; 0xa10 <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     96c:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     970:	81 11       	cpse	r24, r1
     972:	03 c0       	rjmp	.+6      	; 0x97a <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     974:	10 93 1b 28 	sts	0x281B, r17	; 0x80281b <encoder_value>
     978:	06 c0       	rjmp	.+12     	; 0x986 <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     97a:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     97e:	8f 3f       	cpi	r24, 0xFF	; 255
     980:	11 f4       	brne	.+4      	; 0x986 <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     982:	00 93 1b 28 	sts	0x281B, r16	; 0x80281b <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     98e:	90 91 1b 28 	lds	r25, 0x281B	; 0x80281b <encoder_value>
     992:	98 17       	cp	r25, r24
     994:	18 f0       	brcs	.+6      	; 0x99c <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     996:	81 50       	subi	r24, 0x01	; 1
     998:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			}
			if (encoder_value == 1) {
     99c:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	a9 f4       	brne	.+42     	; 0x9ce <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     9a4:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     9a8:	1f 92       	push	r1
     9aa:	8f 93       	push	r24
     9ac:	df 92       	push	r13
     9ae:	cf 92       	push	r12
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	8c 0f       	add	r24, r28
     9b6:	9d 1f       	adc	r25, r29
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	14 c0       	rjmp	.+40     	; 0x9f6 <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     9ce:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     9d2:	1f 92       	push	r1
     9d4:	8f 93       	push	r24
     9d6:	ff 92       	push	r15
     9d8:	ef 92       	push	r14
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	8c 0f       	add	r24, r28
     9e0:	9d 1f       	adc	r25, r29
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     9f6:	41 2f       	mov	r20, r17
     9f8:	6e e1       	ldi	r22, 0x1E	; 30
     9fa:	75 e6       	ldi	r23, 0x65	; 101
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	be 01       	movw	r22, r28
     a06:	6f 5f       	subi	r22, 0xFF	; 255
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a10:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     a14:	85 30       	cpi	r24, 0x05	; 5
     a16:	09 f0       	breq	.+2      	; 0xa1a <change_MAXOPENTIME+0x170>
     a18:	a4 cf       	rjmp	.-184    	; 0x962 <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     a1a:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     a1e:	60 91 1b 28 	lds	r22, 0x281B	; 0x80281b <encoder_value>
     a22:	8b e0       	ldi	r24, 0x0B	; 11
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 a4 11 	call	0x2348	; 0x2348 <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	0e 94 2f 01 	call	0x25e	; 0x25e <display>

}
     a30:	65 96       	adiw	r28, 0x15	; 21
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	08 95       	ret

00000a48 <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     a48:	e0 e4       	ldi	r30, 0x40	; 64
     a4a:	f4 e0       	ldi	r31, 0x04	; 4
     a4c:	8b e0       	ldi	r24, 0x0B	; 11
     a4e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     a50:	98 e0       	ldi	r25, 0x08	; 8
     a52:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     a54:	81 8b       	std	Z+17, r24	; 0x11
     a56:	08 95       	ret

00000a58 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     a60:	88 23       	and	r24, r24
     a62:	79 f0       	breq	.+30     	; 0xa82 <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     a64:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a68:	88 23       	and	r24, r24
     a6a:	5c f0       	brlt	.+22     	; 0xa82 <start_FILL+0x2a>
     a6c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     a70:	80 ff       	sbrs	r24, 0
     a72:	07 c0       	rjmp	.+14     	; 0xa82 <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     a7a:	e4 e0       	ldi	r30, 0x04	; 4
     a7c:	f8 e2       	ldi	r31, 0x28	; 40
     a7e:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     a80:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     a8a:	88 23       	and	r24, r24
     a8c:	79 f0       	breq	.+30     	; 0xaac <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     a8e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a92:	86 fd       	sbrc	r24, 6
     a94:	0b c0       	rjmp	.+22     	; 0xaac <start_FILL+0x54>
     a96:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     a9a:	81 ff       	sbrs	r24, 1
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     a9e:	80 e4       	ldi	r24, 0x40	; 64
     aa0:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     aa4:	e4 e0       	ldi	r30, 0x04	; 4
     aa6:	f8 e2       	ldi	r31, 0x28	; 40
     aa8:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     aaa:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     aac:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	11 f4       	brne	.+4      	; 0xab8 <start_FILL+0x60>
		display(SCRVALVES);
     ab4:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
	}
	status.next_fill = FILLINTERVAL;
     ab8:	8a e0       	ldi	r24, 0x0A	; 10
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     ac0:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0x12>
     ac4:	08 95       	ret

00000ac6 <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     ac6:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <display_off>
     aca:	88 23       	and	r24, r24
     acc:	29 f0       	breq	.+10     	; 0xad8 <handle_encoder+0x12>
		display(screen_value);
     ace:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     ad2:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
     ad6:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     ad8:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     adc:	87 30       	cpi	r24, 0x07	; 7
     ade:	a9 f4       	brne	.+42     	; 0xb0a <handle_encoder+0x44>
		encoder_sensed = FALSE;
     ae0:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     ae4:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     ae8:	90 91 1c 28 	lds	r25, 0x281C	; 0x80281c <encoder_change>
     aec:	89 0f       	add	r24, r25
     aee:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
		if (screen_value < 0) {
     af2:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     af6:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     afa:	87 70       	andi	r24, 0x07	; 7
     afc:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
		}
		display(screen_value);
     b00:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     b04:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
     b08:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     b0a:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     b0e:	85 30       	cpi	r24, 0x05	; 5
     b10:	f9 f4       	brne	.+62     	; 0xb50 <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     b12:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
		switch (screen_value) {
     b16:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     b1a:	84 30       	cpi	r24, 0x04	; 4
     b1c:	89 f0       	breq	.+34     	; 0xb40 <handle_encoder+0x7a>
     b1e:	28 f4       	brcc	.+10     	; 0xb2a <handle_encoder+0x64>
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	41 f0       	breq	.+16     	; 0xb34 <handle_encoder+0x6e>
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	49 f0       	breq	.+18     	; 0xb3a <handle_encoder+0x74>
     b28:	08 95       	ret
     b2a:	86 30       	cpi	r24, 0x06	; 6
     b2c:	61 f0       	breq	.+24     	; 0xb46 <handle_encoder+0x80>
     b2e:	87 30       	cpi	r24, 0x07	; 7
     b30:	69 f0       	breq	.+26     	; 0xb4c <handle_encoder+0x86>
     b32:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     b34:	0e 94 2c 05 	call	0xa58	; 0xa58 <start_FILL>
				break;
     b38:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     b3a:	0e 94 a4 03 	call	0x748	; 0x748 <change_FILLINT>
				break;
     b3e:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     b40:	0e 94 55 04 	call	0x8aa	; 0x8aa <change_MAXOPENTIME>
				break;
     b44:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     b46:	0e 94 82 03 	call	0x704	; 0x704 <change_DISABLEBLU>
				break;
     b4a:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     b4c:	0e 94 93 03 	call	0x726	; 0x726 <change_DISABLERED>
     b50:	08 95       	ret

00000b52 <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	8f 93       	push	r24
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     b62:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     b66:	81 ff       	sbrs	r24, 1
     b68:	07 c0       	rjmp	.+14     	; 0xb78 <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     b70:	85 e0       	ldi	r24, 0x05	; 5
     b72:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <encoder_sensed>
     b76:	1f c0       	rjmp	.+62     	; 0xbb6 <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     b78:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     b7c:	83 ff       	sbrs	r24, 3
     b7e:	1b c0       	rjmp	.+54     	; 0xbb6 <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     b80:	e0 e4       	ldi	r30, 0x40	; 64
     b82:	f4 e0       	ldi	r31, 0x04	; 4
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     b88:	80 85       	ldd	r24, Z+8	; 0x08
     b8a:	82 ff       	sbrs	r24, 2
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__vector_24+0x4e>
			encoder_value++;
     b8e:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			encoder_change = 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_change>
     b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <__vector_24+0x5e>
		} else {
			encoder_value--;
     ba0:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     ba4:	81 50       	subi	r24, 0x01	; 1
     ba6:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			encoder_change = -1;
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_change>
		}
		encoder_sensed = ENCODERA;
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <encoder_sensed>
	}
}
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	8f 91       	pop	r24
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <init_STATUS>:
	display(SCRVERSION);

}

void init_STATUS()
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29

	status.next_fill = FILLINTERVAL;
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
     bd2:	c4 e0       	ldi	r28, 0x04	; 4
     bd4:	d8 e2       	ldi	r29, 0x28	; 40
     bd6:	8a 8b       	std	Y+18, r24	; 0x12
	status.opentime_BLU = 0;
     bd8:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     bda:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     bdc:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     bde:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     be0:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     be2:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     be4:	19 8a       	std	Y+17, r1	; 0x11
	status.pressure = read_PRESSURE();
     be6:	0e 94 fd 07 	call	0xffa	; 0xffa <read_PRESSURE>
     bea:	8c 8b       	std	Y+20, r24	; 0x14

}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <init_PORTS>:

void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f4 e0       	ldi	r31, 0x04	; 4
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
     bfa:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
     bfc:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
     bfe:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
     c00:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
     c02:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
     c04:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
     c06:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
     c08:	e0 e2       	ldi	r30, 0x20	; 32
     c0a:	f4 e0       	ldi	r31, 0x04	; 4
     c0c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
     c0e:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
     c10:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
     c12:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
     c14:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
     c16:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f4 e0       	ldi	r31, 0x04	; 4
     c1c:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
     c1e:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
     c20:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
     c22:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
     c24:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
     c26:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
     c28:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
     c2a:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c2c:	e0 e6       	ldi	r30, 0x60	; 96
     c2e:	f4 e0       	ldi	r31, 0x04	; 4
     c30:	94 e0       	ldi	r25, 0x04	; 4
     c32:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c34:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c36:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c38:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c3a:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c3c:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c3e:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c40:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
     c42:	e0 e8       	ldi	r30, 0x80	; 128
     c44:	f4 e0       	ldi	r31, 0x04	; 4
     c46:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
     c48:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
     c4a:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
     c4c:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
     c4e:	e0 ea       	ldi	r30, 0xA0	; 160
     c50:	f4 e0       	ldi	r31, 0x04	; 4
     c52:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
     c54:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
     c56:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
     c58:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
     c5a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
     c5c:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
     c5e:	86 8b       	std	Z+22, r24	; 0x16
     c60:	08 95       	ret

00000c62 <init>:
void init_STATUS(void);

void init(void)
{

	minute = FALSE;
     c62:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>
	seconds = 0;
     c66:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	update_VERSION();
     c6a:	0e 94 11 01 	call	0x222	; 0x222 <update_VERSION>
	init_PORTS();
     c6e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <init_PORTS>
	init_USART();
     c72:	0e 94 28 0a 	call	0x1450	; 0x1450 <init_USART>
	init_VALVES();
     c76:	0e 94 85 0c 	call	0x190a	; 0x190a <init_VALVES>
	init_BUTTONS();
     c7a:	0e 94 cb 00 	call	0x196	; 0x196 <init_BUTTONS>
	init_ENCODER();
     c7e:	0e 94 24 05 	call	0xa48	; 0xa48 <init_ENCODER>
	init_TWI();
     c82:	0e 94 af 09 	call	0x135e	; 0x135e <init_TWI>
	init_RTC(511);
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 31 09 	call	0x1262	; 0x1262 <init_RTC>
	init_ADC();
     c8e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <init_ADC>
	init_STATUS();
     c92:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <init_STATUS>
	init_OLED(0);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 83 06 	call	0xd06	; 0xd06 <init_OLED>
	display(SCRVERSION);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
     ca2:	08 95       	ret

00000ca4 <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     ca4:	0e 94 31 06 	call	0xc62	; 0xc62 <init>
	sei();
     ca8:	78 94       	sei
			handle_minute();	// See rtc.c
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
		}
		if (recv0_buf.done) {	// Serial communication received
     caa:	c5 e7       	ldi	r28, 0x75	; 117
     cac:	d8 e2       	ldi	r29, 0x28	; 40
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     cae:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     cb2:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     cb4:	0e 94 6c 00 	call	0xd8	; 0xd8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     cb8:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     cbc:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     cbe:	0e 94 63 05 	call	0xac6	; 0xac6 <handle_encoder>
		}
		if (minute) {			// Things to do once a minute
     cc2:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <minute>
     cc6:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     cc8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <handle_minute>
		}
		if (tick) {				// Things to do once a second
     ccc:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     cd0:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     cd2:	0e 94 b6 08 	call	0x116c	; 0x116c <handle_ticks>
		}
		if (recv0_buf.done) {	// Serial communication received
     cd6:	88 81       	ld	r24, Y
     cd8:	88 23       	and	r24, r24
     cda:	49 f3       	breq	.-46     	; 0xcae <main+0xa>
			handle_serial();	// See usart.c
     cdc:	0e 94 65 0a 	call	0x14ca	; 0x14ca <handle_serial>
     ce0:	e6 cf       	rjmp	.-52     	; 0xcae <main+0xa>

00000ce2 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	d6 2f       	mov	r29, r22
     ce8:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	0e 94 ba 09 	call	0x1374	; 0x1374 <start_TWI>
	write_TWI(type);
     cf0:	8d 2f       	mov	r24, r29
     cf2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <write_TWI>
	write_TWI(byteToSend);
     cf6:	8c 2f       	mov	r24, r28
     cf8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <write_TWI>
	stop_TWI();
     cfc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <stop_TWI>

}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d06:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d08:	e0 e0       	ldi	r30, 0x00	; 0
     d0a:	f4 e0       	ldi	r31, 0x04	; 4
     d0c:	90 e8       	ldi	r25, 0x80	; 128
     d0e:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d10:	91 83       	std	Z+1, r25	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d12:	a1 e4       	ldi	r26, 0x41	; 65
     d14:	b3 e0       	ldi	r27, 0x03	; 3
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <init_OLED+0x10>
     d1a:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTA.OUTSET = PIN7_bm;
     d1c:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d1e:	88 23       	and	r24, r24
     d20:	11 f0       	breq	.+4      	; 0xd26 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d22:	cd e3       	ldi	r28, 0x3D	; 61
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(1);				// Reset time
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d26:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d28:	4a e2       	ldi	r20, 0x2A	; 42
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	8c 2f       	mov	r24, r28
     d2e:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     d32:	41 e7       	ldi	r20, 0x71	; 113
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	8c 2f       	mov	r24, r28
     d38:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     d3c:	4c e5       	ldi	r20, 0x5C	; 92
     d3e:	60 e4       	ldi	r22, 0x40	; 64
     d40:	8c 2f       	mov	r24, r28
     d42:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     d46:	48 e2       	ldi	r20, 0x28	; 40
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	8c 2f       	mov	r24, r28
     d4c:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     d50:	48 e0       	ldi	r20, 0x08	; 8
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	8c 2f       	mov	r24, r28
     d56:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     d5a:	4a e2       	ldi	r20, 0x2A	; 42
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	8c 2f       	mov	r24, r28
     d60:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     d64:	49 e7       	ldi	r20, 0x79	; 121
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	8c 2f       	mov	r24, r28
     d6a:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     d6e:	45 ed       	ldi	r20, 0xD5	; 213
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	8c 2f       	mov	r24, r28
     d74:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     d78:	40 e7       	ldi	r20, 0x70	; 112
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	8c 2f       	mov	r24, r28
     d7e:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     d82:	48 e7       	ldi	r20, 0x78	; 120
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	8c 2f       	mov	r24, r28
     d88:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     d8c:	48 e0       	ldi	r20, 0x08	; 8
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	8c 2f       	mov	r24, r28
     d92:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     d96:	46 e0       	ldi	r20, 0x06	; 6
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	8c 2f       	mov	r24, r28
     d9c:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     da0:	42 e7       	ldi	r20, 0x72	; 114
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	8c 2f       	mov	r24, r28
     da6:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	60 e4       	ldi	r22, 0x40	; 64
     dae:	8c 2f       	mov	r24, r28
     db0:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     db4:	4a e2       	ldi	r20, 0x2A	; 42
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	8c 2f       	mov	r24, r28
     dba:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dbe:	49 e7       	ldi	r20, 0x79	; 121
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	8c 2f       	mov	r24, r28
     dc4:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     dc8:	4a ed       	ldi	r20, 0xDA	; 218
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	8c 2f       	mov	r24, r28
     dce:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	8c 2f       	mov	r24, r28
     dd8:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     ddc:	4c ed       	ldi	r20, 0xDC	; 220
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	8c 2f       	mov	r24, r28
     de2:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	8c 2f       	mov	r24, r28
     dec:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     df0:	41 e8       	ldi	r20, 0x81	; 129
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	8c 2f       	mov	r24, r28
     df6:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     dfa:	4f e7       	ldi	r20, 0x7F	; 127
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	8c 2f       	mov	r24, r28
     e00:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e04:	49 ed       	ldi	r20, 0xD9	; 217
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	8c 2f       	mov	r24, r28
     e0a:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e0e:	41 ef       	ldi	r20, 0xF1	; 241
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	8c 2f       	mov	r24, r28
     e14:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e18:	4b ed       	ldi	r20, 0xDB	; 219
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	8c 2f       	mov	r24, r28
     e1e:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e22:	40 e4       	ldi	r20, 0x40	; 64
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	8c 2f       	mov	r24, r28
     e28:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e2c:	48 e7       	ldi	r20, 0x78	; 120
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	8c 2f       	mov	r24, r28
     e32:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e36:	48 e2       	ldi	r20, 0x28	; 40
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	8c 2f       	mov	r24, r28
     e3c:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	8c 2f       	mov	r24, r28
     e46:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	8c 2f       	mov	r24, r28
     e50:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     e54:	4c e0       	ldi	r20, 0x0C	; 12
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	8c 2f       	mov	r24, r28
     e5a:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
     e5e:	ba e6       	ldi	r27, 0x6A	; 106
     e60:	24 e0       	ldi	r18, 0x04	; 4
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	b1 50       	subi	r27, 0x01	; 1
     e66:	20 40       	sbci	r18, 0x00	; 0
     e68:	80 40       	sbci	r24, 0x00	; 0
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <init_OLED+0x15e>
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     e6e:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
     e72:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
	timeoutOLED = 5;
     e76:	85 e0       	ldi	r24, 0x05	; 5
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	80 93 1f 28 	sts	0x281F, r24	; 0x80281f <timeoutOLED>
     e7e:	90 93 20 28 	sts	0x2820, r25	; 0x802820 <timeoutOLED+0x1>

}
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	e2 97       	sbiw	r28, 0x32	; 50
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     ea0:	91 e1       	ldi	r25, 0x11	; 17
     ea2:	ef e2       	ldi	r30, 0x2F	; 47
     ea4:	f5 e6       	ldi	r31, 0x65	; 101
     ea6:	de 01       	movw	r26, r28
     ea8:	92 96       	adiw	r26, 0x22	; 34
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	9a 95       	dec	r25
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <writestr_OLED+0x24>

	if (displaynumber == 0) {
     eb2:	88 23       	and	r24, r24
     eb4:	29 f0       	breq	.+10     	; 0xec0 <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     eb6:	0f 2e       	mov	r0, r31
     eb8:	fd e3       	ldi	r31, 0x3D	; 61
     eba:	ff 2e       	mov	r15, r31
     ebc:	f0 2d       	mov	r31, r0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     ec0:	0f 2e       	mov	r0, r31
     ec2:	fc e3       	ldi	r31, 0x3C	; 60
     ec4:	ff 2e       	mov	r15, r31
     ec6:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     ec8:	8e 01       	movw	r16, r28
     eca:	0f 5f       	subi	r16, 0xFF	; 255
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <strcpy>
	if (strlen(strbuf) > 16) {
     ed4:	f8 01       	movw	r30, r16
     ed6:	01 90       	ld	r0, Z+
     ed8:	00 20       	and	r0, r0
     eda:	e9 f7       	brne	.-6      	; 0xed6 <writestr_OLED+0x50>
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	e0 1b       	sub	r30, r16
     ee0:	f1 0b       	sbc	r31, r17
     ee2:	71 97       	sbiw	r30, 0x11	; 17
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <writestr_OLED+0x62>
		strbuf[16] = '\0';
     ee6:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     ee8:	be 01       	movw	r22, r28
     eea:	6e 5d       	subi	r22, 0xDE	; 222
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>

	if (lineno == 1) {
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	d8 12       	cpse	r13, r24
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	8f 2d       	mov	r24, r15
     f02:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
     f06:	19 c0       	rjmp	.+50     	; 0xf3a <writestr_OLED+0xb4>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f08:	40 ec       	ldi	r20, 0xC0	; 192
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	8f 2d       	mov	r24, r15
     f0e:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>
     f12:	13 c0       	rjmp	.+38     	; 0xf3a <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f14:	f8 01       	movw	r30, r16
     f16:	41 91       	ld	r20, Z+
     f18:	8f 01       	movw	r16, r30
     f1a:	60 e4       	ldi	r22, 0x40	; 64
     f1c:	8f 2d       	mov	r24, r15
     f1e:	0e 94 71 06 	call	0xce2	; 0xce2 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f22:	0c 15       	cp	r16, r12
     f24:	1d 05       	cpc	r17, r13
     f26:	b1 f7       	brne	.-20     	; 0xf14 <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <timerOLED>
     f30:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <timerOLED+0x1>
	display_off = FALSE;
     f34:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <display_off>

}
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <writestr_OLED+0xc4>
     f3a:	8e 01       	movw	r16, r28
     f3c:	0f 5f       	subi	r16, 0xFF	; 255
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	6e 01       	movw	r12, r28
     f42:	f1 e1       	ldi	r31, 0x11	; 17
     f44:	cf 0e       	add	r12, r31
     f46:	d1 1c       	adc	r13, r1
     f48:	e5 cf       	rjmp	.-54     	; 0xf14 <writestr_OLED+0x8e>
     f4a:	e2 96       	adiw	r28, 0x32	; 50
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	08 95       	ret

00000f60 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	1f 92       	push	r1
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     f6e:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	be 01       	movw	r22, r28
     f74:	6f 5f       	subi	r22, 0xFF	; 255
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     f7c:	42 e0       	ldi	r20, 0x02	; 2
     f7e:	be 01       	movw	r22, r28
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	81 2f       	mov	r24, r17
     f86:	0e 94 43 07 	call	0xe86	; 0xe86 <writestr_OLED>
	timerOLED = 0;
     f8a:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
     f8e:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
	display_off = TRUE;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <display_off>

}
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	08 95       	ret

00000fa2 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
     fa8:	e0 e0       	ldi	r30, 0x00	; 0
     faa:	f6 e0       	ldi	r31, 0x06	; 6
     fac:	80 81       	ld	r24, Z
     fae:	84 60       	ori	r24, 0x04	; 4
     fb0:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
     fb2:	a0 ea       	ldi	r26, 0xA0	; 160
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	8c 91       	ld	r24, X
     fb8:	80 63       	ori	r24, 0x30	; 48
     fba:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
     fbc:	a2 e0       	ldi	r26, 0x02	; 2
     fbe:	b6 e0       	ldi	r27, 0x06	; 6
     fc0:	8c 91       	ld	r24, X
     fc2:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
     fc4:	8c 91       	ld	r24, X
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
     fca:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
     fd4:	e8 e0       	ldi	r30, 0x08	; 8
     fd6:	f6 e0       	ldi	r31, 0x06	; 6
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
     fde:	80 81       	ld	r24, Z
     fe0:	80 ff       	sbrs	r24, 0
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <init_ADC+0x4a>
		asm("nop");
     fe4:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
     fe6:	80 81       	ld	r24, Z
     fe8:	80 fd       	sbrc	r24, 0
     fea:	fc cf       	rjmp	.-8      	; 0xfe4 <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
     fec:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     ff0:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
     ff4:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <status+0x14>
     ff8:	08 95       	ret

00000ffa <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	0f 2e       	mov	r0, r31
    100e:	fa e0       	ldi	r31, 0x0A	; 10
    1010:	bf 2e       	mov	r11, r31
    1012:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    1014:	c1 2c       	mov	r12, r1
    1016:	d1 2c       	mov	r13, r1
    1018:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    101a:	c8 e0       	ldi	r28, 0x08	; 8
    101c:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    101e:	00 e1       	ldi	r16, 0x10	; 16
    1020:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1022:	88 81       	ld	r24, Y
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1028:	88 81       	ld	r24, Y
    102a:	80 ff       	sbrs	r24, 0
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <read_PRESSURE+0x3c>
			asm("nop");
    102e:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1030:	88 81       	ld	r24, Y
    1032:	80 fd       	sbrc	r24, 0
    1034:	fc cf       	rjmp	.-8      	; 0x102e <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1036:	f8 01       	movw	r30, r16
    1038:	60 81       	ld	r22, Z
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__floatunsisf>
    1044:	9b 01       	movw	r18, r22
    1046:	ac 01       	movw	r20, r24
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__addsf3>
    1050:	6b 01       	movw	r12, r22
    1052:	7c 01       	movw	r14, r24
    1054:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    1056:	b1 10       	cpse	r11, r1
    1058:	e4 cf       	rjmp	.-56     	; 0x1022 <read_PRESSURE+0x28>
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}
	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__divsf3>
    1066:	2e e5       	ldi	r18, 0x5E	; 94
    1068:	3a eb       	ldi	r19, 0xBA	; 186
    106a:	49 e5       	ldi	r20, 0x59	; 89
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__mulsf3>
    1072:	2f e1       	ldi	r18, 0x1F	; 31
    1074:	35 e8       	ldi	r19, 0x85	; 133
    1076:	45 ec       	ldi	r20, 0xC5	; 197
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__subsf3>
    107e:	6b 01       	movw	r12, r22
    1080:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__cmpsf2>
    108c:	88 23       	and	r24, r24
    108e:	1c f4       	brge	.+6      	; 0x1096 <read_PRESSURE+0x9c>
		value = 0.0;
    1090:	c1 2c       	mov	r12, r1
    1092:	d1 2c       	mov	r13, r1
    1094:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__addsf3>
    10a6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fixunssfsi>
    10aa:	86 2f       	mov	r24, r22

}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	08 95       	ret

000010c0 <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    10c0:	cf 93       	push	r28

//	handle_ticks();
//	seconds = 0;
	minute = FALSE;
    10c2:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>

	if (BLUVALVEOPEN) {
    10c6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    10ca:	88 23       	and	r24, r24
    10cc:	8c f4       	brge	.+34     	; 0x10f0 <handle_minute+0x30>
		status.opentime_BLU++;
    10ce:	e4 e0       	ldi	r30, 0x04	; 4
    10d0:	f8 e2       	ldi	r31, 0x28	; 40
    10d2:	c3 85       	ldd	r28, Z+11	; 0x0b
    10d4:	cf 5f       	subi	r28, 0xFF	; 255
    10d6:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU > MAXOPENTIME) {	// MAX OPEN ERROR
    10d8:	8b e0       	ldi	r24, 0x0B	; 11
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    10e0:	8c 17       	cp	r24, r28
    10e2:	30 f4       	brcc	.+12     	; 0x10f0 <handle_minute+0x30>
			CLOSEVALVE(BLUVALVE);
    10e4:	80 e8       	ldi	r24, 0x80	; 128
    10e6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
//			status.opentime_BLU = 0;
			status.maxopen_BLU = TRUE;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 13 28 	sts	0x2813, r24	; 0x802813 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    10f0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    10f4:	86 ff       	sbrs	r24, 6
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <handle_minute+0x5a>
		status.opentime_RED++;
    10f8:	e4 e0       	ldi	r30, 0x04	; 4
    10fa:	f8 e2       	ldi	r31, 0x28	; 40
    10fc:	c4 85       	ldd	r28, Z+12	; 0x0c
    10fe:	cf 5f       	subi	r28, 0xFF	; 255
    1100:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED > MAXOPENTIME) {	// MAX OPEN ERROR
    1102:	8b e0       	ldi	r24, 0x0B	; 11
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    110a:	8c 17       	cp	r24, r28
    110c:	30 f4       	brcc	.+12     	; 0x111a <handle_minute+0x5a>
			CLOSEVALVE(REDVALVE);
    110e:	80 e4       	ldi	r24, 0x40	; 64
    1110:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
//			status.opentime_RED = 0;
			status.maxopen_RED = TRUE;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 14 28 	sts	0x2814, r24	; 0x802814 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    111a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    111e:	85 ff       	sbrs	r24, 5
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <handle_minute+0x84>
		status.opentime_BUF++;
    1122:	e4 e0       	ldi	r30, 0x04	; 4
    1124:	f8 e2       	ldi	r31, 0x28	; 40
    1126:	c5 85       	ldd	r28, Z+13	; 0x0d
    1128:	cf 5f       	subi	r28, 0xFF	; 255
    112a:	c5 87       	std	Z+13, r28	; 0x0d
		if (status.opentime_BUF > MAXOPENTIME) {	// MAX OPEN ERROR
    112c:	8b e0       	ldi	r24, 0x0B	; 11
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    1134:	8c 17       	cp	r24, r28
    1136:	30 f4       	brcc	.+12     	; 0x1144 <handle_minute+0x84>
			CLOSEVALVE(BUFVALVE);
    1138:	80 e2       	ldi	r24, 0x20	; 32
    113a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
//			status.opentime_BUF = 0;
			status.maxopen_BUF = TRUE;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 15 28 	sts	0x2815, r24	; 0x802815 <status+0x11>
		}
	}

	if (SUPVALVEOPEN) {
    1144:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1148:	84 ff       	sbrs	r24, 4
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <handle_minute+0x96>
		status.opentime_SUP++;				// Increment supply dewar time
    114c:	e4 e0       	ldi	r30, 0x04	; 4
    114e:	f8 e2       	ldi	r31, 0x28	; 40
    1150:	86 85       	ldd	r24, Z+14	; 0x0e
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    1156:	e4 e0       	ldi	r30, 0x04	; 4
    1158:	f8 e2       	ldi	r31, 0x28	; 40
    115a:	82 89       	ldd	r24, Z+18	; 0x12
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	82 8b       	std	Z+18, r24	; 0x12
	if (status.next_fill == 0) {
    1160:	81 11       	cpse	r24, r1
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <handle_minute+0xa8>
		start_FILL();						// See encoder.c
    1164:	0e 94 2c 05 	call	0xa58	; 0xa58 <start_FILL>
	}
}
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <handle_ticks>:
THINGS TO DO EVERY SECOND
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    116c:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {
    1170:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1174:	8c 33       	cpi	r24, 0x3C	; 60
    1176:	28 f0       	brcs	.+10     	; 0x1182 <handle_ticks+0x16>
		minute = TRUE;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <minute>
		seconds = 0;
    117e:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}
	status.pressure = read_PRESSURE();		// LN2 pressure
    1182:	0e 94 fd 07 	call	0xffa	; 0xffa <read_PRESSURE>
    1186:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <status+0x14>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {	// Valve open, therm cold
    118a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    118e:	88 23       	and	r24, r24
    1190:	a4 f4       	brge	.+40     	; 0x11ba <handle_ticks+0x4e>
    1192:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1196:	80 fd       	sbrc	r24, 0
    1198:	10 c0       	rjmp	.+32     	; 0x11ba <handle_ticks+0x4e>
		CLOSEVALVE(BLUVALVE);
    119a:	80 e8       	ldi	r24, 0x80	; 128
    119c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if ((screen_value == SCRVALVES) && timerOLED) {
    11a0:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	49 f4       	brne	.+18     	; 0x11ba <handle_ticks+0x4e>
    11a8:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    11ac:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    11b0:	89 2b       	or	r24, r25
    11b2:	19 f0       	breq	.+6      	; 0x11ba <handle_ticks+0x4e>
			display(SCRVALVES);
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
		}
//		status.opentime_BLU = 0;
//		status.maxopen_BLU = FALSE;
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {	// Valve open, therm cold
    11ba:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11be:	86 ff       	sbrs	r24, 6
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <handle_ticks+0x7e>
    11c2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    11c6:	81 fd       	sbrc	r24, 1
    11c8:	10 c0       	rjmp	.+32     	; 0x11ea <handle_ticks+0x7e>
		CLOSEVALVE(REDVALVE);
    11ca:	80 e4       	ldi	r24, 0x40	; 64
    11cc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if ((screen_value == SCRVALVES) && timerOLED) {
    11d0:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	49 f4       	brne	.+18     	; 0x11ea <handle_ticks+0x7e>
    11d8:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    11dc:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    11e0:	89 2b       	or	r24, r25
    11e2:	b1 f1       	breq	.+108    	; 0x1250 <handle_ticks+0xe4>
			display(SCRVALVES);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {	// Valve open, therm cold
    11ea:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11ee:	85 ff       	sbrs	r24, 5
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <handle_ticks+0xae>
    11f2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    11f6:	82 fd       	sbrc	r24, 2
    11f8:	10 c0       	rjmp	.+32     	; 0x121a <handle_ticks+0xae>
		CLOSEVALVE(BUFVALVE);
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if ((screen_value == SCRVALVES) && timerOLED) {
    1200:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	49 f4       	brne	.+18     	; 0x121a <handle_ticks+0xae>
    1208:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    120c:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    1210:	89 2b       	or	r24, r25
    1212:	31 f1       	breq	.+76     	; 0x1260 <handle_ticks+0xf4>
			display(SCRVALVES);
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	0e 94 2f 01 	call	0x25e	; 0x25e <display>
//		status.buildpressure_time = 0;
//		status.opentime_BUF = 0;
//		status.maxopen_BUF = FALSE;
	}

	if (timerOLED) {
    121a:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    121e:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	e9 f0       	breq	.+58     	; 0x1260 <handle_ticks+0xf4>
		if (timerOLED > timeoutOLED) {	// Display timeout
    1226:	20 91 1f 28 	lds	r18, 0x281F	; 0x80281f <timeoutOLED>
    122a:	30 91 20 28 	lds	r19, 0x2820	; 0x802820 <timeoutOLED+0x1>
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	40 f4       	brcc	.+16     	; 0x1244 <handle_ticks+0xd8>
			clear_OLED(0);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 b0 07 	call	0xf60	; 0xf60 <clear_OLED>
			timerOLED = 0;
    123a:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
    123e:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
    1242:	08 95       	ret
		} else {
			timerOLED++;
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <timerOLED>
    124a:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <timerOLED+0x1>
		}
	}
}
    124e:	08 95       	ret
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {	// Valve open, therm cold
    1250:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1254:	85 ff       	sbrs	r24, 5
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <handle_ticks+0xf4>
    1258:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    125c:	82 ff       	sbrs	r24, 2
    125e:	cd cf       	rjmp	.-102    	; 0x11fa <handle_ticks+0x8e>
    1260:	08 95       	ret

00001262 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    1262:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1264:	e0 e6       	ldi	r30, 0x60	; 96
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    126a:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    126c:	98 ed       	ldi	r25, 0xD8	; 216
    126e:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1270:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	86 ff       	sbrs	r24, 6
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <init_RTC+0x1e>
		asm("nop");
    1278:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	96 fd       	sbrc	r25, 6
    127e:	fc cf       	rjmp	.-8      	; 0x1278 <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1280:	e0 e6       	ldi	r30, 0x60	; 96
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    1286:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    1288:	88 ed       	ldi	r24, 0xD8	; 216
    128a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    128c:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    128e:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    1290:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    1292:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1294:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    1296:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    129a:	88 23       	and	r24, r24
    129c:	31 f0       	breq	.+12     	; 0x12aa <init_RTC+0x48>
    129e:	e0 e4       	ldi	r30, 0x40	; 64
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    12a2:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	91 11       	cpse	r25, r1
    12a8:	fc cf       	rjmp	.-8      	; 0x12a2 <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    12aa:	e0 e4       	ldi	r30, 0x40	; 64
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
    12ae:	22 87       	std	Z+10, r18	; 0x0a
    12b0:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    12b6:	85 81       	ldd	r24, Z+5	; 0x05
    12b8:	81 60       	ori	r24, 0x01	; 1
    12ba:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    12bc:	81 eb       	ldi	r24, 0xB1	; 177
    12be:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	82 83       	std	Z+2, r24	; 0x02
    12c6:	08 95       	ret

000012c8 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    12c8:	1f 92       	push	r1
    12ca:	0f 92       	push	r0
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	0f 92       	push	r0
    12d0:	11 24       	eor	r1, r1
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    12dc:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    12e0:	8f 5f       	subi	r24, 0xFF	; 255
    12e2:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    12e6:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    12f8:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <ticks_TCB0>
    12fc:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    1300:	25 e0       	ldi	r18, 0x05	; 5
    1302:	3d e0       	ldi	r19, 0x0D	; 13
    1304:	ac 01       	movw	r20, r24
    1306:	42 9f       	mul	r20, r18
    1308:	c0 01       	movw	r24, r0
    130a:	43 9f       	mul	r20, r19
    130c:	90 0d       	add	r25, r0
    130e:	52 9f       	mul	r21, r18
    1310:	90 0d       	add	r25, r0
    1312:	11 24       	eor	r1, r1
    1314:	e0 e8       	ldi	r30, 0x80	; 128
    1316:	fa e0       	ldi	r31, 0x0A	; 10
    1318:	84 87       	std	Z+12, r24	; 0x0c
    131a:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    1320:	80 83       	st	Z, r24
    1322:	08 95       	ret

00001324 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    1324:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    1328:	08 95       	ret

0000132a <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    133e:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    1342:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <ticks_TCB0>
    134c:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <ticks_TCB0+0x1>

    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    135e:	e0 ea       	ldi	r30, 0xA0	; 160
    1360:	f8 e0       	ldi	r31, 0x08	; 8
    1362:	8b e0       	ldi	r24, 0x0B	; 11
    1364:	86 83       	std	Z+6, r24	; 0x06
    1366:	83 81       	ldd	r24, Z+3	; 0x03
    1368:	81 60       	ori	r24, 0x01	; 1
    136a:	83 83       	std	Z+3, r24	; 0x03
    136c:	85 81       	ldd	r24, Z+5	; 0x05
    136e:	81 60       	ori	r24, 0x01	; 1
    1370:	85 83       	std	Z+5, r24	; 0x05
    1372:	08 95       	ret

00001374 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    1374:	61 30       	cpi	r22, 0x01	; 1
    1376:	29 f4       	brne	.+10     	; 0x1382 <start_TWI+0xe>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    1378:	88 0f       	add	r24, r24
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <start_TWI+0x14>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    1382:	88 0f       	add	r24, r24
    1384:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1390:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1394:	80 7c       	andi	r24, 0xC0	; 192
    1396:	b9 f4       	brne	.+46     	; 0x13c6 <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    1398:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    139c:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    13a0:	0b 97       	sbiw	r24, 0x0b	; 11
    13a2:	48 f4       	brcc	.+18     	; 0x13b6 <start_TWI+0x42>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    13a4:	e0 ea       	ldi	r30, 0xA0	; 160
    13a6:	f8 e0       	ldi	r31, 0x08	; 8
    13a8:	0a c0       	rjmp	.+20     	; 0x13be <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    13aa:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    13ae:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    13b2:	0b 97       	sbiw	r24, 0x0b	; 11
    13b4:	20 f0       	brcs	.+8      	; 0x13be <start_TWI+0x4a>
			stop_TCB0();
    13b6:	0e 94 92 09 	call	0x1324	; 0x1324 <stop_TCB0>
			return(TWITIMEOUT);
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    13be:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    13c0:	85 81       	ldd	r24, Z+5	; 0x05
    13c2:	80 7c       	andi	r24, 0xC0	; 192
    13c4:	91 f3       	breq	.-28     	; 0x13aa <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    13c6:	0e 94 92 09 	call	0x1324	; 0x1324 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    13ca:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13ce:	82 fd       	sbrc	r24, 2
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    13d2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13d6:	83 fd       	sbrc	r24, 3
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    13da:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13de:	89 2f       	mov	r24, r25
    13e0:	80 71       	andi	r24, 0x10	; 16
    13e2:	94 fd       	sbrc	r25, 4
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <start_TWI+0x7c>
    13e6:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    13f0:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    13f2:	08 95       	ret

000013f4 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    13f4:	87 e0       	ldi	r24, 0x07	; 7
    13f6:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    13fa:	08 95       	ret

000013fc <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    13fc:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1400:	96 fd       	sbrc	r25, 6
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <write_TWI+0x14>
    1404:	e0 ea       	ldi	r30, 0xA0	; 160
    1406:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    1408:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    140a:	95 81       	ldd	r25, Z+5	; 0x05
    140c:	96 ff       	sbrs	r25, 6
    140e:	fc cf       	rjmp	.-8      	; 0x1408 <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    1410:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    141c:	e0 ea       	ldi	r30, 0xA0	; 160
    141e:	f8 e0       	ldi	r31, 0x08	; 8
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <write_TWI+0x3c>
		asm("nop");
    1422:	00 00       	nop
		if (ticks_TCB0 > 50) {
    1424:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    1428:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    142c:	c3 97       	sbiw	r24, 0x33	; 51
    142e:	20 f0       	brcs	.+8      	; 0x1438 <write_TWI+0x3c>
			stop_TCB0();
    1430:	0e 94 92 09 	call	0x1324	; 0x1324 <stop_TCB0>
			return(TWITIMEOUT);
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1438:	85 81       	ldd	r24, Z+5	; 0x05
    143a:	86 ff       	sbrs	r24, 6
    143c:	f2 cf       	rjmp	.-28     	; 0x1422 <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    143e:	0e 94 92 09 	call	0x1324	; 0x1324 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    1442:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1446:	89 2f       	mov	r24, r25
    1448:	80 71       	andi	r24, 0x10	; 16
    144a:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    144c:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    144e:	08 95       	ret

00001450 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    1450:	e0 e0       	ldi	r30, 0x00	; 0
    1452:	f4 e0       	ldi	r31, 0x04	; 4
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    1458:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	f8 e0       	ldi	r31, 0x08	; 8
    145e:	2d e6       	ldi	r18, 0x6D	; 109
    1460:	35 e0       	ldi	r19, 0x05	; 5
    1462:	20 87       	std	Z+8, r18	; 0x08
    1464:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    1466:	95 81       	ldd	r25, Z+5	; 0x05
    1468:	90 68       	ori	r25, 0x80	; 128
    146a:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    146c:	96 81       	ldd	r25, Z+6	; 0x06
    146e:	90 64       	ori	r25, 0x40	; 64
    1470:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    1472:	96 81       	ldd	r25, Z+6	; 0x06
    1474:	90 68       	ori	r25, 0x80	; 128
    1476:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    1478:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <recv0_buf+0x53>
	send0_buf.length = 0;
    147c:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <send0_buf+0x53>
	recv0_buf.nxfrd = 0;
    1480:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <recv0_buf+0x52>
	send0_buf.nxfrd = 0;
    1484:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <send0_buf+0x52>
	recv0_buf.done = FALSE;				// Ready to receive data
    1488:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <recv0_buf+0x51>
	send0_buf.done = TRUE;				// No data to send
    148c:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <send0_buf+0x51>
    1490:	08 95       	ret

00001492 <send_USART>:
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
	uint8_t i;
	send0_buf.length = nbytes;
    1492:	60 93 cb 28 	sts	0x28CB, r22	; 0x8028cb <send0_buf+0x53>
	send0_buf.nxfrd = 0;
    1496:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <send0_buf+0x52>
	send0_buf.done = FALSE;
    149a:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <send0_buf+0x51>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    149e:	66 23       	and	r22, r22
    14a0:	71 f0       	breq	.+28     	; 0x14be <send_USART+0x2c>
    14a2:	a8 2f       	mov	r26, r24
    14a4:	b9 2f       	mov	r27, r25
    14a6:	e8 e7       	ldi	r30, 0x78	; 120
    14a8:	f8 e2       	ldi	r31, 0x28	; 40
    14aa:	61 50       	subi	r22, 0x01	; 1
    14ac:	26 2f       	mov	r18, r22
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	27 58       	subi	r18, 0x87	; 135
    14b2:	37 4d       	sbci	r19, 0xD7	; 215
		send0_buf.data[i] = *data++;
    14b4:	8d 91       	ld	r24, X+
    14b6:	81 93       	st	Z+, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    14b8:	e2 17       	cp	r30, r18
    14ba:	f3 07       	cpc	r31, r19
    14bc:	d9 f7       	brne	.-10     	; 0x14b4 <send_USART+0x22>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    14be:	e0 e0       	ldi	r30, 0x00	; 0
    14c0:	f8 e0       	ldi	r31, 0x08	; 8
    14c2:	85 81       	ldd	r24, Z+5	; 0x05
    14c4:	80 62       	ori	r24, 0x20	; 32
    14c6:	85 83       	std	Z+5, r24	; 0x05
    14c8:	08 95       	ret

000014ca <handle_serial>:
	[2] - Red dewar valve status <O|C|T|X>
	[3] - Blue dewar valve status <O|C|T|X>
	[4-6] - Fill interval in minutes
------------------------------------------------------------------------------*/
void handle_serial(void)
{
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	c2 5a       	subi	r28, 0xA2	; 162
    14e4:	d1 09       	sbc	r29, r1
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
	char strbuf[81], tempstr[81];

	recv0_buf.done = FALSE;
    14ea:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <recv0_buf+0x51>

	// Buffer dewar supply Valve
	strcpy(strbuf, "SUP,");
    14ee:	85 e0       	ldi	r24, 0x05	; 5
    14f0:	e0 e4       	ldi	r30, 0x40	; 64
    14f2:	f5 e6       	ldi	r31, 0x65	; 101
    14f4:	de 01       	movw	r26, r28
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
    14fc:	8a 95       	dec	r24
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <handle_serial+0x2e>
	if (SUPVALVEOPEN) {
    1500:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1504:	84 ff       	sbrs	r24, 4
    1506:	0b c0       	rjmp	.+22     	; 0x151e <handle_serial+0x54>
		strcat(strbuf, "O");
    1508:	fe 01       	movw	r30, r28
    150a:	31 96       	adiw	r30, 0x01	; 1
    150c:	01 90       	ld	r0, Z+
    150e:	00 20       	and	r0, r0
    1510:	e9 f7       	brne	.-6      	; 0x150c <handle_serial+0x42>
    1512:	31 97       	sbiw	r30, 0x01	; 1
    1514:	8f e4       	ldi	r24, 0x4F	; 79
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	80 83       	st	Z, r24
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <handle_serial+0x68>
	} else {
		strcat(strbuf, "C");
    151e:	fe 01       	movw	r30, r28
    1520:	31 96       	adiw	r30, 0x01	; 1
    1522:	01 90       	ld	r0, Z+
    1524:	00 20       	and	r0, r0
    1526:	e9 f7       	brne	.-6      	; 0x1522 <handle_serial+0x58>
    1528:	31 97       	sbiw	r30, 0x01	; 1
    152a:	83 e4       	ldi	r24, 0x43	; 67
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	80 83       	st	Z, r24
    1530:	91 83       	std	Z+1, r25	; 0x01
	}

	// Buffer dewar vent valve
	strcat(strbuf, ",BUF,");
    1532:	de 01       	movw	r26, r28
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	0d 90       	ld	r0, X+
    1538:	00 20       	and	r0, r0
    153a:	e9 f7       	brne	.-6      	; 0x1536 <handle_serial+0x6c>
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	86 e0       	ldi	r24, 0x06	; 6
    1540:	e5 e4       	ldi	r30, 0x45	; 69
    1542:	f5 e6       	ldi	r31, 0x65	; 101
    1544:	01 90       	ld	r0, Z+
    1546:	0d 92       	st	X+, r0
    1548:	8a 95       	dec	r24
    154a:	e1 f7       	brne	.-8      	; 0x1544 <handle_serial+0x7a>
	if (status.maxopen_BUF) {
    154c:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
    1550:	88 23       	and	r24, r24
    1552:	59 f0       	breq	.+22     	; 0x156a <handle_serial+0xa0>
		strcat(strbuf, "T");
    1554:	fe 01       	movw	r30, r28
    1556:	31 96       	adiw	r30, 0x01	; 1
    1558:	01 90       	ld	r0, Z+
    155a:	00 20       	and	r0, r0
    155c:	e9 f7       	brne	.-6      	; 0x1558 <handle_serial+0x8e>
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	84 e5       	ldi	r24, 0x54	; 84
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	80 83       	st	Z, r24
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	19 c0       	rjmp	.+50     	; 0x159c <handle_serial+0xd2>
	} else if (BUFVALVEOPEN) {
    156a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    156e:	85 ff       	sbrs	r24, 5
    1570:	0b c0       	rjmp	.+22     	; 0x1588 <handle_serial+0xbe>
		strcat(strbuf, "O");
    1572:	fe 01       	movw	r30, r28
    1574:	31 96       	adiw	r30, 0x01	; 1
    1576:	01 90       	ld	r0, Z+
    1578:	00 20       	and	r0, r0
    157a:	e9 f7       	brne	.-6      	; 0x1576 <handle_serial+0xac>
    157c:	31 97       	sbiw	r30, 0x01	; 1
    157e:	8f e4       	ldi	r24, 0x4F	; 79
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	0a c0       	rjmp	.+20     	; 0x159c <handle_serial+0xd2>
	} else {
		strcat(strbuf, "C");
    1588:	fe 01       	movw	r30, r28
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	01 90       	ld	r0, Z+
    158e:	00 20       	and	r0, r0
    1590:	e9 f7       	brne	.-6      	; 0x158c <handle_serial+0xc2>
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	83 e4       	ldi	r24, 0x43	; 67
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	80 83       	st	Z, r24
    159a:	91 83       	std	Z+1, r25	; 0x01
	}

	// Red CCD vent valve
	strcat(strbuf,",RED,");
    159c:	de 01       	movw	r26, r28
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	0d 90       	ld	r0, X+
    15a2:	00 20       	and	r0, r0
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <handle_serial+0xd6>
    15a6:	11 97       	sbiw	r26, 0x01	; 1
    15a8:	86 e0       	ldi	r24, 0x06	; 6
    15aa:	eb e4       	ldi	r30, 0x4B	; 75
    15ac:	f5 e6       	ldi	r31, 0x65	; 101
    15ae:	01 90       	ld	r0, Z+
    15b0:	0d 92       	st	X+, r0
    15b2:	8a 95       	dec	r24
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <handle_serial+0xe4>
	if (!REDENABLED) {
    15b6:	8d e0       	ldi	r24, 0x0D	; 13
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    15be:	81 11       	cpse	r24, r1
    15c0:	0b c0       	rjmp	.+22     	; 0x15d8 <handle_serial+0x10e>
		strcat(strbuf, "D");
    15c2:	fe 01       	movw	r30, r28
    15c4:	31 96       	adiw	r30, 0x01	; 1
    15c6:	01 90       	ld	r0, Z+
    15c8:	00 20       	and	r0, r0
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <handle_serial+0xfc>
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	84 e4       	ldi	r24, 0x44	; 68
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	80 83       	st	Z, r24
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	28 c0       	rjmp	.+80     	; 0x1628 <handle_serial+0x15e>
	} else if (status.maxopen_RED) {
    15d8:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
    15dc:	88 23       	and	r24, r24
    15de:	59 f0       	breq	.+22     	; 0x15f6 <handle_serial+0x12c>
		strcat(strbuf, "T");
    15e0:	fe 01       	movw	r30, r28
    15e2:	31 96       	adiw	r30, 0x01	; 1
    15e4:	01 90       	ld	r0, Z+
    15e6:	00 20       	and	r0, r0
    15e8:	e9 f7       	brne	.-6      	; 0x15e4 <handle_serial+0x11a>
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	84 e5       	ldi	r24, 0x54	; 84
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	80 83       	st	Z, r24
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	19 c0       	rjmp	.+50     	; 0x1628 <handle_serial+0x15e>
	} else if (REDVALVEOPEN) {
    15f6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    15fa:	86 ff       	sbrs	r24, 6
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <handle_serial+0x14a>
		strcat(strbuf, "O");
    15fe:	fe 01       	movw	r30, r28
    1600:	31 96       	adiw	r30, 0x01	; 1
    1602:	01 90       	ld	r0, Z+
    1604:	00 20       	and	r0, r0
    1606:	e9 f7       	brne	.-6      	; 0x1602 <handle_serial+0x138>
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	8f e4       	ldi	r24, 0x4F	; 79
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <handle_serial+0x15e>
	} else {
		strcat(strbuf, "C");
    1614:	fe 01       	movw	r30, r28
    1616:	31 96       	adiw	r30, 0x01	; 1
    1618:	01 90       	ld	r0, Z+
    161a:	00 20       	and	r0, r0
    161c:	e9 f7       	brne	.-6      	; 0x1618 <handle_serial+0x14e>
    161e:	31 97       	sbiw	r30, 0x01	; 1
    1620:	83 e4       	ldi	r24, 0x43	; 67
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	80 83       	st	Z, r24
    1626:	91 83       	std	Z+1, r25	; 0x01
	}

	// Blue CCD vent valve
	strcat(strbuf, ",BLU,");
    1628:	de 01       	movw	r26, r28
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	0d 90       	ld	r0, X+
    162e:	00 20       	and	r0, r0
    1630:	e9 f7       	brne	.-6      	; 0x162c <handle_serial+0x162>
    1632:	11 97       	sbiw	r26, 0x01	; 1
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	e1 e5       	ldi	r30, 0x51	; 81
    1638:	f5 e6       	ldi	r31, 0x65	; 101
    163a:	01 90       	ld	r0, Z+
    163c:	0d 92       	st	X+, r0
    163e:	8a 95       	dec	r24
    1640:	e1 f7       	brne	.-8      	; 0x163a <handle_serial+0x170>
	if (!BLUENABLED) {
    1642:	8c e0       	ldi	r24, 0x0C	; 12
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    164a:	81 11       	cpse	r24, r1
    164c:	0b c0       	rjmp	.+22     	; 0x1664 <handle_serial+0x19a>
		strcat(strbuf, "D");
    164e:	fe 01       	movw	r30, r28
    1650:	31 96       	adiw	r30, 0x01	; 1
    1652:	01 90       	ld	r0, Z+
    1654:	00 20       	and	r0, r0
    1656:	e9 f7       	brne	.-6      	; 0x1652 <handle_serial+0x188>
    1658:	31 97       	sbiw	r30, 0x01	; 1
    165a:	84 e4       	ldi	r24, 0x44	; 68
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	80 83       	st	Z, r24
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	28 c0       	rjmp	.+80     	; 0x16b4 <handle_serial+0x1ea>
		} else if (status.maxopen_BLU) {
    1664:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
    1668:	88 23       	and	r24, r24
    166a:	59 f0       	breq	.+22     	; 0x1682 <handle_serial+0x1b8>
		strcat(strbuf, "T");
    166c:	fe 01       	movw	r30, r28
    166e:	31 96       	adiw	r30, 0x01	; 1
    1670:	01 90       	ld	r0, Z+
    1672:	00 20       	and	r0, r0
    1674:	e9 f7       	brne	.-6      	; 0x1670 <handle_serial+0x1a6>
    1676:	31 97       	sbiw	r30, 0x01	; 1
    1678:	84 e5       	ldi	r24, 0x54	; 84
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	80 83       	st	Z, r24
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	19 c0       	rjmp	.+50     	; 0x16b4 <handle_serial+0x1ea>
		} else if (BLUVALVEOPEN) {
    1682:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1686:	88 23       	and	r24, r24
    1688:	5c f4       	brge	.+22     	; 0x16a0 <handle_serial+0x1d6>
		strcat(strbuf, "O");
    168a:	fe 01       	movw	r30, r28
    168c:	31 96       	adiw	r30, 0x01	; 1
    168e:	01 90       	ld	r0, Z+
    1690:	00 20       	and	r0, r0
    1692:	e9 f7       	brne	.-6      	; 0x168e <handle_serial+0x1c4>
    1694:	31 97       	sbiw	r30, 0x01	; 1
    1696:	8f e4       	ldi	r24, 0x4F	; 79
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	80 83       	st	Z, r24
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	0a c0       	rjmp	.+20     	; 0x16b4 <handle_serial+0x1ea>
		} else {
		strcat(strbuf, "C");
    16a0:	fe 01       	movw	r30, r28
    16a2:	31 96       	adiw	r30, 0x01	; 1
    16a4:	01 90       	ld	r0, Z+
    16a6:	00 20       	and	r0, r0
    16a8:	e9 f7       	brne	.-6      	; 0x16a4 <handle_serial+0x1da>
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	83 e4       	ldi	r24, 0x43	; 67
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	80 83       	st	Z, r24
    16b2:	91 83       	std	Z+1, r25	; 0x01
	}

	// Fill interval
	strcat(strbuf, ",INT,");
    16b4:	8e 01       	movw	r16, r28
    16b6:	0f 5f       	subi	r16, 0xFF	; 255
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ba:	d8 01       	movw	r26, r16
    16bc:	0d 90       	ld	r0, X+
    16be:	00 20       	and	r0, r0
    16c0:	e9 f7       	brne	.-6      	; 0x16bc <handle_serial+0x1f2>
    16c2:	11 97       	sbiw	r26, 0x01	; 1
    16c4:	86 e0       	ldi	r24, 0x06	; 6
    16c6:	e7 e5       	ldi	r30, 0x57	; 87
    16c8:	f5 e6       	ldi	r31, 0x65	; 101
    16ca:	01 90       	ld	r0, Z+
    16cc:	0d 92       	st	X+, r0
    16ce:	8a 95       	dec	r24
    16d0:	e1 f7       	brne	.-8      	; 0x16ca <handle_serial+0x200>
	sprintf(tempstr, "%d", FILLINTERVAL);
    16d2:	8a e0       	ldi	r24, 0x0A	; 10
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    16da:	1f 92       	push	r1
    16dc:	8f 93       	push	r24
    16de:	0f 2e       	mov	r0, r31
    16e0:	fd e5       	ldi	r31, 0x5D	; 93
    16e2:	cf 2e       	mov	r12, r31
    16e4:	f5 e6       	ldi	r31, 0x65	; 101
    16e6:	df 2e       	mov	r13, r31
    16e8:	f0 2d       	mov	r31, r0
    16ea:	df 92       	push	r13
    16ec:	cf 92       	push	r12
    16ee:	7e 01       	movw	r14, r28
    16f0:	22 e5       	ldi	r18, 0x52	; 82
    16f2:	e2 0e       	add	r14, r18
    16f4:	f1 1c       	adc	r15, r1
    16f6:	ff 92       	push	r15
    16f8:	ef 92       	push	r14
    16fa:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
	strcat(strbuf, tempstr);
    16fe:	b7 01       	movw	r22, r14
    1700:	c8 01       	movw	r24, r16
    1702:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>

	// Time to next fill
	strcat(strbuf, ",NEXT,");
    1706:	d8 01       	movw	r26, r16
    1708:	0d 90       	ld	r0, X+
    170a:	00 20       	and	r0, r0
    170c:	e9 f7       	brne	.-6      	; 0x1708 <handle_serial+0x23e>
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	87 e0       	ldi	r24, 0x07	; 7
    1712:	e0 e6       	ldi	r30, 0x60	; 96
    1714:	f5 e6       	ldi	r31, 0x65	; 101
    1716:	01 90       	ld	r0, Z+
    1718:	0d 92       	st	X+, r0
    171a:	8a 95       	dec	r24
    171c:	e1 f7       	brne	.-8      	; 0x1716 <handle_serial+0x24c>
	sprintf(tempstr, "%d", status.next_fill);
    171e:	0f 2e       	mov	r0, r31
    1720:	f4 e0       	ldi	r31, 0x04	; 4
    1722:	af 2e       	mov	r10, r31
    1724:	f8 e2       	ldi	r31, 0x28	; 40
    1726:	bf 2e       	mov	r11, r31
    1728:	f0 2d       	mov	r31, r0
    172a:	f5 01       	movw	r30, r10
    172c:	82 89       	ldd	r24, Z+18	; 0x12
    172e:	1f 92       	push	r1
    1730:	8f 93       	push	r24
    1732:	df 92       	push	r13
    1734:	cf 92       	push	r12
    1736:	ff 92       	push	r15
    1738:	ef 92       	push	r14
    173a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
	strcat(strbuf, tempstr);
    173e:	b7 01       	movw	r22, r14
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>

	// Max open time
	strcat(strbuf, ",MAX,");
    1746:	d8 01       	movw	r26, r16
    1748:	0d 90       	ld	r0, X+
    174a:	00 20       	and	r0, r0
    174c:	e9 f7       	brne	.-6      	; 0x1748 <handle_serial+0x27e>
    174e:	11 97       	sbiw	r26, 0x01	; 1
    1750:	86 e0       	ldi	r24, 0x06	; 6
    1752:	e7 e6       	ldi	r30, 0x67	; 103
    1754:	f5 e6       	ldi	r31, 0x65	; 101
    1756:	01 90       	ld	r0, Z+
    1758:	0d 92       	st	X+, r0
    175a:	8a 95       	dec	r24
    175c:	e1 f7       	brne	.-8      	; 0x1756 <handle_serial+0x28c>
	sprintf(tempstr, "%d", MAXOPENTIME);
    175e:	8b e0       	ldi	r24, 0x0B	; 11
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 8c 11 	call	0x2318	; 0x2318 <eeprom_read_byte>
    1766:	1f 92       	push	r1
    1768:	8f 93       	push	r24
    176a:	df 92       	push	r13
    176c:	cf 92       	push	r12
    176e:	ff 92       	push	r15
    1770:	ef 92       	push	r14
    1772:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
	strcat(strbuf, tempstr);	
    1776:	b7 01       	movw	r22, r14
    1778:	c8 01       	movw	r24, r16
    177a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>

	// Pressure
	strcat(strbuf, ",PRES,");
    177e:	d8 01       	movw	r26, r16
    1780:	0d 90       	ld	r0, X+
    1782:	00 20       	and	r0, r0
    1784:	e9 f7       	brne	.-6      	; 0x1780 <handle_serial+0x2b6>
    1786:	11 97       	sbiw	r26, 0x01	; 1
    1788:	87 e0       	ldi	r24, 0x07	; 7
    178a:	ed e6       	ldi	r30, 0x6D	; 109
    178c:	f5 e6       	ldi	r31, 0x65	; 101
    178e:	01 90       	ld	r0, Z+
    1790:	0d 92       	st	X+, r0
    1792:	8a 95       	dec	r24
    1794:	e1 f7       	brne	.-8      	; 0x178e <handle_serial+0x2c4>
	sprintf(tempstr, "%d", status.pressure);
    1796:	f5 01       	movw	r30, r10
    1798:	84 89       	ldd	r24, Z+20	; 0x14
    179a:	1f 92       	push	r1
    179c:	8f 93       	push	r24
    179e:	df 92       	push	r13
    17a0:	cf 92       	push	r12
    17a2:	ff 92       	push	r15
    17a4:	ef 92       	push	r14
    17a6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <sprintf>
	strcat(strbuf, tempstr);
    17aa:	b7 01       	movw	r22, r14
    17ac:	c8 01       	movw	r24, r16
    17ae:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <strcat>

	strcat(strbuf,"\r\n");
    17b2:	f8 01       	movw	r30, r16
    17b4:	01 90       	ld	r0, Z+
    17b6:	00 20       	and	r0, r0
    17b8:	e9 f7       	brne	.-6      	; 0x17b4 <handle_serial+0x2ea>
    17ba:	31 97       	sbiw	r30, 0x01	; 1
    17bc:	8d e0       	ldi	r24, 0x0D	; 13
    17be:	9a e0       	ldi	r25, 0x0A	; 10
    17c0:	80 83       	st	Z, r24
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	12 82       	std	Z+2, r1	; 0x02
	start_TCB0(100);			// 100 ms ticks
    17c6:	84 e6       	ldi	r24, 0x64	; 100
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <start_TCB0>
	while (!send0_buf.done) {
    17ce:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <send0_buf+0x51>
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	81 11       	cpse	r24, r1
    17d8:	13 c0       	rjmp	.+38     	; 0x1800 <__DATA_REGION_LENGTH__>
		if (ticks_TCB0 > 10) {	// See timers.h
    17da:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    17de:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    17e2:	0b 97       	sbiw	r24, 0x0b	; 11
    17e4:	c8 f4       	brcc	.+50     	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
	sprintf(tempstr, "%d", status.pressure);
	strcat(strbuf, tempstr);

	strcat(strbuf,"\r\n");
	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    17e6:	e9 ec       	ldi	r30, 0xC9	; 201
    17e8:	f8 e2       	ldi	r31, 0x28	; 40
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <handle_serial+0x32e>
		if (ticks_TCB0 > 10) {	// See timers.h
    17ec:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    17f0:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    17f4:	0b 97       	sbiw	r24, 0x0b	; 11
    17f6:	80 f4       	brcc	.+32     	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
			return;
		}
		asm("nop");
    17f8:	00 00       	nop
	sprintf(tempstr, "%d", status.pressure);
	strcat(strbuf, tempstr);

	strcat(strbuf,"\r\n");
	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    17fa:	80 81       	ld	r24, Z
    17fc:	88 23       	and	r24, r24
    17fe:	b1 f3       	breq	.-20     	; 0x17ec <handle_serial+0x322>
		if (ticks_TCB0 > 10) {	// See timers.h
			return;
		}
		asm("nop");
	}
	send_USART((uint8_t*) strbuf, strlen(strbuf));
    1800:	ce 01       	movw	r24, r28
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	fc 01       	movw	r30, r24
    1806:	01 90       	ld	r0, Z+
    1808:	00 20       	and	r0, r0
    180a:	e9 f7       	brne	.-6      	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
    180c:	31 97       	sbiw	r30, 0x01	; 1
    180e:	bf 01       	movw	r22, r30
    1810:	68 1b       	sub	r22, r24
    1812:	79 0b       	sbc	r23, r25
    1814:	0e 94 49 0a 	call	0x1492	; 0x1492 <send_USART>
}
    1818:	ce 55       	subi	r28, 0x5E	; 94
    181a:	df 4f       	sbci	r29, 0xFF	; 255
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	08 95       	ret

00001836 <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    184c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    1850:	90 91 77 28 	lds	r25, 0x2877	; 0x802877 <recv0_buf+0x53>
    1854:	91 35       	cpi	r25, 0x51	; 81
    1856:	b0 f4       	brcc	.+44     	; 0x1884 <__vector_17+0x4e>
		if ((char) c == '\r') {
    1858:	8d 30       	cpi	r24, 0x0D	; 13
    185a:	51 f4       	brne	.+20     	; 0x1870 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    185c:	e0 91 77 28 	lds	r30, 0x2877	; 0x802877 <recv0_buf+0x53>
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	ec 5d       	subi	r30, 0xDC	; 220
    1864:	f7 4d       	sbci	r31, 0xD7	; 215
    1866:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 75 28 	sts	0x2875, r24	; 0x802875 <recv0_buf+0x51>
    186e:	0a c0       	rjmp	.+20     	; 0x1884 <__vector_17+0x4e>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    1870:	a7 e7       	ldi	r26, 0x77	; 119
    1872:	b8 e2       	ldi	r27, 0x28	; 40
    1874:	ec 91       	ld	r30, X
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	9e 0f       	add	r25, r30
    187a:	9c 93       	st	X, r25
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	ec 5d       	subi	r30, 0xDC	; 220
    1880:	f7 4d       	sbci	r31, 0xD7	; 215
    1882:	80 83       	st	Z, r24
		}
	}
}
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	8f 93       	push	r24
    18a6:	9f 93       	push	r25
    18a8:	af 93       	push	r26
    18aa:	bf 93       	push	r27
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    18b4:	c0 e0       	ldi	r28, 0x00	; 0
    18b6:	d8 e0       	ldi	r29, 0x08	; 8
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	8f 7d       	andi	r24, 0xDF	; 223
    18bc:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    18be:	aa ec       	ldi	r26, 0xCA	; 202
    18c0:	b8 e2       	ldi	r27, 0x28	; 40
    18c2:	ec 91       	ld	r30, X
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8e 0f       	add	r24, r30
    18c8:	8c 93       	st	X, r24
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	e8 58       	subi	r30, 0x88	; 136
    18ce:	f7 4d       	sbci	r31, 0xD7	; 215
    18d0:	80 81       	ld	r24, Z
    18d2:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    18d4:	90 91 cb 28 	lds	r25, 0x28CB	; 0x8028cb <send0_buf+0x53>
    18d8:	8c 91       	ld	r24, X
    18da:	98 13       	cpse	r25, r24
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <send0_buf+0x51>
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    18e6:	e0 e0       	ldi	r30, 0x00	; 0
    18e8:	f8 e0       	ldi	r31, 0x08	; 8
    18ea:	85 81       	ldd	r24, Z+5	; 0x05
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	85 83       	std	Z+5, r24	; 0x05
	}
}
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    190a:	e0 e4       	ldi	r30, 0x40	; 64
    190c:	f4 e0       	ldi	r31, 0x04	; 4
    190e:	80 ef       	ldi	r24, 0xF0	; 240
    1910:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1912:	81 83       	std	Z+1, r24	; 0x01
    1914:	08 95       	ret

00001916 <__subsf3>:
    1916:	50 58       	subi	r21, 0x80	; 128

00001918 <__addsf3>:
    1918:	bb 27       	eor	r27, r27
    191a:	aa 27       	eor	r26, r26
    191c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3x>
    1920:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_round>
    1924:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscA>
    1928:	38 f0       	brcs	.+14     	; 0x1938 <__addsf3+0x20>
    192a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscB>
    192e:	20 f0       	brcs	.+8      	; 0x1938 <__addsf3+0x20>
    1930:	39 f4       	brne	.+14     	; 0x1940 <__addsf3+0x28>
    1932:	9f 3f       	cpi	r25, 0xFF	; 255
    1934:	19 f4       	brne	.+6      	; 0x193c <__addsf3+0x24>
    1936:	26 f4       	brtc	.+8      	; 0x1940 <__addsf3+0x28>
    1938:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_nan>
    193c:	0e f4       	brtc	.+2      	; 0x1940 <__addsf3+0x28>
    193e:	e0 95       	com	r30
    1940:	e7 fb       	bst	r30, 7
    1942:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>

00001946 <__addsf3x>:
    1946:	e9 2f       	mov	r30, r25
    1948:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fp_split3>
    194c:	58 f3       	brcs	.-42     	; 0x1924 <__addsf3+0xc>
    194e:	ba 17       	cp	r27, r26
    1950:	62 07       	cpc	r22, r18
    1952:	73 07       	cpc	r23, r19
    1954:	84 07       	cpc	r24, r20
    1956:	95 07       	cpc	r25, r21
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__addsf3x+0x1c>
    195a:	79 f4       	brne	.+30     	; 0x197a <__addsf3x+0x34>
    195c:	a6 f5       	brtc	.+104    	; 0x19c6 <__addsf3x+0x80>
    195e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_zero>
    1962:	0e f4       	brtc	.+2      	; 0x1966 <__addsf3x+0x20>
    1964:	e0 95       	com	r30
    1966:	0b 2e       	mov	r0, r27
    1968:	ba 2f       	mov	r27, r26
    196a:	a0 2d       	mov	r26, r0
    196c:	0b 01       	movw	r0, r22
    196e:	b9 01       	movw	r22, r18
    1970:	90 01       	movw	r18, r0
    1972:	0c 01       	movw	r0, r24
    1974:	ca 01       	movw	r24, r20
    1976:	a0 01       	movw	r20, r0
    1978:	11 24       	eor	r1, r1
    197a:	ff 27       	eor	r31, r31
    197c:	59 1b       	sub	r21, r25
    197e:	99 f0       	breq	.+38     	; 0x19a6 <__addsf3x+0x60>
    1980:	59 3f       	cpi	r21, 0xF9	; 249
    1982:	50 f4       	brcc	.+20     	; 0x1998 <__addsf3x+0x52>
    1984:	50 3e       	cpi	r21, 0xE0	; 224
    1986:	68 f1       	brcs	.+90     	; 0x19e2 <__addsf3x+0x9c>
    1988:	1a 16       	cp	r1, r26
    198a:	f0 40       	sbci	r31, 0x00	; 0
    198c:	a2 2f       	mov	r26, r18
    198e:	23 2f       	mov	r18, r19
    1990:	34 2f       	mov	r19, r20
    1992:	44 27       	eor	r20, r20
    1994:	58 5f       	subi	r21, 0xF8	; 248
    1996:	f3 cf       	rjmp	.-26     	; 0x197e <__addsf3x+0x38>
    1998:	46 95       	lsr	r20
    199a:	37 95       	ror	r19
    199c:	27 95       	ror	r18
    199e:	a7 95       	ror	r26
    19a0:	f0 40       	sbci	r31, 0x00	; 0
    19a2:	53 95       	inc	r21
    19a4:	c9 f7       	brne	.-14     	; 0x1998 <__addsf3x+0x52>
    19a6:	7e f4       	brtc	.+30     	; 0x19c6 <__addsf3x+0x80>
    19a8:	1f 16       	cp	r1, r31
    19aa:	ba 0b       	sbc	r27, r26
    19ac:	62 0b       	sbc	r22, r18
    19ae:	73 0b       	sbc	r23, r19
    19b0:	84 0b       	sbc	r24, r20
    19b2:	ba f0       	brmi	.+46     	; 0x19e2 <__addsf3x+0x9c>
    19b4:	91 50       	subi	r25, 0x01	; 1
    19b6:	a1 f0       	breq	.+40     	; 0x19e0 <__addsf3x+0x9a>
    19b8:	ff 0f       	add	r31, r31
    19ba:	bb 1f       	adc	r27, r27
    19bc:	66 1f       	adc	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	c2 f7       	brpl	.-16     	; 0x19b4 <__addsf3x+0x6e>
    19c4:	0e c0       	rjmp	.+28     	; 0x19e2 <__addsf3x+0x9c>
    19c6:	ba 0f       	add	r27, r26
    19c8:	62 1f       	adc	r22, r18
    19ca:	73 1f       	adc	r23, r19
    19cc:	84 1f       	adc	r24, r20
    19ce:	48 f4       	brcc	.+18     	; 0x19e2 <__addsf3x+0x9c>
    19d0:	87 95       	ror	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	b7 95       	ror	r27
    19d8:	f7 95       	ror	r31
    19da:	9e 3f       	cpi	r25, 0xFE	; 254
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <__addsf3x+0x9a>
    19de:	b0 cf       	rjmp	.-160    	; 0x1940 <__addsf3+0x28>
    19e0:	93 95       	inc	r25
    19e2:	88 0f       	add	r24, r24
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <__addsf3x+0xa2>
    19e6:	99 27       	eor	r25, r25
    19e8:	ee 0f       	add	r30, r30
    19ea:	97 95       	ror	r25
    19ec:	87 95       	ror	r24
    19ee:	08 95       	ret

000019f0 <__cmpsf2>:
    19f0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fp_cmp>
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <__cmpsf2+0x8>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	08 95       	ret

000019fa <__divsf3>:
    19fa:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__divsf3x>
    19fe:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_round>
    1a02:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscB>
    1a06:	58 f0       	brcs	.+22     	; 0x1a1e <__divsf3+0x24>
    1a08:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscA>
    1a0c:	40 f0       	brcs	.+16     	; 0x1a1e <__divsf3+0x24>
    1a0e:	29 f4       	brne	.+10     	; 0x1a1a <__divsf3+0x20>
    1a10:	5f 3f       	cpi	r21, 0xFF	; 255
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <__divsf3+0x24>
    1a14:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1a18:	51 11       	cpse	r21, r1
    1a1a:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>
    1a1e:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_nan>

00001a22 <__divsf3x>:
    1a22:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fp_split3>
    1a26:	68 f3       	brcs	.-38     	; 0x1a02 <__divsf3+0x8>

00001a28 <__divsf3_pse>:
    1a28:	99 23       	and	r25, r25
    1a2a:	b1 f3       	breq	.-20     	; 0x1a18 <__divsf3+0x1e>
    1a2c:	55 23       	and	r21, r21
    1a2e:	91 f3       	breq	.-28     	; 0x1a14 <__divsf3+0x1a>
    1a30:	95 1b       	sub	r25, r21
    1a32:	55 0b       	sbc	r21, r21
    1a34:	bb 27       	eor	r27, r27
    1a36:	aa 27       	eor	r26, r26
    1a38:	62 17       	cp	r22, r18
    1a3a:	73 07       	cpc	r23, r19
    1a3c:	84 07       	cpc	r24, r20
    1a3e:	38 f0       	brcs	.+14     	; 0x1a4e <__divsf3_pse+0x26>
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	44 1f       	adc	r20, r20
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	a9 f3       	breq	.-22     	; 0x1a38 <__divsf3_pse+0x10>
    1a4e:	35 d0       	rcall	.+106    	; 0x1aba <__divsf3_pse+0x92>
    1a50:	0e 2e       	mov	r0, r30
    1a52:	3a f0       	brmi	.+14     	; 0x1a62 <__divsf3_pse+0x3a>
    1a54:	e0 e8       	ldi	r30, 0x80	; 128
    1a56:	32 d0       	rcall	.+100    	; 0x1abc <__divsf3_pse+0x94>
    1a58:	91 50       	subi	r25, 0x01	; 1
    1a5a:	50 40       	sbci	r21, 0x00	; 0
    1a5c:	e6 95       	lsr	r30
    1a5e:	00 1c       	adc	r0, r0
    1a60:	ca f7       	brpl	.-14     	; 0x1a54 <__divsf3_pse+0x2c>
    1a62:	2b d0       	rcall	.+86     	; 0x1aba <__divsf3_pse+0x92>
    1a64:	fe 2f       	mov	r31, r30
    1a66:	29 d0       	rcall	.+82     	; 0x1aba <__divsf3_pse+0x92>
    1a68:	66 0f       	add	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	26 17       	cp	r18, r22
    1a72:	37 07       	cpc	r19, r23
    1a74:	48 07       	cpc	r20, r24
    1a76:	ab 07       	cpc	r26, r27
    1a78:	b0 e8       	ldi	r27, 0x80	; 128
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <__divsf3_pse+0x56>
    1a7c:	bb 0b       	sbc	r27, r27
    1a7e:	80 2d       	mov	r24, r0
    1a80:	bf 01       	movw	r22, r30
    1a82:	ff 27       	eor	r31, r31
    1a84:	93 58       	subi	r25, 0x83	; 131
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	3a f0       	brmi	.+14     	; 0x1a98 <__divsf3_pse+0x70>
    1a8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	78 f0       	brcs	.+30     	; 0x1aae <__divsf3_pse+0x86>
    1a90:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1a94:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>
    1a98:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9a:	e4 f3       	brlt	.-8      	; 0x1a94 <__divsf3_pse+0x6c>
    1a9c:	98 3e       	cpi	r25, 0xE8	; 232
    1a9e:	d4 f3       	brlt	.-12     	; 0x1a94 <__divsf3_pse+0x6c>
    1aa0:	86 95       	lsr	r24
    1aa2:	77 95       	ror	r23
    1aa4:	67 95       	ror	r22
    1aa6:	b7 95       	ror	r27
    1aa8:	f7 95       	ror	r31
    1aaa:	9f 5f       	subi	r25, 0xFF	; 255
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__divsf3_pse+0x78>
    1aae:	88 0f       	add	r24, r24
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret
    1aba:	e1 e0       	ldi	r30, 0x01	; 1
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	62 17       	cp	r22, r18
    1ac6:	73 07       	cpc	r23, r19
    1ac8:	84 07       	cpc	r24, r20
    1aca:	ba 07       	cpc	r27, r26
    1acc:	20 f0       	brcs	.+8      	; 0x1ad6 <__divsf3_pse+0xae>
    1ace:	62 1b       	sub	r22, r18
    1ad0:	73 0b       	sbc	r23, r19
    1ad2:	84 0b       	sbc	r24, r20
    1ad4:	ba 0b       	sbc	r27, r26
    1ad6:	ee 1f       	adc	r30, r30
    1ad8:	88 f7       	brcc	.-30     	; 0x1abc <__divsf3_pse+0x94>
    1ada:	e0 95       	com	r30
    1adc:	08 95       	ret

00001ade <__fixunssfsi>:
    1ade:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_splitA>
    1ae2:	88 f0       	brcs	.+34     	; 0x1b06 <__fixunssfsi+0x28>
    1ae4:	9f 57       	subi	r25, 0x7F	; 127
    1ae6:	98 f0       	brcs	.+38     	; 0x1b0e <__fixunssfsi+0x30>
    1ae8:	b9 2f       	mov	r27, r25
    1aea:	99 27       	eor	r25, r25
    1aec:	b7 51       	subi	r27, 0x17	; 23
    1aee:	b0 f0       	brcs	.+44     	; 0x1b1c <__fixunssfsi+0x3e>
    1af0:	e1 f0       	breq	.+56     	; 0x1b2a <__fixunssfsi+0x4c>
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	1a f0       	brmi	.+6      	; 0x1b02 <__fixunssfsi+0x24>
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__fixunssfsi+0x14>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <__fixunssfsi+0x4c>
    1b02:	b1 30       	cpi	r27, 0x01	; 1
    1b04:	91 f0       	breq	.+36     	; 0x1b2a <__fixunssfsi+0x4c>
    1b06:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__fp_zero>
    1b0a:	b1 e0       	ldi	r27, 0x01	; 1
    1b0c:	08 95       	ret
    1b0e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_zero>
    1b12:	67 2f       	mov	r22, r23
    1b14:	78 2f       	mov	r23, r24
    1b16:	88 27       	eor	r24, r24
    1b18:	b8 5f       	subi	r27, 0xF8	; 248
    1b1a:	39 f0       	breq	.+14     	; 0x1b2a <__fixunssfsi+0x4c>
    1b1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1b1e:	cc f3       	brlt	.-14     	; 0x1b12 <__fixunssfsi+0x34>
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b3 95       	inc	r27
    1b28:	d9 f7       	brne	.-10     	; 0x1b20 <__fixunssfsi+0x42>
    1b2a:	3e f4       	brtc	.+14     	; 0x1b3a <__fixunssfsi+0x5c>
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__floatunsisf>:
    1b3c:	e8 94       	clt
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <__floatsisf+0x12>

00001b40 <__floatsisf>:
    1b40:	97 fb       	bst	r25, 7
    1b42:	3e f4       	brtc	.+14     	; 0x1b52 <__floatsisf+0x12>
    1b44:	90 95       	com	r25
    1b46:	80 95       	com	r24
    1b48:	70 95       	com	r23
    1b4a:	61 95       	neg	r22
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	99 23       	and	r25, r25
    1b54:	a9 f0       	breq	.+42     	; 0x1b80 <__floatsisf+0x40>
    1b56:	f9 2f       	mov	r31, r25
    1b58:	96 e9       	ldi	r25, 0x96	; 150
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	93 95       	inc	r25
    1b5e:	f6 95       	lsr	r31
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	b7 95       	ror	r27
    1b68:	f1 11       	cpse	r31, r1
    1b6a:	f8 cf       	rjmp	.-16     	; 0x1b5c <__floatsisf+0x1c>
    1b6c:	fa f4       	brpl	.+62     	; 0x1bac <__floatsisf+0x6c>
    1b6e:	bb 0f       	add	r27, r27
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <__floatsisf+0x36>
    1b72:	60 ff       	sbrs	r22, 0
    1b74:	1b c0       	rjmp	.+54     	; 0x1bac <__floatsisf+0x6c>
    1b76:	6f 5f       	subi	r22, 0xFF	; 255
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	16 c0       	rjmp	.+44     	; 0x1bac <__floatsisf+0x6c>
    1b80:	88 23       	and	r24, r24
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <__floatsisf+0x48>
    1b84:	96 e9       	ldi	r25, 0x96	; 150
    1b86:	11 c0       	rjmp	.+34     	; 0x1baa <__floatsisf+0x6a>
    1b88:	77 23       	and	r23, r23
    1b8a:	21 f0       	breq	.+8      	; 0x1b94 <__floatsisf+0x54>
    1b8c:	9e e8       	ldi	r25, 0x8E	; 142
    1b8e:	87 2f       	mov	r24, r23
    1b90:	76 2f       	mov	r23, r22
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <__floatsisf+0x5e>
    1b94:	66 23       	and	r22, r22
    1b96:	71 f0       	breq	.+28     	; 0x1bb4 <__floatsisf+0x74>
    1b98:	96 e8       	ldi	r25, 0x86	; 134
    1b9a:	86 2f       	mov	r24, r22
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	2a f0       	brmi	.+10     	; 0x1bac <__floatsisf+0x6c>
    1ba2:	9a 95       	dec	r25
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	da f7       	brpl	.-10     	; 0x1ba2 <__floatsisf+0x62>
    1bac:	88 0f       	add	r24, r24
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	97 f9       	bld	r25, 7
    1bb4:	08 95       	ret

00001bb6 <__fp_cmp>:
    1bb6:	99 0f       	add	r25, r25
    1bb8:	00 08       	sbc	r0, r0
    1bba:	55 0f       	add	r21, r21
    1bbc:	aa 0b       	sbc	r26, r26
    1bbe:	e0 e8       	ldi	r30, 0x80	; 128
    1bc0:	fe ef       	ldi	r31, 0xFE	; 254
    1bc2:	16 16       	cp	r1, r22
    1bc4:	17 06       	cpc	r1, r23
    1bc6:	e8 07       	cpc	r30, r24
    1bc8:	f9 07       	cpc	r31, r25
    1bca:	c0 f0       	brcs	.+48     	; 0x1bfc <__fp_cmp+0x46>
    1bcc:	12 16       	cp	r1, r18
    1bce:	13 06       	cpc	r1, r19
    1bd0:	e4 07       	cpc	r30, r20
    1bd2:	f5 07       	cpc	r31, r21
    1bd4:	98 f0       	brcs	.+38     	; 0x1bfc <__fp_cmp+0x46>
    1bd6:	62 1b       	sub	r22, r18
    1bd8:	73 0b       	sbc	r23, r19
    1bda:	84 0b       	sbc	r24, r20
    1bdc:	95 0b       	sbc	r25, r21
    1bde:	39 f4       	brne	.+14     	; 0x1bee <__fp_cmp+0x38>
    1be0:	0a 26       	eor	r0, r26
    1be2:	61 f0       	breq	.+24     	; 0x1bfc <__fp_cmp+0x46>
    1be4:	23 2b       	or	r18, r19
    1be6:	24 2b       	or	r18, r20
    1be8:	25 2b       	or	r18, r21
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <__fp_cmp+0x3e>
    1bec:	08 95       	ret
    1bee:	0a 26       	eor	r0, r26
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <__fp_cmp+0x3e>
    1bf2:	a1 40       	sbci	r26, 0x01	; 1
    1bf4:	a6 95       	lsr	r26
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	81 1d       	adc	r24, r1
    1bfa:	81 1d       	adc	r24, r1
    1bfc:	08 95       	ret

00001bfe <__fp_inf>:
    1bfe:	97 f9       	bld	r25, 7
    1c00:	9f 67       	ori	r25, 0x7F	; 127
    1c02:	80 e8       	ldi	r24, 0x80	; 128
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	08 95       	ret

00001c0a <__fp_nan>:
    1c0a:	9f ef       	ldi	r25, 0xFF	; 255
    1c0c:	80 ec       	ldi	r24, 0xC0	; 192
    1c0e:	08 95       	ret

00001c10 <__fp_pscA>:
    1c10:	00 24       	eor	r0, r0
    1c12:	0a 94       	dec	r0
    1c14:	16 16       	cp	r1, r22
    1c16:	17 06       	cpc	r1, r23
    1c18:	18 06       	cpc	r1, r24
    1c1a:	09 06       	cpc	r0, r25
    1c1c:	08 95       	ret

00001c1e <__fp_pscB>:
    1c1e:	00 24       	eor	r0, r0
    1c20:	0a 94       	dec	r0
    1c22:	12 16       	cp	r1, r18
    1c24:	13 06       	cpc	r1, r19
    1c26:	14 06       	cpc	r1, r20
    1c28:	05 06       	cpc	r0, r21
    1c2a:	08 95       	ret

00001c2c <__fp_round>:
    1c2c:	09 2e       	mov	r0, r25
    1c2e:	03 94       	inc	r0
    1c30:	00 0c       	add	r0, r0
    1c32:	11 f4       	brne	.+4      	; 0x1c38 <__fp_round+0xc>
    1c34:	88 23       	and	r24, r24
    1c36:	52 f0       	brmi	.+20     	; 0x1c4c <__fp_round+0x20>
    1c38:	bb 0f       	add	r27, r27
    1c3a:	40 f4       	brcc	.+16     	; 0x1c4c <__fp_round+0x20>
    1c3c:	bf 2b       	or	r27, r31
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <__fp_round+0x18>
    1c40:	60 ff       	sbrs	r22, 0
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <__fp_round+0x20>
    1c44:	6f 5f       	subi	r22, 0xFF	; 255
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	08 95       	ret

00001c4e <__fp_split3>:
    1c4e:	57 fd       	sbrc	r21, 7
    1c50:	90 58       	subi	r25, 0x80	; 128
    1c52:	44 0f       	add	r20, r20
    1c54:	55 1f       	adc	r21, r21
    1c56:	59 f0       	breq	.+22     	; 0x1c6e <__fp_splitA+0x10>
    1c58:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5a:	71 f0       	breq	.+28     	; 0x1c78 <__fp_splitA+0x1a>
    1c5c:	47 95       	ror	r20

00001c5e <__fp_splitA>:
    1c5e:	88 0f       	add	r24, r24
    1c60:	97 fb       	bst	r25, 7
    1c62:	99 1f       	adc	r25, r25
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <__fp_splitA+0x20>
    1c66:	9f 3f       	cpi	r25, 0xFF	; 255
    1c68:	79 f0       	breq	.+30     	; 0x1c88 <__fp_splitA+0x2a>
    1c6a:	87 95       	ror	r24
    1c6c:	08 95       	ret
    1c6e:	12 16       	cp	r1, r18
    1c70:	13 06       	cpc	r1, r19
    1c72:	14 06       	cpc	r1, r20
    1c74:	55 1f       	adc	r21, r21
    1c76:	f2 cf       	rjmp	.-28     	; 0x1c5c <__fp_split3+0xe>
    1c78:	46 95       	lsr	r20
    1c7a:	f1 df       	rcall	.-30     	; 0x1c5e <__fp_splitA>
    1c7c:	08 c0       	rjmp	.+16     	; 0x1c8e <__fp_splitA+0x30>
    1c7e:	16 16       	cp	r1, r22
    1c80:	17 06       	cpc	r1, r23
    1c82:	18 06       	cpc	r1, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	f1 cf       	rjmp	.-30     	; 0x1c6a <__fp_splitA+0xc>
    1c88:	86 95       	lsr	r24
    1c8a:	71 05       	cpc	r23, r1
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	08 94       	sec
    1c90:	08 95       	ret

00001c92 <__fp_zero>:
    1c92:	e8 94       	clt

00001c94 <__fp_szero>:
    1c94:	bb 27       	eor	r27, r27
    1c96:	66 27       	eor	r22, r22
    1c98:	77 27       	eor	r23, r23
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	97 f9       	bld	r25, 7
    1c9e:	08 95       	ret

00001ca0 <__mulsf3>:
    1ca0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__mulsf3x>
    1ca4:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_round>
    1ca8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_pscA>
    1cac:	38 f0       	brcs	.+14     	; 0x1cbc <__mulsf3+0x1c>
    1cae:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__fp_pscB>
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <__mulsf3+0x1c>
    1cb4:	95 23       	and	r25, r21
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <__mulsf3+0x1c>
    1cb8:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1cbc:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__fp_nan>
    1cc0:	11 24       	eor	r1, r1
    1cc2:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>

00001cc6 <__mulsf3x>:
    1cc6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__fp_split3>
    1cca:	70 f3       	brcs	.-36     	; 0x1ca8 <__mulsf3+0x8>

00001ccc <__mulsf3_pse>:
    1ccc:	95 9f       	mul	r25, r21
    1cce:	c1 f3       	breq	.-16     	; 0x1cc0 <__mulsf3+0x20>
    1cd0:	95 0f       	add	r25, r21
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	62 9f       	mul	r22, r18
    1cd8:	f0 01       	movw	r30, r0
    1cda:	72 9f       	mul	r23, r18
    1cdc:	bb 27       	eor	r27, r27
    1cde:	f0 0d       	add	r31, r0
    1ce0:	b1 1d       	adc	r27, r1
    1ce2:	63 9f       	mul	r22, r19
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	f0 0d       	add	r31, r0
    1ce8:	b1 1d       	adc	r27, r1
    1cea:	aa 1f       	adc	r26, r26
    1cec:	64 9f       	mul	r22, r20
    1cee:	66 27       	eor	r22, r22
    1cf0:	b0 0d       	add	r27, r0
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	66 1f       	adc	r22, r22
    1cf6:	82 9f       	mul	r24, r18
    1cf8:	22 27       	eor	r18, r18
    1cfa:	b0 0d       	add	r27, r0
    1cfc:	a1 1d       	adc	r26, r1
    1cfe:	62 1f       	adc	r22, r18
    1d00:	73 9f       	mul	r23, r19
    1d02:	b0 0d       	add	r27, r0
    1d04:	a1 1d       	adc	r26, r1
    1d06:	62 1f       	adc	r22, r18
    1d08:	83 9f       	mul	r24, r19
    1d0a:	a0 0d       	add	r26, r0
    1d0c:	61 1d       	adc	r22, r1
    1d0e:	22 1f       	adc	r18, r18
    1d10:	74 9f       	mul	r23, r20
    1d12:	33 27       	eor	r19, r19
    1d14:	a0 0d       	add	r26, r0
    1d16:	61 1d       	adc	r22, r1
    1d18:	23 1f       	adc	r18, r19
    1d1a:	84 9f       	mul	r24, r20
    1d1c:	60 0d       	add	r22, r0
    1d1e:	21 1d       	adc	r18, r1
    1d20:	82 2f       	mov	r24, r18
    1d22:	76 2f       	mov	r23, r22
    1d24:	6a 2f       	mov	r22, r26
    1d26:	11 24       	eor	r1, r1
    1d28:	9f 57       	subi	r25, 0x7F	; 127
    1d2a:	50 40       	sbci	r21, 0x00	; 0
    1d2c:	9a f0       	brmi	.+38     	; 0x1d54 <__mulsf3_pse+0x88>
    1d2e:	f1 f0       	breq	.+60     	; 0x1d6c <__mulsf3_pse+0xa0>
    1d30:	88 23       	and	r24, r24
    1d32:	4a f0       	brmi	.+18     	; 0x1d46 <__mulsf3_pse+0x7a>
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	bb 1f       	adc	r27, r27
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	91 50       	subi	r25, 0x01	; 1
    1d42:	50 40       	sbci	r21, 0x00	; 0
    1d44:	a9 f7       	brne	.-22     	; 0x1d30 <__mulsf3_pse+0x64>
    1d46:	9e 3f       	cpi	r25, 0xFE	; 254
    1d48:	51 05       	cpc	r21, r1
    1d4a:	80 f0       	brcs	.+32     	; 0x1d6c <__mulsf3_pse+0xa0>
    1d4c:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__fp_inf>
    1d50:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__fp_szero>
    1d54:	5f 3f       	cpi	r21, 0xFF	; 255
    1d56:	e4 f3       	brlt	.-8      	; 0x1d50 <__mulsf3_pse+0x84>
    1d58:	98 3e       	cpi	r25, 0xE8	; 232
    1d5a:	d4 f3       	brlt	.-12     	; 0x1d50 <__mulsf3_pse+0x84>
    1d5c:	86 95       	lsr	r24
    1d5e:	77 95       	ror	r23
    1d60:	67 95       	ror	r22
    1d62:	b7 95       	ror	r27
    1d64:	f7 95       	ror	r31
    1d66:	e7 95       	ror	r30
    1d68:	9f 5f       	subi	r25, 0xFF	; 255
    1d6a:	c1 f7       	brne	.-16     	; 0x1d5c <__mulsf3_pse+0x90>
    1d6c:	fe 2b       	or	r31, r30
    1d6e:	88 0f       	add	r24, r24
    1d70:	91 1d       	adc	r25, r1
    1d72:	96 95       	lsr	r25
    1d74:	87 95       	ror	r24
    1d76:	97 f9       	bld	r25, 7
    1d78:	08 95       	ret

00001d7a <__tablejump2__>:
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	05 90       	lpm	r0, Z+
    1d80:	f4 91       	lpm	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	09 94       	ijmp

00001d86 <strcat>:
    1d86:	fb 01       	movw	r30, r22
    1d88:	dc 01       	movw	r26, r24
    1d8a:	0d 90       	ld	r0, X+
    1d8c:	00 20       	and	r0, r0
    1d8e:	e9 f7       	brne	.-6      	; 0x1d8a <strcat+0x4>
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	01 90       	ld	r0, Z+
    1d94:	0d 92       	st	X+, r0
    1d96:	00 20       	and	r0, r0
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <strcat+0xc>
    1d9a:	08 95       	ret

00001d9c <strcpy>:
    1d9c:	fb 01       	movw	r30, r22
    1d9e:	dc 01       	movw	r26, r24
    1da0:	01 90       	ld	r0, Z+
    1da2:	0d 92       	st	X+, r0
    1da4:	00 20       	and	r0, r0
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <strcpy+0x4>
    1da8:	08 95       	ret

00001daa <sprintf>:
    1daa:	ae e0       	ldi	r26, 0x0E	; 14
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	eb ed       	ldi	r30, 0xDB	; 219
    1db0:	fe e0       	ldi	r31, 0x0E	; 14
    1db2:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__prologue_saves__+0x1c>
    1db6:	0d 89       	ldd	r16, Y+21	; 0x15
    1db8:	1e 89       	ldd	r17, Y+22	; 0x16
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	8c 83       	std	Y+4, r24	; 0x04
    1dbe:	09 83       	std	Y+1, r16	; 0x01
    1dc0:	1a 83       	std	Y+2, r17	; 0x02
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	9f e7       	ldi	r25, 0x7F	; 127
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	ae 01       	movw	r20, r28
    1dcc:	47 5e       	subi	r20, 0xE7	; 231
    1dce:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd0:	6f 89       	ldd	r22, Y+23	; 0x17
    1dd2:	78 8d       	ldd	r23, Y+24	; 0x18
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <vfprintf>
    1ddc:	ef 81       	ldd	r30, Y+7	; 0x07
    1dde:	f8 85       	ldd	r31, Y+8	; 0x08
    1de0:	e0 0f       	add	r30, r16
    1de2:	f1 1f       	adc	r31, r17
    1de4:	10 82       	st	Z, r1
    1de6:	2e 96       	adiw	r28, 0x0e	; 14
    1de8:	e4 e0       	ldi	r30, 0x04	; 4
    1dea:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__epilogue_restores__+0x1c>

00001dee <vfprintf>:
    1dee:	ab e0       	ldi	r26, 0x0B	; 11
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ed ef       	ldi	r30, 0xFD	; 253
    1df4:	fe e0       	ldi	r31, 0x0E	; 14
    1df6:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__>
    1dfa:	6c 01       	movw	r12, r24
    1dfc:	7b 01       	movw	r14, r22
    1dfe:	8a 01       	movw	r16, r20
    1e00:	fc 01       	movw	r30, r24
    1e02:	16 82       	std	Z+6, r1	; 0x06
    1e04:	17 82       	std	Z+7, r1	; 0x07
    1e06:	83 81       	ldd	r24, Z+3	; 0x03
    1e08:	81 ff       	sbrs	r24, 1
    1e0a:	cc c1       	rjmp	.+920    	; 0x21a4 <vfprintf+0x3b6>
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	3c 01       	movw	r6, r24
    1e12:	f6 01       	movw	r30, r12
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	f7 01       	movw	r30, r14
    1e18:	93 fd       	sbrc	r25, 3
    1e1a:	85 91       	lpm	r24, Z+
    1e1c:	93 ff       	sbrs	r25, 3
    1e1e:	81 91       	ld	r24, Z+
    1e20:	7f 01       	movw	r14, r30
    1e22:	88 23       	and	r24, r24
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <vfprintf+0x3a>
    1e26:	ba c1       	rjmp	.+884    	; 0x219c <vfprintf+0x3ae>
    1e28:	85 32       	cpi	r24, 0x25	; 37
    1e2a:	39 f4       	brne	.+14     	; 0x1e3a <vfprintf+0x4c>
    1e2c:	93 fd       	sbrc	r25, 3
    1e2e:	85 91       	lpm	r24, Z+
    1e30:	93 ff       	sbrs	r25, 3
    1e32:	81 91       	ld	r24, Z+
    1e34:	7f 01       	movw	r14, r30
    1e36:	85 32       	cpi	r24, 0x25	; 37
    1e38:	29 f4       	brne	.+10     	; 0x1e44 <vfprintf+0x56>
    1e3a:	b6 01       	movw	r22, r12
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    1e42:	e7 cf       	rjmp	.-50     	; 0x1e12 <vfprintf+0x24>
    1e44:	91 2c       	mov	r9, r1
    1e46:	21 2c       	mov	r2, r1
    1e48:	31 2c       	mov	r3, r1
    1e4a:	ff e1       	ldi	r31, 0x1F	; 31
    1e4c:	f3 15       	cp	r31, r3
    1e4e:	d8 f0       	brcs	.+54     	; 0x1e86 <vfprintf+0x98>
    1e50:	8b 32       	cpi	r24, 0x2B	; 43
    1e52:	79 f0       	breq	.+30     	; 0x1e72 <vfprintf+0x84>
    1e54:	38 f4       	brcc	.+14     	; 0x1e64 <vfprintf+0x76>
    1e56:	80 32       	cpi	r24, 0x20	; 32
    1e58:	79 f0       	breq	.+30     	; 0x1e78 <vfprintf+0x8a>
    1e5a:	83 32       	cpi	r24, 0x23	; 35
    1e5c:	a1 f4       	brne	.+40     	; 0x1e86 <vfprintf+0x98>
    1e5e:	23 2d       	mov	r18, r3
    1e60:	20 61       	ori	r18, 0x10	; 16
    1e62:	1d c0       	rjmp	.+58     	; 0x1e9e <vfprintf+0xb0>
    1e64:	8d 32       	cpi	r24, 0x2D	; 45
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <vfprintf+0x92>
    1e68:	80 33       	cpi	r24, 0x30	; 48
    1e6a:	69 f4       	brne	.+26     	; 0x1e86 <vfprintf+0x98>
    1e6c:	23 2d       	mov	r18, r3
    1e6e:	21 60       	ori	r18, 0x01	; 1
    1e70:	16 c0       	rjmp	.+44     	; 0x1e9e <vfprintf+0xb0>
    1e72:	83 2d       	mov	r24, r3
    1e74:	82 60       	ori	r24, 0x02	; 2
    1e76:	38 2e       	mov	r3, r24
    1e78:	e3 2d       	mov	r30, r3
    1e7a:	e4 60       	ori	r30, 0x04	; 4
    1e7c:	3e 2e       	mov	r3, r30
    1e7e:	2a c0       	rjmp	.+84     	; 0x1ed4 <vfprintf+0xe6>
    1e80:	f3 2d       	mov	r31, r3
    1e82:	f8 60       	ori	r31, 0x08	; 8
    1e84:	1d c0       	rjmp	.+58     	; 0x1ec0 <vfprintf+0xd2>
    1e86:	37 fc       	sbrc	r3, 7
    1e88:	2d c0       	rjmp	.+90     	; 0x1ee4 <vfprintf+0xf6>
    1e8a:	20 ed       	ldi	r18, 0xD0	; 208
    1e8c:	28 0f       	add	r18, r24
    1e8e:	2a 30       	cpi	r18, 0x0A	; 10
    1e90:	40 f0       	brcs	.+16     	; 0x1ea2 <vfprintf+0xb4>
    1e92:	8e 32       	cpi	r24, 0x2E	; 46
    1e94:	b9 f4       	brne	.+46     	; 0x1ec4 <vfprintf+0xd6>
    1e96:	36 fc       	sbrc	r3, 6
    1e98:	81 c1       	rjmp	.+770    	; 0x219c <vfprintf+0x3ae>
    1e9a:	23 2d       	mov	r18, r3
    1e9c:	20 64       	ori	r18, 0x40	; 64
    1e9e:	32 2e       	mov	r3, r18
    1ea0:	19 c0       	rjmp	.+50     	; 0x1ed4 <vfprintf+0xe6>
    1ea2:	36 fe       	sbrs	r3, 6
    1ea4:	06 c0       	rjmp	.+12     	; 0x1eb2 <vfprintf+0xc4>
    1ea6:	8a e0       	ldi	r24, 0x0A	; 10
    1ea8:	98 9e       	mul	r9, r24
    1eaa:	20 0d       	add	r18, r0
    1eac:	11 24       	eor	r1, r1
    1eae:	92 2e       	mov	r9, r18
    1eb0:	11 c0       	rjmp	.+34     	; 0x1ed4 <vfprintf+0xe6>
    1eb2:	ea e0       	ldi	r30, 0x0A	; 10
    1eb4:	2e 9e       	mul	r2, r30
    1eb6:	20 0d       	add	r18, r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	22 2e       	mov	r2, r18
    1ebc:	f3 2d       	mov	r31, r3
    1ebe:	f0 62       	ori	r31, 0x20	; 32
    1ec0:	3f 2e       	mov	r3, r31
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <vfprintf+0xe6>
    1ec4:	8c 36       	cpi	r24, 0x6C	; 108
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <vfprintf+0xe2>
    1ec8:	83 2d       	mov	r24, r3
    1eca:	80 68       	ori	r24, 0x80	; 128
    1ecc:	38 2e       	mov	r3, r24
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <vfprintf+0xe6>
    1ed0:	88 36       	cpi	r24, 0x68	; 104
    1ed2:	41 f4       	brne	.+16     	; 0x1ee4 <vfprintf+0xf6>
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	93 fd       	sbrc	r25, 3
    1ed8:	85 91       	lpm	r24, Z+
    1eda:	93 ff       	sbrs	r25, 3
    1edc:	81 91       	ld	r24, Z+
    1ede:	7f 01       	movw	r14, r30
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	b3 cf       	rjmp	.-154    	; 0x1e4a <vfprintf+0x5c>
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	9f 7d       	andi	r25, 0xDF	; 223
    1ee8:	95 54       	subi	r25, 0x45	; 69
    1eea:	93 30       	cpi	r25, 0x03	; 3
    1eec:	28 f4       	brcc	.+10     	; 0x1ef8 <vfprintf+0x10a>
    1eee:	0c 5f       	subi	r16, 0xFC	; 252
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	9f e3       	ldi	r25, 0x3F	; 63
    1ef4:	99 83       	std	Y+1, r25	; 0x01
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <vfprintf+0x124>
    1ef8:	83 36       	cpi	r24, 0x63	; 99
    1efa:	31 f0       	breq	.+12     	; 0x1f08 <vfprintf+0x11a>
    1efc:	83 37       	cpi	r24, 0x73	; 115
    1efe:	71 f0       	breq	.+28     	; 0x1f1c <vfprintf+0x12e>
    1f00:	83 35       	cpi	r24, 0x53	; 83
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <vfprintf+0x118>
    1f04:	59 c0       	rjmp	.+178    	; 0x1fb8 <vfprintf+0x1ca>
    1f06:	21 c0       	rjmp	.+66     	; 0x1f4a <vfprintf+0x15c>
    1f08:	f8 01       	movw	r30, r16
    1f0a:	80 81       	ld	r24, Z
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	0e 5f       	subi	r16, 0xFE	; 254
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	88 24       	eor	r8, r8
    1f14:	83 94       	inc	r8
    1f16:	91 2c       	mov	r9, r1
    1f18:	53 01       	movw	r10, r6
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <vfprintf+0x154>
    1f1c:	28 01       	movw	r4, r16
    1f1e:	f2 e0       	ldi	r31, 0x02	; 2
    1f20:	4f 0e       	add	r4, r31
    1f22:	51 1c       	adc	r5, r1
    1f24:	f8 01       	movw	r30, r16
    1f26:	a0 80       	ld	r10, Z
    1f28:	b1 80       	ldd	r11, Z+1	; 0x01
    1f2a:	36 fe       	sbrs	r3, 6
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <vfprintf+0x146>
    1f2e:	69 2d       	mov	r22, r9
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x14a>
    1f34:	6f ef       	ldi	r22, 0xFF	; 255
    1f36:	7f ef       	ldi	r23, 0xFF	; 255
    1f38:	c5 01       	movw	r24, r10
    1f3a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <strnlen>
    1f3e:	4c 01       	movw	r8, r24
    1f40:	82 01       	movw	r16, r4
    1f42:	f3 2d       	mov	r31, r3
    1f44:	ff 77       	andi	r31, 0x7F	; 127
    1f46:	3f 2e       	mov	r3, r31
    1f48:	16 c0       	rjmp	.+44     	; 0x1f76 <vfprintf+0x188>
    1f4a:	28 01       	movw	r4, r16
    1f4c:	22 e0       	ldi	r18, 0x02	; 2
    1f4e:	42 0e       	add	r4, r18
    1f50:	51 1c       	adc	r5, r1
    1f52:	f8 01       	movw	r30, r16
    1f54:	a0 80       	ld	r10, Z
    1f56:	b1 80       	ldd	r11, Z+1	; 0x01
    1f58:	36 fe       	sbrs	r3, 6
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <vfprintf+0x174>
    1f5c:	69 2d       	mov	r22, r9
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <vfprintf+0x178>
    1f62:	6f ef       	ldi	r22, 0xFF	; 255
    1f64:	7f ef       	ldi	r23, 0xFF	; 255
    1f66:	c5 01       	movw	r24, r10
    1f68:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <strnlen_P>
    1f6c:	4c 01       	movw	r8, r24
    1f6e:	f3 2d       	mov	r31, r3
    1f70:	f0 68       	ori	r31, 0x80	; 128
    1f72:	3f 2e       	mov	r3, r31
    1f74:	82 01       	movw	r16, r4
    1f76:	33 fc       	sbrc	r3, 3
    1f78:	1b c0       	rjmp	.+54     	; 0x1fb0 <vfprintf+0x1c2>
    1f7a:	82 2d       	mov	r24, r2
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	88 16       	cp	r8, r24
    1f80:	99 06       	cpc	r9, r25
    1f82:	b0 f4       	brcc	.+44     	; 0x1fb0 <vfprintf+0x1c2>
    1f84:	b6 01       	movw	r22, r12
    1f86:	80 e2       	ldi	r24, 0x20	; 32
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    1f8e:	2a 94       	dec	r2
    1f90:	f4 cf       	rjmp	.-24     	; 0x1f7a <vfprintf+0x18c>
    1f92:	f5 01       	movw	r30, r10
    1f94:	37 fc       	sbrc	r3, 7
    1f96:	85 91       	lpm	r24, Z+
    1f98:	37 fe       	sbrs	r3, 7
    1f9a:	81 91       	ld	r24, Z+
    1f9c:	5f 01       	movw	r10, r30
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    1fa6:	21 10       	cpse	r2, r1
    1fa8:	2a 94       	dec	r2
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	82 1a       	sub	r8, r18
    1fae:	91 08       	sbc	r9, r1
    1fb0:	81 14       	cp	r8, r1
    1fb2:	91 04       	cpc	r9, r1
    1fb4:	71 f7       	brne	.-36     	; 0x1f92 <vfprintf+0x1a4>
    1fb6:	e8 c0       	rjmp	.+464    	; 0x2188 <vfprintf+0x39a>
    1fb8:	84 36       	cpi	r24, 0x64	; 100
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <vfprintf+0x1d2>
    1fbc:	89 36       	cpi	r24, 0x69	; 105
    1fbe:	41 f5       	brne	.+80     	; 0x2010 <vfprintf+0x222>
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	37 fe       	sbrs	r3, 7
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <vfprintf+0x1e6>
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	0c 5f       	subi	r16, 0xFC	; 252
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <vfprintf+0x1f6>
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	07 2e       	mov	r0, r23
    1fda:	00 0c       	add	r0, r0
    1fdc:	88 0b       	sbc	r24, r24
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	0e 5f       	subi	r16, 0xFE	; 254
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	ff 76       	andi	r31, 0x6F	; 111
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	97 ff       	sbrs	r25, 7
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <vfprintf+0x212>
    1fee:	90 95       	com	r25
    1ff0:	80 95       	com	r24
    1ff2:	70 95       	com	r23
    1ff4:	61 95       	neg	r22
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	f0 68       	ori	r31, 0x80	; 128
    1ffe:	3f 2e       	mov	r3, r31
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	a3 01       	movw	r20, r6
    2006:	0e 94 2a 11 	call	0x2254	; 0x2254 <__ultoa_invert>
    200a:	88 2e       	mov	r8, r24
    200c:	86 18       	sub	r8, r6
    200e:	45 c0       	rjmp	.+138    	; 0x209a <vfprintf+0x2ac>
    2010:	85 37       	cpi	r24, 0x75	; 117
    2012:	31 f4       	brne	.+12     	; 0x2020 <vfprintf+0x232>
    2014:	23 2d       	mov	r18, r3
    2016:	2f 7e       	andi	r18, 0xEF	; 239
    2018:	b2 2e       	mov	r11, r18
    201a:	2a e0       	ldi	r18, 0x0A	; 10
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	25 c0       	rjmp	.+74     	; 0x206a <vfprintf+0x27c>
    2020:	93 2d       	mov	r25, r3
    2022:	99 7f       	andi	r25, 0xF9	; 249
    2024:	b9 2e       	mov	r11, r25
    2026:	8f 36       	cpi	r24, 0x6F	; 111
    2028:	c1 f0       	breq	.+48     	; 0x205a <vfprintf+0x26c>
    202a:	18 f4       	brcc	.+6      	; 0x2032 <vfprintf+0x244>
    202c:	88 35       	cpi	r24, 0x58	; 88
    202e:	79 f0       	breq	.+30     	; 0x204e <vfprintf+0x260>
    2030:	b5 c0       	rjmp	.+362    	; 0x219c <vfprintf+0x3ae>
    2032:	80 37       	cpi	r24, 0x70	; 112
    2034:	19 f0       	breq	.+6      	; 0x203c <vfprintf+0x24e>
    2036:	88 37       	cpi	r24, 0x78	; 120
    2038:	21 f0       	breq	.+8      	; 0x2042 <vfprintf+0x254>
    203a:	b0 c0       	rjmp	.+352    	; 0x219c <vfprintf+0x3ae>
    203c:	e9 2f       	mov	r30, r25
    203e:	e0 61       	ori	r30, 0x10	; 16
    2040:	be 2e       	mov	r11, r30
    2042:	b4 fe       	sbrs	r11, 4
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <vfprintf+0x272>
    2046:	fb 2d       	mov	r31, r11
    2048:	f4 60       	ori	r31, 0x04	; 4
    204a:	bf 2e       	mov	r11, r31
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <vfprintf+0x272>
    204e:	34 fe       	sbrs	r3, 4
    2050:	0a c0       	rjmp	.+20     	; 0x2066 <vfprintf+0x278>
    2052:	29 2f       	mov	r18, r25
    2054:	26 60       	ori	r18, 0x06	; 6
    2056:	b2 2e       	mov	r11, r18
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x278>
    205a:	28 e0       	ldi	r18, 0x08	; 8
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	05 c0       	rjmp	.+10     	; 0x206a <vfprintf+0x27c>
    2060:	20 e1       	ldi	r18, 0x10	; 16
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	02 c0       	rjmp	.+4      	; 0x206a <vfprintf+0x27c>
    2066:	20 e1       	ldi	r18, 0x10	; 16
    2068:	32 e0       	ldi	r19, 0x02	; 2
    206a:	f8 01       	movw	r30, r16
    206c:	b7 fe       	sbrs	r11, 7
    206e:	07 c0       	rjmp	.+14     	; 0x207e <vfprintf+0x290>
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	0c 5f       	subi	r16, 0xFC	; 252
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	06 c0       	rjmp	.+12     	; 0x208a <vfprintf+0x29c>
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 5f       	subi	r16, 0xFE	; 254
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	a3 01       	movw	r20, r6
    208c:	0e 94 2a 11 	call	0x2254	; 0x2254 <__ultoa_invert>
    2090:	88 2e       	mov	r8, r24
    2092:	86 18       	sub	r8, r6
    2094:	fb 2d       	mov	r31, r11
    2096:	ff 77       	andi	r31, 0x7F	; 127
    2098:	3f 2e       	mov	r3, r31
    209a:	36 fe       	sbrs	r3, 6
    209c:	0d c0       	rjmp	.+26     	; 0x20b8 <vfprintf+0x2ca>
    209e:	23 2d       	mov	r18, r3
    20a0:	2e 7f       	andi	r18, 0xFE	; 254
    20a2:	a2 2e       	mov	r10, r18
    20a4:	89 14       	cp	r8, r9
    20a6:	58 f4       	brcc	.+22     	; 0x20be <vfprintf+0x2d0>
    20a8:	34 fe       	sbrs	r3, 4
    20aa:	0b c0       	rjmp	.+22     	; 0x20c2 <vfprintf+0x2d4>
    20ac:	32 fc       	sbrc	r3, 2
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <vfprintf+0x2d4>
    20b0:	83 2d       	mov	r24, r3
    20b2:	8e 7e       	andi	r24, 0xEE	; 238
    20b4:	a8 2e       	mov	r10, r24
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <vfprintf+0x2d4>
    20b8:	b8 2c       	mov	r11, r8
    20ba:	a3 2c       	mov	r10, r3
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <vfprintf+0x2d6>
    20be:	b8 2c       	mov	r11, r8
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <vfprintf+0x2d6>
    20c2:	b9 2c       	mov	r11, r9
    20c4:	a4 fe       	sbrs	r10, 4
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <vfprintf+0x2f8>
    20c8:	fe 01       	movw	r30, r28
    20ca:	e8 0d       	add	r30, r8
    20cc:	f1 1d       	adc	r31, r1
    20ce:	80 81       	ld	r24, Z
    20d0:	80 33       	cpi	r24, 0x30	; 48
    20d2:	21 f4       	brne	.+8      	; 0x20dc <vfprintf+0x2ee>
    20d4:	9a 2d       	mov	r25, r10
    20d6:	99 7e       	andi	r25, 0xE9	; 233
    20d8:	a9 2e       	mov	r10, r25
    20da:	09 c0       	rjmp	.+18     	; 0x20ee <vfprintf+0x300>
    20dc:	a2 fe       	sbrs	r10, 2
    20de:	06 c0       	rjmp	.+12     	; 0x20ec <vfprintf+0x2fe>
    20e0:	b3 94       	inc	r11
    20e2:	b3 94       	inc	r11
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <vfprintf+0x300>
    20e6:	8a 2d       	mov	r24, r10
    20e8:	86 78       	andi	r24, 0x86	; 134
    20ea:	09 f0       	breq	.+2      	; 0x20ee <vfprintf+0x300>
    20ec:	b3 94       	inc	r11
    20ee:	a3 fc       	sbrc	r10, 3
    20f0:	11 c0       	rjmp	.+34     	; 0x2114 <vfprintf+0x326>
    20f2:	a0 fe       	sbrs	r10, 0
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <vfprintf+0x314>
    20f6:	b2 14       	cp	r11, r2
    20f8:	88 f4       	brcc	.+34     	; 0x211c <vfprintf+0x32e>
    20fa:	28 0c       	add	r2, r8
    20fc:	92 2c       	mov	r9, r2
    20fe:	9b 18       	sub	r9, r11
    2100:	0e c0       	rjmp	.+28     	; 0x211e <vfprintf+0x330>
    2102:	b2 14       	cp	r11, r2
    2104:	60 f4       	brcc	.+24     	; 0x211e <vfprintf+0x330>
    2106:	b6 01       	movw	r22, r12
    2108:	80 e2       	ldi	r24, 0x20	; 32
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2110:	b3 94       	inc	r11
    2112:	f7 cf       	rjmp	.-18     	; 0x2102 <vfprintf+0x314>
    2114:	b2 14       	cp	r11, r2
    2116:	18 f4       	brcc	.+6      	; 0x211e <vfprintf+0x330>
    2118:	2b 18       	sub	r2, r11
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <vfprintf+0x332>
    211c:	98 2c       	mov	r9, r8
    211e:	21 2c       	mov	r2, r1
    2120:	a4 fe       	sbrs	r10, 4
    2122:	10 c0       	rjmp	.+32     	; 0x2144 <vfprintf+0x356>
    2124:	b6 01       	movw	r22, r12
    2126:	80 e3       	ldi	r24, 0x30	; 48
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    212e:	a2 fe       	sbrs	r10, 2
    2130:	17 c0       	rjmp	.+46     	; 0x2160 <vfprintf+0x372>
    2132:	a1 fc       	sbrc	r10, 1
    2134:	03 c0       	rjmp	.+6      	; 0x213c <vfprintf+0x34e>
    2136:	88 e7       	ldi	r24, 0x78	; 120
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <vfprintf+0x352>
    213c:	88 e5       	ldi	r24, 0x58	; 88
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	b6 01       	movw	r22, r12
    2142:	0c c0       	rjmp	.+24     	; 0x215c <vfprintf+0x36e>
    2144:	8a 2d       	mov	r24, r10
    2146:	86 78       	andi	r24, 0x86	; 134
    2148:	59 f0       	breq	.+22     	; 0x2160 <vfprintf+0x372>
    214a:	a1 fe       	sbrs	r10, 1
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <vfprintf+0x364>
    214e:	8b e2       	ldi	r24, 0x2B	; 43
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <vfprintf+0x366>
    2152:	80 e2       	ldi	r24, 0x20	; 32
    2154:	a7 fc       	sbrc	r10, 7
    2156:	8d e2       	ldi	r24, 0x2D	; 45
    2158:	b6 01       	movw	r22, r12
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2160:	89 14       	cp	r8, r9
    2162:	38 f4       	brcc	.+14     	; 0x2172 <vfprintf+0x384>
    2164:	b6 01       	movw	r22, r12
    2166:	80 e3       	ldi	r24, 0x30	; 48
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    216e:	9a 94       	dec	r9
    2170:	f7 cf       	rjmp	.-18     	; 0x2160 <vfprintf+0x372>
    2172:	8a 94       	dec	r8
    2174:	f3 01       	movw	r30, r6
    2176:	e8 0d       	add	r30, r8
    2178:	f1 1d       	adc	r31, r1
    217a:	80 81       	ld	r24, Z
    217c:	b6 01       	movw	r22, r12
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2184:	81 10       	cpse	r8, r1
    2186:	f5 cf       	rjmp	.-22     	; 0x2172 <vfprintf+0x384>
    2188:	22 20       	and	r2, r2
    218a:	09 f4       	brne	.+2      	; 0x218e <vfprintf+0x3a0>
    218c:	42 ce       	rjmp	.-892    	; 0x1e12 <vfprintf+0x24>
    218e:	b6 01       	movw	r22, r12
    2190:	80 e2       	ldi	r24, 0x20	; 32
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 ee 10 	call	0x21dc	; 0x21dc <fputc>
    2198:	2a 94       	dec	r2
    219a:	f6 cf       	rjmp	.-20     	; 0x2188 <vfprintf+0x39a>
    219c:	f6 01       	movw	r30, r12
    219e:	86 81       	ldd	r24, Z+6	; 0x06
    21a0:	97 81       	ldd	r25, Z+7	; 0x07
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <vfprintf+0x3ba>
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	2b 96       	adiw	r28, 0x0b	; 11
    21aa:	e2 e1       	ldi	r30, 0x12	; 18
    21ac:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__epilogue_restores__>

000021b0 <strnlen_P>:
    21b0:	fc 01       	movw	r30, r24
    21b2:	05 90       	lpm	r0, Z+
    21b4:	61 50       	subi	r22, 0x01	; 1
    21b6:	70 40       	sbci	r23, 0x00	; 0
    21b8:	01 10       	cpse	r0, r1
    21ba:	d8 f7       	brcc	.-10     	; 0x21b2 <strnlen_P+0x2>
    21bc:	80 95       	com	r24
    21be:	90 95       	com	r25
    21c0:	8e 0f       	add	r24, r30
    21c2:	9f 1f       	adc	r25, r31
    21c4:	08 95       	ret

000021c6 <strnlen>:
    21c6:	fc 01       	movw	r30, r24
    21c8:	61 50       	subi	r22, 0x01	; 1
    21ca:	70 40       	sbci	r23, 0x00	; 0
    21cc:	01 90       	ld	r0, Z+
    21ce:	01 10       	cpse	r0, r1
    21d0:	d8 f7       	brcc	.-10     	; 0x21c8 <strnlen+0x2>
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	8e 0f       	add	r24, r30
    21d8:	9f 1f       	adc	r25, r31
    21da:	08 95       	ret

000021dc <fputc>:
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	fb 01       	movw	r30, r22
    21e6:	23 81       	ldd	r18, Z+3	; 0x03
    21e8:	21 fd       	sbrc	r18, 1
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <fputc+0x16>
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	9f ef       	ldi	r25, 0xFF	; 255
    21f0:	2c c0       	rjmp	.+88     	; 0x224a <fputc+0x6e>
    21f2:	22 ff       	sbrs	r18, 2
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <fputc+0x46>
    21f6:	46 81       	ldd	r20, Z+6	; 0x06
    21f8:	57 81       	ldd	r21, Z+7	; 0x07
    21fa:	24 81       	ldd	r18, Z+4	; 0x04
    21fc:	35 81       	ldd	r19, Z+5	; 0x05
    21fe:	42 17       	cp	r20, r18
    2200:	53 07       	cpc	r21, r19
    2202:	44 f4       	brge	.+16     	; 0x2214 <fputc+0x38>
    2204:	a0 81       	ld	r26, Z
    2206:	b1 81       	ldd	r27, Z+1	; 0x01
    2208:	9d 01       	movw	r18, r26
    220a:	2f 5f       	subi	r18, 0xFF	; 255
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	20 83       	st	Z, r18
    2210:	31 83       	std	Z+1, r19	; 0x01
    2212:	8c 93       	st	X, r24
    2214:	26 81       	ldd	r18, Z+6	; 0x06
    2216:	37 81       	ldd	r19, Z+7	; 0x07
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	26 83       	std	Z+6, r18	; 0x06
    221e:	37 83       	std	Z+7, r19	; 0x07
    2220:	14 c0       	rjmp	.+40     	; 0x224a <fputc+0x6e>
    2222:	8b 01       	movw	r16, r22
    2224:	ec 01       	movw	r28, r24
    2226:	fb 01       	movw	r30, r22
    2228:	00 84       	ldd	r0, Z+8	; 0x08
    222a:	f1 85       	ldd	r31, Z+9	; 0x09
    222c:	e0 2d       	mov	r30, r0
    222e:	09 95       	icall
    2230:	89 2b       	or	r24, r25
    2232:	e1 f6       	brne	.-72     	; 0x21ec <fputc+0x10>
    2234:	d8 01       	movw	r26, r16
    2236:	16 96       	adiw	r26, 0x06	; 6
    2238:	8d 91       	ld	r24, X+
    223a:	9c 91       	ld	r25, X
    223c:	17 97       	sbiw	r26, 0x07	; 7
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	16 96       	adiw	r26, 0x06	; 6
    2242:	8d 93       	st	X+, r24
    2244:	9c 93       	st	X, r25
    2246:	17 97       	sbiw	r26, 0x07	; 7
    2248:	ce 01       	movw	r24, r28
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <__ultoa_invert>:
    2254:	fa 01       	movw	r30, r20
    2256:	aa 27       	eor	r26, r26
    2258:	28 30       	cpi	r18, 0x08	; 8
    225a:	51 f1       	breq	.+84     	; 0x22b0 <__ultoa_invert+0x5c>
    225c:	20 31       	cpi	r18, 0x10	; 16
    225e:	81 f1       	breq	.+96     	; 0x22c0 <__ultoa_invert+0x6c>
    2260:	e8 94       	clt
    2262:	6f 93       	push	r22
    2264:	6e 7f       	andi	r22, 0xFE	; 254
    2266:	6e 5f       	subi	r22, 0xFE	; 254
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	8f 4f       	sbci	r24, 0xFF	; 255
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	af 4f       	sbci	r26, 0xFF	; 255
    2270:	b1 e0       	ldi	r27, 0x01	; 1
    2272:	3e d0       	rcall	.+124    	; 0x22f0 <__ultoa_invert+0x9c>
    2274:	b4 e0       	ldi	r27, 0x04	; 4
    2276:	3c d0       	rcall	.+120    	; 0x22f0 <__ultoa_invert+0x9c>
    2278:	67 0f       	add	r22, r23
    227a:	78 1f       	adc	r23, r24
    227c:	89 1f       	adc	r24, r25
    227e:	9a 1f       	adc	r25, r26
    2280:	a1 1d       	adc	r26, r1
    2282:	68 0f       	add	r22, r24
    2284:	79 1f       	adc	r23, r25
    2286:	8a 1f       	adc	r24, r26
    2288:	91 1d       	adc	r25, r1
    228a:	a1 1d       	adc	r26, r1
    228c:	6a 0f       	add	r22, r26
    228e:	71 1d       	adc	r23, r1
    2290:	81 1d       	adc	r24, r1
    2292:	91 1d       	adc	r25, r1
    2294:	a1 1d       	adc	r26, r1
    2296:	20 d0       	rcall	.+64     	; 0x22d8 <__ultoa_invert+0x84>
    2298:	09 f4       	brne	.+2      	; 0x229c <__ultoa_invert+0x48>
    229a:	68 94       	set
    229c:	3f 91       	pop	r19
    229e:	2a e0       	ldi	r18, 0x0A	; 10
    22a0:	26 9f       	mul	r18, r22
    22a2:	11 24       	eor	r1, r1
    22a4:	30 19       	sub	r19, r0
    22a6:	30 5d       	subi	r19, 0xD0	; 208
    22a8:	31 93       	st	Z+, r19
    22aa:	de f6       	brtc	.-74     	; 0x2262 <__ultoa_invert+0xe>
    22ac:	cf 01       	movw	r24, r30
    22ae:	08 95       	ret
    22b0:	46 2f       	mov	r20, r22
    22b2:	47 70       	andi	r20, 0x07	; 7
    22b4:	40 5d       	subi	r20, 0xD0	; 208
    22b6:	41 93       	st	Z+, r20
    22b8:	b3 e0       	ldi	r27, 0x03	; 3
    22ba:	0f d0       	rcall	.+30     	; 0x22da <__ultoa_invert+0x86>
    22bc:	c9 f7       	brne	.-14     	; 0x22b0 <__ultoa_invert+0x5c>
    22be:	f6 cf       	rjmp	.-20     	; 0x22ac <__ultoa_invert+0x58>
    22c0:	46 2f       	mov	r20, r22
    22c2:	4f 70       	andi	r20, 0x0F	; 15
    22c4:	40 5d       	subi	r20, 0xD0	; 208
    22c6:	4a 33       	cpi	r20, 0x3A	; 58
    22c8:	18 f0       	brcs	.+6      	; 0x22d0 <__ultoa_invert+0x7c>
    22ca:	49 5d       	subi	r20, 0xD9	; 217
    22cc:	31 fd       	sbrc	r19, 1
    22ce:	40 52       	subi	r20, 0x20	; 32
    22d0:	41 93       	st	Z+, r20
    22d2:	02 d0       	rcall	.+4      	; 0x22d8 <__ultoa_invert+0x84>
    22d4:	a9 f7       	brne	.-22     	; 0x22c0 <__ultoa_invert+0x6c>
    22d6:	ea cf       	rjmp	.-44     	; 0x22ac <__ultoa_invert+0x58>
    22d8:	b4 e0       	ldi	r27, 0x04	; 4
    22da:	a6 95       	lsr	r26
    22dc:	97 95       	ror	r25
    22de:	87 95       	ror	r24
    22e0:	77 95       	ror	r23
    22e2:	67 95       	ror	r22
    22e4:	ba 95       	dec	r27
    22e6:	c9 f7       	brne	.-14     	; 0x22da <__ultoa_invert+0x86>
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	61 05       	cpc	r22, r1
    22ec:	71 05       	cpc	r23, r1
    22ee:	08 95       	ret
    22f0:	9b 01       	movw	r18, r22
    22f2:	ac 01       	movw	r20, r24
    22f4:	0a 2e       	mov	r0, r26
    22f6:	06 94       	lsr	r0
    22f8:	57 95       	ror	r21
    22fa:	47 95       	ror	r20
    22fc:	37 95       	ror	r19
    22fe:	27 95       	ror	r18
    2300:	ba 95       	dec	r27
    2302:	c9 f7       	brne	.-14     	; 0x22f6 <__ultoa_invert+0xa2>
    2304:	62 0f       	add	r22, r18
    2306:	73 1f       	adc	r23, r19
    2308:	84 1f       	adc	r24, r20
    230a:	95 1f       	adc	r25, r21
    230c:	a0 1d       	adc	r26, r0
    230e:	08 95       	ret

00002310 <eeprom_read_block>:
    2310:	60 50       	subi	r22, 0x00	; 0
    2312:	7c 4e       	sbci	r23, 0xEC	; 236
    2314:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <memcpy>

00002318 <eeprom_read_byte>:
    2318:	03 d0       	rcall	.+6      	; 0x2320 <eeprom_mapen>
    231a:	80 81       	ld	r24, Z
    231c:	99 27       	eor	r25, r25
    231e:	08 95       	ret

00002320 <eeprom_mapen>:
    2320:	fc 01       	movw	r30, r24
    2322:	e0 50       	subi	r30, 0x00	; 0
    2324:	fc 4e       	sbci	r31, 0xEC	; 236
    2326:	08 95       	ret

00002328 <eeprom_update_block>:
    2328:	dc 01       	movw	r26, r24
    232a:	a4 0f       	add	r26, r20
    232c:	b5 1f       	adc	r27, r21
    232e:	41 50       	subi	r20, 0x01	; 1
    2330:	50 40       	sbci	r21, 0x00	; 0
    2332:	48 f0       	brcs	.+18     	; 0x2346 <eeprom_update_block+0x1e>
    2334:	cb 01       	movw	r24, r22
    2336:	84 0f       	add	r24, r20
    2338:	95 1f       	adc	r25, r21
    233a:	2e 91       	ld	r18, -X
    233c:	0e 94 a5 11 	call	0x234a	; 0x234a <eeprom_update_r18>
    2340:	41 50       	subi	r20, 0x01	; 1
    2342:	50 40       	sbci	r21, 0x00	; 0
    2344:	d0 f7       	brcc	.-12     	; 0x233a <eeprom_update_block+0x12>
    2346:	08 95       	ret

00002348 <eeprom_update_byte>:
    2348:	26 2f       	mov	r18, r22

0000234a <eeprom_update_r18>:
    234a:	0e 94 90 11 	call	0x2320	; 0x2320 <eeprom_mapen>
    234e:	00 80       	ld	r0, Z
    2350:	02 16       	cp	r0, r18
    2352:	19 f0       	breq	.+6      	; 0x235a <eeprom_update_r18+0x10>
    2354:	0e 94 b0 11 	call	0x2360	; 0x2360 <eeprom_write_r18>
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	08 95       	ret

0000235e <eeprom_write_byte>:
    235e:	26 2f       	mov	r18, r22

00002360 <eeprom_write_r18>:
    2360:	af 93       	push	r26
    2362:	bf 93       	push	r27
    2364:	e0 e0       	ldi	r30, 0x00	; 0
    2366:	f0 e1       	ldi	r31, 0x10	; 16
    2368:	32 81       	ldd	r19, Z+2	; 0x02
    236a:	31 fd       	sbrc	r19, 1
    236c:	fd cf       	rjmp	.-6      	; 0x2368 <eeprom_write_r18+0x8>
    236e:	dc 01       	movw	r26, r24
    2370:	a0 50       	subi	r26, 0x00	; 0
    2372:	bc 4e       	sbci	r27, 0xEC	; 236
    2374:	2c 93       	st	X, r18
    2376:	2d e9       	ldi	r18, 0x9D	; 157
    2378:	24 bf       	out	0x34, r18	; 52
    237a:	23 e0       	ldi	r18, 0x03	; 3
    237c:	20 83       	st	Z, r18
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	bf 91       	pop	r27
    2382:	af 91       	pop	r26
    2384:	08 95       	ret

00002386 <__prologue_saves__>:
    2386:	2f 92       	push	r2
    2388:	3f 92       	push	r3
    238a:	4f 92       	push	r4
    238c:	5f 92       	push	r5
    238e:	6f 92       	push	r6
    2390:	7f 92       	push	r7
    2392:	8f 92       	push	r8
    2394:	9f 92       	push	r9
    2396:	af 92       	push	r10
    2398:	bf 92       	push	r11
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	ca 1b       	sub	r28, r26
    23b0:	db 0b       	sbc	r29, r27
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	09 94       	ijmp

000023b8 <__epilogue_restores__>:
    23b8:	2a 88       	ldd	r2, Y+18	; 0x12
    23ba:	39 88       	ldd	r3, Y+17	; 0x11
    23bc:	48 88       	ldd	r4, Y+16	; 0x10
    23be:	5f 84       	ldd	r5, Y+15	; 0x0f
    23c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    23c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    23c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    23c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    23c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ca:	b9 84       	ldd	r11, Y+9	; 0x09
    23cc:	c8 84       	ldd	r12, Y+8	; 0x08
    23ce:	df 80       	ldd	r13, Y+7	; 0x07
    23d0:	ee 80       	ldd	r14, Y+6	; 0x06
    23d2:	fd 80       	ldd	r15, Y+5	; 0x05
    23d4:	0c 81       	ldd	r16, Y+4	; 0x04
    23d6:	1b 81       	ldd	r17, Y+3	; 0x03
    23d8:	aa 81       	ldd	r26, Y+2	; 0x02
    23da:	b9 81       	ldd	r27, Y+1	; 0x01
    23dc:	ce 0f       	add	r28, r30
    23de:	d1 1d       	adc	r29, r1
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	ed 01       	movw	r28, r26
    23e6:	08 95       	ret

000023e8 <memcpy>:
    23e8:	fb 01       	movw	r30, r22
    23ea:	dc 01       	movw	r26, r24
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <memcpy+0xa>
    23ee:	01 90       	ld	r0, Z+
    23f0:	0d 92       	st	X+, r0
    23f2:	41 50       	subi	r20, 0x01	; 1
    23f4:	50 40       	sbci	r21, 0x00	; 0
    23f6:	d8 f7       	brcc	.-10     	; 0x23ee <memcpy+0x6>
    23f8:	08 95       	ret

000023fa <_exit>:
    23fa:	f8 94       	cli

000023fc <__stop_program>:
    23fc:	ff cf       	rjmp	.-2      	; 0x23fc <__stop_program>
