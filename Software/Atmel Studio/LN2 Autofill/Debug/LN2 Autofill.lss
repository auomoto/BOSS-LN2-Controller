
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000221e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002048  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000142  00006048  00002048  000020dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000cc  00802800  00802800  0000221e  2**0
                  ALLOC
  4 .comment      0000008c  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022ac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000310  00000000  00000000  000022f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006800  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000033ad  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000234a  00000000  00000000  0000c1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000558  00000000  00000000  0000e4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f16  00000000  00000000  0000ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b43  00000000  00000000  00010966  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  000114a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__vector_17>
      48:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	3e 01       	movw	r6, r28
      a2:	5c 01       	movw	r10, r24
      a4:	33 02       	muls	r19, r19
      a6:	69 02       	muls	r22, r25
      a8:	a1 02       	muls	r26, r17
      aa:	d9 02       	muls	r29, r25
      ac:	fa 02       	muls	r31, r26
      ae:	29 03       	fmul	r18, r17

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	28 e2       	ldi	r18, 0x28	; 40
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	ac 3c       	cpi	r26, 0xCC	; 204
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
      d0:	0c 94 22 10 	jmp	0x2044	; 0x2044 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      d8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      dc:	82 30       	cpi	r24, 0x02	; 2
      de:	f9 f0       	breq	.+62     	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
      e0:	18 f4       	brcc	.+6      	; 0xe8 <handle_button+0x10>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	31 f0       	breq	.+12     	; 0xf2 <handle_button+0x1a>
      e6:	4c c0       	rjmp	.+152    	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	79 f1       	breq	.+94     	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
      ec:	84 30       	cpi	r24, 0x04	; 4
      ee:	e9 f1       	breq	.+122    	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
      f0:	47 c0       	rjmp	.+142    	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {
      f2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
      f6:	88 23       	and	r24, r24
      f8:	24 f4       	brge	.+8      	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
				CLOSEVALVE(BLUVALVE);
      fa:	80 e8       	ldi	r24, 0x80	; 128
      fc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     100:	09 c0       	rjmp	.+18     	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
			} else if (BLUENABLED) {
     102:	8c e0       	ldi	r24, 0x0C	; 12
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     10a:	88 23       	and	r24, r24
     10c:	19 f0       	breq	.+6      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
				OPENVALVE(BLUVALVE);
     10e:	80 e8       	ldi	r24, 0x80	; 128
     110:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			}
			status.opentime_BLU = 0;
     114:	e4 e0       	ldi	r30, 0x04	; 4
     116:	f8 e2       	ldi	r31, 0x28	; 40
     118:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     11a:	17 86       	std	Z+15, r1	; 0x0f
			break;
     11c:	31 c0       	rjmp	.+98     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>

		case REDBUTTON:
			if (REDVALVEOPEN) {
     11e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     122:	86 ff       	sbrs	r24, 6
     124:	04 c0       	rjmp	.+8      	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
				CLOSEVALVE(REDVALVE);
     126:	80 e4       	ldi	r24, 0x40	; 64
     128:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     12c:	09 c0       	rjmp	.+18     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
			} else if (REDENABLED) {
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     136:	88 23       	and	r24, r24
     138:	19 f0       	breq	.+6      	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
				OPENVALVE(REDVALVE);
     13a:	80 e4       	ldi	r24, 0x40	; 64
     13c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			}
			status.opentime_RED = 0;
     140:	e4 e0       	ldi	r30, 0x04	; 4
     142:	f8 e2       	ldi	r31, 0x28	; 40
     144:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     146:	10 8a       	std	Z+16, r1	; 0x10
			break;
     148:	1b c0       	rjmp	.+54     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {
     14a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     14e:	85 ff       	sbrs	r24, 5
     150:	04 c0       	rjmp	.+8      	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
				CLOSEVALVE(BUFVALVE);
     152:	80 e2       	ldi	r24, 0x20	; 32
     154:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     158:	03 c0       	rjmp	.+6      	; 0x160 <__EEPROM_REGION_LENGTH__+0x60>
			} else {
				OPENVALVE(BUFVALVE);
     15a:	80 e2       	ldi	r24, 0x20	; 32
     15c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			}
			status.opentime_BUF = 0;
     160:	e4 e0       	ldi	r30, 0x04	; 4
     162:	f8 e2       	ldi	r31, 0x28	; 40
     164:	15 86       	std	Z+13, r1	; 0x0d
			status.maxopen_BUF = FALSE;
     166:	11 8a       	std	Z+17, r1	; 0x11
			break;
     168:	0b c0       	rjmp	.+22     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {
     16a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     16e:	84 ff       	sbrs	r24, 4
     170:	04 c0       	rjmp	.+8      	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
				CLOSEVALVE(SUPVALVE);
     172:	80 e1       	ldi	r24, 0x10	; 16
     174:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     178:	03 c0       	rjmp	.+6      	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
			} else {
				OPENVALVE(SUPVALVE);
     17a:	80 e1       	ldi	r24, 0x10	; 16
     17c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>

		default:
			break;
	}

	button_pushed = FALSE;
     180:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>

	if (screen_value == SCRVALVES) {
     184:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	11 f4       	brne	.+4      	; 0x190 <__EEPROM_REGION_LENGTH__+0x90>
		display(SCRVALVES);
     18c:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
     190:	08 95       	ret

00000192 <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control switches
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     192:	e0 e2       	ldi	r30, 0x20	; 32
     194:	f4 e0       	ldi	r31, 0x04	; 4
     196:	8b e0       	ldi	r24, 0x0B	; 11
     198:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     19a:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     19c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     19e:	81 8b       	std	Z+17, r24	; 0x11
     1a0:	08 95       	ret

000001a2 <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     1a2:	1f 92       	push	r1
     1a4:	0f 92       	push	r0
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	0f 92       	push	r0
     1aa:	11 24       	eor	r1, r1
     1ac:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     1ae:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1b2:	82 ff       	sbrs	r24, 2
     1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     1b6:	84 e0       	ldi	r24, 0x04	; 4
     1b8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     1c2:	20 c0       	rjmp	.+64     	; 0x204 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     1c4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1c8:	83 ff       	sbrs	r24, 3
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     1d8:	15 c0       	rjmp	.+42     	; 0x204 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     1da:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1de:	80 ff       	sbrs	r24, 0
     1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     1ee:	0a c0       	rjmp	.+20     	; 0x204 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     1f0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     1f4:	81 ff       	sbrs	r24, 1
     1f6:	06 c0       	rjmp	.+12     	; 0x204 <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     1fe:	84 e0       	ldi	r24, 0x04	; 4
     200:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     204:	8f 91       	pop	r24
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <get_VERSION>:
------------------------------------------------------------------------------*/

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     210:	4a e0       	ldi	r20, 0x0A	; 10
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <eeprom_read_block>
     21c:	08 95       	ret

0000021e <update_VERSION>:

}

void update_VERSION(void)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	2b 97       	sbiw	r28, 0x0b	; 11
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     22c:	8b e0       	ldi	r24, 0x0B	; 11
     22e:	e8 e4       	ldi	r30, 0x48	; 72
     230:	f0 e6       	ldi	r31, 0x60	; 96
     232:	de 01       	movw	r26, r28
     234:	11 96       	adiw	r26, 0x01	; 1
     236:	01 90       	ld	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	8a 95       	dec	r24
     23c:	e1 f7       	brne	.-8      	; 0x236 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     23e:	4a e0       	ldi	r20, 0x0A	; 10
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	ce 01       	movw	r24, r28
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <eeprom_update_block>

}
     24e:	2b 96       	adiw	r28, 0x0b	; 11
     250:	cd bf       	out	0x3d, r28	; 61
     252:	de bf       	out	0x3e, r29	; 62
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	aa 97       	sbiw	r28, 0x2a	; 42
     264:	cd bf       	out	0x3d, r28	; 61
     266:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	91 05       	cpc	r25, r1
     26e:	08 f0       	brcs	.+2      	; 0x272 <display+0x18>
     270:	1f c2       	rjmp	.+1086   	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     272:	fc 01       	movw	r30, r24
     274:	e0 5b       	subi	r30, 0xB0	; 176
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__tablejump2__>
		case SCRVERSION:
			strcpy(line1, "  LN2 Autofill");
     27c:	8f e0       	ldi	r24, 0x0F	; 15
     27e:	e3 e5       	ldi	r30, 0x53	; 83
     280:	f0 e6       	ldi	r31, 0x60	; 96
     282:	de 01       	movw	r26, r28
     284:	11 96       	adiw	r26, 0x01	; 1
     286:	01 90       	ld	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	8a 95       	dec	r24
     28c:	e1 f7       	brne	.-8      	; 0x286 <display+0x2c>
			get_VERSION(status.version);
     28e:	84 e0       	ldi	r24, 0x04	; 4
     290:	98 e2       	ldi	r25, 0x28	; 40
     292:	0e 94 08 01 	call	0x210	; 0x210 <get_VERSION>
			strcpy(line2, "   ");
     296:	80 e2       	ldi	r24, 0x20	; 32
     298:	90 e2       	ldi	r25, 0x20	; 32
     29a:	8e 8b       	std	Y+22, r24	; 0x16
     29c:	9f 8b       	std	Y+23, r25	; 0x17
     29e:	80 e2       	ldi	r24, 0x20	; 32
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	88 8f       	std	Y+24, r24	; 0x18
     2a4:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     2a6:	64 e0       	ldi	r22, 0x04	; 4
     2a8:	78 e2       	ldi	r23, 0x28	; 40
     2aa:	ce 01       	movw	r24, r28
     2ac:	46 96       	adiw	r24, 0x16	; 22
     2ae:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <strcat>
			screen_value = SCRVERSION;
     2b2:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <screen_value>
			break;
     2b6:	10 c2       	rjmp	.+1056   	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
	
		case SCRVALVES:
			strcpy(line1, "SUP BUF RED BLU");
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	e2 e6       	ldi	r30, 0x62	; 98
     2bc:	f0 e6       	ldi	r31, 0x60	; 96
     2be:	de 01       	movw	r26, r28
     2c0:	11 96       	adiw	r26, 0x01	; 1
     2c2:	01 90       	ld	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	8a 95       	dec	r24
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <display+0x68>
			if (SUPVALVEOPEN) {
     2ca:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     2ce:	84 ff       	sbrs	r24, 4
     2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <display+0x8c>
				strcpy(line2, " O  ");
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	e2 e7       	ldi	r30, 0x72	; 114
     2d6:	f0 e6       	ldi	r31, 0x60	; 96
     2d8:	de 01       	movw	r26, r28
     2da:	56 96       	adiw	r26, 0x16	; 22
     2dc:	01 90       	ld	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	8a 95       	dec	r24
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <display+0x82>
     2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     2e6:	85 e0       	ldi	r24, 0x05	; 5
     2e8:	e7 e7       	ldi	r30, 0x77	; 119
     2ea:	f0 e6       	ldi	r31, 0x60	; 96
     2ec:	de 01       	movw	r26, r28
     2ee:	56 96       	adiw	r26, 0x16	; 22
     2f0:	01 90       	ld	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	8a 95       	dec	r24
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <display+0x96>
			}
			if (BUFVALVEOPEN) {
     2f8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     2fc:	85 ff       	sbrs	r24, 5
     2fe:	0e c0       	rjmp	.+28     	; 0x31c <display+0xc2>
				strcat(line2, " O  ");
     300:	de 01       	movw	r26, r28
     302:	56 96       	adiw	r26, 0x16	; 22
     304:	0d 90       	ld	r0, X+
     306:	00 20       	and	r0, r0
     308:	e9 f7       	brne	.-6      	; 0x304 <display+0xaa>
     30a:	11 97       	sbiw	r26, 0x01	; 1
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	e2 e7       	ldi	r30, 0x72	; 114
     310:	f0 e6       	ldi	r31, 0x60	; 96
     312:	01 90       	ld	r0, Z+
     314:	0d 92       	st	X+, r0
     316:	8a 95       	dec	r24
     318:	e1 f7       	brne	.-8      	; 0x312 <display+0xb8>
     31a:	1f c0       	rjmp	.+62     	; 0x35a <display+0x100>
			} else if (status.maxopen_BUF) {
     31c:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
     320:	88 23       	and	r24, r24
     322:	71 f0       	breq	.+28     	; 0x340 <display+0xe6>
				strcat(line2, " T  ");
     324:	de 01       	movw	r26, r28
     326:	56 96       	adiw	r26, 0x16	; 22
     328:	0d 90       	ld	r0, X+
     32a:	00 20       	and	r0, r0
     32c:	e9 f7       	brne	.-6      	; 0x328 <display+0xce>
     32e:	11 97       	sbiw	r26, 0x01	; 1
     330:	85 e0       	ldi	r24, 0x05	; 5
     332:	ec e7       	ldi	r30, 0x7C	; 124
     334:	f0 e6       	ldi	r31, 0x60	; 96
     336:	01 90       	ld	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	8a 95       	dec	r24
     33c:	e1 f7       	brne	.-8      	; 0x336 <display+0xdc>
     33e:	0d c0       	rjmp	.+26     	; 0x35a <display+0x100>
			} else {
				strcat(line2, " C  ");
     340:	de 01       	movw	r26, r28
     342:	56 96       	adiw	r26, 0x16	; 22
     344:	0d 90       	ld	r0, X+
     346:	00 20       	and	r0, r0
     348:	e9 f7       	brne	.-6      	; 0x344 <display+0xea>
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	85 e0       	ldi	r24, 0x05	; 5
     34e:	e7 e7       	ldi	r30, 0x77	; 119
     350:	f0 e6       	ldi	r31, 0x60	; 96
     352:	01 90       	ld	r0, Z+
     354:	0d 92       	st	X+, r0
     356:	8a 95       	dec	r24
     358:	e1 f7       	brne	.-8      	; 0x352 <display+0xf8>
			}
			if (!REDENABLED) {
     35a:	8d e0       	ldi	r24, 0x0D	; 13
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     362:	81 11       	cpse	r24, r1
     364:	0e c0       	rjmp	.+28     	; 0x382 <display+0x128>
				strcat(line2, " X  ");
     366:	de 01       	movw	r26, r28
     368:	56 96       	adiw	r26, 0x16	; 22
     36a:	0d 90       	ld	r0, X+
     36c:	00 20       	and	r0, r0
     36e:	e9 f7       	brne	.-6      	; 0x36a <display+0x110>
     370:	11 97       	sbiw	r26, 0x01	; 1
     372:	85 e0       	ldi	r24, 0x05	; 5
     374:	e1 e8       	ldi	r30, 0x81	; 129
     376:	f0 e6       	ldi	r31, 0x60	; 96
     378:	01 90       	ld	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	8a 95       	dec	r24
     37e:	e1 f7       	brne	.-8      	; 0x378 <display+0x11e>
     380:	31 c0       	rjmp	.+98     	; 0x3e4 <display+0x18a>
			} else if (REDVALVEOPEN) {
     382:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     386:	86 ff       	sbrs	r24, 6
     388:	0e c0       	rjmp	.+28     	; 0x3a6 <display+0x14c>
				strcat(line2, " O  ");
     38a:	de 01       	movw	r26, r28
     38c:	56 96       	adiw	r26, 0x16	; 22
     38e:	0d 90       	ld	r0, X+
     390:	00 20       	and	r0, r0
     392:	e9 f7       	brne	.-6      	; 0x38e <display+0x134>
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	e2 e7       	ldi	r30, 0x72	; 114
     39a:	f0 e6       	ldi	r31, 0x60	; 96
     39c:	01 90       	ld	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	8a 95       	dec	r24
     3a2:	e1 f7       	brne	.-8      	; 0x39c <display+0x142>
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <display+0x18a>
			} else if (status.maxopen_RED) {
     3a6:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
     3aa:	88 23       	and	r24, r24
     3ac:	71 f0       	breq	.+28     	; 0x3ca <display+0x170>
				strcat(line2, " T  ");
     3ae:	de 01       	movw	r26, r28
     3b0:	56 96       	adiw	r26, 0x16	; 22
     3b2:	0d 90       	ld	r0, X+
     3b4:	00 20       	and	r0, r0
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <display+0x158>
     3b8:	11 97       	sbiw	r26, 0x01	; 1
     3ba:	85 e0       	ldi	r24, 0x05	; 5
     3bc:	ec e7       	ldi	r30, 0x7C	; 124
     3be:	f0 e6       	ldi	r31, 0x60	; 96
     3c0:	01 90       	ld	r0, Z+
     3c2:	0d 92       	st	X+, r0
     3c4:	8a 95       	dec	r24
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <display+0x166>
     3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <display+0x18a>
			} else {
				strcat(line2, " C  ");
     3ca:	de 01       	movw	r26, r28
     3cc:	56 96       	adiw	r26, 0x16	; 22
     3ce:	0d 90       	ld	r0, X+
     3d0:	00 20       	and	r0, r0
     3d2:	e9 f7       	brne	.-6      	; 0x3ce <display+0x174>
     3d4:	11 97       	sbiw	r26, 0x01	; 1
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	e7 e7       	ldi	r30, 0x77	; 119
     3da:	f0 e6       	ldi	r31, 0x60	; 96
     3dc:	01 90       	ld	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	8a 95       	dec	r24
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <display+0x182>
			}
			if (!BLUENABLED) {
     3e4:	8c e0       	ldi	r24, 0x0C	; 12
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     3ec:	81 11       	cpse	r24, r1
     3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				strcat(line2, " X");
     3f0:	fe 01       	movw	r30, r28
     3f2:	76 96       	adiw	r30, 0x16	; 22
     3f4:	01 90       	ld	r0, Z+
     3f6:	00 20       	and	r0, r0
     3f8:	e9 f7       	brne	.-6      	; 0x3f4 <display+0x19a>
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	80 e2       	ldi	r24, 0x20	; 32
     3fe:	98 e5       	ldi	r25, 0x58	; 88
     400:	80 83       	st	Z, r24
     402:	91 83       	std	Z+1, r25	; 0x01
     404:	12 82       	std	Z+2, r1	; 0x02
     406:	2b c0       	rjmp	.+86     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			} else if (BLUVALVEOPEN) {
     408:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     40c:	88 23       	and	r24, r24
     40e:	64 f4       	brge	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				strcat(line2, " O");
     410:	fe 01       	movw	r30, r28
     412:	76 96       	adiw	r30, 0x16	; 22
     414:	01 90       	ld	r0, Z+
     416:	00 20       	and	r0, r0
     418:	e9 f7       	brne	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41a:	31 97       	sbiw	r30, 0x01	; 1
     41c:	80 e2       	ldi	r24, 0x20	; 32
     41e:	9f e4       	ldi	r25, 0x4F	; 79
     420:	80 83       	st	Z, r24
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	12 82       	std	Z+2, r1	; 0x02
     426:	1b c0       	rjmp	.+54     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			} else if (status.maxopen_BLU) {
     428:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
     42c:	88 23       	and	r24, r24
     42e:	61 f0       	breq	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
				strcat(line2, " T");
     430:	fe 01       	movw	r30, r28
     432:	76 96       	adiw	r30, 0x16	; 22
     434:	01 90       	ld	r0, Z+
     436:	00 20       	and	r0, r0
     438:	e9 f7       	brne	.-6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	94 e5       	ldi	r25, 0x54	; 84
     440:	80 83       	st	Z, r24
     442:	91 83       	std	Z+1, r25	; 0x01
     444:	12 82       	std	Z+2, r1	; 0x02
     446:	0b c0       	rjmp	.+22     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			} else {
				strcat(line2, " C");
     448:	fe 01       	movw	r30, r28
     44a:	76 96       	adiw	r30, 0x16	; 22
     44c:	01 90       	ld	r0, Z+
     44e:	00 20       	and	r0, r0
     450:	e9 f7       	brne	.-6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	80 e2       	ldi	r24, 0x20	; 32
     456:	93 e4       	ldi	r25, 0x43	; 67
     458:	80 83       	st	Z, r24
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     464:	39 c1       	rjmp	.+626    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     466:	8d e0       	ldi	r24, 0x0D	; 13
     468:	e6 e8       	ldi	r30, 0x86	; 134
     46a:	f0 e6       	ldi	r31, 0x60	; 96
     46c:	de 01       	movw	r26, r28
     46e:	11 96       	adiw	r26, 0x01	; 1
     470:	01 90       	ld	r0, Z+
     472:	0d 92       	st	X+, r0
     474:	8a 95       	dec	r24
     476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			if (status.next_fill < 2) {
     478:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0x12>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	98 f4       	brcc	.+38     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
				sprintf(line2, "%d minute", status.next_fill);
     480:	1f 92       	push	r1
     482:	8f 93       	push	r24
     484:	83 e9       	ldi	r24, 0x93	; 147
     486:	90 e6       	ldi	r25, 0x60	; 96
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	ce 01       	movw	r24, r28
     48e:	46 96       	adiw	r24, 0x16	; 22
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	12 c0       	rjmp	.+36     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     4a6:	1f 92       	push	r1
     4a8:	8f 93       	push	r24
     4aa:	8d e9       	ldi	r24, 0x9D	; 157
     4ac:	90 e6       	ldi	r25, 0x60	; 96
     4ae:	9f 93       	push	r25
     4b0:	8f 93       	push	r24
     4b2:	ce 01       	movw	r24, r28
     4b4:	46 96       	adiw	r24, 0x16	; 22
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     4d0:	03 c1       	rjmp	.+518    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     4d2:	8e e0       	ldi	r24, 0x0E	; 14
     4d4:	e8 ea       	ldi	r30, 0xA8	; 168
     4d6:	f0 e6       	ldi	r31, 0x60	; 96
     4d8:	de 01       	movw	r26, r28
     4da:	11 96       	adiw	r26, 0x01	; 1
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			if (FILLINTERVAL == 1) {
     4e4:	8a e0       	ldi	r24, 0x0A	; 10
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	99 f4       	brne	.+38     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				sprintf(line2, "%d minute", FILLINTERVAL);
     4f0:	1f 92       	push	r1
     4f2:	8f 93       	push	r24
     4f4:	83 e9       	ldi	r24, 0x93	; 147
     4f6:	90 e6       	ldi	r25, 0x60	; 96
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	ce 01       	movw	r24, r28
     4fe:	46 96       	adiw	r24, 0x16	; 22
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     516:	1f 92       	push	r1
     518:	8f 93       	push	r24
     51a:	8d e9       	ldi	r24, 0x9D	; 157
     51c:	90 e6       	ldi	r25, 0x60	; 96
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	ce 01       	movw	r24, r28
     524:	46 96       	adiw	r24, 0x16	; 22
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     540:	cb c0       	rjmp	.+406    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
			
		case SCRMAXOPENTIME:
			strcpy(line1, "Max open time");
     542:	8e e0       	ldi	r24, 0x0E	; 14
     544:	e6 eb       	ldi	r30, 0xB6	; 182
     546:	f0 e6       	ldi	r31, 0x60	; 96
     548:	de 01       	movw	r26, r28
     54a:	11 96       	adiw	r26, 0x01	; 1
     54c:	01 90       	ld	r0, Z+
     54e:	0d 92       	st	X+, r0
     550:	8a 95       	dec	r24
     552:	e1 f7       	brne	.-8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			if (MAXOPENTIME < 2) {
     554:	8b e0       	ldi	r24, 0x0B	; 11
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	98 f4       	brcc	.+38     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
				sprintf(line2, "%d minute", MAXOPENTIME);
     560:	1f 92       	push	r1
     562:	8f 93       	push	r24
     564:	83 e9       	ldi	r24, 0x93	; 147
     566:	90 e6       	ldi	r25, 0x60	; 96
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	ce 01       	movw	r24, r28
     56e:	46 96       	adiw	r24, 0x16	; 22
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	12 c0       	rjmp	.+36     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     586:	1f 92       	push	r1
     588:	8f 93       	push	r24
     58a:	8d e9       	ldi	r24, 0x9D	; 157
     58c:	90 e6       	ldi	r25, 0x60	; 96
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	ce 01       	movw	r24, r28
     594:	46 96       	adiw	r24, 0x16	; 22
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;
     5aa:	84 e0       	ldi	r24, 0x04	; 4
     5ac:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     5b0:	93 c0       	rjmp	.+294    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>

		case SCRPRESSURE:
			strcpy(line1, "LN2 pressure");
     5b2:	8d e0       	ldi	r24, 0x0D	; 13
     5b4:	e4 ec       	ldi	r30, 0xC4	; 196
     5b6:	f0 e6       	ldi	r31, 0x60	; 96
     5b8:	de 01       	movw	r26, r28
     5ba:	11 96       	adiw	r26, 0x01	; 1
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	8a 95       	dec	r24
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
			sprintf(line2, "%d kPa", status.pressure);
     5c4:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x14>
     5c8:	1f 92       	push	r1
     5ca:	8f 93       	push	r24
     5cc:	81 ed       	ldi	r24, 0xD1	; 209
     5ce:	90 e6       	ldi	r25, 0x60	; 96
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	ce 01       	movw	r24, r28
     5d6:	46 96       	adiw	r24, 0x16	; 22
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
			screen_value = SCRPRESSURE;
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	72 c0       	rjmp	.+228    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>

		case SCRDISABLEBLU:
			if (BLUENABLED) {
     5f4:	8c e0       	ldi	r24, 0x0C	; 12
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     5fc:	88 23       	and	r24, r24
     5fe:	99 f0       	breq	.+38     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
				strcpy(line1, "BLUE is ENABLED");
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	e8 ed       	ldi	r30, 0xD8	; 216
     604:	f0 e6       	ldi	r31, 0x60	; 96
     606:	de 01       	movw	r26, r28
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	01 90       	ld	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	8a 95       	dec	r24
     610:	e1 f7       	brne	.-8      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
				strcpy(line2, "Push to disable");
     612:	80 e1       	ldi	r24, 0x10	; 16
     614:	e8 ee       	ldi	r30, 0xE8	; 232
     616:	f0 e6       	ldi	r31, 0x60	; 96
     618:	de 01       	movw	r26, r28
     61a:	56 96       	adiw	r26, 0x16	; 22
     61c:	01 90       	ld	r0, Z+
     61e:	0d 92       	st	X+, r0
     620:	8a 95       	dec	r24
     622:	e1 f7       	brne	.-8      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     624:	12 c0       	rjmp	.+36     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
			} else {
				strcpy(line1, "Blue is DISABLED");
     626:	81 e1       	ldi	r24, 0x11	; 17
     628:	e8 ef       	ldi	r30, 0xF8	; 248
     62a:	f0 e6       	ldi	r31, 0x60	; 96
     62c:	de 01       	movw	r26, r28
     62e:	11 96       	adiw	r26, 0x01	; 1
     630:	01 90       	ld	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
				strcpy(line2, "Push to enable");
     638:	8f e0       	ldi	r24, 0x0F	; 15
     63a:	e9 e0       	ldi	r30, 0x09	; 9
     63c:	f1 e6       	ldi	r31, 0x61	; 97
     63e:	de 01       	movw	r26, r28
     640:	56 96       	adiw	r26, 0x16	; 22
     642:	01 90       	ld	r0, Z+
     644:	0d 92       	st	X+, r0
     646:	8a 95       	dec	r24
     648:	e1 f7       	brne	.-8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
			}
			screen_value = SCRDISABLEBLU;
     64a:	86 e0       	ldi	r24, 0x06	; 6
     64c:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     650:	43 c0       	rjmp	.+134    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>

		case SCRDISABLERED:
			if (REDENABLED) {
     652:	8d e0       	ldi	r24, 0x0D	; 13
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     65a:	88 23       	and	r24, r24
     65c:	99 f0       	breq	.+38     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
				strcpy(line1, "RED is ENABLED");
     65e:	8f e0       	ldi	r24, 0x0F	; 15
     660:	e8 e1       	ldi	r30, 0x18	; 24
     662:	f1 e6       	ldi	r31, 0x61	; 97
     664:	de 01       	movw	r26, r28
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
				strcpy(line2, "Push to disable");
     670:	80 e1       	ldi	r24, 0x10	; 16
     672:	e8 ee       	ldi	r30, 0xE8	; 232
     674:	f0 e6       	ldi	r31, 0x60	; 96
     676:	de 01       	movw	r26, r28
     678:	56 96       	adiw	r26, 0x16	; 22
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	8a 95       	dec	r24
     680:	e1 f7       	brne	.-8      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     682:	12 c0       	rjmp	.+36     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
			} else {
				strcpy(line1, "RED is DISABLED");
     684:	80 e1       	ldi	r24, 0x10	; 16
     686:	e7 e2       	ldi	r30, 0x27	; 39
     688:	f1 e6       	ldi	r31, 0x61	; 97
     68a:	de 01       	movw	r26, r28
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	01 90       	ld	r0, Z+
     690:	0d 92       	st	X+, r0
     692:	8a 95       	dec	r24
     694:	e1 f7       	brne	.-8      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
				strcpy(line2, "Push to enable");
     696:	8f e0       	ldi	r24, 0x0F	; 15
     698:	e9 e0       	ldi	r30, 0x09	; 9
     69a:	f1 e6       	ldi	r31, 0x61	; 97
     69c:	de 01       	movw	r26, r28
     69e:	56 96       	adiw	r26, 0x16	; 22
     6a0:	01 90       	ld	r0, Z+
     6a2:	0d 92       	st	X+, r0
     6a4:	8a 95       	dec	r24
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
			}
			screen_value = SCRDISABLERED;
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
			break;
     6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>

		default:
			strcpy(line1, "default");
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	e7 e3       	ldi	r30, 0x37	; 55
     6b4:	f1 e6       	ldi	r31, 0x61	; 97
     6b6:	de 01       	movw	r26, r28
     6b8:	11 96       	adiw	r26, 0x01	; 1
     6ba:	01 90       	ld	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	8a 95       	dec	r24
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
			strcpy(line2, "overrun");
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	ef e3       	ldi	r30, 0x3F	; 63
     6c6:	f1 e6       	ldi	r31, 0x61	; 97
     6c8:	de 01       	movw	r26, r28
     6ca:	56 96       	adiw	r26, 0x16	; 22
     6cc:	01 90       	ld	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	8a 95       	dec	r24
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
			screen_value = SCRVERSION;
     6d4:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	be 01       	movw	r22, r28
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	writestr_OLED(0, line2, 2);
     6e6:	42 e0       	ldi	r20, 0x02	; 2
     6e8:	be 01       	movw	r22, r28
     6ea:	6a 5e       	subi	r22, 0xEA	; 234
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
}
     6f4:	aa 96       	adiw	r28, 0x2a	; 42
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     700:	8c e0       	ldi	r24, 0x0C	; 12
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	81 11       	cpse	r24, r1
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	8c e0       	ldi	r24, 0x0C	; 12
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <eeprom_update_byte>
	encoder_sensed = FALSE;
     716:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	display(SCRDISABLEBLU);
     71a:	86 e0       	ldi	r24, 0x06	; 6
     71c:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
     720:	08 95       	ret

00000722 <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     722:	8d e0       	ldi	r24, 0x0D	; 13
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	81 11       	cpse	r24, r1
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	8d e0       	ldi	r24, 0x0D	; 13
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <eeprom_update_byte>
	encoder_sensed = FALSE;
     738:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	display(SCRDISABLERED);
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
     742:	08 95       	ret

00000744 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob allows you to change the fill interval in minutes.
	Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	65 97       	sbiw	r28, 0x15	; 21
     756:	cd bf       	out	0x3d, r28	; 61
     758:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;
     75a:	8a e0       	ldi	r24, 0x0A	; 10
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     762:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
	if (encoder_value == 1) {
     766:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	a9 f4       	brne	.+42     	; 0x798 <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     76e:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     772:	1f 92       	push	r1
     774:	8f 93       	push	r24
     776:	83 e9       	ldi	r24, 0x93	; 147
     778:	90 e6       	ldi	r25, 0x60	; 96
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	14 c0       	rjmp	.+40     	; 0x7c0 <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     798:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     79c:	1f 92       	push	r1
     79e:	8f 93       	push	r24
     7a0:	8d e9       	ldi	r24, 0x9D	; 157
     7a2:	90 e6       	ldi	r25, 0x60	; 96
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	67 e4       	ldi	r22, 0x47	; 71
     7c4:	71 e6       	ldi	r23, 0x61	; 97
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     7cc:	42 e0       	ldi	r20, 0x02	; 2
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     7da:	0f 2e       	mov	r0, r31
     7dc:	fe ef       	ldi	r31, 0xFE	; 254
     7de:	ef 2e       	mov	r14, r31
     7e0:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     7e2:	68 94       	set
     7e4:	ff 24       	eor	r15, r15
     7e6:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     7e8:	0d e9       	ldi	r16, 0x9D	; 157
     7ea:	10 e6       	ldi	r17, 0x60	; 96
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     7ec:	32 c0       	rjmp	.+100    	; 0x852 <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     7ee:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     7f2:	87 30       	cpi	r24, 0x07	; 7
     7f4:	71 f5       	brne	.+92     	; 0x852 <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     7f6:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	18 f4       	brcc	.+6      	; 0x804 <change_FILLINT+0xc0>
				encoder_value = 2;
     7fe:	f0 92 1b 28 	sts	0x281B, r15	; 0x80281b <encoder_value>
     802:	06 c0       	rjmp	.+12     	; 0x810 <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     804:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	11 f4       	brne	.+4      	; 0x810 <change_FILLINT+0xcc>
				encoder_value = 254;
     80c:	e0 92 1b 28 	sts	0x281B, r14	; 0x80281b <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     810:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     814:	1f 92       	push	r1
     816:	8f 93       	push	r24
     818:	1f 93       	push	r17
     81a:	0f 93       	push	r16
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	8c 0f       	add	r24, r28
     822:	9d 1f       	adc	r25, r29
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	68 e5       	ldi	r22, 0x58	; 88
     830:	71 e6       	ldi	r23, 0x61	; 97
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     838:	4f 2d       	mov	r20, r15
     83a:	be 01       	movw	r22, r28
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     852:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     856:	85 30       	cpi	r24, 0x05	; 5
     858:	51 f6       	brne	.-108    	; 0x7ee <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     85a:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     85e:	60 91 1b 28 	lds	r22, 0x281B	; 0x80281b <encoder_value>
     862:	8a e0       	ldi	r24, 0x0A	; 10
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     86a:	8b e0       	ldi	r24, 0x0B	; 11
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     872:	18 2f       	mov	r17, r24
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     87c:	18 17       	cp	r17, r24
     87e:	30 f0       	brcs	.+12     	; 0x88c <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     880:	6f ef       	ldi	r22, 0xFF	; 255
     882:	68 0f       	add	r22, r24
     884:	8b e0       	ldi	r24, 0x0B	; 11
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <eeprom_update_byte>
	}
	display(SCRFILLINT);
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
	
}
     892:	65 96       	adiw	r28, 0x15	; 21
     894:	cd bf       	out	0x3d, r28	; 61
     896:	de bf       	out	0x3e, r29	; 62
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	65 97       	sbiw	r28, 0x15	; 21
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;
     8c0:	8b e0       	ldi	r24, 0x0B	; 11
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     8c8:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
	if (encoder_value == 1) {
     8cc:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	a9 f4       	brne	.+42     	; 0x8fe <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     8d4:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     8d8:	1f 92       	push	r1
     8da:	8f 93       	push	r24
     8dc:	83 e9       	ldi	r24, 0x93	; 147
     8de:	90 e6       	ldi	r25, 0x60	; 96
     8e0:	9f 93       	push	r25
     8e2:	8f 93       	push	r24
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	14 c0       	rjmp	.+40     	; 0x926 <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     8fe:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     902:	1f 92       	push	r1
     904:	8f 93       	push	r24
     906:	8d e9       	ldi	r24, 0x9D	; 157
     908:	90 e6       	ldi	r25, 0x60	; 96
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	9f 93       	push	r25
     914:	8f 93       	push	r24
     916:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	68 e6       	ldi	r22, 0x68	; 104
     92a:	71 e6       	ldi	r23, 0x61	; 97
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     932:	42 e0       	ldi	r20, 0x02	; 2
     934:	be 01       	movw	r22, r28
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     940:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     942:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     944:	0f 2e       	mov	r0, r31
     946:	fd e9       	ldi	r31, 0x9D	; 157
     948:	ef 2e       	mov	r14, r31
     94a:	f0 e6       	ldi	r31, 0x60	; 96
     94c:	ff 2e       	mov	r15, r31
     94e:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     950:	0f 2e       	mov	r0, r31
     952:	f3 e9       	ldi	r31, 0x93	; 147
     954:	cf 2e       	mov	r12, r31
     956:	f0 e6       	ldi	r31, 0x60	; 96
     958:	df 2e       	mov	r13, r31
     95a:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     95c:	57 c0       	rjmp	.+174    	; 0xa0c <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     95e:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     962:	87 30       	cpi	r24, 0x07	; 7
     964:	09 f0       	breq	.+2      	; 0x968 <change_MAXOPENTIME+0xc2>
     966:	52 c0       	rjmp	.+164    	; 0xa0c <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     968:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     96c:	81 11       	cpse	r24, r1
     96e:	03 c0       	rjmp	.+6      	; 0x976 <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     970:	10 93 1b 28 	sts	0x281B, r17	; 0x80281b <encoder_value>
     974:	06 c0       	rjmp	.+12     	; 0x982 <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     976:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     97a:	8f 3f       	cpi	r24, 0xFF	; 255
     97c:	11 f4       	brne	.+4      	; 0x982 <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     97e:	00 93 1b 28 	sts	0x281B, r16	; 0x80281b <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     982:	8a e0       	ldi	r24, 0x0A	; 10
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     98a:	90 91 1b 28 	lds	r25, 0x281B	; 0x80281b <encoder_value>
     98e:	98 17       	cp	r25, r24
     990:	18 f0       	brcs	.+6      	; 0x998 <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     992:	81 50       	subi	r24, 0x01	; 1
     994:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			}
			if (encoder_value == 1) {
     998:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	a9 f4       	brne	.+42     	; 0x9ca <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     9a0:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     9a4:	1f 92       	push	r1
     9a6:	8f 93       	push	r24
     9a8:	df 92       	push	r13
     9aa:	cf 92       	push	r12
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	8c 0f       	add	r24, r28
     9b2:	9d 1f       	adc	r25, r29
     9b4:	9f 93       	push	r25
     9b6:	8f 93       	push	r24
     9b8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     9ca:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     9ce:	1f 92       	push	r1
     9d0:	8f 93       	push	r24
     9d2:	ff 92       	push	r15
     9d4:	ef 92       	push	r14
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	8c 0f       	add	r24, r28
     9dc:	9d 1f       	adc	r25, r29
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <sprintf>
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     9f2:	41 2f       	mov	r20, r17
     9f4:	68 e6       	ldi	r22, 0x68	; 104
     9f6:	71 e6       	ldi	r23, 0x61	; 97
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     9fe:	42 e0       	ldi	r20, 0x02	; 2
     a00:	be 01       	movw	r22, r28
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a0c:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     a10:	85 30       	cpi	r24, 0x05	; 5
     a12:	09 f0       	breq	.+2      	; 0xa16 <change_MAXOPENTIME+0x170>
     a14:	a4 cf       	rjmp	.-184    	; 0x95e <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     a16:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     a1a:	60 91 1b 28 	lds	r22, 0x281B	; 0x80281b <encoder_value>
     a1e:	8b e0       	ldi	r24, 0x0B	; 11
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	0e 94 2d 01 	call	0x25a	; 0x25a <display>

}
     a2c:	65 96       	adiw	r28, 0x15	; 21
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     a44:	e0 e4       	ldi	r30, 0x40	; 64
     a46:	f4 e0       	ldi	r31, 0x04	; 4
     a48:	8b e0       	ldi	r24, 0x0B	; 11
     a4a:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     a4c:	98 e0       	ldi	r25, 0x08	; 8
     a4e:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     a50:	81 8b       	std	Z+17, r24	; 0x11
     a52:	08 95       	ret

00000a54 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     a54:	8c e0       	ldi	r24, 0x0C	; 12
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     a5c:	88 23       	and	r24, r24
     a5e:	79 f0       	breq	.+30     	; 0xa7e <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     a60:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a64:	88 23       	and	r24, r24
     a66:	44 f0       	brlt	.+16     	; 0xa78 <start_FILL+0x24>
     a68:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     a6c:	80 ff       	sbrs	r24, 0
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <start_FILL+0x24>
			status.opentime_BLU = 0;
     a70:	e4 e0       	ldi	r30, 0x04	; 4
     a72:	f8 e2       	ldi	r31, 0x28	; 40
     a74:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     a76:	17 86       	std	Z+15, r1	; 0x0f
		}
		OPENVALVE(BLUVALVE);
     a78:	80 e8       	ldi	r24, 0x80	; 128
     a7a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
	}
	if (REDENABLED) {
     a7e:	8d e0       	ldi	r24, 0x0D	; 13
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     a86:	88 23       	and	r24, r24
     a88:	79 f0       	breq	.+30     	; 0xaa8 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     a8a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     a8e:	86 fd       	sbrc	r24, 6
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <start_FILL+0x4e>
     a92:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     a96:	81 ff       	sbrs	r24, 1
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <start_FILL+0x4e>
			status.opentime_RED = 0;
     a9a:	e4 e0       	ldi	r30, 0x04	; 4
     a9c:	f8 e2       	ldi	r31, 0x28	; 40
     a9e:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     aa0:	10 8a       	std	Z+16, r1	; 0x10
		}
		OPENVALVE(REDVALVE);
     aa2:	80 e4       	ldi	r24, 0x40	; 64
     aa4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
	}
	if (screen_value == SCRVALVES) {
     aa8:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	11 f4       	brne	.+4      	; 0xab4 <start_FILL+0x60>
		display(SCRVALVES);
     ab0:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
	}
	status.next_fill = FILLINTERVAL;
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     abc:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0x12>
     ac0:	08 95       	ret

00000ac2 <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     ac2:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <display_off>
     ac6:	88 23       	and	r24, r24
     ac8:	29 f0       	breq	.+10     	; 0xad4 <handle_encoder+0x12>
		display(screen_value);
     aca:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     ace:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
     ad2:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     ad4:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     ad8:	87 30       	cpi	r24, 0x07	; 7
     ada:	a9 f4       	brne	.+42     	; 0xb06 <handle_encoder+0x44>
		encoder_sensed = FALSE;
     adc:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     ae0:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     ae4:	90 91 1c 28 	lds	r25, 0x281C	; 0x80281c <encoder_change>
     ae8:	89 0f       	add	r24, r25
     aea:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
		if (screen_value < 0) {
     aee:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     af2:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     af6:	87 70       	andi	r24, 0x07	; 7
     af8:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <screen_value>
		}
		display(screen_value);
     afc:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     b00:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
     b04:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     b06:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     b0a:	85 30       	cpi	r24, 0x05	; 5
     b0c:	f9 f4       	brne	.+62     	; 0xb4c <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     b0e:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <encoder_sensed>
		switch (screen_value) {
     b12:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	89 f0       	breq	.+34     	; 0xb3c <handle_encoder+0x7a>
     b1a:	28 f4       	brcc	.+10     	; 0xb26 <handle_encoder+0x64>
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	41 f0       	breq	.+16     	; 0xb30 <handle_encoder+0x6e>
     b20:	83 30       	cpi	r24, 0x03	; 3
     b22:	49 f0       	breq	.+18     	; 0xb36 <handle_encoder+0x74>
     b24:	08 95       	ret
     b26:	86 30       	cpi	r24, 0x06	; 6
     b28:	61 f0       	breq	.+24     	; 0xb42 <handle_encoder+0x80>
     b2a:	87 30       	cpi	r24, 0x07	; 7
     b2c:	69 f0       	breq	.+26     	; 0xb48 <handle_encoder+0x86>
     b2e:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     b30:	0e 94 2a 05 	call	0xa54	; 0xa54 <start_FILL>
				break;
     b34:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     b36:	0e 94 a2 03 	call	0x744	; 0x744 <change_FILLINT>
				break;
     b3a:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     b3c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <change_MAXOPENTIME>
				break;
     b40:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     b42:	0e 94 80 03 	call	0x700	; 0x700 <change_DISABLEBLU>
				break;
     b46:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     b48:	0e 94 91 03 	call	0x722	; 0x722 <change_DISABLERED>
     b4c:	08 95       	ret

00000b4e <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	8f 93       	push	r24
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     b5e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     b62:	81 ff       	sbrs	r24, 1
     b64:	07 c0       	rjmp	.+14     	; 0xb74 <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <encoder_sensed>
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     b74:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     b78:	83 ff       	sbrs	r24, 3
     b7a:	1b c0       	rjmp	.+54     	; 0xbb2 <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f4 e0       	ldi	r31, 0x04	; 4
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     b84:	80 85       	ldd	r24, Z+8	; 0x08
     b86:	82 ff       	sbrs	r24, 2
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__vector_24+0x4e>
			encoder_value++;
     b8a:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			encoder_change = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_change>
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <__vector_24+0x5e>
		} else {
			encoder_value--;
     b9c:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <encoder_value>
     ba0:	81 50       	subi	r24, 0x01	; 1
     ba2:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <encoder_value>
			encoder_change = -1;
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_change>
		}
		encoder_sensed = ENCODERA;
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <encoder_sensed>
	}
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	8f 91       	pop	r24
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <init_STATUS>:
	display(SCRVERSION);

}

void init_STATUS()
{
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29

	status.next_fill = FILLINTERVAL;
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
     bce:	c4 e0       	ldi	r28, 0x04	; 4
     bd0:	d8 e2       	ldi	r29, 0x28	; 40
     bd2:	8a 8b       	std	Y+18, r24	; 0x12
	status.opentime_BLU = 0;
     bd4:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     bd6:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     bd8:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     bda:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     bdc:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     bde:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     be0:	19 8a       	std	Y+17, r1	; 0x11
	status.pressure = read_PRESSURE();
     be2:	0e 94 f5 07 	call	0xfea	; 0xfea <read_PRESSURE>
     be6:	8c 8b       	std	Y+20, r24	; 0x14

}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <init_PORTS>:

void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
     bee:	e0 e0       	ldi	r30, 0x00	; 0
     bf0:	f4 e0       	ldi	r31, 0x04	; 4
     bf2:	88 e0       	ldi	r24, 0x08	; 8
     bf4:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
     bf6:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
     bf8:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
     bfa:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
     bfc:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
     bfe:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
     c00:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
     c02:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
     c04:	e0 e2       	ldi	r30, 0x20	; 32
     c06:	f4 e0       	ldi	r31, 0x04	; 4
     c08:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
     c0a:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
     c0c:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
     c0e:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
     c10:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
     c12:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
     c14:	e0 e4       	ldi	r30, 0x40	; 64
     c16:	f4 e0       	ldi	r31, 0x04	; 4
     c18:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
     c1a:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
     c1c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
     c1e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
     c20:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
     c22:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
     c24:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
     c26:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c28:	e0 e6       	ldi	r30, 0x60	; 96
     c2a:	f4 e0       	ldi	r31, 0x04	; 4
     c2c:	94 e0       	ldi	r25, 0x04	; 4
     c2e:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c30:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c32:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c34:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c36:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c38:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c3a:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c3c:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
     c3e:	e0 e8       	ldi	r30, 0x80	; 128
     c40:	f4 e0       	ldi	r31, 0x04	; 4
     c42:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
     c44:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
     c46:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
     c48:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
     c4a:	e0 ea       	ldi	r30, 0xA0	; 160
     c4c:	f4 e0       	ldi	r31, 0x04	; 4
     c4e:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
     c50:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
     c52:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
     c54:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
     c56:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
     c58:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
     c5a:	86 8b       	std	Z+22, r24	; 0x16
     c5c:	08 95       	ret

00000c5e <init>:
void init_STATUS(void);

void init(void)
{

	minute = FALSE;
     c5e:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>
	seconds = 0;
     c62:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	update_VERSION();
     c66:	0e 94 0f 01 	call	0x21e	; 0x21e <update_VERSION>
	init_PORTS();
     c6a:	0e 94 f7 05 	call	0xbee	; 0xbee <init_PORTS>
	init_USART();
     c6e:	0e 94 1f 0a 	call	0x143e	; 0x143e <init_USART>
	init_VALVES();
     c72:	0e 94 aa 0a 	call	0x1554	; 0x1554 <init_VALVES>
	init_BUTTONS();
     c76:	0e 94 c9 00 	call	0x192	; 0x192 <init_BUTTONS>
	init_ENCODER();
     c7a:	0e 94 22 05 	call	0xa44	; 0xa44 <init_ENCODER>
	init_TWI();
     c7e:	0e 94 a6 09 	call	0x134c	; 0x134c <init_TWI>
	init_RTC(511);
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 1b 09 	call	0x1236	; 0x1236 <init_RTC>
	init_ADC();
     c8a:	0e 94 c9 07 	call	0xf92	; 0xf92 <init_ADC>
	init_STATUS();
     c8e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <init_STATUS>
	init_OLED(0);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <init_OLED>
	display(SCRVERSION);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
     c9e:	08 95       	ret

00000ca0 <main>:
#include "encoder.h"
#include "rtc.h"

int main(void)
{
	init();
     ca0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <init>
	sei();
     ca4:	78 94       	sei
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     ca6:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     caa:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     cac:	0e 94 6c 00 	call	0xd8	; 0xd8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     cb0:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <encoder_sensed>
     cb4:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     cb6:	0e 94 61 05 	call	0xac2	; 0xac2 <handle_encoder>
		}
		if (minute) {			// Things to do once a minute
     cba:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <minute>
     cbe:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     cc0:	0e 94 b5 08 	call	0x116a	; 0x116a <handle_minute>
		}
		if (tick) {				// Things to do once a second
     cc4:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     cc8:	88 23       	and	r24, r24
     cca:	69 f3       	breq	.-38     	; 0xca6 <main+0x6>
			handle_ticks();		// See rtc.c
     ccc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <handle_ticks>
     cd0:	ea cf       	rjmp	.-44     	; 0xca6 <main+0x6>

00000cd2 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	d6 2f       	mov	r29, r22
     cd8:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	0e 94 b1 09 	call	0x1362	; 0x1362 <start_TWI>
	write_TWI(type);
     ce0:	8d 2f       	mov	r24, r29
     ce2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <write_TWI>
	write_TWI(byteToSend);
     ce6:	8c 2f       	mov	r24, r28
     ce8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <write_TWI>
	stop_TWI();
     cec:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <stop_TWI>

}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     cf6:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     cf8:	e0 e0       	ldi	r30, 0x00	; 0
     cfa:	f4 e0       	ldi	r31, 0x04	; 4
     cfc:	90 e8       	ldi	r25, 0x80	; 128
     cfe:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d00:	91 83       	std	Z+1, r25	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d02:	a1 e4       	ldi	r26, 0x41	; 65
     d04:	b3 e0       	ldi	r27, 0x03	; 3
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <init_OLED+0x10>
     d0a:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTA.OUTSET = PIN7_bm;
     d0c:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d0e:	88 23       	and	r24, r24
     d10:	11 f0       	breq	.+4      	; 0xd16 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d12:	cd e3       	ldi	r28, 0x3D	; 61
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(1);				// Reset time
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d16:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d18:	4a e2       	ldi	r20, 0x2A	; 42
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	8c 2f       	mov	r24, r28
     d1e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     d22:	41 e7       	ldi	r20, 0x71	; 113
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	8c 2f       	mov	r24, r28
     d28:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     d2c:	4c e5       	ldi	r20, 0x5C	; 92
     d2e:	60 e4       	ldi	r22, 0x40	; 64
     d30:	8c 2f       	mov	r24, r28
     d32:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     d36:	48 e2       	ldi	r20, 0x28	; 40
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	8c 2f       	mov	r24, r28
     d3c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     d40:	48 e0       	ldi	r20, 0x08	; 8
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	8c 2f       	mov	r24, r28
     d46:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     d4a:	4a e2       	ldi	r20, 0x2A	; 42
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	8c 2f       	mov	r24, r28
     d50:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     d54:	49 e7       	ldi	r20, 0x79	; 121
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	8c 2f       	mov	r24, r28
     d5a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     d5e:	45 ed       	ldi	r20, 0xD5	; 213
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	8c 2f       	mov	r24, r28
     d64:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     d68:	40 e7       	ldi	r20, 0x70	; 112
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	8c 2f       	mov	r24, r28
     d6e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     d72:	48 e7       	ldi	r20, 0x78	; 120
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	8c 2f       	mov	r24, r28
     d78:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     d7c:	48 e0       	ldi	r20, 0x08	; 8
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	8c 2f       	mov	r24, r28
     d82:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     d86:	46 e0       	ldi	r20, 0x06	; 6
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	8c 2f       	mov	r24, r28
     d8c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     d90:	42 e7       	ldi	r20, 0x72	; 114
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	8c 2f       	mov	r24, r28
     d96:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	60 e4       	ldi	r22, 0x40	; 64
     d9e:	8c 2f       	mov	r24, r28
     da0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     da4:	4a e2       	ldi	r20, 0x2A	; 42
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	8c 2f       	mov	r24, r28
     daa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dae:	49 e7       	ldi	r20, 0x79	; 121
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	8c 2f       	mov	r24, r28
     db4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     db8:	4a ed       	ldi	r20, 0xDA	; 218
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	8c 2f       	mov	r24, r28
     dbe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	8c 2f       	mov	r24, r28
     dc8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     dcc:	4c ed       	ldi	r20, 0xDC	; 220
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	8c 2f       	mov	r24, r28
     dd2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	8c 2f       	mov	r24, r28
     ddc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     de0:	41 e8       	ldi	r20, 0x81	; 129
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	8c 2f       	mov	r24, r28
     de6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	8c 2f       	mov	r24, r28
     df0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     df4:	49 ed       	ldi	r20, 0xD9	; 217
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	8c 2f       	mov	r24, r28
     dfa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     dfe:	41 ef       	ldi	r20, 0xF1	; 241
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	8c 2f       	mov	r24, r28
     e04:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e08:	4b ed       	ldi	r20, 0xDB	; 219
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	8c 2f       	mov	r24, r28
     e0e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e12:	40 e4       	ldi	r20, 0x40	; 64
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	8c 2f       	mov	r24, r28
     e18:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e1c:	48 e7       	ldi	r20, 0x78	; 120
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	8c 2f       	mov	r24, r28
     e22:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e26:	48 e2       	ldi	r20, 0x28	; 40
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	8c 2f       	mov	r24, r28
     e2c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	8c 2f       	mov	r24, r28
     e36:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	8c 2f       	mov	r24, r28
     e40:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     e44:	4c e0       	ldi	r20, 0x0C	; 12
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	8c 2f       	mov	r24, r28
     e4a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
     e4e:	ba e6       	ldi	r27, 0x6A	; 106
     e50:	24 e0       	ldi	r18, 0x04	; 4
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	b1 50       	subi	r27, 0x01	; 1
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	80 40       	sbci	r24, 0x00	; 0
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <init_OLED+0x15e>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     e5e:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
     e62:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
	timeoutOLED = 5;
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	80 93 1f 28 	sts	0x281F, r24	; 0x80281f <timeoutOLED>
     e6e:	90 93 20 28 	sts	0x2820, r25	; 0x802820 <timeoutOLED+0x1>

}
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	e2 97       	sbiw	r28, 0x32	; 50
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     e90:	91 e1       	ldi	r25, 0x11	; 17
     e92:	e9 e7       	ldi	r30, 0x79	; 121
     e94:	f1 e6       	ldi	r31, 0x61	; 97
     e96:	de 01       	movw	r26, r28
     e98:	92 96       	adiw	r26, 0x22	; 34
     e9a:	01 90       	ld	r0, Z+
     e9c:	0d 92       	st	X+, r0
     e9e:	9a 95       	dec	r25
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <writestr_OLED+0x24>

	if (displaynumber == 0) {
     ea2:	88 23       	and	r24, r24
     ea4:	29 f0       	breq	.+10     	; 0xeb0 <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     ea6:	0f 2e       	mov	r0, r31
     ea8:	fd e3       	ldi	r31, 0x3D	; 61
     eaa:	ff 2e       	mov	r15, r31
     eac:	f0 2d       	mov	r31, r0
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     eb0:	0f 2e       	mov	r0, r31
     eb2:	fc e3       	ldi	r31, 0x3C	; 60
     eb4:	ff 2e       	mov	r15, r31
     eb6:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     eb8:	8e 01       	movw	r16, r28
     eba:	0f 5f       	subi	r16, 0xFF	; 255
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	c8 01       	movw	r24, r16
     ec0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <strcpy>
	if (strlen(strbuf) > 16) {
     ec4:	f8 01       	movw	r30, r16
     ec6:	01 90       	ld	r0, Z+
     ec8:	00 20       	and	r0, r0
     eca:	e9 f7       	brne	.-6      	; 0xec6 <writestr_OLED+0x50>
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	e0 1b       	sub	r30, r16
     ed0:	f1 0b       	sbc	r31, r17
     ed2:	71 97       	sbiw	r30, 0x11	; 17
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <writestr_OLED+0x62>
		strbuf[16] = '\0';
     ed6:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     ed8:	be 01       	movw	r22, r28
     eda:	6e 5d       	subi	r22, 0xDE	; 222
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	ce 01       	movw	r24, r28
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <strcat>

	if (lineno == 1) {
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	d8 12       	cpse	r13, r24
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	8f 2d       	mov	r24, r15
     ef2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
     ef6:	19 c0       	rjmp	.+50     	; 0xf2a <writestr_OLED+0xb4>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     ef8:	40 ec       	ldi	r20, 0xC0	; 192
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	8f 2d       	mov	r24, r15
     efe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f04:	f8 01       	movw	r30, r16
     f06:	41 91       	ld	r20, Z+
     f08:	8f 01       	movw	r16, r30
     f0a:	60 e4       	ldi	r22, 0x40	; 64
     f0c:	8f 2d       	mov	r24, r15
     f0e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f12:	0c 15       	cp	r16, r12
     f14:	1d 05       	cpc	r17, r13
     f16:	b1 f7       	brne	.-20     	; 0xf04 <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <timerOLED>
     f20:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <timerOLED+0x1>
	display_off = FALSE;
     f24:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <display_off>

}
     f28:	08 c0       	rjmp	.+16     	; 0xf3a <writestr_OLED+0xc4>
     f2a:	8e 01       	movw	r16, r28
     f2c:	0f 5f       	subi	r16, 0xFF	; 255
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	6e 01       	movw	r12, r28
     f32:	f1 e1       	ldi	r31, 0x11	; 17
     f34:	cf 0e       	add	r12, r31
     f36:	d1 1c       	adc	r13, r1
     f38:	e5 cf       	rjmp	.-54     	; 0xf04 <writestr_OLED+0x8e>
     f3a:	e2 96       	adiw	r28, 0x32	; 50
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret

00000f50 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	1f 92       	push	r1
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     f5e:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     f6c:	42 e0       	ldi	r20, 0x02	; 2
     f6e:	be 01       	movw	r22, r28
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	81 2f       	mov	r24, r17
     f76:	0e 94 3b 07 	call	0xe76	; 0xe76 <writestr_OLED>
	timerOLED = 0;
     f7a:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
     f7e:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
	display_off = TRUE;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <display_off>

}
     f88:	0f 90       	pop	r0
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
     f98:	e0 e0       	ldi	r30, 0x00	; 0
     f9a:	f6 e0       	ldi	r31, 0x06	; 6
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
     fa2:	a0 ea       	ldi	r26, 0xA0	; 160
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	8c 91       	ld	r24, X
     fa8:	80 63       	ori	r24, 0x30	; 48
     faa:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
     fac:	a2 e0       	ldi	r26, 0x02	; 2
     fae:	b6 e0       	ldi	r27, 0x06	; 6
     fb0:	8c 91       	ld	r24, X
     fb2:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
     fb4:	8c 91       	ld	r24, X
     fb6:	80 64       	ori	r24, 0x40	; 64
     fb8:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
     fba:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
     fbe:	80 81       	ld	r24, Z
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
     fc4:	e8 e0       	ldi	r30, 0x08	; 8
     fc6:	f6 e0       	ldi	r31, 0x06	; 6
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
     fce:	80 81       	ld	r24, Z
     fd0:	80 ff       	sbrs	r24, 0
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <init_ADC+0x4a>
		asm("nop");
     fd4:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
     fd6:	80 81       	ld	r24, Z
     fd8:	80 fd       	sbrc	r24, 0
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
     fdc:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     fe0:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
     fe4:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <status+0x14>
     fe8:	08 95       	ret

00000fea <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	0f 2e       	mov	r0, r31
     ffe:	fa e0       	ldi	r31, 0x0A	; 10
    1000:	bf 2e       	mov	r11, r31
    1002:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    1004:	c1 2c       	mov	r12, r1
    1006:	d1 2c       	mov	r13, r1
    1008:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    100a:	c8 e0       	ldi	r28, 0x08	; 8
    100c:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    100e:	00 e1       	ldi	r16, 0x10	; 16
    1010:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1012:	88 81       	ld	r24, Y
    1014:	81 60       	ori	r24, 0x01	; 1
    1016:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1018:	88 81       	ld	r24, Y
    101a:	80 ff       	sbrs	r24, 0
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <read_PRESSURE+0x3c>
			asm("nop");
    101e:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1020:	88 81       	ld	r24, Y
    1022:	80 fd       	sbrc	r24, 0
    1024:	fc cf       	rjmp	.-8      	; 0x101e <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1026:	f8 01       	movw	r30, r16
    1028:	60 81       	ld	r22, Z
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__floatunsisf>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__addsf3>
    1040:	6b 01       	movw	r12, r22
    1042:	7c 01       	movw	r14, r24
    1044:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    1046:	b1 10       	cpse	r11, r1
    1048:	e4 cf       	rjmp	.-56     	; 0x1012 <read_PRESSURE+0x28>
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}
	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e2       	ldi	r20, 0x20	; 32
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	0e 94 22 0b 	call	0x1644	; 0x1644 <__divsf3>
    1056:	2e e5       	ldi	r18, 0x5E	; 94
    1058:	3a eb       	ldi	r19, 0xBA	; 186
    105a:	49 e5       	ldi	r20, 0x59	; 89
    105c:	5f e3       	ldi	r21, 0x3F	; 63
    105e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__mulsf3>
    1062:	2f e1       	ldi	r18, 0x1F	; 31
    1064:	35 e8       	ldi	r19, 0x85	; 133
    1066:	45 ec       	ldi	r20, 0xC5	; 197
    1068:	51 e4       	ldi	r21, 0x41	; 65
    106a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__subsf3>
    106e:	6b 01       	movw	r12, r22
    1070:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	0e 94 1d 0b 	call	0x163a	; 0x163a <__cmpsf2>
    107c:	88 23       	and	r24, r24
    107e:	1c f4       	brge	.+6      	; 0x1086 <read_PRESSURE+0x9c>
		value = 0.0;
    1080:	c1 2c       	mov	r12, r1
    1082:	d1 2c       	mov	r13, r1
    1084:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	c7 01       	movw	r24, r14
    1090:	b6 01       	movw	r22, r12
    1092:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__addsf3>
    1096:	0e 94 94 0b 	call	0x1728	; 0x1728 <__fixunssfsi>
    109a:	86 2f       	mov	r24, r22

}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	08 95       	ret

000010b0 <handle_ticks>:
THINGS TO DO EVERY SECOND
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    10b0:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {
    10b4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    10b8:	88 23       	and	r24, r24
    10ba:	8c f4       	brge	.+34     	; 0x10de <handle_ticks+0x2e>
    10bc:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    10c0:	80 fd       	sbrc	r24, 0
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <handle_ticks+0x2e>
		CLOSEVALVE(BLUVALVE);
    10c4:	80 e8       	ldi	r24, 0x80	; 128
    10c6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if (screen_value == SCRVALVES) {
    10ca:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <handle_ticks+0x26>
			display(SCRVALVES);
    10d2:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
		}
		status.opentime_BLU = 0;
    10d6:	e4 e0       	ldi	r30, 0x04	; 4
    10d8:	f8 e2       	ldi	r31, 0x28	; 40
    10da:	13 86       	std	Z+11, r1	; 0x0b
		status.maxopen_BLU = FALSE;
    10dc:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {
    10de:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    10e2:	86 ff       	sbrs	r24, 6
    10e4:	11 c0       	rjmp	.+34     	; 0x1108 <handle_ticks+0x58>
    10e6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    10ea:	81 fd       	sbrc	r24, 1
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <handle_ticks+0x58>
		CLOSEVALVE(REDVALVE);
    10ee:	80 e4       	ldi	r24, 0x40	; 64
    10f0:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if (screen_value == SCRVALVES) {
    10f4:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	11 f4       	brne	.+4      	; 0x1100 <handle_ticks+0x50>
			display(SCRVALVES);
    10fc:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
		}
		status.opentime_RED = 0;
    1100:	e4 e0       	ldi	r30, 0x04	; 4
    1102:	f8 e2       	ldi	r31, 0x28	; 40
    1104:	14 86       	std	Z+12, r1	; 0x0c
		status.maxopen_RED = FALSE;
    1106:	10 8a       	std	Z+16, r1	; 0x10
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {
    1108:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    110c:	85 ff       	sbrs	r24, 5
    110e:	12 c0       	rjmp	.+36     	; 0x1134 <handle_ticks+0x84>
    1110:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1114:	82 fd       	sbrc	r24, 2
    1116:	0e c0       	rjmp	.+28     	; 0x1134 <handle_ticks+0x84>
		CLOSEVALVE(BUFVALVE);
    1118:	80 e2       	ldi	r24, 0x20	; 32
    111a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
		if (screen_value == SCRVALVES) {
    111e:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <screen_value>
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	11 f4       	brne	.+4      	; 0x112a <handle_ticks+0x7a>
			display(SCRVALVES);
    1126:	0e 94 2d 01 	call	0x25a	; 0x25a <display>
		}
		status.buildpressure_time = 0;
    112a:	e4 e0       	ldi	r30, 0x04	; 4
    112c:	f8 e2       	ldi	r31, 0x28	; 40
    112e:	13 8a       	std	Z+19, r1	; 0x13
		status.opentime_BUF = 0;
    1130:	15 86       	std	Z+13, r1	; 0x0d
		status.maxopen_BUF = FALSE;
    1132:	11 8a       	std	Z+17, r1	; 0x11
	}

	if (timerOLED) {
    1134:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <timerOLED>
    1138:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <timerOLED+0x1>
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	a1 f0       	breq	.+40     	; 0x1168 <handle_ticks+0xb8>
		if (timerOLED > timeoutOLED) {	// Display timeout
    1140:	20 91 1f 28 	lds	r18, 0x281F	; 0x80281f <timeoutOLED>
    1144:	30 91 20 28 	lds	r19, 0x2820	; 0x802820 <timeoutOLED+0x1>
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	40 f4       	brcc	.+16     	; 0x115e <handle_ticks+0xae>
			clear_OLED(0);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 a8 07 	call	0xf50	; 0xf50 <clear_OLED>
			timerOLED = 0;
    1154:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <timerOLED>
    1158:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <timerOLED+0x1>
    115c:	08 95       	ret
		} else {
			timerOLED++;
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <timerOLED>
    1164:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <timerOLED+0x1>
    1168:	08 95       	ret

0000116a <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    116a:	cf 93       	push	r28

	handle_ticks();
    116c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <handle_ticks>
	seconds = 0;
    1170:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>

	status.pressure = read_PRESSURE();				// LN2 pressure
    1174:	0e 94 f5 07 	call	0xfea	; 0xfea <read_PRESSURE>
    1178:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <status+0x14>

	if (BLUVALVEOPEN) {
    117c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1180:	88 23       	and	r24, r24
    1182:	9c f4       	brge	.+38     	; 0x11aa <handle_minute+0x40>
		status.opentime_BLU++;
    1184:	e4 e0       	ldi	r30, 0x04	; 4
    1186:	f8 e2       	ldi	r31, 0x28	; 40
    1188:	c3 85       	ldd	r28, Z+11	; 0x0b
    118a:	cf 5f       	subi	r28, 0xFF	; 255
    118c:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU > MAXOPENTIME) {	// MAX OPEN ERROR
    118e:	8b e0       	ldi	r24, 0x0B	; 11
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
    1196:	8c 17       	cp	r24, r28
    1198:	40 f4       	brcc	.+16     	; 0x11aa <handle_minute+0x40>
			CLOSEVALVE(BLUVALVE);
    119a:	80 e8       	ldi	r24, 0x80	; 128
    119c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.opentime_BLU = 0;
    11a0:	e4 e0       	ldi	r30, 0x04	; 4
    11a2:	f8 e2       	ldi	r31, 0x28	; 40
    11a4:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = TRUE;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	87 87       	std	Z+15, r24	; 0x0f
		}
	}

	if (REDVALVEOPEN) {
    11aa:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11ae:	86 ff       	sbrs	r24, 6
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <handle_minute+0x6e>
		status.opentime_RED++;
    11b2:	e4 e0       	ldi	r30, 0x04	; 4
    11b4:	f8 e2       	ldi	r31, 0x28	; 40
    11b6:	c4 85       	ldd	r28, Z+12	; 0x0c
    11b8:	cf 5f       	subi	r28, 0xFF	; 255
    11ba:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED > MAXOPENTIME) {	// MAX OPEN ERROR
    11bc:	8b e0       	ldi	r24, 0x0B	; 11
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
    11c4:	8c 17       	cp	r24, r28
    11c6:	40 f4       	brcc	.+16     	; 0x11d8 <handle_minute+0x6e>
			CLOSEVALVE(REDVALVE);
    11c8:	80 e4       	ldi	r24, 0x40	; 64
    11ca:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.opentime_RED = 0;
    11ce:	e4 e0       	ldi	r30, 0x04	; 4
    11d0:	f8 e2       	ldi	r31, 0x28	; 40
    11d2:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = TRUE;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 8b       	std	Z+16, r24	; 0x10
		}
	}

	if (BUFVALVEOPEN) {
    11d8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11dc:	85 ff       	sbrs	r24, 5
    11de:	17 c0       	rjmp	.+46     	; 0x120e <handle_minute+0xa4>
		status.opentime_BUF++;
    11e0:	e4 e0       	ldi	r30, 0x04	; 4
    11e2:	f8 e2       	ldi	r31, 0x28	; 40
    11e4:	c5 85       	ldd	r28, Z+13	; 0x0d
    11e6:	cf 5f       	subi	r28, 0xFF	; 255
    11e8:	c5 87       	std	Z+13, r28	; 0x0d
		if (status.opentime_BUF > MAXOPENTIME) {	// MAX OPEN ERROR
    11ea:	8b e0       	ldi	r24, 0x0B	; 11
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <eeprom_read_byte>
    11f2:	8c 17       	cp	r24, r28
    11f4:	60 f4       	brcc	.+24     	; 0x120e <handle_minute+0xa4>
			CLOSEVALVE(BUFVALVE);
    11f6:	e0 e4       	ldi	r30, 0x40	; 64
    11f8:	f4 e0       	ldi	r31, 0x04	; 4
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    11fe:	80 e1       	ldi	r24, 0x10	; 16
    1200:	86 83       	std	Z+6, r24	; 0x06
			status.opentime_BUF = 0;
    1202:	e4 e0       	ldi	r30, 0x04	; 4
    1204:	f8 e2       	ldi	r31, 0x28	; 40
    1206:	15 86       	std	Z+13, r1	; 0x0d
			status.maxopen_BUF = TRUE;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	81 8b       	std	Z+17, r24	; 0x11
			status.opentime_SUP = 0;
    120c:	16 86       	std	Z+14, r1	; 0x0e
		}
	}

	if (SUPVALVEOPEN) {
    120e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1212:	84 ff       	sbrs	r24, 4
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <handle_minute+0xb6>
		status.opentime_SUP++;				// Increment supply dewar time
    1216:	e4 e0       	ldi	r30, 0x04	; 4
    1218:	f8 e2       	ldi	r31, 0x28	; 40
    121a:	86 85       	ldd	r24, Z+14	; 0x0e
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    1220:	e4 e0       	ldi	r30, 0x04	; 4
    1222:	f8 e2       	ldi	r31, 0x28	; 40
    1224:	82 89       	ldd	r24, Z+18	; 0x12
    1226:	81 50       	subi	r24, 0x01	; 1
    1228:	82 8b       	std	Z+18, r24	; 0x12
	if (status.next_fill == 0) {
    122a:	81 11       	cpse	r24, r1
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <handle_minute+0xc8>
		start_FILL();
    122e:	0e 94 2a 05 	call	0xa54	; 0xa54 <start_FILL>
	}
}
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    1236:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1238:	e0 e6       	ldi	r30, 0x60	; 96
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    123e:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    1240:	98 ed       	ldi	r25, 0xD8	; 216
    1242:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1244:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1246:	83 81       	ldd	r24, Z+3	; 0x03
    1248:	86 ff       	sbrs	r24, 6
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <init_RTC+0x1e>
		asm("nop");
    124c:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	96 fd       	sbrc	r25, 6
    1252:	fc cf       	rjmp	.-8      	; 0x124c <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1254:	e0 e6       	ldi	r30, 0x60	; 96
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    125a:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    125c:	88 ed       	ldi	r24, 0xD8	; 216
    125e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1260:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    1262:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    1264:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    1266:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1268:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    126a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    126e:	88 23       	and	r24, r24
    1270:	31 f0       	breq	.+12     	; 0x127e <init_RTC+0x48>
    1272:	e0 e4       	ldi	r30, 0x40	; 64
    1274:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    1276:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	91 11       	cpse	r25, r1
    127c:	fc cf       	rjmp	.-8      	; 0x1276 <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    127e:	e0 e4       	ldi	r30, 0x40	; 64
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	22 87       	std	Z+10, r18	; 0x0a
    1284:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    128a:	85 81       	ldd	r24, Z+5	; 0x05
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    1290:	81 eb       	ldi	r24, 0xB1	; 177
    1292:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	82 83       	std	Z+2, r24	; 0x02
    129a:	08 95       	ret

0000129c <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    12b2:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	minute = seconds/60;
    12bc:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    12c0:	29 e8       	ldi	r18, 0x89	; 137
    12c2:	82 9f       	mul	r24, r18
    12c4:	81 2d       	mov	r24, r1
    12c6:	11 24       	eor	r1, r1
    12c8:	82 95       	swap	r24
    12ca:	86 95       	lsr	r24
    12cc:	87 70       	andi	r24, 0x07	; 7
    12ce:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <minute>
	tick = TRUE;
    12d2:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    12e6:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <ticks_TCB0>
    12ea:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    12ee:	25 e0       	ldi	r18, 0x05	; 5
    12f0:	3d e0       	ldi	r19, 0x0D	; 13
    12f2:	ac 01       	movw	r20, r24
    12f4:	42 9f       	mul	r20, r18
    12f6:	c0 01       	movw	r24, r0
    12f8:	43 9f       	mul	r20, r19
    12fa:	90 0d       	add	r25, r0
    12fc:	52 9f       	mul	r21, r18
    12fe:	90 0d       	add	r25, r0
    1300:	11 24       	eor	r1, r1
    1302:	e0 e8       	ldi	r30, 0x80	; 128
    1304:	fa e0       	ldi	r31, 0x0A	; 10
    1306:	84 87       	std	Z+12, r24	; 0x0c
    1308:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    130e:	80 83       	st	Z, r24
    1310:	08 95       	ret

00001312 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    1312:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    1316:	08 95       	ret

00001318 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    1318:	1f 92       	push	r1
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    132c:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    1330:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <ticks_TCB0>
    133a:	90 93 23 28 	sts	0x2823, r25	; 0x802823 <ticks_TCB0+0x1>

    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	0f 90       	pop	r0
    1348:	1f 90       	pop	r1
    134a:	18 95       	reti

0000134c <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    134c:	e0 ea       	ldi	r30, 0xA0	; 160
    134e:	f8 e0       	ldi	r31, 0x08	; 8
    1350:	8b e0       	ldi	r24, 0x0B	; 11
    1352:	86 83       	std	Z+6, r24	; 0x06
    1354:	83 81       	ldd	r24, Z+3	; 0x03
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	83 83       	std	Z+3, r24	; 0x03
    135a:	85 81       	ldd	r24, Z+5	; 0x05
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	85 83       	std	Z+5, r24	; 0x05
    1360:	08 95       	ret

00001362 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    1362:	61 30       	cpi	r22, 0x01	; 1
    1364:	29 f4       	brne	.+10     	; 0x1370 <start_TWI+0xe>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    1366:	88 0f       	add	r24, r24
    1368:	81 60       	ori	r24, 0x01	; 1
    136a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <start_TWI+0x14>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    1370:	88 0f       	add	r24, r24
    1372:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    137e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1382:	80 7c       	andi	r24, 0xC0	; 192
    1384:	b9 f4       	brne	.+46     	; 0x13b4 <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    1386:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    138a:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    138e:	0b 97       	sbiw	r24, 0x0b	; 11
    1390:	48 f4       	brcc	.+18     	; 0x13a4 <start_TWI+0x42>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1392:	e0 ea       	ldi	r30, 0xA0	; 160
    1394:	f8 e0       	ldi	r31, 0x08	; 8
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    1398:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    139c:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    13a0:	0b 97       	sbiw	r24, 0x0b	; 11
    13a2:	20 f0       	brcs	.+8      	; 0x13ac <start_TWI+0x4a>
			stop_TCB0();
    13a4:	0e 94 89 09 	call	0x1312	; 0x1312 <stop_TCB0>
			return(TWITIMEOUT);
    13a8:	84 e0       	ldi	r24, 0x04	; 4
    13aa:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    13ac:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    13ae:	85 81       	ldd	r24, Z+5	; 0x05
    13b0:	80 7c       	andi	r24, 0xC0	; 192
    13b2:	91 f3       	breq	.-28     	; 0x1398 <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    13b4:	0e 94 89 09 	call	0x1312	; 0x1312 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    13b8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13bc:	82 fd       	sbrc	r24, 2
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    13c0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13c4:	83 fd       	sbrc	r24, 3
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    13c8:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13cc:	89 2f       	mov	r24, r25
    13ce:	80 71       	andi	r24, 0x10	; 16
    13d0:	94 fd       	sbrc	r25, 4
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <start_TWI+0x7c>
    13d4:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    13de:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    13e0:	08 95       	ret

000013e2 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    13e2:	87 e0       	ldi	r24, 0x07	; 7
    13e4:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    13e8:	08 95       	ret

000013ea <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    13ea:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    13ee:	96 fd       	sbrc	r25, 6
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <write_TWI+0x14>
    13f2:	e0 ea       	ldi	r30, 0xA0	; 160
    13f4:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    13f6:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    13f8:	95 81       	ldd	r25, Z+5	; 0x05
    13fa:	96 ff       	sbrs	r25, 6
    13fc:	fc cf       	rjmp	.-8      	; 0x13f6 <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    13fe:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 73 09 	call	0x12e6	; 0x12e6 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    140a:	e0 ea       	ldi	r30, 0xA0	; 160
    140c:	f8 e0       	ldi	r31, 0x08	; 8
    140e:	0b c0       	rjmp	.+22     	; 0x1426 <write_TWI+0x3c>
		asm("nop");
    1410:	00 00       	nop
		if (ticks_TCB0 > 50) {
    1412:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <ticks_TCB0>
    1416:	90 91 23 28 	lds	r25, 0x2823	; 0x802823 <ticks_TCB0+0x1>
    141a:	c3 97       	sbiw	r24, 0x33	; 51
    141c:	20 f0       	brcs	.+8      	; 0x1426 <write_TWI+0x3c>
			stop_TCB0();
    141e:	0e 94 89 09 	call	0x1312	; 0x1312 <stop_TCB0>
			return(TWITIMEOUT);
    1422:	84 e0       	ldi	r24, 0x04	; 4
    1424:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1426:	85 81       	ldd	r24, Z+5	; 0x05
    1428:	86 ff       	sbrs	r24, 6
    142a:	f2 cf       	rjmp	.-28     	; 0x1410 <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    142c:	0e 94 89 09 	call	0x1312	; 0x1312 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    1430:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1434:	89 2f       	mov	r24, r25
    1436:	80 71       	andi	r24, 0x10	; 16
    1438:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    143a:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    143c:	08 95       	ret

0000143e <init_USART>:
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    143e:	e0 e0       	ldi	r30, 0x00	; 0
    1440:	f4 e0       	ldi	r31, 0x04	; 4
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	85 83       	std	Z+5, r24	; 0x05
    1446:	81 83       	std	Z+1, r24	; 0x01
    1448:	e0 e0       	ldi	r30, 0x00	; 0
    144a:	f8 e0       	ldi	r31, 0x08	; 8
    144c:	2d e6       	ldi	r18, 0x6D	; 109
    144e:	35 e0       	ldi	r19, 0x05	; 5
    1450:	20 87       	std	Z+8, r18	; 0x08
    1452:	31 87       	std	Z+9, r19	; 0x09
    1454:	95 81       	ldd	r25, Z+5	; 0x05
    1456:	90 68       	ori	r25, 0x80	; 128
    1458:	95 83       	std	Z+5, r25	; 0x05
    145a:	96 81       	ldd	r25, Z+6	; 0x06
    145c:	90 64       	ori	r25, 0x40	; 64
    145e:	96 83       	std	Z+6, r25	; 0x06
    1460:	96 81       	ldd	r25, Z+6	; 0x06
    1462:	90 68       	ori	r25, 0x80	; 128
    1464:	96 83       	std	Z+6, r25	; 0x06
    1466:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <recv0_buf+0x53>
    146a:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <send0_buf+0x53>
    146e:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <recv0_buf+0x52>
    1472:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <send0_buf+0x52>
    1476:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <recv0_buf+0x51>
    147a:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <send0_buf+0x51>
    147e:	08 95       	ret

00001480 <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    1480:	1f 92       	push	r1
    1482:	0f 92       	push	r0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	0f 92       	push	r0
    1488:	11 24       	eor	r1, r1
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    1496:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    149a:	90 91 77 28 	lds	r25, 0x2877	; 0x802877 <recv0_buf+0x53>
    149e:	91 35       	cpi	r25, 0x51	; 81
    14a0:	b0 f4       	brcc	.+44     	; 0x14ce <__vector_17+0x4e>
		if ((char) c == '\r') {
    14a2:	8d 30       	cpi	r24, 0x0D	; 13
    14a4:	51 f4       	brne	.+20     	; 0x14ba <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    14a6:	e0 91 77 28 	lds	r30, 0x2877	; 0x802877 <recv0_buf+0x53>
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	ec 5d       	subi	r30, 0xDC	; 220
    14ae:	f7 4d       	sbci	r31, 0xD7	; 215
    14b0:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	80 93 75 28 	sts	0x2875, r24	; 0x802875 <recv0_buf+0x51>
    14b8:	0a c0       	rjmp	.+20     	; 0x14ce <__vector_17+0x4e>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    14ba:	a7 e7       	ldi	r26, 0x77	; 119
    14bc:	b8 e2       	ldi	r27, 0x28	; 40
    14be:	ec 91       	ld	r30, X
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	9e 0f       	add	r25, r30
    14c4:	9c 93       	st	X, r25
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	ec 5d       	subi	r30, 0xDC	; 220
    14ca:	f7 4d       	sbci	r31, 0xD7	; 215
    14cc:	80 83       	st	Z, r24
		}
	}
}
    14ce:	ff 91       	pop	r31
    14d0:	ef 91       	pop	r30
    14d2:	bf 91       	pop	r27
    14d4:	af 91       	pop	r26
    14d6:	9f 91       	pop	r25
    14d8:	8f 91       	pop	r24
    14da:	0f 90       	pop	r0
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	0f 90       	pop	r0
    14e0:	1f 90       	pop	r1
    14e2:	18 95       	reti

000014e4 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    14e4:	1f 92       	push	r1
    14e6:	0f 92       	push	r0
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	0f 92       	push	r0
    14ec:	11 24       	eor	r1, r1
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    14fe:	c0 e0       	ldi	r28, 0x00	; 0
    1500:	d8 e0       	ldi	r29, 0x08	; 8
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	8f 7d       	andi	r24, 0xDF	; 223
    1506:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    1508:	aa ec       	ldi	r26, 0xCA	; 202
    150a:	b8 e2       	ldi	r27, 0x28	; 40
    150c:	ec 91       	ld	r30, X
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	8e 0f       	add	r24, r30
    1512:	8c 93       	st	X, r24
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e8 58       	subi	r30, 0x88	; 136
    1518:	f7 4d       	sbci	r31, 0xD7	; 215
    151a:	80 81       	ld	r24, Z
    151c:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    151e:	90 91 cb 28 	lds	r25, 0x28CB	; 0x8028cb <send0_buf+0x53>
    1522:	8c 91       	ld	r24, X
    1524:	98 13       	cpse	r25, r24
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <send0_buf+0x51>
    152e:	05 c0       	rjmp	.+10     	; 0x153a <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    1530:	e0 e0       	ldi	r30, 0x00	; 0
    1532:	f8 e0       	ldi	r31, 0x08	; 8
    1534:	85 81       	ldd	r24, Z+5	; 0x05
    1536:	80 62       	ori	r24, 0x20	; 32
    1538:	85 83       	std	Z+5, r24	; 0x05
	}
}
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1554:	e0 e4       	ldi	r30, 0x40	; 64
    1556:	f4 e0       	ldi	r31, 0x04	; 4
    1558:	80 ef       	ldi	r24, 0xF0	; 240
    155a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    155c:	81 83       	std	Z+1, r24	; 0x01
    155e:	08 95       	ret

00001560 <__subsf3>:
    1560:	50 58       	subi	r21, 0x80	; 128

00001562 <__addsf3>:
    1562:	bb 27       	eor	r27, r27
    1564:	aa 27       	eor	r26, r26
    1566:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__addsf3x>
    156a:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_round>
    156e:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fp_pscA>
    1572:	38 f0       	brcs	.+14     	; 0x1582 <__addsf3+0x20>
    1574:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fp_pscB>
    1578:	20 f0       	brcs	.+8      	; 0x1582 <__addsf3+0x20>
    157a:	39 f4       	brne	.+14     	; 0x158a <__addsf3+0x28>
    157c:	9f 3f       	cpi	r25, 0xFF	; 255
    157e:	19 f4       	brne	.+6      	; 0x1586 <__addsf3+0x24>
    1580:	26 f4       	brtc	.+8      	; 0x158a <__addsf3+0x28>
    1582:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_nan>
    1586:	0e f4       	brtc	.+2      	; 0x158a <__addsf3+0x28>
    1588:	e0 95       	com	r30
    158a:	e7 fb       	bst	r30, 7
    158c:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_inf>

00001590 <__addsf3x>:
    1590:	e9 2f       	mov	r30, r25
    1592:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_split3>
    1596:	58 f3       	brcs	.-42     	; 0x156e <__addsf3+0xc>
    1598:	ba 17       	cp	r27, r26
    159a:	62 07       	cpc	r22, r18
    159c:	73 07       	cpc	r23, r19
    159e:	84 07       	cpc	r24, r20
    15a0:	95 07       	cpc	r25, r21
    15a2:	20 f0       	brcs	.+8      	; 0x15ac <__addsf3x+0x1c>
    15a4:	79 f4       	brne	.+30     	; 0x15c4 <__addsf3x+0x34>
    15a6:	a6 f5       	brtc	.+104    	; 0x1610 <__addsf3x+0x80>
    15a8:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_zero>
    15ac:	0e f4       	brtc	.+2      	; 0x15b0 <__addsf3x+0x20>
    15ae:	e0 95       	com	r30
    15b0:	0b 2e       	mov	r0, r27
    15b2:	ba 2f       	mov	r27, r26
    15b4:	a0 2d       	mov	r26, r0
    15b6:	0b 01       	movw	r0, r22
    15b8:	b9 01       	movw	r22, r18
    15ba:	90 01       	movw	r18, r0
    15bc:	0c 01       	movw	r0, r24
    15be:	ca 01       	movw	r24, r20
    15c0:	a0 01       	movw	r20, r0
    15c2:	11 24       	eor	r1, r1
    15c4:	ff 27       	eor	r31, r31
    15c6:	59 1b       	sub	r21, r25
    15c8:	99 f0       	breq	.+38     	; 0x15f0 <__addsf3x+0x60>
    15ca:	59 3f       	cpi	r21, 0xF9	; 249
    15cc:	50 f4       	brcc	.+20     	; 0x15e2 <__addsf3x+0x52>
    15ce:	50 3e       	cpi	r21, 0xE0	; 224
    15d0:	68 f1       	brcs	.+90     	; 0x162c <__addsf3x+0x9c>
    15d2:	1a 16       	cp	r1, r26
    15d4:	f0 40       	sbci	r31, 0x00	; 0
    15d6:	a2 2f       	mov	r26, r18
    15d8:	23 2f       	mov	r18, r19
    15da:	34 2f       	mov	r19, r20
    15dc:	44 27       	eor	r20, r20
    15de:	58 5f       	subi	r21, 0xF8	; 248
    15e0:	f3 cf       	rjmp	.-26     	; 0x15c8 <__addsf3x+0x38>
    15e2:	46 95       	lsr	r20
    15e4:	37 95       	ror	r19
    15e6:	27 95       	ror	r18
    15e8:	a7 95       	ror	r26
    15ea:	f0 40       	sbci	r31, 0x00	; 0
    15ec:	53 95       	inc	r21
    15ee:	c9 f7       	brne	.-14     	; 0x15e2 <__addsf3x+0x52>
    15f0:	7e f4       	brtc	.+30     	; 0x1610 <__addsf3x+0x80>
    15f2:	1f 16       	cp	r1, r31
    15f4:	ba 0b       	sbc	r27, r26
    15f6:	62 0b       	sbc	r22, r18
    15f8:	73 0b       	sbc	r23, r19
    15fa:	84 0b       	sbc	r24, r20
    15fc:	ba f0       	brmi	.+46     	; 0x162c <__addsf3x+0x9c>
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	a1 f0       	breq	.+40     	; 0x162a <__addsf3x+0x9a>
    1602:	ff 0f       	add	r31, r31
    1604:	bb 1f       	adc	r27, r27
    1606:	66 1f       	adc	r22, r22
    1608:	77 1f       	adc	r23, r23
    160a:	88 1f       	adc	r24, r24
    160c:	c2 f7       	brpl	.-16     	; 0x15fe <__addsf3x+0x6e>
    160e:	0e c0       	rjmp	.+28     	; 0x162c <__addsf3x+0x9c>
    1610:	ba 0f       	add	r27, r26
    1612:	62 1f       	adc	r22, r18
    1614:	73 1f       	adc	r23, r19
    1616:	84 1f       	adc	r24, r20
    1618:	48 f4       	brcc	.+18     	; 0x162c <__addsf3x+0x9c>
    161a:	87 95       	ror	r24
    161c:	77 95       	ror	r23
    161e:	67 95       	ror	r22
    1620:	b7 95       	ror	r27
    1622:	f7 95       	ror	r31
    1624:	9e 3f       	cpi	r25, 0xFE	; 254
    1626:	08 f0       	brcs	.+2      	; 0x162a <__addsf3x+0x9a>
    1628:	b0 cf       	rjmp	.-160    	; 0x158a <__addsf3+0x28>
    162a:	93 95       	inc	r25
    162c:	88 0f       	add	r24, r24
    162e:	08 f0       	brcs	.+2      	; 0x1632 <__addsf3x+0xa2>
    1630:	99 27       	eor	r25, r25
    1632:	ee 0f       	add	r30, r30
    1634:	97 95       	ror	r25
    1636:	87 95       	ror	r24
    1638:	08 95       	ret

0000163a <__cmpsf2>:
    163a:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fp_cmp>
    163e:	08 f4       	brcc	.+2      	; 0x1642 <__cmpsf2+0x8>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	08 95       	ret

00001644 <__divsf3>:
    1644:	0e 94 36 0b 	call	0x166c	; 0x166c <__divsf3x>
    1648:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_round>
    164c:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fp_pscB>
    1650:	58 f0       	brcs	.+22     	; 0x1668 <__divsf3+0x24>
    1652:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fp_pscA>
    1656:	40 f0       	brcs	.+16     	; 0x1668 <__divsf3+0x24>
    1658:	29 f4       	brne	.+10     	; 0x1664 <__divsf3+0x20>
    165a:	5f 3f       	cpi	r21, 0xFF	; 255
    165c:	29 f0       	breq	.+10     	; 0x1668 <__divsf3+0x24>
    165e:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_inf>
    1662:	51 11       	cpse	r21, r1
    1664:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__fp_szero>
    1668:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_nan>

0000166c <__divsf3x>:
    166c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_split3>
    1670:	68 f3       	brcs	.-38     	; 0x164c <__divsf3+0x8>

00001672 <__divsf3_pse>:
    1672:	99 23       	and	r25, r25
    1674:	b1 f3       	breq	.-20     	; 0x1662 <__divsf3+0x1e>
    1676:	55 23       	and	r21, r21
    1678:	91 f3       	breq	.-28     	; 0x165e <__divsf3+0x1a>
    167a:	95 1b       	sub	r25, r21
    167c:	55 0b       	sbc	r21, r21
    167e:	bb 27       	eor	r27, r27
    1680:	aa 27       	eor	r26, r26
    1682:	62 17       	cp	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	38 f0       	brcs	.+14     	; 0x1698 <__divsf3_pse+0x26>
    168a:	9f 5f       	subi	r25, 0xFF	; 255
    168c:	5f 4f       	sbci	r21, 0xFF	; 255
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	44 1f       	adc	r20, r20
    1694:	aa 1f       	adc	r26, r26
    1696:	a9 f3       	breq	.-22     	; 0x1682 <__divsf3_pse+0x10>
    1698:	35 d0       	rcall	.+106    	; 0x1704 <__divsf3_pse+0x92>
    169a:	0e 2e       	mov	r0, r30
    169c:	3a f0       	brmi	.+14     	; 0x16ac <__divsf3_pse+0x3a>
    169e:	e0 e8       	ldi	r30, 0x80	; 128
    16a0:	32 d0       	rcall	.+100    	; 0x1706 <__divsf3_pse+0x94>
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	50 40       	sbci	r21, 0x00	; 0
    16a6:	e6 95       	lsr	r30
    16a8:	00 1c       	adc	r0, r0
    16aa:	ca f7       	brpl	.-14     	; 0x169e <__divsf3_pse+0x2c>
    16ac:	2b d0       	rcall	.+86     	; 0x1704 <__divsf3_pse+0x92>
    16ae:	fe 2f       	mov	r31, r30
    16b0:	29 d0       	rcall	.+82     	; 0x1704 <__divsf3_pse+0x92>
    16b2:	66 0f       	add	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	bb 1f       	adc	r27, r27
    16ba:	26 17       	cp	r18, r22
    16bc:	37 07       	cpc	r19, r23
    16be:	48 07       	cpc	r20, r24
    16c0:	ab 07       	cpc	r26, r27
    16c2:	b0 e8       	ldi	r27, 0x80	; 128
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <__divsf3_pse+0x56>
    16c6:	bb 0b       	sbc	r27, r27
    16c8:	80 2d       	mov	r24, r0
    16ca:	bf 01       	movw	r22, r30
    16cc:	ff 27       	eor	r31, r31
    16ce:	93 58       	subi	r25, 0x83	; 131
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	3a f0       	brmi	.+14     	; 0x16e2 <__divsf3_pse+0x70>
    16d4:	9e 3f       	cpi	r25, 0xFE	; 254
    16d6:	51 05       	cpc	r21, r1
    16d8:	78 f0       	brcs	.+30     	; 0x16f8 <__divsf3_pse+0x86>
    16da:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_inf>
    16de:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__fp_szero>
    16e2:	5f 3f       	cpi	r21, 0xFF	; 255
    16e4:	e4 f3       	brlt	.-8      	; 0x16de <__divsf3_pse+0x6c>
    16e6:	98 3e       	cpi	r25, 0xE8	; 232
    16e8:	d4 f3       	brlt	.-12     	; 0x16de <__divsf3_pse+0x6c>
    16ea:	86 95       	lsr	r24
    16ec:	77 95       	ror	r23
    16ee:	67 95       	ror	r22
    16f0:	b7 95       	ror	r27
    16f2:	f7 95       	ror	r31
    16f4:	9f 5f       	subi	r25, 0xFF	; 255
    16f6:	c9 f7       	brne	.-14     	; 0x16ea <__divsf3_pse+0x78>
    16f8:	88 0f       	add	r24, r24
    16fa:	91 1d       	adc	r25, r1
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	97 f9       	bld	r25, 7
    1702:	08 95       	ret
    1704:	e1 e0       	ldi	r30, 0x01	; 1
    1706:	66 0f       	add	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	bb 1f       	adc	r27, r27
    170e:	62 17       	cp	r22, r18
    1710:	73 07       	cpc	r23, r19
    1712:	84 07       	cpc	r24, r20
    1714:	ba 07       	cpc	r27, r26
    1716:	20 f0       	brcs	.+8      	; 0x1720 <__divsf3_pse+0xae>
    1718:	62 1b       	sub	r22, r18
    171a:	73 0b       	sbc	r23, r19
    171c:	84 0b       	sbc	r24, r20
    171e:	ba 0b       	sbc	r27, r26
    1720:	ee 1f       	adc	r30, r30
    1722:	88 f7       	brcc	.-30     	; 0x1706 <__divsf3_pse+0x94>
    1724:	e0 95       	com	r30
    1726:	08 95       	ret

00001728 <__fixunssfsi>:
    1728:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_splitA>
    172c:	88 f0       	brcs	.+34     	; 0x1750 <__fixunssfsi+0x28>
    172e:	9f 57       	subi	r25, 0x7F	; 127
    1730:	98 f0       	brcs	.+38     	; 0x1758 <__fixunssfsi+0x30>
    1732:	b9 2f       	mov	r27, r25
    1734:	99 27       	eor	r25, r25
    1736:	b7 51       	subi	r27, 0x17	; 23
    1738:	b0 f0       	brcs	.+44     	; 0x1766 <__fixunssfsi+0x3e>
    173a:	e1 f0       	breq	.+56     	; 0x1774 <__fixunssfsi+0x4c>
    173c:	66 0f       	add	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	1a f0       	brmi	.+6      	; 0x174c <__fixunssfsi+0x24>
    1746:	ba 95       	dec	r27
    1748:	c9 f7       	brne	.-14     	; 0x173c <__fixunssfsi+0x14>
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <__fixunssfsi+0x4c>
    174c:	b1 30       	cpi	r27, 0x01	; 1
    174e:	91 f0       	breq	.+36     	; 0x1774 <__fixunssfsi+0x4c>
    1750:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__fp_zero>
    1754:	b1 e0       	ldi	r27, 0x01	; 1
    1756:	08 95       	ret
    1758:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__fp_zero>
    175c:	67 2f       	mov	r22, r23
    175e:	78 2f       	mov	r23, r24
    1760:	88 27       	eor	r24, r24
    1762:	b8 5f       	subi	r27, 0xF8	; 248
    1764:	39 f0       	breq	.+14     	; 0x1774 <__fixunssfsi+0x4c>
    1766:	b9 3f       	cpi	r27, 0xF9	; 249
    1768:	cc f3       	brlt	.-14     	; 0x175c <__fixunssfsi+0x34>
    176a:	86 95       	lsr	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	b3 95       	inc	r27
    1772:	d9 f7       	brne	.-10     	; 0x176a <__fixunssfsi+0x42>
    1774:	3e f4       	brtc	.+14     	; 0x1784 <__fixunssfsi+0x5c>
    1776:	90 95       	com	r25
    1778:	80 95       	com	r24
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	08 95       	ret

00001786 <__floatunsisf>:
    1786:	e8 94       	clt
    1788:	09 c0       	rjmp	.+18     	; 0x179c <__floatsisf+0x12>

0000178a <__floatsisf>:
    178a:	97 fb       	bst	r25, 7
    178c:	3e f4       	brtc	.+14     	; 0x179c <__floatsisf+0x12>
    178e:	90 95       	com	r25
    1790:	80 95       	com	r24
    1792:	70 95       	com	r23
    1794:	61 95       	neg	r22
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	99 23       	and	r25, r25
    179e:	a9 f0       	breq	.+42     	; 0x17ca <__floatsisf+0x40>
    17a0:	f9 2f       	mov	r31, r25
    17a2:	96 e9       	ldi	r25, 0x96	; 150
    17a4:	bb 27       	eor	r27, r27
    17a6:	93 95       	inc	r25
    17a8:	f6 95       	lsr	r31
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	f1 11       	cpse	r31, r1
    17b4:	f8 cf       	rjmp	.-16     	; 0x17a6 <__floatsisf+0x1c>
    17b6:	fa f4       	brpl	.+62     	; 0x17f6 <__floatsisf+0x6c>
    17b8:	bb 0f       	add	r27, r27
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__floatsisf+0x36>
    17bc:	60 ff       	sbrs	r22, 0
    17be:	1b c0       	rjmp	.+54     	; 0x17f6 <__floatsisf+0x6c>
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <__floatsisf+0x6c>
    17ca:	88 23       	and	r24, r24
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <__floatsisf+0x48>
    17ce:	96 e9       	ldi	r25, 0x96	; 150
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <__floatsisf+0x6a>
    17d2:	77 23       	and	r23, r23
    17d4:	21 f0       	breq	.+8      	; 0x17de <__floatsisf+0x54>
    17d6:	9e e8       	ldi	r25, 0x8E	; 142
    17d8:	87 2f       	mov	r24, r23
    17da:	76 2f       	mov	r23, r22
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <__floatsisf+0x5e>
    17de:	66 23       	and	r22, r22
    17e0:	71 f0       	breq	.+28     	; 0x17fe <__floatsisf+0x74>
    17e2:	96 e8       	ldi	r25, 0x86	; 134
    17e4:	86 2f       	mov	r24, r22
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	2a f0       	brmi	.+10     	; 0x17f6 <__floatsisf+0x6c>
    17ec:	9a 95       	dec	r25
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	da f7       	brpl	.-10     	; 0x17ec <__floatsisf+0x62>
    17f6:	88 0f       	add	r24, r24
    17f8:	96 95       	lsr	r25
    17fa:	87 95       	ror	r24
    17fc:	97 f9       	bld	r25, 7
    17fe:	08 95       	ret

00001800 <__fp_cmp>:
    1800:	99 0f       	add	r25, r25
    1802:	00 08       	sbc	r0, r0
    1804:	55 0f       	add	r21, r21
    1806:	aa 0b       	sbc	r26, r26
    1808:	e0 e8       	ldi	r30, 0x80	; 128
    180a:	fe ef       	ldi	r31, 0xFE	; 254
    180c:	16 16       	cp	r1, r22
    180e:	17 06       	cpc	r1, r23
    1810:	e8 07       	cpc	r30, r24
    1812:	f9 07       	cpc	r31, r25
    1814:	c0 f0       	brcs	.+48     	; 0x1846 <__fp_cmp+0x46>
    1816:	12 16       	cp	r1, r18
    1818:	13 06       	cpc	r1, r19
    181a:	e4 07       	cpc	r30, r20
    181c:	f5 07       	cpc	r31, r21
    181e:	98 f0       	brcs	.+38     	; 0x1846 <__fp_cmp+0x46>
    1820:	62 1b       	sub	r22, r18
    1822:	73 0b       	sbc	r23, r19
    1824:	84 0b       	sbc	r24, r20
    1826:	95 0b       	sbc	r25, r21
    1828:	39 f4       	brne	.+14     	; 0x1838 <__fp_cmp+0x38>
    182a:	0a 26       	eor	r0, r26
    182c:	61 f0       	breq	.+24     	; 0x1846 <__fp_cmp+0x46>
    182e:	23 2b       	or	r18, r19
    1830:	24 2b       	or	r18, r20
    1832:	25 2b       	or	r18, r21
    1834:	21 f4       	brne	.+8      	; 0x183e <__fp_cmp+0x3e>
    1836:	08 95       	ret
    1838:	0a 26       	eor	r0, r26
    183a:	09 f4       	brne	.+2      	; 0x183e <__fp_cmp+0x3e>
    183c:	a1 40       	sbci	r26, 0x01	; 1
    183e:	a6 95       	lsr	r26
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	81 1d       	adc	r24, r1
    1844:	81 1d       	adc	r24, r1
    1846:	08 95       	ret

00001848 <__fp_inf>:
    1848:	97 f9       	bld	r25, 7
    184a:	9f 67       	ori	r25, 0x7F	; 127
    184c:	80 e8       	ldi	r24, 0x80	; 128
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	08 95       	ret

00001854 <__fp_nan>:
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	80 ec       	ldi	r24, 0xC0	; 192
    1858:	08 95       	ret

0000185a <__fp_pscA>:
    185a:	00 24       	eor	r0, r0
    185c:	0a 94       	dec	r0
    185e:	16 16       	cp	r1, r22
    1860:	17 06       	cpc	r1, r23
    1862:	18 06       	cpc	r1, r24
    1864:	09 06       	cpc	r0, r25
    1866:	08 95       	ret

00001868 <__fp_pscB>:
    1868:	00 24       	eor	r0, r0
    186a:	0a 94       	dec	r0
    186c:	12 16       	cp	r1, r18
    186e:	13 06       	cpc	r1, r19
    1870:	14 06       	cpc	r1, r20
    1872:	05 06       	cpc	r0, r21
    1874:	08 95       	ret

00001876 <__fp_round>:
    1876:	09 2e       	mov	r0, r25
    1878:	03 94       	inc	r0
    187a:	00 0c       	add	r0, r0
    187c:	11 f4       	brne	.+4      	; 0x1882 <__fp_round+0xc>
    187e:	88 23       	and	r24, r24
    1880:	52 f0       	brmi	.+20     	; 0x1896 <__fp_round+0x20>
    1882:	bb 0f       	add	r27, r27
    1884:	40 f4       	brcc	.+16     	; 0x1896 <__fp_round+0x20>
    1886:	bf 2b       	or	r27, r31
    1888:	11 f4       	brne	.+4      	; 0x188e <__fp_round+0x18>
    188a:	60 ff       	sbrs	r22, 0
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <__fp_round+0x20>
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__fp_split3>:
    1898:	57 fd       	sbrc	r21, 7
    189a:	90 58       	subi	r25, 0x80	; 128
    189c:	44 0f       	add	r20, r20
    189e:	55 1f       	adc	r21, r21
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <__fp_splitA+0x10>
    18a2:	5f 3f       	cpi	r21, 0xFF	; 255
    18a4:	71 f0       	breq	.+28     	; 0x18c2 <__fp_splitA+0x1a>
    18a6:	47 95       	ror	r20

000018a8 <__fp_splitA>:
    18a8:	88 0f       	add	r24, r24
    18aa:	97 fb       	bst	r25, 7
    18ac:	99 1f       	adc	r25, r25
    18ae:	61 f0       	breq	.+24     	; 0x18c8 <__fp_splitA+0x20>
    18b0:	9f 3f       	cpi	r25, 0xFF	; 255
    18b2:	79 f0       	breq	.+30     	; 0x18d2 <__fp_splitA+0x2a>
    18b4:	87 95       	ror	r24
    18b6:	08 95       	ret
    18b8:	12 16       	cp	r1, r18
    18ba:	13 06       	cpc	r1, r19
    18bc:	14 06       	cpc	r1, r20
    18be:	55 1f       	adc	r21, r21
    18c0:	f2 cf       	rjmp	.-28     	; 0x18a6 <__fp_split3+0xe>
    18c2:	46 95       	lsr	r20
    18c4:	f1 df       	rcall	.-30     	; 0x18a8 <__fp_splitA>
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <__fp_splitA+0x30>
    18c8:	16 16       	cp	r1, r22
    18ca:	17 06       	cpc	r1, r23
    18cc:	18 06       	cpc	r1, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	f1 cf       	rjmp	.-30     	; 0x18b4 <__fp_splitA+0xc>
    18d2:	86 95       	lsr	r24
    18d4:	71 05       	cpc	r23, r1
    18d6:	61 05       	cpc	r22, r1
    18d8:	08 94       	sec
    18da:	08 95       	ret

000018dc <__fp_zero>:
    18dc:	e8 94       	clt

000018de <__fp_szero>:
    18de:	bb 27       	eor	r27, r27
    18e0:	66 27       	eor	r22, r22
    18e2:	77 27       	eor	r23, r23
    18e4:	cb 01       	movw	r24, r22
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret

000018ea <__mulsf3>:
    18ea:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsf3x>
    18ee:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_round>
    18f2:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fp_pscA>
    18f6:	38 f0       	brcs	.+14     	; 0x1906 <__mulsf3+0x1c>
    18f8:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fp_pscB>
    18fc:	20 f0       	brcs	.+8      	; 0x1906 <__mulsf3+0x1c>
    18fe:	95 23       	and	r25, r21
    1900:	11 f0       	breq	.+4      	; 0x1906 <__mulsf3+0x1c>
    1902:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_inf>
    1906:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_nan>
    190a:	11 24       	eor	r1, r1
    190c:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__fp_szero>

00001910 <__mulsf3x>:
    1910:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__fp_split3>
    1914:	70 f3       	brcs	.-36     	; 0x18f2 <__mulsf3+0x8>

00001916 <__mulsf3_pse>:
    1916:	95 9f       	mul	r25, r21
    1918:	c1 f3       	breq	.-16     	; 0x190a <__mulsf3+0x20>
    191a:	95 0f       	add	r25, r21
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	55 1f       	adc	r21, r21
    1920:	62 9f       	mul	r22, r18
    1922:	f0 01       	movw	r30, r0
    1924:	72 9f       	mul	r23, r18
    1926:	bb 27       	eor	r27, r27
    1928:	f0 0d       	add	r31, r0
    192a:	b1 1d       	adc	r27, r1
    192c:	63 9f       	mul	r22, r19
    192e:	aa 27       	eor	r26, r26
    1930:	f0 0d       	add	r31, r0
    1932:	b1 1d       	adc	r27, r1
    1934:	aa 1f       	adc	r26, r26
    1936:	64 9f       	mul	r22, r20
    1938:	66 27       	eor	r22, r22
    193a:	b0 0d       	add	r27, r0
    193c:	a1 1d       	adc	r26, r1
    193e:	66 1f       	adc	r22, r22
    1940:	82 9f       	mul	r24, r18
    1942:	22 27       	eor	r18, r18
    1944:	b0 0d       	add	r27, r0
    1946:	a1 1d       	adc	r26, r1
    1948:	62 1f       	adc	r22, r18
    194a:	73 9f       	mul	r23, r19
    194c:	b0 0d       	add	r27, r0
    194e:	a1 1d       	adc	r26, r1
    1950:	62 1f       	adc	r22, r18
    1952:	83 9f       	mul	r24, r19
    1954:	a0 0d       	add	r26, r0
    1956:	61 1d       	adc	r22, r1
    1958:	22 1f       	adc	r18, r18
    195a:	74 9f       	mul	r23, r20
    195c:	33 27       	eor	r19, r19
    195e:	a0 0d       	add	r26, r0
    1960:	61 1d       	adc	r22, r1
    1962:	23 1f       	adc	r18, r19
    1964:	84 9f       	mul	r24, r20
    1966:	60 0d       	add	r22, r0
    1968:	21 1d       	adc	r18, r1
    196a:	82 2f       	mov	r24, r18
    196c:	76 2f       	mov	r23, r22
    196e:	6a 2f       	mov	r22, r26
    1970:	11 24       	eor	r1, r1
    1972:	9f 57       	subi	r25, 0x7F	; 127
    1974:	50 40       	sbci	r21, 0x00	; 0
    1976:	9a f0       	brmi	.+38     	; 0x199e <__mulsf3_pse+0x88>
    1978:	f1 f0       	breq	.+60     	; 0x19b6 <__mulsf3_pse+0xa0>
    197a:	88 23       	and	r24, r24
    197c:	4a f0       	brmi	.+18     	; 0x1990 <__mulsf3_pse+0x7a>
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	bb 1f       	adc	r27, r27
    1984:	66 1f       	adc	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	91 50       	subi	r25, 0x01	; 1
    198c:	50 40       	sbci	r21, 0x00	; 0
    198e:	a9 f7       	brne	.-22     	; 0x197a <__mulsf3_pse+0x64>
    1990:	9e 3f       	cpi	r25, 0xFE	; 254
    1992:	51 05       	cpc	r21, r1
    1994:	80 f0       	brcs	.+32     	; 0x19b6 <__mulsf3_pse+0xa0>
    1996:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__fp_inf>
    199a:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__fp_szero>
    199e:	5f 3f       	cpi	r21, 0xFF	; 255
    19a0:	e4 f3       	brlt	.-8      	; 0x199a <__mulsf3_pse+0x84>
    19a2:	98 3e       	cpi	r25, 0xE8	; 232
    19a4:	d4 f3       	brlt	.-12     	; 0x199a <__mulsf3_pse+0x84>
    19a6:	86 95       	lsr	r24
    19a8:	77 95       	ror	r23
    19aa:	67 95       	ror	r22
    19ac:	b7 95       	ror	r27
    19ae:	f7 95       	ror	r31
    19b0:	e7 95       	ror	r30
    19b2:	9f 5f       	subi	r25, 0xFF	; 255
    19b4:	c1 f7       	brne	.-16     	; 0x19a6 <__mulsf3_pse+0x90>
    19b6:	fe 2b       	or	r31, r30
    19b8:	88 0f       	add	r24, r24
    19ba:	91 1d       	adc	r25, r1
    19bc:	96 95       	lsr	r25
    19be:	87 95       	ror	r24
    19c0:	97 f9       	bld	r25, 7
    19c2:	08 95       	ret

000019c4 <__tablejump2__>:
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	05 90       	lpm	r0, Z+
    19ca:	f4 91       	lpm	r31, Z
    19cc:	e0 2d       	mov	r30, r0
    19ce:	09 94       	ijmp

000019d0 <strcat>:
    19d0:	fb 01       	movw	r30, r22
    19d2:	dc 01       	movw	r26, r24
    19d4:	0d 90       	ld	r0, X+
    19d6:	00 20       	and	r0, r0
    19d8:	e9 f7       	brne	.-6      	; 0x19d4 <strcat+0x4>
    19da:	11 97       	sbiw	r26, 0x01	; 1
    19dc:	01 90       	ld	r0, Z+
    19de:	0d 92       	st	X+, r0
    19e0:	00 20       	and	r0, r0
    19e2:	e1 f7       	brne	.-8      	; 0x19dc <strcat+0xc>
    19e4:	08 95       	ret

000019e6 <strcpy>:
    19e6:	fb 01       	movw	r30, r22
    19e8:	dc 01       	movw	r26, r24
    19ea:	01 90       	ld	r0, Z+
    19ec:	0d 92       	st	X+, r0
    19ee:	00 20       	and	r0, r0
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <strcpy+0x4>
    19f2:	08 95       	ret

000019f4 <sprintf>:
    19f4:	ae e0       	ldi	r26, 0x0E	; 14
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	fd e0       	ldi	r31, 0x0D	; 13
    19fc:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__prologue_saves__+0x1c>
    1a00:	0d 89       	ldd	r16, Y+21	; 0x15
    1a02:	1e 89       	ldd	r17, Y+22	; 0x16
    1a04:	86 e0       	ldi	r24, 0x06	; 6
    1a06:	8c 83       	std	Y+4, r24	; 0x04
    1a08:	09 83       	std	Y+1, r16	; 0x01
    1a0a:	1a 83       	std	Y+2, r17	; 0x02
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f e7       	ldi	r25, 0x7F	; 127
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	ae 01       	movw	r20, r28
    1a16:	47 5e       	subi	r20, 0xE7	; 231
    1a18:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a1c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a1e:	ce 01       	movw	r24, r28
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <vfprintf>
    1a26:	ef 81       	ldd	r30, Y+7	; 0x07
    1a28:	f8 85       	ldd	r31, Y+8	; 0x08
    1a2a:	e0 0f       	add	r30, r16
    1a2c:	f1 1f       	adc	r31, r17
    1a2e:	10 82       	st	Z, r1
    1a30:	2e 96       	adiw	r28, 0x0e	; 14
    1a32:	e4 e0       	ldi	r30, 0x04	; 4
    1a34:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__+0x1c>

00001a38 <vfprintf>:
    1a38:	ab e0       	ldi	r26, 0x0B	; 11
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e2 e2       	ldi	r30, 0x22	; 34
    1a3e:	fd e0       	ldi	r31, 0x0D	; 13
    1a40:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__prologue_saves__>
    1a44:	6c 01       	movw	r12, r24
    1a46:	7b 01       	movw	r14, r22
    1a48:	8a 01       	movw	r16, r20
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	16 82       	std	Z+6, r1	; 0x06
    1a4e:	17 82       	std	Z+7, r1	; 0x07
    1a50:	83 81       	ldd	r24, Z+3	; 0x03
    1a52:	81 ff       	sbrs	r24, 1
    1a54:	cc c1       	rjmp	.+920    	; 0x1dee <vfprintf+0x3b6>
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	3c 01       	movw	r6, r24
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	f7 01       	movw	r30, r14
    1a62:	93 fd       	sbrc	r25, 3
    1a64:	85 91       	lpm	r24, Z+
    1a66:	93 ff       	sbrs	r25, 3
    1a68:	81 91       	ld	r24, Z+
    1a6a:	7f 01       	movw	r14, r30
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <vfprintf+0x3a>
    1a70:	ba c1       	rjmp	.+884    	; 0x1de6 <vfprintf+0x3ae>
    1a72:	85 32       	cpi	r24, 0x25	; 37
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <vfprintf+0x4c>
    1a76:	93 fd       	sbrc	r25, 3
    1a78:	85 91       	lpm	r24, Z+
    1a7a:	93 ff       	sbrs	r25, 3
    1a7c:	81 91       	ld	r24, Z+
    1a7e:	7f 01       	movw	r14, r30
    1a80:	85 32       	cpi	r24, 0x25	; 37
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <vfprintf+0x56>
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1a8c:	e7 cf       	rjmp	.-50     	; 0x1a5c <vfprintf+0x24>
    1a8e:	91 2c       	mov	r9, r1
    1a90:	21 2c       	mov	r2, r1
    1a92:	31 2c       	mov	r3, r1
    1a94:	ff e1       	ldi	r31, 0x1F	; 31
    1a96:	f3 15       	cp	r31, r3
    1a98:	d8 f0       	brcs	.+54     	; 0x1ad0 <vfprintf+0x98>
    1a9a:	8b 32       	cpi	r24, 0x2B	; 43
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <vfprintf+0x84>
    1a9e:	38 f4       	brcc	.+14     	; 0x1aae <vfprintf+0x76>
    1aa0:	80 32       	cpi	r24, 0x20	; 32
    1aa2:	79 f0       	breq	.+30     	; 0x1ac2 <vfprintf+0x8a>
    1aa4:	83 32       	cpi	r24, 0x23	; 35
    1aa6:	a1 f4       	brne	.+40     	; 0x1ad0 <vfprintf+0x98>
    1aa8:	23 2d       	mov	r18, r3
    1aaa:	20 61       	ori	r18, 0x10	; 16
    1aac:	1d c0       	rjmp	.+58     	; 0x1ae8 <vfprintf+0xb0>
    1aae:	8d 32       	cpi	r24, 0x2D	; 45
    1ab0:	61 f0       	breq	.+24     	; 0x1aca <vfprintf+0x92>
    1ab2:	80 33       	cpi	r24, 0x30	; 48
    1ab4:	69 f4       	brne	.+26     	; 0x1ad0 <vfprintf+0x98>
    1ab6:	23 2d       	mov	r18, r3
    1ab8:	21 60       	ori	r18, 0x01	; 1
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <vfprintf+0xb0>
    1abc:	83 2d       	mov	r24, r3
    1abe:	82 60       	ori	r24, 0x02	; 2
    1ac0:	38 2e       	mov	r3, r24
    1ac2:	e3 2d       	mov	r30, r3
    1ac4:	e4 60       	ori	r30, 0x04	; 4
    1ac6:	3e 2e       	mov	r3, r30
    1ac8:	2a c0       	rjmp	.+84     	; 0x1b1e <vfprintf+0xe6>
    1aca:	f3 2d       	mov	r31, r3
    1acc:	f8 60       	ori	r31, 0x08	; 8
    1ace:	1d c0       	rjmp	.+58     	; 0x1b0a <vfprintf+0xd2>
    1ad0:	37 fc       	sbrc	r3, 7
    1ad2:	2d c0       	rjmp	.+90     	; 0x1b2e <vfprintf+0xf6>
    1ad4:	20 ed       	ldi	r18, 0xD0	; 208
    1ad6:	28 0f       	add	r18, r24
    1ad8:	2a 30       	cpi	r18, 0x0A	; 10
    1ada:	40 f0       	brcs	.+16     	; 0x1aec <vfprintf+0xb4>
    1adc:	8e 32       	cpi	r24, 0x2E	; 46
    1ade:	b9 f4       	brne	.+46     	; 0x1b0e <vfprintf+0xd6>
    1ae0:	36 fc       	sbrc	r3, 6
    1ae2:	81 c1       	rjmp	.+770    	; 0x1de6 <vfprintf+0x3ae>
    1ae4:	23 2d       	mov	r18, r3
    1ae6:	20 64       	ori	r18, 0x40	; 64
    1ae8:	32 2e       	mov	r3, r18
    1aea:	19 c0       	rjmp	.+50     	; 0x1b1e <vfprintf+0xe6>
    1aec:	36 fe       	sbrs	r3, 6
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <vfprintf+0xc4>
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	98 9e       	mul	r9, r24
    1af4:	20 0d       	add	r18, r0
    1af6:	11 24       	eor	r1, r1
    1af8:	92 2e       	mov	r9, r18
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <vfprintf+0xe6>
    1afc:	ea e0       	ldi	r30, 0x0A	; 10
    1afe:	2e 9e       	mul	r2, r30
    1b00:	20 0d       	add	r18, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	22 2e       	mov	r2, r18
    1b06:	f3 2d       	mov	r31, r3
    1b08:	f0 62       	ori	r31, 0x20	; 32
    1b0a:	3f 2e       	mov	r3, r31
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <vfprintf+0xe6>
    1b0e:	8c 36       	cpi	r24, 0x6C	; 108
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <vfprintf+0xe2>
    1b12:	83 2d       	mov	r24, r3
    1b14:	80 68       	ori	r24, 0x80	; 128
    1b16:	38 2e       	mov	r3, r24
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <vfprintf+0xe6>
    1b1a:	88 36       	cpi	r24, 0x68	; 104
    1b1c:	41 f4       	brne	.+16     	; 0x1b2e <vfprintf+0xf6>
    1b1e:	f7 01       	movw	r30, r14
    1b20:	93 fd       	sbrc	r25, 3
    1b22:	85 91       	lpm	r24, Z+
    1b24:	93 ff       	sbrs	r25, 3
    1b26:	81 91       	ld	r24, Z+
    1b28:	7f 01       	movw	r14, r30
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	b3 cf       	rjmp	.-154    	; 0x1a94 <vfprintf+0x5c>
    1b2e:	98 2f       	mov	r25, r24
    1b30:	9f 7d       	andi	r25, 0xDF	; 223
    1b32:	95 54       	subi	r25, 0x45	; 69
    1b34:	93 30       	cpi	r25, 0x03	; 3
    1b36:	28 f4       	brcc	.+10     	; 0x1b42 <vfprintf+0x10a>
    1b38:	0c 5f       	subi	r16, 0xFC	; 252
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	9f e3       	ldi	r25, 0x3F	; 63
    1b3e:	99 83       	std	Y+1, r25	; 0x01
    1b40:	0d c0       	rjmp	.+26     	; 0x1b5c <vfprintf+0x124>
    1b42:	83 36       	cpi	r24, 0x63	; 99
    1b44:	31 f0       	breq	.+12     	; 0x1b52 <vfprintf+0x11a>
    1b46:	83 37       	cpi	r24, 0x73	; 115
    1b48:	71 f0       	breq	.+28     	; 0x1b66 <vfprintf+0x12e>
    1b4a:	83 35       	cpi	r24, 0x53	; 83
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <vfprintf+0x118>
    1b4e:	59 c0       	rjmp	.+178    	; 0x1c02 <vfprintf+0x1ca>
    1b50:	21 c0       	rjmp	.+66     	; 0x1b94 <vfprintf+0x15c>
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 81       	ld	r24, Z
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	0e 5f       	subi	r16, 0xFE	; 254
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	88 24       	eor	r8, r8
    1b5e:	83 94       	inc	r8
    1b60:	91 2c       	mov	r9, r1
    1b62:	53 01       	movw	r10, r6
    1b64:	13 c0       	rjmp	.+38     	; 0x1b8c <vfprintf+0x154>
    1b66:	28 01       	movw	r4, r16
    1b68:	f2 e0       	ldi	r31, 0x02	; 2
    1b6a:	4f 0e       	add	r4, r31
    1b6c:	51 1c       	adc	r5, r1
    1b6e:	f8 01       	movw	r30, r16
    1b70:	a0 80       	ld	r10, Z
    1b72:	b1 80       	ldd	r11, Z+1	; 0x01
    1b74:	36 fe       	sbrs	r3, 6
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <vfprintf+0x146>
    1b78:	69 2d       	mov	r22, r9
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0x14a>
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	7f ef       	ldi	r23, 0xFF	; 255
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <strnlen>
    1b88:	4c 01       	movw	r8, r24
    1b8a:	82 01       	movw	r16, r4
    1b8c:	f3 2d       	mov	r31, r3
    1b8e:	ff 77       	andi	r31, 0x7F	; 127
    1b90:	3f 2e       	mov	r3, r31
    1b92:	16 c0       	rjmp	.+44     	; 0x1bc0 <vfprintf+0x188>
    1b94:	28 01       	movw	r4, r16
    1b96:	22 e0       	ldi	r18, 0x02	; 2
    1b98:	42 0e       	add	r4, r18
    1b9a:	51 1c       	adc	r5, r1
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	a0 80       	ld	r10, Z
    1ba0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba2:	36 fe       	sbrs	r3, 6
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <vfprintf+0x174>
    1ba6:	69 2d       	mov	r22, r9
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <vfprintf+0x178>
    1bac:	6f ef       	ldi	r22, 0xFF	; 255
    1bae:	7f ef       	ldi	r23, 0xFF	; 255
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <strnlen_P>
    1bb6:	4c 01       	movw	r8, r24
    1bb8:	f3 2d       	mov	r31, r3
    1bba:	f0 68       	ori	r31, 0x80	; 128
    1bbc:	3f 2e       	mov	r3, r31
    1bbe:	82 01       	movw	r16, r4
    1bc0:	33 fc       	sbrc	r3, 3
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <vfprintf+0x1c2>
    1bc4:	82 2d       	mov	r24, r2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	88 16       	cp	r8, r24
    1bca:	99 06       	cpc	r9, r25
    1bcc:	b0 f4       	brcc	.+44     	; 0x1bfa <vfprintf+0x1c2>
    1bce:	b6 01       	movw	r22, r12
    1bd0:	80 e2       	ldi	r24, 0x20	; 32
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1bd8:	2a 94       	dec	r2
    1bda:	f4 cf       	rjmp	.-24     	; 0x1bc4 <vfprintf+0x18c>
    1bdc:	f5 01       	movw	r30, r10
    1bde:	37 fc       	sbrc	r3, 7
    1be0:	85 91       	lpm	r24, Z+
    1be2:	37 fe       	sbrs	r3, 7
    1be4:	81 91       	ld	r24, Z+
    1be6:	5f 01       	movw	r10, r30
    1be8:	b6 01       	movw	r22, r12
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1bf0:	21 10       	cpse	r2, r1
    1bf2:	2a 94       	dec	r2
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	82 1a       	sub	r8, r18
    1bf8:	91 08       	sbc	r9, r1
    1bfa:	81 14       	cp	r8, r1
    1bfc:	91 04       	cpc	r9, r1
    1bfe:	71 f7       	brne	.-36     	; 0x1bdc <vfprintf+0x1a4>
    1c00:	e8 c0       	rjmp	.+464    	; 0x1dd2 <vfprintf+0x39a>
    1c02:	84 36       	cpi	r24, 0x64	; 100
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <vfprintf+0x1d2>
    1c06:	89 36       	cpi	r24, 0x69	; 105
    1c08:	41 f5       	brne	.+80     	; 0x1c5a <vfprintf+0x222>
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	37 fe       	sbrs	r3, 7
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <vfprintf+0x1e6>
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	0c 5f       	subi	r16, 0xFC	; 252
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <vfprintf+0x1f6>
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	07 2e       	mov	r0, r23
    1c24:	00 0c       	add	r0, r0
    1c26:	88 0b       	sbc	r24, r24
    1c28:	99 0b       	sbc	r25, r25
    1c2a:	0e 5f       	subi	r16, 0xFE	; 254
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	f3 2d       	mov	r31, r3
    1c30:	ff 76       	andi	r31, 0x6F	; 111
    1c32:	3f 2e       	mov	r3, r31
    1c34:	97 ff       	sbrs	r25, 7
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <vfprintf+0x212>
    1c38:	90 95       	com	r25
    1c3a:	80 95       	com	r24
    1c3c:	70 95       	com	r23
    1c3e:	61 95       	neg	r22
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	f0 68       	ori	r31, 0x80	; 128
    1c48:	3f 2e       	mov	r3, r31
    1c4a:	2a e0       	ldi	r18, 0x0A	; 10
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	a3 01       	movw	r20, r6
    1c50:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__ultoa_invert>
    1c54:	88 2e       	mov	r8, r24
    1c56:	86 18       	sub	r8, r6
    1c58:	45 c0       	rjmp	.+138    	; 0x1ce4 <vfprintf+0x2ac>
    1c5a:	85 37       	cpi	r24, 0x75	; 117
    1c5c:	31 f4       	brne	.+12     	; 0x1c6a <vfprintf+0x232>
    1c5e:	23 2d       	mov	r18, r3
    1c60:	2f 7e       	andi	r18, 0xEF	; 239
    1c62:	b2 2e       	mov	r11, r18
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	25 c0       	rjmp	.+74     	; 0x1cb4 <vfprintf+0x27c>
    1c6a:	93 2d       	mov	r25, r3
    1c6c:	99 7f       	andi	r25, 0xF9	; 249
    1c6e:	b9 2e       	mov	r11, r25
    1c70:	8f 36       	cpi	r24, 0x6F	; 111
    1c72:	c1 f0       	breq	.+48     	; 0x1ca4 <vfprintf+0x26c>
    1c74:	18 f4       	brcc	.+6      	; 0x1c7c <vfprintf+0x244>
    1c76:	88 35       	cpi	r24, 0x58	; 88
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <vfprintf+0x260>
    1c7a:	b5 c0       	rjmp	.+362    	; 0x1de6 <vfprintf+0x3ae>
    1c7c:	80 37       	cpi	r24, 0x70	; 112
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <vfprintf+0x24e>
    1c80:	88 37       	cpi	r24, 0x78	; 120
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <vfprintf+0x254>
    1c84:	b0 c0       	rjmp	.+352    	; 0x1de6 <vfprintf+0x3ae>
    1c86:	e9 2f       	mov	r30, r25
    1c88:	e0 61       	ori	r30, 0x10	; 16
    1c8a:	be 2e       	mov	r11, r30
    1c8c:	b4 fe       	sbrs	r11, 4
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <vfprintf+0x272>
    1c90:	fb 2d       	mov	r31, r11
    1c92:	f4 60       	ori	r31, 0x04	; 4
    1c94:	bf 2e       	mov	r11, r31
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <vfprintf+0x272>
    1c98:	34 fe       	sbrs	r3, 4
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <vfprintf+0x278>
    1c9c:	29 2f       	mov	r18, r25
    1c9e:	26 60       	ori	r18, 0x06	; 6
    1ca0:	b2 2e       	mov	r11, r18
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0x278>
    1ca4:	28 e0       	ldi	r18, 0x08	; 8
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0x27c>
    1caa:	20 e1       	ldi	r18, 0x10	; 16
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfprintf+0x27c>
    1cb0:	20 e1       	ldi	r18, 0x10	; 16
    1cb2:	32 e0       	ldi	r19, 0x02	; 2
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	b7 fe       	sbrs	r11, 7
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <vfprintf+0x290>
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	0c 5f       	subi	r16, 0xFC	; 252
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <vfprintf+0x29c>
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 5f       	subi	r16, 0xFE	; 254
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	a3 01       	movw	r20, r6
    1cd6:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__ultoa_invert>
    1cda:	88 2e       	mov	r8, r24
    1cdc:	86 18       	sub	r8, r6
    1cde:	fb 2d       	mov	r31, r11
    1ce0:	ff 77       	andi	r31, 0x7F	; 127
    1ce2:	3f 2e       	mov	r3, r31
    1ce4:	36 fe       	sbrs	r3, 6
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <vfprintf+0x2ca>
    1ce8:	23 2d       	mov	r18, r3
    1cea:	2e 7f       	andi	r18, 0xFE	; 254
    1cec:	a2 2e       	mov	r10, r18
    1cee:	89 14       	cp	r8, r9
    1cf0:	58 f4       	brcc	.+22     	; 0x1d08 <vfprintf+0x2d0>
    1cf2:	34 fe       	sbrs	r3, 4
    1cf4:	0b c0       	rjmp	.+22     	; 0x1d0c <vfprintf+0x2d4>
    1cf6:	32 fc       	sbrc	r3, 2
    1cf8:	09 c0       	rjmp	.+18     	; 0x1d0c <vfprintf+0x2d4>
    1cfa:	83 2d       	mov	r24, r3
    1cfc:	8e 7e       	andi	r24, 0xEE	; 238
    1cfe:	a8 2e       	mov	r10, r24
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <vfprintf+0x2d4>
    1d02:	b8 2c       	mov	r11, r8
    1d04:	a3 2c       	mov	r10, r3
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfprintf+0x2d6>
    1d08:	b8 2c       	mov	r11, r8
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <vfprintf+0x2d6>
    1d0c:	b9 2c       	mov	r11, r9
    1d0e:	a4 fe       	sbrs	r10, 4
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <vfprintf+0x2f8>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e8 0d       	add	r30, r8
    1d16:	f1 1d       	adc	r31, r1
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 33       	cpi	r24, 0x30	; 48
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <vfprintf+0x2ee>
    1d1e:	9a 2d       	mov	r25, r10
    1d20:	99 7e       	andi	r25, 0xE9	; 233
    1d22:	a9 2e       	mov	r10, r25
    1d24:	09 c0       	rjmp	.+18     	; 0x1d38 <vfprintf+0x300>
    1d26:	a2 fe       	sbrs	r10, 2
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0x2fe>
    1d2a:	b3 94       	inc	r11
    1d2c:	b3 94       	inc	r11
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <vfprintf+0x300>
    1d30:	8a 2d       	mov	r24, r10
    1d32:	86 78       	andi	r24, 0x86	; 134
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <vfprintf+0x300>
    1d36:	b3 94       	inc	r11
    1d38:	a3 fc       	sbrc	r10, 3
    1d3a:	11 c0       	rjmp	.+34     	; 0x1d5e <vfprintf+0x326>
    1d3c:	a0 fe       	sbrs	r10, 0
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <vfprintf+0x314>
    1d40:	b2 14       	cp	r11, r2
    1d42:	88 f4       	brcc	.+34     	; 0x1d66 <vfprintf+0x32e>
    1d44:	28 0c       	add	r2, r8
    1d46:	92 2c       	mov	r9, r2
    1d48:	9b 18       	sub	r9, r11
    1d4a:	0e c0       	rjmp	.+28     	; 0x1d68 <vfprintf+0x330>
    1d4c:	b2 14       	cp	r11, r2
    1d4e:	60 f4       	brcc	.+24     	; 0x1d68 <vfprintf+0x330>
    1d50:	b6 01       	movw	r22, r12
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1d5a:	b3 94       	inc	r11
    1d5c:	f7 cf       	rjmp	.-18     	; 0x1d4c <vfprintf+0x314>
    1d5e:	b2 14       	cp	r11, r2
    1d60:	18 f4       	brcc	.+6      	; 0x1d68 <vfprintf+0x330>
    1d62:	2b 18       	sub	r2, r11
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <vfprintf+0x332>
    1d66:	98 2c       	mov	r9, r8
    1d68:	21 2c       	mov	r2, r1
    1d6a:	a4 fe       	sbrs	r10, 4
    1d6c:	10 c0       	rjmp	.+32     	; 0x1d8e <vfprintf+0x356>
    1d6e:	b6 01       	movw	r22, r12
    1d70:	80 e3       	ldi	r24, 0x30	; 48
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1d78:	a2 fe       	sbrs	r10, 2
    1d7a:	17 c0       	rjmp	.+46     	; 0x1daa <vfprintf+0x372>
    1d7c:	a1 fc       	sbrc	r10, 1
    1d7e:	03 c0       	rjmp	.+6      	; 0x1d86 <vfprintf+0x34e>
    1d80:	88 e7       	ldi	r24, 0x78	; 120
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <vfprintf+0x352>
    1d86:	88 e5       	ldi	r24, 0x58	; 88
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0c c0       	rjmp	.+24     	; 0x1da6 <vfprintf+0x36e>
    1d8e:	8a 2d       	mov	r24, r10
    1d90:	86 78       	andi	r24, 0x86	; 134
    1d92:	59 f0       	breq	.+22     	; 0x1daa <vfprintf+0x372>
    1d94:	a1 fe       	sbrs	r10, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <vfprintf+0x364>
    1d98:	8b e2       	ldi	r24, 0x2B	; 43
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <vfprintf+0x366>
    1d9c:	80 e2       	ldi	r24, 0x20	; 32
    1d9e:	a7 fc       	sbrc	r10, 7
    1da0:	8d e2       	ldi	r24, 0x2D	; 45
    1da2:	b6 01       	movw	r22, r12
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1daa:	89 14       	cp	r8, r9
    1dac:	38 f4       	brcc	.+14     	; 0x1dbc <vfprintf+0x384>
    1dae:	b6 01       	movw	r22, r12
    1db0:	80 e3       	ldi	r24, 0x30	; 48
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1db8:	9a 94       	dec	r9
    1dba:	f7 cf       	rjmp	.-18     	; 0x1daa <vfprintf+0x372>
    1dbc:	8a 94       	dec	r8
    1dbe:	f3 01       	movw	r30, r6
    1dc0:	e8 0d       	add	r30, r8
    1dc2:	f1 1d       	adc	r31, r1
    1dc4:	80 81       	ld	r24, Z
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1dce:	81 10       	cpse	r8, r1
    1dd0:	f5 cf       	rjmp	.-22     	; 0x1dbc <vfprintf+0x384>
    1dd2:	22 20       	and	r2, r2
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <vfprintf+0x3a0>
    1dd6:	42 ce       	rjmp	.-892    	; 0x1a5c <vfprintf+0x24>
    1dd8:	b6 01       	movw	r22, r12
    1dda:	80 e2       	ldi	r24, 0x20	; 32
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <fputc>
    1de2:	2a 94       	dec	r2
    1de4:	f6 cf       	rjmp	.-20     	; 0x1dd2 <vfprintf+0x39a>
    1de6:	f6 01       	movw	r30, r12
    1de8:	86 81       	ldd	r24, Z+6	; 0x06
    1dea:	97 81       	ldd	r25, Z+7	; 0x07
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <vfprintf+0x3ba>
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	9f ef       	ldi	r25, 0xFF	; 255
    1df2:	2b 96       	adiw	r28, 0x0b	; 11
    1df4:	e2 e1       	ldi	r30, 0x12	; 18
    1df6:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__epilogue_restores__>

00001dfa <strnlen_P>:
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	05 90       	lpm	r0, Z+
    1dfe:	61 50       	subi	r22, 0x01	; 1
    1e00:	70 40       	sbci	r23, 0x00	; 0
    1e02:	01 10       	cpse	r0, r1
    1e04:	d8 f7       	brcc	.-10     	; 0x1dfc <strnlen_P+0x2>
    1e06:	80 95       	com	r24
    1e08:	90 95       	com	r25
    1e0a:	8e 0f       	add	r24, r30
    1e0c:	9f 1f       	adc	r25, r31
    1e0e:	08 95       	ret

00001e10 <strnlen>:
    1e10:	fc 01       	movw	r30, r24
    1e12:	61 50       	subi	r22, 0x01	; 1
    1e14:	70 40       	sbci	r23, 0x00	; 0
    1e16:	01 90       	ld	r0, Z+
    1e18:	01 10       	cpse	r0, r1
    1e1a:	d8 f7       	brcc	.-10     	; 0x1e12 <strnlen+0x2>
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	8e 0f       	add	r24, r30
    1e22:	9f 1f       	adc	r25, r31
    1e24:	08 95       	ret

00001e26 <fputc>:
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	fb 01       	movw	r30, r22
    1e30:	23 81       	ldd	r18, Z+3	; 0x03
    1e32:	21 fd       	sbrc	r18, 1
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <fputc+0x16>
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	9f ef       	ldi	r25, 0xFF	; 255
    1e3a:	2c c0       	rjmp	.+88     	; 0x1e94 <fputc+0x6e>
    1e3c:	22 ff       	sbrs	r18, 2
    1e3e:	16 c0       	rjmp	.+44     	; 0x1e6c <fputc+0x46>
    1e40:	46 81       	ldd	r20, Z+6	; 0x06
    1e42:	57 81       	ldd	r21, Z+7	; 0x07
    1e44:	24 81       	ldd	r18, Z+4	; 0x04
    1e46:	35 81       	ldd	r19, Z+5	; 0x05
    1e48:	42 17       	cp	r20, r18
    1e4a:	53 07       	cpc	r21, r19
    1e4c:	44 f4       	brge	.+16     	; 0x1e5e <fputc+0x38>
    1e4e:	a0 81       	ld	r26, Z
    1e50:	b1 81       	ldd	r27, Z+1	; 0x01
    1e52:	9d 01       	movw	r18, r26
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	20 83       	st	Z, r18
    1e5a:	31 83       	std	Z+1, r19	; 0x01
    1e5c:	8c 93       	st	X, r24
    1e5e:	26 81       	ldd	r18, Z+6	; 0x06
    1e60:	37 81       	ldd	r19, Z+7	; 0x07
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	26 83       	std	Z+6, r18	; 0x06
    1e68:	37 83       	std	Z+7, r19	; 0x07
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <fputc+0x6e>
    1e6c:	8b 01       	movw	r16, r22
    1e6e:	ec 01       	movw	r28, r24
    1e70:	fb 01       	movw	r30, r22
    1e72:	00 84       	ldd	r0, Z+8	; 0x08
    1e74:	f1 85       	ldd	r31, Z+9	; 0x09
    1e76:	e0 2d       	mov	r30, r0
    1e78:	09 95       	icall
    1e7a:	89 2b       	or	r24, r25
    1e7c:	e1 f6       	brne	.-72     	; 0x1e36 <fputc+0x10>
    1e7e:	d8 01       	movw	r26, r16
    1e80:	16 96       	adiw	r26, 0x06	; 6
    1e82:	8d 91       	ld	r24, X+
    1e84:	9c 91       	ld	r25, X
    1e86:	17 97       	sbiw	r26, 0x07	; 7
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	16 96       	adiw	r26, 0x06	; 6
    1e8c:	8d 93       	st	X+, r24
    1e8e:	9c 93       	st	X, r25
    1e90:	17 97       	sbiw	r26, 0x07	; 7
    1e92:	ce 01       	movw	r24, r28
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	08 95       	ret

00001e9e <__ultoa_invert>:
    1e9e:	fa 01       	movw	r30, r20
    1ea0:	aa 27       	eor	r26, r26
    1ea2:	28 30       	cpi	r18, 0x08	; 8
    1ea4:	51 f1       	breq	.+84     	; 0x1efa <__ultoa_invert+0x5c>
    1ea6:	20 31       	cpi	r18, 0x10	; 16
    1ea8:	81 f1       	breq	.+96     	; 0x1f0a <__ultoa_invert+0x6c>
    1eaa:	e8 94       	clt
    1eac:	6f 93       	push	r22
    1eae:	6e 7f       	andi	r22, 0xFE	; 254
    1eb0:	6e 5f       	subi	r22, 0xFE	; 254
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	af 4f       	sbci	r26, 0xFF	; 255
    1eba:	b1 e0       	ldi	r27, 0x01	; 1
    1ebc:	3e d0       	rcall	.+124    	; 0x1f3a <__ultoa_invert+0x9c>
    1ebe:	b4 e0       	ldi	r27, 0x04	; 4
    1ec0:	3c d0       	rcall	.+120    	; 0x1f3a <__ultoa_invert+0x9c>
    1ec2:	67 0f       	add	r22, r23
    1ec4:	78 1f       	adc	r23, r24
    1ec6:	89 1f       	adc	r24, r25
    1ec8:	9a 1f       	adc	r25, r26
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	68 0f       	add	r22, r24
    1ece:	79 1f       	adc	r23, r25
    1ed0:	8a 1f       	adc	r24, r26
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	6a 0f       	add	r22, r26
    1ed8:	71 1d       	adc	r23, r1
    1eda:	81 1d       	adc	r24, r1
    1edc:	91 1d       	adc	r25, r1
    1ede:	a1 1d       	adc	r26, r1
    1ee0:	20 d0       	rcall	.+64     	; 0x1f22 <__ultoa_invert+0x84>
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <__ultoa_invert+0x48>
    1ee4:	68 94       	set
    1ee6:	3f 91       	pop	r19
    1ee8:	2a e0       	ldi	r18, 0x0A	; 10
    1eea:	26 9f       	mul	r18, r22
    1eec:	11 24       	eor	r1, r1
    1eee:	30 19       	sub	r19, r0
    1ef0:	30 5d       	subi	r19, 0xD0	; 208
    1ef2:	31 93       	st	Z+, r19
    1ef4:	de f6       	brtc	.-74     	; 0x1eac <__ultoa_invert+0xe>
    1ef6:	cf 01       	movw	r24, r30
    1ef8:	08 95       	ret
    1efa:	46 2f       	mov	r20, r22
    1efc:	47 70       	andi	r20, 0x07	; 7
    1efe:	40 5d       	subi	r20, 0xD0	; 208
    1f00:	41 93       	st	Z+, r20
    1f02:	b3 e0       	ldi	r27, 0x03	; 3
    1f04:	0f d0       	rcall	.+30     	; 0x1f24 <__ultoa_invert+0x86>
    1f06:	c9 f7       	brne	.-14     	; 0x1efa <__ultoa_invert+0x5c>
    1f08:	f6 cf       	rjmp	.-20     	; 0x1ef6 <__ultoa_invert+0x58>
    1f0a:	46 2f       	mov	r20, r22
    1f0c:	4f 70       	andi	r20, 0x0F	; 15
    1f0e:	40 5d       	subi	r20, 0xD0	; 208
    1f10:	4a 33       	cpi	r20, 0x3A	; 58
    1f12:	18 f0       	brcs	.+6      	; 0x1f1a <__ultoa_invert+0x7c>
    1f14:	49 5d       	subi	r20, 0xD9	; 217
    1f16:	31 fd       	sbrc	r19, 1
    1f18:	40 52       	subi	r20, 0x20	; 32
    1f1a:	41 93       	st	Z+, r20
    1f1c:	02 d0       	rcall	.+4      	; 0x1f22 <__ultoa_invert+0x84>
    1f1e:	a9 f7       	brne	.-22     	; 0x1f0a <__ultoa_invert+0x6c>
    1f20:	ea cf       	rjmp	.-44     	; 0x1ef6 <__ultoa_invert+0x58>
    1f22:	b4 e0       	ldi	r27, 0x04	; 4
    1f24:	a6 95       	lsr	r26
    1f26:	97 95       	ror	r25
    1f28:	87 95       	ror	r24
    1f2a:	77 95       	ror	r23
    1f2c:	67 95       	ror	r22
    1f2e:	ba 95       	dec	r27
    1f30:	c9 f7       	brne	.-14     	; 0x1f24 <__ultoa_invert+0x86>
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	61 05       	cpc	r22, r1
    1f36:	71 05       	cpc	r23, r1
    1f38:	08 95       	ret
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	0a 2e       	mov	r0, r26
    1f40:	06 94       	lsr	r0
    1f42:	57 95       	ror	r21
    1f44:	47 95       	ror	r20
    1f46:	37 95       	ror	r19
    1f48:	27 95       	ror	r18
    1f4a:	ba 95       	dec	r27
    1f4c:	c9 f7       	brne	.-14     	; 0x1f40 <__ultoa_invert+0xa2>
    1f4e:	62 0f       	add	r22, r18
    1f50:	73 1f       	adc	r23, r19
    1f52:	84 1f       	adc	r24, r20
    1f54:	95 1f       	adc	r25, r21
    1f56:	a0 1d       	adc	r26, r0
    1f58:	08 95       	ret

00001f5a <eeprom_read_block>:
    1f5a:	60 50       	subi	r22, 0x00	; 0
    1f5c:	7c 4e       	sbci	r23, 0xEC	; 236
    1f5e:	0c 94 19 10 	jmp	0x2032	; 0x2032 <memcpy>

00001f62 <eeprom_read_byte>:
    1f62:	03 d0       	rcall	.+6      	; 0x1f6a <eeprom_mapen>
    1f64:	80 81       	ld	r24, Z
    1f66:	99 27       	eor	r25, r25
    1f68:	08 95       	ret

00001f6a <eeprom_mapen>:
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e0 50       	subi	r30, 0x00	; 0
    1f6e:	fc 4e       	sbci	r31, 0xEC	; 236
    1f70:	08 95       	ret

00001f72 <eeprom_update_block>:
    1f72:	dc 01       	movw	r26, r24
    1f74:	a4 0f       	add	r26, r20
    1f76:	b5 1f       	adc	r27, r21
    1f78:	41 50       	subi	r20, 0x01	; 1
    1f7a:	50 40       	sbci	r21, 0x00	; 0
    1f7c:	48 f0       	brcs	.+18     	; 0x1f90 <eeprom_update_block+0x1e>
    1f7e:	cb 01       	movw	r24, r22
    1f80:	84 0f       	add	r24, r20
    1f82:	95 1f       	adc	r25, r21
    1f84:	2e 91       	ld	r18, -X
    1f86:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <eeprom_update_r18>
    1f8a:	41 50       	subi	r20, 0x01	; 1
    1f8c:	50 40       	sbci	r21, 0x00	; 0
    1f8e:	d0 f7       	brcc	.-12     	; 0x1f84 <eeprom_update_block+0x12>
    1f90:	08 95       	ret

00001f92 <eeprom_update_byte>:
    1f92:	26 2f       	mov	r18, r22

00001f94 <eeprom_update_r18>:
    1f94:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <eeprom_mapen>
    1f98:	00 80       	ld	r0, Z
    1f9a:	02 16       	cp	r0, r18
    1f9c:	19 f0       	breq	.+6      	; 0x1fa4 <eeprom_update_r18+0x10>
    1f9e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <eeprom_write_r18>
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	08 95       	ret

00001fa8 <eeprom_write_byte>:
    1fa8:	26 2f       	mov	r18, r22

00001faa <eeprom_write_r18>:
    1faa:	af 93       	push	r26
    1fac:	bf 93       	push	r27
    1fae:	e0 e0       	ldi	r30, 0x00	; 0
    1fb0:	f0 e1       	ldi	r31, 0x10	; 16
    1fb2:	32 81       	ldd	r19, Z+2	; 0x02
    1fb4:	31 fd       	sbrc	r19, 1
    1fb6:	fd cf       	rjmp	.-6      	; 0x1fb2 <eeprom_write_r18+0x8>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	a0 50       	subi	r26, 0x00	; 0
    1fbc:	bc 4e       	sbci	r27, 0xEC	; 236
    1fbe:	2c 93       	st	X, r18
    1fc0:	2d e9       	ldi	r18, 0x9D	; 157
    1fc2:	24 bf       	out	0x34, r18	; 52
    1fc4:	23 e0       	ldi	r18, 0x03	; 3
    1fc6:	20 83       	st	Z, r18
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	bf 91       	pop	r27
    1fcc:	af 91       	pop	r26
    1fce:	08 95       	ret

00001fd0 <__prologue_saves__>:
    1fd0:	2f 92       	push	r2
    1fd2:	3f 92       	push	r3
    1fd4:	4f 92       	push	r4
    1fd6:	5f 92       	push	r5
    1fd8:	6f 92       	push	r6
    1fda:	7f 92       	push	r7
    1fdc:	8f 92       	push	r8
    1fde:	9f 92       	push	r9
    1fe0:	af 92       	push	r10
    1fe2:	bf 92       	push	r11
    1fe4:	cf 92       	push	r12
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	ca 1b       	sub	r28, r26
    1ffa:	db 0b       	sbc	r29, r27
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	09 94       	ijmp

00002002 <__epilogue_restores__>:
    2002:	2a 88       	ldd	r2, Y+18	; 0x12
    2004:	39 88       	ldd	r3, Y+17	; 0x11
    2006:	48 88       	ldd	r4, Y+16	; 0x10
    2008:	5f 84       	ldd	r5, Y+15	; 0x0f
    200a:	6e 84       	ldd	r6, Y+14	; 0x0e
    200c:	7d 84       	ldd	r7, Y+13	; 0x0d
    200e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2010:	9b 84       	ldd	r9, Y+11	; 0x0b
    2012:	aa 84       	ldd	r10, Y+10	; 0x0a
    2014:	b9 84       	ldd	r11, Y+9	; 0x09
    2016:	c8 84       	ldd	r12, Y+8	; 0x08
    2018:	df 80       	ldd	r13, Y+7	; 0x07
    201a:	ee 80       	ldd	r14, Y+6	; 0x06
    201c:	fd 80       	ldd	r15, Y+5	; 0x05
    201e:	0c 81       	ldd	r16, Y+4	; 0x04
    2020:	1b 81       	ldd	r17, Y+3	; 0x03
    2022:	aa 81       	ldd	r26, Y+2	; 0x02
    2024:	b9 81       	ldd	r27, Y+1	; 0x01
    2026:	ce 0f       	add	r28, r30
    2028:	d1 1d       	adc	r29, r1
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	ed 01       	movw	r28, r26
    2030:	08 95       	ret

00002032 <memcpy>:
    2032:	fb 01       	movw	r30, r22
    2034:	dc 01       	movw	r26, r24
    2036:	02 c0       	rjmp	.+4      	; 0x203c <memcpy+0xa>
    2038:	01 90       	ld	r0, Z+
    203a:	0d 92       	st	X+, r0
    203c:	41 50       	subi	r20, 0x01	; 1
    203e:	50 40       	sbci	r21, 0x00	; 0
    2040:	d8 f7       	brcc	.-10     	; 0x2038 <memcpy+0x6>
    2042:	08 95       	ret

00002044 <_exit>:
    2044:	f8 94       	cli

00002046 <__stop_program>:
    2046:	ff cf       	rjmp	.-2      	; 0x2046 <__stop_program>
