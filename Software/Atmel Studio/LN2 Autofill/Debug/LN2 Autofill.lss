
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000027ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001aa  00006570  00002570  00002604  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000cd  00802800  00802800  000027ae  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000027ae  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000328  00000000  00000000  00002850  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006e0d  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003495  00000000  00000000  00009985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000025fc  00000000  00000000  0000ce1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005bc  00000000  00000000  0000f418  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f64  00000000  00000000  0000f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cbe  00000000  00000000  00011938  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c8  00000000  00000000  000125f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_17>
      48:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_24>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_34>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	a0 01       	movw	r20, r0
      a2:	be 01       	movw	r22, r28
      a4:	95 02       	muls	r25, r21
      a6:	cb 02       	muls	r28, r27
      a8:	03 03       	mulsu	r16, r19
      aa:	3b 03       	fmul	r19, r19
      ac:	5c 03       	fmul	r21, r20
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	28 e2       	ldi	r18, 0x28	; 40
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	ad 3c       	cpi	r26, 0xCD	; 205
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 8b 06 	call	0xd16	; 0xd16 <main>
      d0:	0c 94 b6 12 	jmp	0x256c	; 0x256c <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:

volatile uint8_t button_pushed;

void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	60 e7       	ldi	r22, 0x70	; 112
      e2:	75 e6       	ldi	r23, 0x65	; 101
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	6f e7       	ldi	r22, 0x7F	; 127
      ee:	75 e6       	ldi	r23, 0x65	; 101
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	button_pushed variable returns the button name and the corresponding
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{
	switch (button_pushed) {
      f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	d1 f1       	breq	.+116    	; 0x174 <__EEPROM_REGION_LENGTH__+0x74>
     100:	18 f4       	brcc	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	41 f0       	breq	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     106:	9a c0       	rjmp	.+308    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f4       	brne	.+2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     10c:	62 c0       	rjmp	.+196    	; 0x1d2 <__EEPROM_REGION_LENGTH__+0xd2>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	87 c0       	rjmp	.+270    	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
     114:	93 c0       	rjmp	.+294    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {				// See valves.h
     116:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     11a:	88 23       	and	r24, r24
     11c:	24 f4       	brge	.+8      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
				CLOSEVALVE(BLUVALVE);
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     124:	8b c0       	rjmp	.+278    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (BLUENABLED && BLUTHERMWARM) {
     126:	8c e0       	ldi	r24, 0x0C	; 12
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     12e:	88 23       	and	r24, r24
     130:	09 f4       	brne	.+2      	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
     132:	84 c0       	rjmp	.+264    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
     134:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     138:	80 ff       	sbrs	r24, 0
     13a:	08 c0       	rjmp	.+16     	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
				OPENVALVE(BLUVALVE);
     13c:	80 e8       	ldi	r24, 0x80	; 128
     13e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     142:	e4 e0       	ldi	r30, 0x04	; 4
     144:	f8 e2       	ldi	r31, 0x28	; 40
     146:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     148:	17 86       	std	Z+15, r1	; 0x0f
     14a:	78 c0       	rjmp	.+240    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (BLUENABLED && !BLUTHERMWARM) {
     14c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     150:	80 fd       	sbrc	r24, 0
     152:	74 c0       	rjmp	.+232    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
				disp_coldtherm();
     154:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	24 e5       	ldi	r18, 0x54	; 84
     15a:	88 e5       	ldi	r24, 0x58	; 88
     15c:	94 e1       	ldi	r25, 0x14	; 20
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	80 40       	sbci	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
     166:	00 c0       	rjmp	.+0      	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
     168:	00 c0       	rjmp	.+0      	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
				_delay_ms(2000);
				display(screen_value);
     16a:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     16e:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     172:	64 c0       	rjmp	.+200    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {				// See valves.h
     174:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     178:	86 ff       	sbrs	r24, 6
     17a:	04 c0       	rjmp	.+8      	; 0x184 <__EEPROM_REGION_LENGTH__+0x84>
				CLOSEVALVE(REDVALVE);
     17c:	80 e4       	ldi	r24, 0x40	; 64
     17e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     182:	5c c0       	rjmp	.+184    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (REDENABLED && REDTHERMWARM) {
     184:	8d e0       	ldi	r24, 0x0D	; 13
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     18c:	88 23       	and	r24, r24
     18e:	09 f4       	brne	.+2      	; 0x192 <__EEPROM_REGION_LENGTH__+0x92>
     190:	55 c0       	rjmp	.+170    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
     192:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     196:	81 ff       	sbrs	r24, 1
     198:	08 c0       	rjmp	.+16     	; 0x1aa <__EEPROM_REGION_LENGTH__+0xaa>
				OPENVALVE(REDVALVE);
     19a:	80 e4       	ldi	r24, 0x40	; 64
     19c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     1a0:	e4 e0       	ldi	r30, 0x04	; 4
     1a2:	f8 e2       	ldi	r31, 0x28	; 40
     1a4:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1a6:	10 8a       	std	Z+16, r1	; 0x10
     1a8:	49 c0       	rjmp	.+146    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (REDENABLED && !REDTHERMWARM) {
     1aa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1ae:	81 fd       	sbrc	r24, 1
     1b0:	45 c0       	rjmp	.+138    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
				disp_coldtherm();
     1b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1b6:	24 e5       	ldi	r18, 0x54	; 84
     1b8:	88 e5       	ldi	r24, 0x58	; 88
     1ba:	94 e1       	ldi	r25, 0x14	; 20
     1bc:	21 50       	subi	r18, 0x01	; 1
     1be:	80 40       	sbci	r24, 0x00	; 0
     1c0:	90 40       	sbci	r25, 0x00	; 0
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <__EEPROM_REGION_LENGTH__+0xbc>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <__EEPROM_REGION_LENGTH__+0xc6>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <__EEPROM_REGION_LENGTH__+0xc8>
				_delay_ms(2000);
				display(screen_value);
     1c8:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     1cc:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     1d0:	35 c0       	rjmp	.+106    	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {				// See valves.h
     1d2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1d6:	85 ff       	sbrs	r24, 5
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__EEPROM_REGION_LENGTH__+0xe2>
				CLOSEVALVE(BUFVALVE);
     1da:	80 e2       	ldi	r24, 0x20	; 32
     1dc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1e0:	2d c0       	rjmp	.+90     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (BUFTHERMWARM) {
     1e2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1e6:	82 ff       	sbrs	r24, 2
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <__EEPROM_REGION_LENGTH__+0xfa>
				OPENVALVE(BUFVALVE);
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     1f0:	e4 e0       	ldi	r30, 0x04	; 4
     1f2:	f8 e2       	ldi	r31, 0x28	; 40
     1f4:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     1f6:	11 8a       	std	Z+17, r1	; 0x11
     1f8:	21 c0       	rjmp	.+66     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else if (!BUFTHERMWARM) {
     1fa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1fe:	82 fd       	sbrc	r24, 2
     200:	1d c0       	rjmp	.+58     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
				disp_coldtherm();
     202:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     206:	24 e5       	ldi	r18, 0x54	; 84
     208:	88 e5       	ldi	r24, 0x58	; 88
     20a:	94 e1       	ldi	r25, 0x14	; 20
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <__EEPROM_REGION_LENGTH__+0x10c>
     214:	00 c0       	rjmp	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x116>
     216:	00 c0       	rjmp	.+0      	; 0x218 <__EEPROM_REGION_LENGTH__+0x118>
				_delay_ms(2000);
				display(screen_value);
     218:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     21c:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     220:	0d c0       	rjmp	.+26     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {				// See valves.h
     222:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     226:	84 ff       	sbrs	r24, 4
     228:	04 c0       	rjmp	.+8      	; 0x232 <__EEPROM_REGION_LENGTH__+0x132>
				CLOSEVALVE(SUPVALVE);
     22a:	80 e1       	ldi	r24, 0x10	; 16
     22c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     230:	05 c0       	rjmp	.+10     	; 0x23c <__EEPROM_REGION_LENGTH__+0x13c>
			} else {
				OPENVALVE(SUPVALVE);
     232:	80 e1       	ldi	r24, 0x10	; 16
     234:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_SUP = 0;
     238:	10 92 12 28 	sts	0x2812, r1	; 0x802812 <status+0xe>

		default:
			break;
	}

	button_pushed = FALSE;
     23c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>

	if (screen_value == SCRVALVES) {
     240:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	11 f4       	brne	.+4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x14c>
		display(SCRVALVES);
     248:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     24c:	08 95       	ret

0000024e <clear_BUTTONS>:
}

void clear_BUTTONS(void)
{

	PORTB.INTFLAGS = 0x0F;	// Clear spurious interrupts from debouncer?
     24e:	8f e0       	ldi	r24, 0x0F	; 15
     250:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     254:	08 95       	ret

00000256 <init_BUTTONS>:
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
	// Four solenoid valve control buttons
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW1
     256:	e0 e2       	ldi	r30, 0x20	; 32
     258:	f4 e0       	ldi	r31, 0x04	; 4
     25a:	8b e0       	ldi	r24, 0x0B	; 11
     25c:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW2
     25e:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN0CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW3
     260:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// SW4
     262:	81 8b       	std	Z+17, r24	; 0x11
     264:	08 95       	ret

00000266 <__vector_34>:
/*----------------------------------------------------------------------
Interrupt routine for the four pushbuttons. The interrupt flag is
cleared and the button_pushed value is set.
----------------------------------------------------------------------*/
ISR(PORTB_PORT_vect)
{
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	8f 93       	push	r24
	if (PORTB.INTFLAGS & PIN2_bm) {			// Blue pushbutton
     272:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     276:	82 ff       	sbrs	r24, 2
     278:	07 c0       	rjmp	.+14     	; 0x288 <__vector_34+0x22>
		PORTB.INTFLAGS = PIN2_bm;			// Clear the interrupt flag
     27a:	84 e0       	ldi	r24, 0x04	; 4
     27c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BLUEBUTTON;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     286:	20 c0       	rjmp	.+64     	; 0x2c8 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN3_bm) {	// Red pushbutton
     288:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     28c:	83 ff       	sbrs	r24, 3
     28e:	07 c0       	rjmp	.+14     	; 0x29e <__vector_34+0x38>
		PORTB.INTFLAGS = PIN3_bm;			// Clear the interrupt flag
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = REDBUTTON;
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     29c:	15 c0       	rjmp	.+42     	; 0x2c8 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN0_bm) {	// Buffer pushbutton
     29e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2a2:	80 ff       	sbrs	r24, 0
     2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <__vector_34+0x4e>
		PORTB.INTFLAGS = PIN0_bm;			// Clear the interrupt flag
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = BUFFERBUTTON;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     2b2:	0a c0       	rjmp	.+20     	; 0x2c8 <__vector_34+0x62>
	}
	else if (PORTB.INTFLAGS & PIN1_bm) {	// Supply pushbutton
     2b4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
     2b8:	81 ff       	sbrs	r24, 1
     2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <__vector_34+0x62>
		PORTB.INTFLAGS = PIN1_bm;			// Clear the interrupt flag
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7f4429>
		button_pushed = SUPPLYBUTTON;
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	}
}
     2c8:	8f 91       	pop	r24
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     2d4:	4a e0       	ldi	r20, 0x0A	; 10
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 41 12 	call	0x2482	; 0x2482 <eeprom_read_block>
     2e0:	08 95       	ret

000002e2 <update_VERSION>:
}

void update_VERSION(void)
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	2b 97       	sbiw	r28, 0x0b	; 11
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     2f0:	8b e0       	ldi	r24, 0x0B	; 11
     2f2:	ef e8       	ldi	r30, 0x8F	; 143
     2f4:	f5 e6       	ldi	r31, 0x65	; 101
     2f6:	de 01       	movw	r26, r28
     2f8:	11 96       	adiw	r26, 0x01	; 1
     2fa:	01 90       	ld	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	8a 95       	dec	r24
     300:	e1 f7       	brne	.-8      	; 0x2fa <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     302:	4a e0       	ldi	r20, 0x0A	; 10
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	ce 01       	movw	r24, r28
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	0e 94 4d 12 	call	0x249a	; 0x249a <eeprom_update_block>
}
     312:	2b 96       	adiw	r28, 0x0b	; 11
     314:	cd bf       	out	0x3d, r28	; 61
     316:	de bf       	out	0x3e, r29	; 62
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	aa 97       	sbiw	r28, 0x2a	; 42
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	88 30       	cpi	r24, 0x08	; 8
     330:	91 05       	cpc	r25, r1
     332:	08 f0       	brcs	.+2      	; 0x336 <display+0x18>
     334:	1f c2       	rjmp	.+1086   	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     336:	fc 01       	movw	r30, r24
     338:	e0 5b       	subi	r30, 0xB0	; 176
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	ea e9       	ldi	r30, 0x9A	; 154
     344:	f5 e6       	ldi	r31, 0x65	; 101
     346:	de 01       	movw	r26, r28
     348:	11 96       	adiw	r26, 0x01	; 1
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	8a 95       	dec	r24
     350:	e1 f7       	brne	.-8      	; 0x34a <display+0x2c>
			get_VERSION(status.version);
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	98 e2       	ldi	r25, 0x28	; 40
     356:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <get_VERSION>
			strcpy(line2, "   ");
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	90 e2       	ldi	r25, 0x20	; 32
     35e:	8e 8b       	std	Y+22, r24	; 0x16
     360:	9f 8b       	std	Y+23, r25	; 0x17
     362:	80 e2       	ldi	r24, 0x20	; 32
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	88 8f       	std	Y+24, r24	; 0x18
     368:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     36a:	64 e0       	ldi	r22, 0x04	; 4
     36c:	78 e2       	ldi	r23, 0x28	; 40
     36e:	ce 01       	movw	r24, r28
     370:	46 96       	adiw	r24, 0x16	; 22
     372:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <strcat>
			screen_value = SCRVERSION;
     376:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <screen_value>
			break;
     37a:	10 c2       	rjmp	.+1056   	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     37c:	80 e1       	ldi	r24, 0x10	; 16
     37e:	e9 ea       	ldi	r30, 0xA9	; 169
     380:	f5 e6       	ldi	r31, 0x65	; 101
     382:	de 01       	movw	r26, r28
     384:	11 96       	adiw	r26, 0x01	; 1
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
     38c:	e1 f7       	brne	.-8      	; 0x386 <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     38e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     392:	84 ff       	sbrs	r24, 4
     394:	0a c0       	rjmp	.+20     	; 0x3aa <display+0x8c>
				strcpy(line2, " O  ");
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	e9 eb       	ldi	r30, 0xB9	; 185
     39a:	f5 e6       	ldi	r31, 0x65	; 101
     39c:	de 01       	movw	r26, r28
     39e:	56 96       	adiw	r26, 0x16	; 22
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	8a 95       	dec	r24
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <display+0x82>
     3a8:	09 c0       	rjmp	.+18     	; 0x3bc <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	ee eb       	ldi	r30, 0xBE	; 190
     3ae:	f5 e6       	ldi	r31, 0x65	; 101
     3b0:	de 01       	movw	r26, r28
     3b2:	56 96       	adiw	r26, 0x16	; 22
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	8a 95       	dec	r24
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     3bc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     3c0:	85 ff       	sbrs	r24, 5
     3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <display+0xc2>
				strcat(line2, " O  ");
     3c4:	de 01       	movw	r26, r28
     3c6:	56 96       	adiw	r26, 0x16	; 22
     3c8:	0d 90       	ld	r0, X+
     3ca:	00 20       	and	r0, r0
     3cc:	e9 f7       	brne	.-6      	; 0x3c8 <display+0xaa>
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	e9 eb       	ldi	r30, 0xB9	; 185
     3d4:	f5 e6       	ldi	r31, 0x65	; 101
     3d6:	01 90       	ld	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	8a 95       	dec	r24
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <display+0xb8>
     3de:	1f c0       	rjmp	.+62     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			} else if (status.maxopen_BUF) {
     3e0:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
     3e4:	88 23       	and	r24, r24
     3e6:	71 f0       	breq	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				strcat(line2, " T  ");
     3e8:	de 01       	movw	r26, r28
     3ea:	56 96       	adiw	r26, 0x16	; 22
     3ec:	0d 90       	ld	r0, X+
     3ee:	00 20       	and	r0, r0
     3f0:	e9 f7       	brne	.-6      	; 0x3ec <display+0xce>
     3f2:	11 97       	sbiw	r26, 0x01	; 1
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	e3 ec       	ldi	r30, 0xC3	; 195
     3f8:	f5 e6       	ldi	r31, 0x65	; 101
     3fa:	01 90       	ld	r0, Z+
     3fc:	0d 92       	st	X+, r0
     3fe:	8a 95       	dec	r24
     400:	e1 f7       	brne	.-8      	; 0x3fa <display+0xdc>
     402:	0d c0       	rjmp	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			} else {
				strcat(line2, " C  ");
     404:	de 01       	movw	r26, r28
     406:	56 96       	adiw	r26, 0x16	; 22
     408:	0d 90       	ld	r0, X+
     40a:	00 20       	and	r0, r0
     40c:	e9 f7       	brne	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40e:	11 97       	sbiw	r26, 0x01	; 1
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	ee eb       	ldi	r30, 0xBE	; 190
     414:	f5 e6       	ldi	r31, 0x65	; 101
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	8a 95       	dec	r24
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			}
			if (!REDENABLED) {					// eeprom.h
     41e:	8d e0       	ldi	r24, 0x0D	; 13
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     426:	81 11       	cpse	r24, r1
     428:	0e c0       	rjmp	.+28     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				strcat(line2, " X  ");
     42a:	de 01       	movw	r26, r28
     42c:	56 96       	adiw	r26, 0x16	; 22
     42e:	0d 90       	ld	r0, X+
     430:	00 20       	and	r0, r0
     432:	e9 f7       	brne	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     434:	11 97       	sbiw	r26, 0x01	; 1
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	e8 ec       	ldi	r30, 0xC8	; 200
     43a:	f5 e6       	ldi	r31, 0x65	; 101
     43c:	01 90       	ld	r0, Z+
     43e:	0d 92       	st	X+, r0
     440:	8a 95       	dec	r24
     442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     444:	31 c0       	rjmp	.+98     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			} else if (REDVALVEOPEN) {			// valves.h
     446:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     44a:	86 ff       	sbrs	r24, 6
     44c:	0e c0       	rjmp	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				strcat(line2, " O  ");
     44e:	de 01       	movw	r26, r28
     450:	56 96       	adiw	r26, 0x16	; 22
     452:	0d 90       	ld	r0, X+
     454:	00 20       	and	r0, r0
     456:	e9 f7       	brne	.-6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     458:	11 97       	sbiw	r26, 0x01	; 1
     45a:	85 e0       	ldi	r24, 0x05	; 5
     45c:	e9 eb       	ldi	r30, 0xB9	; 185
     45e:	f5 e6       	ldi	r31, 0x65	; 101
     460:	01 90       	ld	r0, Z+
     462:	0d 92       	st	X+, r0
     464:	8a 95       	dec	r24
     466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	1f c0       	rjmp	.+62     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			} else if (status.maxopen_RED) {
     46a:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
     46e:	88 23       	and	r24, r24
     470:	71 f0       	breq	.+28     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
				strcat(line2, " T  ");
     472:	de 01       	movw	r26, r28
     474:	56 96       	adiw	r26, 0x16	; 22
     476:	0d 90       	ld	r0, X+
     478:	00 20       	and	r0, r0
     47a:	e9 f7       	brne	.-6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47c:	11 97       	sbiw	r26, 0x01	; 1
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	e3 ec       	ldi	r30, 0xC3	; 195
     482:	f5 e6       	ldi	r31, 0x65	; 101
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	8a 95       	dec	r24
     48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     48c:	0d c0       	rjmp	.+26     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			} else {
				strcat(line2, " C  ");
     48e:	de 01       	movw	r26, r28
     490:	56 96       	adiw	r26, 0x16	; 22
     492:	0d 90       	ld	r0, X+
     494:	00 20       	and	r0, r0
     496:	e9 f7       	brne	.-6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     498:	11 97       	sbiw	r26, 0x01	; 1
     49a:	85 e0       	ldi	r24, 0x05	; 5
     49c:	ee eb       	ldi	r30, 0xBE	; 190
     49e:	f5 e6       	ldi	r31, 0x65	; 101
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			}
			if (!BLUENABLED) {
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     4b0:	81 11       	cpse	r24, r1
     4b2:	0c c0       	rjmp	.+24     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
				strcat(line2, " X");
     4b4:	fe 01       	movw	r30, r28
     4b6:	76 96       	adiw	r30, 0x16	; 22
     4b8:	01 90       	ld	r0, Z+
     4ba:	00 20       	and	r0, r0
     4bc:	e9 f7       	brne	.-6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	98 e5       	ldi	r25, 0x58	; 88
     4c4:	80 83       	st	Z, r24
     4c6:	91 83       	std	Z+1, r25	; 0x01
     4c8:	12 82       	std	Z+2, r1	; 0x02
     4ca:	2b c0       	rjmp	.+86     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			} else if (BLUVALVEOPEN) {			// valves.h
     4cc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     4d0:	88 23       	and	r24, r24
     4d2:	64 f4       	brge	.+24     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
				strcat(line2, " O");
     4d4:	fe 01       	movw	r30, r28
     4d6:	76 96       	adiw	r30, 0x16	; 22
     4d8:	01 90       	ld	r0, Z+
     4da:	00 20       	and	r0, r0
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4de:	31 97       	sbiw	r30, 0x01	; 1
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	9f e4       	ldi	r25, 0x4F	; 79
     4e4:	80 83       	st	Z, r24
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	12 82       	std	Z+2, r1	; 0x02
     4ea:	1b c0       	rjmp	.+54     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			} else if (status.maxopen_BLU) {
     4ec:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
     4f0:	88 23       	and	r24, r24
     4f2:	61 f0       	breq	.+24     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
				strcat(line2, " T");
     4f4:	fe 01       	movw	r30, r28
     4f6:	76 96       	adiw	r30, 0x16	; 22
     4f8:	01 90       	ld	r0, Z+
     4fa:	00 20       	and	r0, r0
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	94 e5       	ldi	r25, 0x54	; 84
     504:	80 83       	st	Z, r24
     506:	91 83       	std	Z+1, r25	; 0x01
     508:	12 82       	std	Z+2, r1	; 0x02
     50a:	0b c0       	rjmp	.+22     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			} else {
				strcat(line2, " C");
     50c:	fe 01       	movw	r30, r28
     50e:	76 96       	adiw	r30, 0x16	; 22
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	93 e4       	ldi	r25, 0x43	; 67
     51c:	80 83       	st	Z, r24
     51e:	91 83       	std	Z+1, r25	; 0x01
     520:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     528:	39 c1       	rjmp	.+626    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     52a:	8d e0       	ldi	r24, 0x0D	; 13
     52c:	ed ec       	ldi	r30, 0xCD	; 205
     52e:	f5 e6       	ldi	r31, 0x65	; 101
     530:	de 01       	movw	r26, r28
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	8a 95       	dec	r24
     53a:	e1 f7       	brne	.-8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
			if (status.next_fill < 2) {
     53c:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x15>
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	98 f4       	brcc	.+38     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
				sprintf(line2, "%d minute", status.next_fill);
     544:	1f 92       	push	r1
     546:	8f 93       	push	r24
     548:	8a ed       	ldi	r24, 0xDA	; 218
     54a:	95 e6       	ldi	r25, 0x65	; 101
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	ce 01       	movw	r24, r28
     552:	46 96       	adiw	r24, 0x16	; 22
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	12 c0       	rjmp	.+36     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     56a:	1f 92       	push	r1
     56c:	8f 93       	push	r24
     56e:	84 ee       	ldi	r24, 0xE4	; 228
     570:	95 e6       	ldi	r25, 0x65	; 101
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	ce 01       	movw	r24, r28
     578:	46 96       	adiw	r24, 0x16	; 22
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     594:	03 c1       	rjmp	.+518    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     596:	8e e0       	ldi	r24, 0x0E	; 14
     598:	ef ee       	ldi	r30, 0xEF	; 239
     59a:	f5 e6       	ldi	r31, 0x65	; 101
     59c:	de 01       	movw	r26, r28
     59e:	11 96       	adiw	r26, 0x01	; 1
     5a0:	01 90       	ld	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	8a 95       	dec	r24
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
			if (FILLINTERVAL == 1) {			// eeprom.h
     5a8:	8a e0       	ldi	r24, 0x0A	; 10
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	99 f4       	brne	.+38     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
				sprintf(line2, "%d minute", FILLINTERVAL);
     5b4:	1f 92       	push	r1
     5b6:	8f 93       	push	r24
     5b8:	8a ed       	ldi	r24, 0xDA	; 218
     5ba:	95 e6       	ldi	r25, 0x65	; 101
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	ce 01       	movw	r24, r28
     5c2:	46 96       	adiw	r24, 0x16	; 22
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     5da:	1f 92       	push	r1
     5dc:	8f 93       	push	r24
     5de:	84 ee       	ldi	r24, 0xE4	; 228
     5e0:	95 e6       	ldi	r25, 0x65	; 101
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	ce 01       	movw	r24, r28
     5e8:	46 96       	adiw	r24, 0x16	; 22
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     604:	cb c0       	rjmp	.+406    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     606:	8e e0       	ldi	r24, 0x0E	; 14
     608:	ed ef       	ldi	r30, 0xFD	; 253
     60a:	f5 e6       	ldi	r31, 0x65	; 101
     60c:	de 01       	movw	r26, r28
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
			if (MAXOPENTIME < 2) {				// eeprom.h
     618:	8b e0       	ldi	r24, 0x0B	; 11
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	98 f4       	brcc	.+38     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
				sprintf(line2, "%d minute", MAXOPENTIME);
     624:	1f 92       	push	r1
     626:	8f 93       	push	r24
     628:	8a ed       	ldi	r24, 0xDA	; 218
     62a:	95 e6       	ldi	r25, 0x65	; 101
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	ce 01       	movw	r24, r28
     632:	46 96       	adiw	r24, 0x16	; 22
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	12 c0       	rjmp	.+36     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     64a:	1f 92       	push	r1
     64c:	8f 93       	push	r24
     64e:	84 ee       	ldi	r24, 0xE4	; 228
     650:	95 e6       	ldi	r25, 0x65	; 101
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	ce 01       	movw	r24, r28
     658:	46 96       	adiw	r24, 0x16	; 22
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     674:	93 c0       	rjmp	.+294    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     676:	8d e0       	ldi	r24, 0x0D	; 13
     678:	eb e0       	ldi	r30, 0x0B	; 11
     67a:	f6 e6       	ldi	r31, 0x66	; 102
     67c:	de 01       	movw	r26, r28
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			sprintf(line2, "%d kPa", status.pressure);
     688:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x17>
     68c:	1f 92       	push	r1
     68e:	8f 93       	push	r24
     690:	88 e1       	ldi	r24, 0x18	; 24
     692:	96 e6       	ldi	r25, 0x66	; 102
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	ce 01       	movw	r24, r28
     69a:	46 96       	adiw	r24, 0x16	; 22
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
			screen_value = SCRPRESSURE;
     6a4:	85 e0       	ldi	r24, 0x05	; 5
     6a6:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	72 c0       	rjmp	.+228    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     6b8:	8c e0       	ldi	r24, 0x0C	; 12
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     6c0:	88 23       	and	r24, r24
     6c2:	99 f0       	breq	.+38     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
				strcpy(line1, "BLUE is ENABLED");
     6c4:	80 e1       	ldi	r24, 0x10	; 16
     6c6:	ef e1       	ldi	r30, 0x1F	; 31
     6c8:	f6 e6       	ldi	r31, 0x66	; 102
     6ca:	de 01       	movw	r26, r28
     6cc:	11 96       	adiw	r26, 0x01	; 1
     6ce:	01 90       	ld	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	8a 95       	dec	r24
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
				strcpy(line2, "Push to disable");
     6d6:	80 e1       	ldi	r24, 0x10	; 16
     6d8:	ef e2       	ldi	r30, 0x2F	; 47
     6da:	f6 e6       	ldi	r31, 0x66	; 102
     6dc:	de 01       	movw	r26, r28
     6de:	56 96       	adiw	r26, 0x16	; 22
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	8a 95       	dec	r24
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
     6e8:	12 c0       	rjmp	.+36     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
			} else {
				strcpy(line1, "Blue is DISABLED");
     6ea:	81 e1       	ldi	r24, 0x11	; 17
     6ec:	ef e3       	ldi	r30, 0x3F	; 63
     6ee:	f6 e6       	ldi	r31, 0x66	; 102
     6f0:	de 01       	movw	r26, r28
     6f2:	11 96       	adiw	r26, 0x01	; 1
     6f4:	01 90       	ld	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	8a 95       	dec	r24
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
				strcpy(line2, "Push to enable");
     6fc:	8f e0       	ldi	r24, 0x0F	; 15
     6fe:	e0 e5       	ldi	r30, 0x50	; 80
     700:	f6 e6       	ldi	r31, 0x66	; 102
     702:	de 01       	movw	r26, r28
     704:	56 96       	adiw	r26, 0x16	; 22
     706:	01 90       	ld	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	8a 95       	dec	r24
     70c:	e1 f7       	brne	.-8      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     70e:	86 e0       	ldi	r24, 0x06	; 6
     710:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     714:	43 c0       	rjmp	.+134    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     716:	8d e0       	ldi	r24, 0x0D	; 13
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     71e:	88 23       	and	r24, r24
     720:	99 f0       	breq	.+38     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
				strcpy(line1, "RED is ENABLED");
     722:	8f e0       	ldi	r24, 0x0F	; 15
     724:	ef e5       	ldi	r30, 0x5F	; 95
     726:	f6 e6       	ldi	r31, 0x66	; 102
     728:	de 01       	movw	r26, r28
     72a:	11 96       	adiw	r26, 0x01	; 1
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	8a 95       	dec	r24
     732:	e1 f7       	brne	.-8      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
				strcpy(line2, "Push to disable");
     734:	80 e1       	ldi	r24, 0x10	; 16
     736:	ef e2       	ldi	r30, 0x2F	; 47
     738:	f6 e6       	ldi	r31, 0x66	; 102
     73a:	de 01       	movw	r26, r28
     73c:	56 96       	adiw	r26, 0x16	; 22
     73e:	01 90       	ld	r0, Z+
     740:	0d 92       	st	X+, r0
     742:	8a 95       	dec	r24
     744:	e1 f7       	brne	.-8      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     746:	12 c0       	rjmp	.+36     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
			} else {
				strcpy(line1, "RED is DISABLED");
     748:	80 e1       	ldi	r24, 0x10	; 16
     74a:	ee e6       	ldi	r30, 0x6E	; 110
     74c:	f6 e6       	ldi	r31, 0x66	; 102
     74e:	de 01       	movw	r26, r28
     750:	11 96       	adiw	r26, 0x01	; 1
     752:	01 90       	ld	r0, Z+
     754:	0d 92       	st	X+, r0
     756:	8a 95       	dec	r24
     758:	e1 f7       	brne	.-8      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
				strcpy(line2, "Push to enable");
     75a:	8f e0       	ldi	r24, 0x0F	; 15
     75c:	e0 e5       	ldi	r30, 0x50	; 80
     75e:	f6 e6       	ldi	r31, 0x66	; 102
     760:	de 01       	movw	r26, r28
     762:	56 96       	adiw	r26, 0x16	; 22
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	8a 95       	dec	r24
     76a:	e1 f7       	brne	.-8      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     76c:	87 e0       	ldi	r24, 0x07	; 7
     76e:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
			break;
     772:	14 c0       	rjmp	.+40     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>

		default:
			strcpy(line1, "default");
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	ee e7       	ldi	r30, 0x7E	; 126
     778:	f6 e6       	ldi	r31, 0x66	; 102
     77a:	de 01       	movw	r26, r28
     77c:	11 96       	adiw	r26, 0x01	; 1
     77e:	01 90       	ld	r0, Z+
     780:	0d 92       	st	X+, r0
     782:	8a 95       	dec	r24
     784:	e1 f7       	brne	.-8      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
			strcpy(line2, "overrun");
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	e6 e8       	ldi	r30, 0x86	; 134
     78a:	f6 e6       	ldi	r31, 0x66	; 102
     78c:	de 01       	movw	r26, r28
     78e:	56 96       	adiw	r26, 0x16	; 22
     790:	01 90       	ld	r0, Z+
     792:	0d 92       	st	X+, r0
     794:	8a 95       	dec	r24
     796:	e1 f7       	brne	.-8      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
			screen_value = SCRVERSION;			// encoder.h
     798:	10 92 1d 28 	sts	0x281D, r1	; 0x80281d <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	writestr_OLED(0, line2, 2);
     7aa:	42 e0       	ldi	r20, 0x02	; 2
     7ac:	be 01       	movw	r22, r28
     7ae:	6a 5e       	subi	r22, 0xEA	; 234
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
}
     7b8:	aa 96       	adiw	r28, 0x2a	; 42
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     7c4:	8c e0       	ldi	r24, 0x0C	; 12
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	81 11       	cpse	r24, r1
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	8c e0       	ldi	r24, 0x0C	; 12
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <eeprom_update_byte>
	encoder_sensed = FALSE;
     7da:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     7e4:	08 95       	ret

000007e6 <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     7e6:	8d e0       	ldi	r24, 0x0D	; 13
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	81 11       	cpse	r24, r1
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	8d e0       	ldi	r24, 0x0D	; 13
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <eeprom_update_byte>
	encoder_sensed = FALSE;
     7fc:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     800:	87 e0       	ldi	r24, 0x07	; 7
     802:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     806:	08 95       	ret

00000808 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	65 97       	sbiw	r28, 0x15	; 21
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;				// eeprom.h
     81e:	8a e0       	ldi	r24, 0x0A	; 10
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     826:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <encoder_value>
	if (encoder_value == 1) {
     82a:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	a9 f4       	brne	.+42     	; 0x85c <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     832:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     836:	1f 92       	push	r1
     838:	8f 93       	push	r24
     83a:	8a ed       	ldi	r24, 0xDA	; 218
     83c:	95 e6       	ldi	r25, 0x65	; 101
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	ce 01       	movw	r24, r28
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	14 c0       	rjmp	.+40     	; 0x884 <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     85c:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     860:	1f 92       	push	r1
     862:	8f 93       	push	r24
     864:	84 ee       	ldi	r24, 0xE4	; 228
     866:	95 e6       	ldi	r25, 0x65	; 101
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     884:	41 e0       	ldi	r20, 0x01	; 1
     886:	6e e8       	ldi	r22, 0x8E	; 142
     888:	76 e6       	ldi	r23, 0x66	; 102
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     890:	42 e0       	ldi	r20, 0x02	; 2
     892:	be 01       	movw	r22, r28
     894:	6f 5f       	subi	r22, 0xFF	; 255
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     89e:	0f 2e       	mov	r0, r31
     8a0:	fe ef       	ldi	r31, 0xFE	; 254
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     8a6:	68 94       	set
     8a8:	ff 24       	eor	r15, r15
     8aa:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8ac:	04 ee       	ldi	r16, 0xE4	; 228
     8ae:	15 e6       	ldi	r17, 0x65	; 101
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8b0:	32 c0       	rjmp	.+100    	; 0x916 <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     8b2:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     8b6:	87 30       	cpi	r24, 0x07	; 7
     8b8:	71 f5       	brne	.+92     	; 0x916 <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     8ba:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	18 f4       	brcc	.+6      	; 0x8c8 <change_FILLINT+0xc0>
				encoder_value = 2;
     8c2:	f0 92 1e 28 	sts	0x281E, r15	; 0x80281e <encoder_value>
     8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     8c8:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     8cc:	8f 3f       	cpi	r24, 0xFF	; 255
     8ce:	11 f4       	brne	.+4      	; 0x8d4 <change_FILLINT+0xcc>
				encoder_value = 254;
     8d0:	e0 92 1e 28 	sts	0x281E, r14	; 0x80281e <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8d4:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     8d8:	1f 92       	push	r1
     8da:	8f 93       	push	r24
     8dc:	1f 93       	push	r17
     8de:	0f 93       	push	r16
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	8c 0f       	add	r24, r28
     8e6:	9d 1f       	adc	r25, r29
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	6f e9       	ldi	r22, 0x9F	; 159
     8f4:	76 e6       	ldi	r23, 0x66	; 102
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     8fc:	4f 2d       	mov	r20, r15
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     916:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     91a:	85 30       	cpi	r24, 0x05	; 5
     91c:	51 f6       	brne	.-108    	; 0x8b2 <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     91e:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     922:	60 91 1e 28 	lds	r22, 0x281E	; 0x80281e <encoder_value>
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     92e:	8b e0       	ldi	r24, 0x0B	; 11
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     936:	18 2f       	mov	r17, r24
     938:	8a e0       	ldi	r24, 0x0A	; 10
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     940:	18 17       	cp	r17, r24
     942:	30 f0       	brcs	.+12     	; 0x950 <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     944:	6f ef       	ldi	r22, 0xFF	; 255
     946:	68 0f       	add	r22, r24
     948:	8b e0       	ldi	r24, 0x0B	; 11
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <eeprom_update_byte>
	}
	display(SCRFILLINT);
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
}
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	08 95       	ret

0000096a <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	65 97       	sbiw	r28, 0x15	; 21
     980:	cd bf       	out	0x3d, r28	; 61
     982:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;			// eeprom.h
     984:	8b e0       	ldi	r24, 0x0B	; 11
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     98c:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <encoder_value>
	if (encoder_value == 1) {
     990:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	a9 f4       	brne	.+42     	; 0x9c2 <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     998:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     99c:	1f 92       	push	r1
     99e:	8f 93       	push	r24
     9a0:	8a ed       	ldi	r24, 0xDA	; 218
     9a2:	95 e6       	ldi	r25, 0x65	; 101
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	14 c0       	rjmp	.+40     	; 0x9ea <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     9c2:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     9c6:	1f 92       	push	r1
     9c8:	8f 93       	push	r24
     9ca:	84 ee       	ldi	r24, 0xE4	; 228
     9cc:	95 e6       	ldi	r25, 0x65	; 101
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	6f ea       	ldi	r22, 0xAF	; 175
     9ee:	76 e6       	ldi	r23, 0x66	; 102
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     9f6:	42 e0       	ldi	r20, 0x02	; 2
     9f8:	be 01       	movw	r22, r28
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     a04:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     a06:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a08:	0f 2e       	mov	r0, r31
     a0a:	f4 ee       	ldi	r31, 0xE4	; 228
     a0c:	ef 2e       	mov	r14, r31
     a0e:	f5 e6       	ldi	r31, 0x65	; 101
     a10:	ff 2e       	mov	r15, r31
     a12:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     a14:	0f 2e       	mov	r0, r31
     a16:	fa ed       	ldi	r31, 0xDA	; 218
     a18:	cf 2e       	mov	r12, r31
     a1a:	f5 e6       	ldi	r31, 0x65	; 101
     a1c:	df 2e       	mov	r13, r31
     a1e:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     a20:	57 c0       	rjmp	.+174    	; 0xad0 <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     a22:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     a26:	87 30       	cpi	r24, 0x07	; 7
     a28:	09 f0       	breq	.+2      	; 0xa2c <change_MAXOPENTIME+0xc2>
     a2a:	52 c0       	rjmp	.+164    	; 0xad0 <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     a2c:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     a30:	81 11       	cpse	r24, r1
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     a34:	10 93 1e 28 	sts	0x281E, r17	; 0x80281e <encoder_value>
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     a3a:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     a3e:	8f 3f       	cpi	r24, 0xFF	; 255
     a40:	11 f4       	brne	.+4      	; 0xa46 <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     a42:	00 93 1e 28 	sts	0x281E, r16	; 0x80281e <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     a46:	8a e0       	ldi	r24, 0x0A	; 10
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     a4e:	90 91 1e 28 	lds	r25, 0x281E	; 0x80281e <encoder_value>
     a52:	98 17       	cp	r25, r24
     a54:	18 f0       	brcs	.+6      	; 0xa5c <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     a56:	81 50       	subi	r24, 0x01	; 1
     a58:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <encoder_value>
			}
			if (encoder_value == 1) {
     a5c:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	a9 f4       	brne	.+42     	; 0xa8e <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     a64:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     a68:	1f 92       	push	r1
     a6a:	8f 93       	push	r24
     a6c:	df 92       	push	r13
     a6e:	cf 92       	push	r12
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	8c 0f       	add	r24, r28
     a76:	9d 1f       	adc	r25, r29
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	14 c0       	rjmp	.+40     	; 0xab6 <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a8e:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     a92:	1f 92       	push	r1
     a94:	8f 93       	push	r24
     a96:	ff 92       	push	r15
     a98:	ef 92       	push	r14
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	8c 0f       	add	r24, r28
     aa0:	9d 1f       	adc	r25, r29
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     ab6:	41 2f       	mov	r20, r17
     ab8:	6f ea       	ldi	r22, 0xAF	; 175
     aba:	76 e6       	ldi	r23, 0x66	; 102
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     ac2:	42 e0       	ldi	r20, 0x02	; 2
     ac4:	be 01       	movw	r22, r28
     ac6:	6f 5f       	subi	r22, 0xFF	; 255
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     ad0:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     ad4:	85 30       	cpi	r24, 0x05	; 5
     ad6:	09 f0       	breq	.+2      	; 0xada <change_MAXOPENTIME+0x170>
     ad8:	a4 cf       	rjmp	.-184    	; 0xa22 <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     ada:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     ade:	60 91 1e 28 	lds	r22, 0x281E	; 0x80281e <encoder_value>
     ae2:	8b e0       	ldi	r24, 0x0B	; 11
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     aea:	84 e0       	ldi	r24, 0x04	; 4
     aec:	0e 94 8f 01 	call	0x31e	; 0x31e <display>

}
     af0:	65 96       	adiw	r28, 0x15	; 21
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	08 95       	ret

00000b08 <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     b08:	e0 e4       	ldi	r30, 0x40	; 64
     b0a:	f4 e0       	ldi	r31, 0x04	; 4
     b0c:	8b e0       	ldi	r24, 0x0B	; 11
     b0e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     b10:	98 e0       	ldi	r25, 0x08	; 8
     b12:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     b14:	81 8b       	std	Z+17, r24	; 0x11
     b16:	08 95       	ret

00000b18 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     b18:	8c e0       	ldi	r24, 0x0C	; 12
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     b20:	88 23       	and	r24, r24
     b22:	79 f0       	breq	.+30     	; 0xb42 <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     b24:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b28:	88 23       	and	r24, r24
     b2a:	5c f0       	brlt	.+22     	; 0xb42 <start_FILL+0x2a>
     b2c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b30:	80 ff       	sbrs	r24, 0
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     b34:	80 e8       	ldi	r24, 0x80	; 128
     b36:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     b3a:	e4 e0       	ldi	r30, 0x04	; 4
     b3c:	f8 e2       	ldi	r31, 0x28	; 40
     b3e:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     b40:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     b42:	8d e0       	ldi	r24, 0x0D	; 13
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     b4a:	88 23       	and	r24, r24
     b4c:	79 f0       	breq	.+30     	; 0xb6c <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     b4e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b52:	86 fd       	sbrc	r24, 6
     b54:	0b c0       	rjmp	.+22     	; 0xb6c <start_FILL+0x54>
     b56:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b5a:	81 ff       	sbrs	r24, 1
     b5c:	07 c0       	rjmp	.+14     	; 0xb6c <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     b5e:	80 e4       	ldi	r24, 0x40	; 64
     b60:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     b64:	e4 e0       	ldi	r30, 0x04	; 4
     b66:	f8 e2       	ldi	r31, 0x28	; 40
     b68:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     b6a:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     b6c:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	11 f4       	brne	.+4      	; 0xb78 <start_FILL+0x60>
		display(SCRVALVES);
     b74:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
	}
	status.next_fill = FILLINTERVAL;
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     b80:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x15>
     b84:	08 95       	ret

00000b86 <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     b86:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <display_off>
     b8a:	88 23       	and	r24, r24
     b8c:	29 f0       	breq	.+10     	; 0xb98 <handle_encoder+0x12>
		display(screen_value);
     b8e:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     b92:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     b96:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     b98:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     b9c:	87 30       	cpi	r24, 0x07	; 7
     b9e:	a9 f4       	brne	.+42     	; 0xbca <handle_encoder+0x44>
		encoder_sensed = FALSE;
     ba0:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     ba4:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     ba8:	90 91 1f 28 	lds	r25, 0x281F	; 0x80281f <encoder_change>
     bac:	89 0f       	add	r24, r25
     bae:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
		if (screen_value < 0) {
     bb2:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     bb6:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     bba:	87 70       	andi	r24, 0x07	; 7
     bbc:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <screen_value>
		}
		display(screen_value);
     bc0:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     bc4:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
     bc8:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     bca:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     bce:	85 30       	cpi	r24, 0x05	; 5
     bd0:	f9 f4       	brne	.+62     	; 0xc10 <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     bd2:	10 92 1c 28 	sts	0x281C, r1	; 0x80281c <encoder_sensed>
		switch (screen_value) {
     bd6:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
     bda:	84 30       	cpi	r24, 0x04	; 4
     bdc:	89 f0       	breq	.+34     	; 0xc00 <handle_encoder+0x7a>
     bde:	28 f4       	brcc	.+10     	; 0xbea <handle_encoder+0x64>
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	41 f0       	breq	.+16     	; 0xbf4 <handle_encoder+0x6e>
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	49 f0       	breq	.+18     	; 0xbfa <handle_encoder+0x74>
     be8:	08 95       	ret
     bea:	86 30       	cpi	r24, 0x06	; 6
     bec:	61 f0       	breq	.+24     	; 0xc06 <handle_encoder+0x80>
     bee:	87 30       	cpi	r24, 0x07	; 7
     bf0:	69 f0       	breq	.+26     	; 0xc0c <handle_encoder+0x86>
     bf2:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     bf4:	0e 94 8c 05 	call	0xb18	; 0xb18 <start_FILL>
				break;
     bf8:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     bfa:	0e 94 04 04 	call	0x808	; 0x808 <change_FILLINT>
				break;
     bfe:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     c00:	0e 94 b5 04 	call	0x96a	; 0x96a <change_MAXOPENTIME>
				break;
     c04:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     c06:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <change_DISABLEBLU>
				break;
     c0a:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     c0c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <change_DISABLERED>
     c10:	08 95       	ret

00000c12 <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	8f 93       	push	r24
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     c22:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c26:	81 ff       	sbrs	r24, 1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_sensed>
     c36:	1f c0       	rjmp	.+62     	; 0xc76 <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     c38:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c3c:	83 ff       	sbrs	r24, 3
     c3e:	1b c0       	rjmp	.+54     	; 0xc76 <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     c40:	e0 e4       	ldi	r30, 0x40	; 64
     c42:	f4 e0       	ldi	r31, 0x04	; 4
     c44:	88 e0       	ldi	r24, 0x08	; 8
     c46:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     c48:	80 85       	ldd	r24, Z+8	; 0x08
     c4a:	82 ff       	sbrs	r24, 2
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <__vector_24+0x4e>
			encoder_value++;
     c4e:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     c52:	8f 5f       	subi	r24, 0xFF	; 255
     c54:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <encoder_value>
			encoder_change = 1;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 1f 28 	sts	0x281F, r24	; 0x80281f <encoder_change>
     c5e:	08 c0       	rjmp	.+16     	; 0xc70 <__vector_24+0x5e>
		} else {
			encoder_value--;
     c60:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <encoder_value>
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <encoder_value>
			encoder_change = -1;
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	80 93 1f 28 	sts	0x281F, r24	; 0x80281f <encoder_change>
		}
		encoder_sensed = ENCODERA;
     c70:	87 e0       	ldi	r24, 0x07	; 7
     c72:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <encoder_sensed>
	}
}
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	8f 91       	pop	r24
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <init_STATUS>:
	clear_BUTTONS();

}

void init_STATUS()
{
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29

	status.next_fill = FILLINTERVAL;
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
     c92:	c4 e0       	ldi	r28, 0x04	; 4
     c94:	d8 e2       	ldi	r29, 0x28	; 40
     c96:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     c98:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     c9a:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     c9c:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     c9e:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     ca0:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     ca2:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     ca4:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     ca6:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     ca8:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     caa:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     cac:	0e 94 30 08 	call	0x1060	; 0x1060 <read_PRESSURE>
     cb0:	8f 8b       	std	Y+23, r24	; 0x17

}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <init_PORTS>:
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
*/
	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cb8:	e0 e6       	ldi	r30, 0x60	; 96
     cba:	f4 e0       	ldi	r31, 0x04	; 4
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cc0:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cc2:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cc4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cc6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cc8:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     cca:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ccc:	87 8b       	std	Z+23, r24	; 0x17
     cce:	08 95       	ret

00000cd0 <init>:
void init_STATUS(void);

void init(void)
{

	minute = FALSE;
     cd0:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>
	seconds = 0;
     cd4:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     cd8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <init_PORTS>
	init_VALVES();
     cdc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <init_VALVES>
	init_USART();
     ce0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <init_USART>
	init_BUTTONS();
     ce4:	0e 94 2b 01 	call	0x256	; 0x256 <init_BUTTONS>
	init_ENCODER();
     ce8:	0e 94 84 05 	call	0xb08	; 0xb08 <init_ENCODER>
	init_TWI();
     cec:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <init_TWI>
	init_RTC(511);
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <init_RTC>
	init_ADC();
     cf8:	0e 94 04 08 	call	0x1008	; 0x1008 <init_ADC>
	init_STATUS();
     cfc:	0e 94 43 06 	call	0xc86	; 0xc86 <init_STATUS>
	init_OLED(0);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 bc 06 	call	0xd78	; 0xd78 <init_OLED>
	update_VERSION();
     d06:	0e 94 71 01 	call	0x2e2	; 0x2e2 <update_VERSION>
	display(SCRVERSION);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
	clear_BUTTONS();
     d10:	0e 94 27 01 	call	0x24e	; 0x24e <clear_BUTTONS>
     d14:	08 95       	ret

00000d16 <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     d16:	0e 94 68 06 	call	0xcd0	; 0xcd0 <init>
	sei();
     d1a:	78 94       	sei
			handle_minute();	// See rtc.c
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
		}
		if (recv0_buf.done) {	// Serial communication received
     d1c:	c6 e7       	ldi	r28, 0x76	; 118
     d1e:	d8 e2       	ldi	r29, 0x28	; 40
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     d20:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     d24:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     d26:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     d2a:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <encoder_sensed>
     d2e:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     d30:	0e 94 c3 05 	call	0xb86	; 0xb86 <handle_encoder>
		}
		if (minute) {			// Things to do once a minute
     d34:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <minute>
     d38:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     d3a:	0e 94 93 08 	call	0x1126	; 0x1126 <handle_minute>
		}
		if (tick) {				// Things to do once a second
     d3e:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     d42:	81 11       	cpse	r24, r1
			handle_ticks();		// See rtc.c
     d44:	0e 94 e5 08 	call	0x11ca	; 0x11ca <handle_ticks>
		}
		if (recv0_buf.done) {	// Serial communication received
     d48:	88 81       	ld	r24, Y
     d4a:	88 23       	and	r24, r24
     d4c:	49 f3       	breq	.-46     	; 0xd20 <main+0xa>
			handle_serial();	// See usart.c
     d4e:	0e 94 ae 0a 	call	0x155c	; 0x155c <handle_serial>
     d52:	e6 cf       	rjmp	.-52     	; 0xd20 <main+0xa>

00000d54 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	d6 2f       	mov	r29, r22
     d5a:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	0e 94 03 0a 	call	0x1406	; 0x1406 <start_TWI>
	write_TWI(type);
     d62:	8d 2f       	mov	r24, r29
     d64:	0e 94 47 0a 	call	0x148e	; 0x148e <write_TWI>
	write_TWI(byteToSend);
     d68:	8c 2f       	mov	r24, r28
     d6a:	0e 94 47 0a 	call	0x148e	; 0x148e <write_TWI>
	stop_TWI();
     d6e:	0e 94 43 0a 	call	0x1486	; 0x1486 <stop_TWI>

}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d78:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d7a:	e0 e0       	ldi	r30, 0x00	; 0
     d7c:	f4 e0       	ldi	r31, 0x04	; 4
     d7e:	90 e8       	ldi	r25, 0x80	; 128
     d80:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	a6 e4       	ldi	r26, 0x46	; 70
     d86:	b0 e1       	ldi	r27, 0x10	; 16
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <init_OLED+0x10>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     d8e:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d90:	88 23       	and	r24, r24
     d92:	11 f0       	breq	.+4      	; 0xd98 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d94:	cd e3       	ldi	r28, 0x3D	; 61
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d98:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d9a:	4a e2       	ldi	r20, 0x2A	; 42
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8c 2f       	mov	r24, r28
     da0:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     da4:	41 e7       	ldi	r20, 0x71	; 113
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	8c 2f       	mov	r24, r28
     daa:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     dae:	4c e5       	ldi	r20, 0x5C	; 92
     db0:	60 e4       	ldi	r22, 0x40	; 64
     db2:	8c 2f       	mov	r24, r28
     db4:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     db8:	48 e2       	ldi	r20, 0x28	; 40
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	8c 2f       	mov	r24, r28
     dbe:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     dc2:	48 e0       	ldi	r20, 0x08	; 8
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	8c 2f       	mov	r24, r28
     dc8:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     dcc:	4a e2       	ldi	r20, 0x2A	; 42
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	8c 2f       	mov	r24, r28
     dd2:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dd6:	49 e7       	ldi	r20, 0x79	; 121
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	8c 2f       	mov	r24, r28
     ddc:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     de0:	45 ed       	ldi	r20, 0xD5	; 213
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	8c 2f       	mov	r24, r28
     de6:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     dea:	40 e7       	ldi	r20, 0x70	; 112
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	8c 2f       	mov	r24, r28
     df0:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     df4:	48 e7       	ldi	r20, 0x78	; 120
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	8c 2f       	mov	r24, r28
     dfa:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     dfe:	48 e0       	ldi	r20, 0x08	; 8
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	8c 2f       	mov	r24, r28
     e04:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     e08:	46 e0       	ldi	r20, 0x06	; 6
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	8c 2f       	mov	r24, r28
     e0e:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     e12:	42 e7       	ldi	r20, 0x72	; 114
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	8c 2f       	mov	r24, r28
     e18:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	60 e4       	ldi	r22, 0x40	; 64
     e20:	8c 2f       	mov	r24, r28
     e22:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e26:	4a e2       	ldi	r20, 0x2A	; 42
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	8c 2f       	mov	r24, r28
     e2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e30:	49 e7       	ldi	r20, 0x79	; 121
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	8c 2f       	mov	r24, r28
     e36:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     e3a:	4a ed       	ldi	r20, 0xDA	; 218
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	8c 2f       	mov	r24, r28
     e40:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	8c 2f       	mov	r24, r28
     e4a:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     e4e:	4c ed       	ldi	r20, 0xDC	; 220
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	8c 2f       	mov	r24, r28
     e54:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	8c 2f       	mov	r24, r28
     e5e:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     e62:	41 e8       	ldi	r20, 0x81	; 129
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	8c 2f       	mov	r24, r28
     e68:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     e6c:	4f e7       	ldi	r20, 0x7F	; 127
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	8c 2f       	mov	r24, r28
     e72:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e76:	49 ed       	ldi	r20, 0xD9	; 217
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	8c 2f       	mov	r24, r28
     e7c:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e80:	41 ef       	ldi	r20, 0xF1	; 241
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	8c 2f       	mov	r24, r28
     e86:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e8a:	4b ed       	ldi	r20, 0xDB	; 219
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	8c 2f       	mov	r24, r28
     e90:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e94:	40 e4       	ldi	r20, 0x40	; 64
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	8c 2f       	mov	r24, r28
     e9a:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e9e:	48 e7       	ldi	r20, 0x78	; 120
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	8c 2f       	mov	r24, r28
     ea4:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     ea8:	48 e2       	ldi	r20, 0x28	; 40
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	8c 2f       	mov	r24, r28
     eae:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	8c 2f       	mov	r24, r28
     eb8:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	8c 2f       	mov	r24, r28
     ec2:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     ec6:	4c e0       	ldi	r20, 0x0C	; 12
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	8c 2f       	mov	r24, r28
     ecc:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
     ed0:	ba e6       	ldi	r27, 0x6A	; 106
     ed2:	24 e0       	ldi	r18, 0x04	; 4
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	b1 50       	subi	r27, 0x01	; 1
     ed8:	20 40       	sbci	r18, 0x00	; 0
     eda:	80 40       	sbci	r24, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <init_OLED+0x15e>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     ee0:	10 92 20 28 	sts	0x2820, r1	; 0x802820 <timerOLED>
     ee4:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <timerOLED+0x1>
//	timeoutOLED = 5;

}
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	e2 97       	sbiw	r28, 0x32	; 50
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     f06:	91 e1       	ldi	r25, 0x11	; 17
     f08:	e0 ec       	ldi	r30, 0xC0	; 192
     f0a:	f6 e6       	ldi	r31, 0x66	; 102
     f0c:	de 01       	movw	r26, r28
     f0e:	92 96       	adiw	r26, 0x22	; 34
     f10:	01 90       	ld	r0, Z+
     f12:	0d 92       	st	X+, r0
     f14:	9a 95       	dec	r25
     f16:	e1 f7       	brne	.-8      	; 0xf10 <writestr_OLED+0x24>

	if (displaynumber == 0) {
     f18:	88 23       	and	r24, r24
     f1a:	29 f0       	breq	.+10     	; 0xf26 <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     f1c:	0f 2e       	mov	r0, r31
     f1e:	fd e3       	ldi	r31, 0x3D	; 61
     f20:	ff 2e       	mov	r15, r31
     f22:	f0 2d       	mov	r31, r0
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     f26:	0f 2e       	mov	r0, r31
     f28:	fc e3       	ldi	r31, 0x3C	; 60
     f2a:	ff 2e       	mov	r15, r31
     f2c:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     f2e:	8e 01       	movw	r16, r28
     f30:	0f 5f       	subi	r16, 0xFF	; 255
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	c8 01       	movw	r24, r16
     f36:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strcpy>
	if (strlen(strbuf) > 16) {
     f3a:	f8 01       	movw	r30, r16
     f3c:	01 90       	ld	r0, Z+
     f3e:	00 20       	and	r0, r0
     f40:	e9 f7       	brne	.-6      	; 0xf3c <writestr_OLED+0x50>
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	e0 1b       	sub	r30, r16
     f46:	f1 0b       	sbc	r31, r17
     f48:	71 97       	sbiw	r30, 0x11	; 17
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <writestr_OLED+0x62>
		strbuf[16] = '\0';
     f4c:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     f4e:	be 01       	movw	r22, r28
     f50:	6e 5d       	subi	r22, 0xDE	; 222
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <strcat>

	if (lineno == 1) {
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	d8 12       	cpse	r13, r24
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	8f 2d       	mov	r24, r15
     f68:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
     f6c:	19 c0       	rjmp	.+50     	; 0xfa0 <writestr_OLED+0xb4>
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f6e:	40 ec       	ldi	r20, 0xC0	; 192
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	8f 2d       	mov	r24, r15
     f74:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
     f78:	13 c0       	rjmp	.+38     	; 0xfa0 <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f7a:	f8 01       	movw	r30, r16
     f7c:	41 91       	ld	r20, Z+
     f7e:	8f 01       	movw	r16, r30
     f80:	60 e4       	ldi	r22, 0x40	; 64
     f82:	8f 2d       	mov	r24, r15
     f84:	0e 94 aa 06 	call	0xd54	; 0xd54 <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f88:	0c 15       	cp	r16, r12
     f8a:	1d 05       	cpc	r17, r13
     f8c:	b1 f7       	brne	.-20     	; 0xf7a <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <timerOLED>
     f96:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <timerOLED+0x1>
	display_off = FALSE;
     f9a:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <display_off>

}
     f9e:	08 c0       	rjmp	.+16     	; 0xfb0 <writestr_OLED+0xc4>
     fa0:	8e 01       	movw	r16, r28
     fa2:	0f 5f       	subi	r16, 0xFF	; 255
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	6e 01       	movw	r12, r28
     fa8:	f1 e1       	ldi	r31, 0x11	; 17
     faa:	cf 0e       	add	r12, r31
     fac:	d1 1c       	adc	r13, r1
     fae:	e5 cf       	rjmp	.-54     	; 0xf7a <writestr_OLED+0x8e>
     fb0:	e2 96       	adiw	r28, 0x32	; 50
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	08 95       	ret

00000fc6 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     fd4:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	be 01       	movw	r22, r28
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     fe2:	42 e0       	ldi	r20, 0x02	; 2
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	81 2f       	mov	r24, r17
     fec:	0e 94 76 07 	call	0xeec	; 0xeec <writestr_OLED>
	timerOLED = 0;
     ff0:	10 92 20 28 	sts	0x2820, r1	; 0x802820 <timerOLED>
     ff4:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <timerOLED+0x1>
	display_off = TRUE;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <display_off>

}
     ffe:	0f 90       	pop	r0
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	08 95       	ret

00001008 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
    100e:	e0 e0       	ldi	r30, 0x00	; 0
    1010:	f6 e0       	ldi	r31, 0x06	; 6
    1012:	80 81       	ld	r24, Z
    1014:	84 60       	ori	r24, 0x04	; 4
    1016:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    1018:	a0 ea       	ldi	r26, 0xA0	; 160
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	8c 91       	ld	r24, X
    101e:	80 63       	ori	r24, 0x30	; 48
    1020:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    1022:	a2 e0       	ldi	r26, 0x02	; 2
    1024:	b6 e0       	ldi	r27, 0x06	; 6
    1026:	8c 91       	ld	r24, X
    1028:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    102a:	8c 91       	ld	r24, X
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    1030:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    103a:	e8 e0       	ldi	r30, 0x08	; 8
    103c:	f6 e0       	ldi	r31, 0x06	; 6
    103e:	80 81       	ld	r24, Z
    1040:	81 60       	ori	r24, 0x01	; 1
    1042:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    1044:	80 81       	ld	r24, Z
    1046:	80 ff       	sbrs	r24, 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <init_ADC+0x4a>
		asm("nop");
    104a:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    104c:	80 81       	ld	r24, Z
    104e:	80 fd       	sbrc	r24, 0
    1050:	fc cf       	rjmp	.-8      	; 0x104a <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    1052:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1056:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    105a:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x17>
    105e:	08 95       	ret

00001060 <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	0f 2e       	mov	r0, r31
    1074:	fa e0       	ldi	r31, 0x0A	; 10
    1076:	bf 2e       	mov	r11, r31
    1078:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    107a:	c1 2c       	mov	r12, r1
    107c:	d1 2c       	mov	r13, r1
    107e:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1080:	c8 e0       	ldi	r28, 0x08	; 8
    1082:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1084:	00 e1       	ldi	r16, 0x10	; 16
    1086:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1088:	88 81       	ld	r24, Y
    108a:	81 60       	ori	r24, 0x01	; 1
    108c:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    108e:	88 81       	ld	r24, Y
    1090:	80 ff       	sbrs	r24, 0
    1092:	04 c0       	rjmp	.+8      	; 0x109c <read_PRESSURE+0x3c>
			asm("nop");
    1094:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1096:	88 81       	ld	r24, Y
    1098:	80 fd       	sbrc	r24, 0
    109a:	fc cf       	rjmp	.-8      	; 0x1094 <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    109c:	f8 01       	movw	r30, r16
    109e:	60 81       	ld	r22, Z
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__floatunsisf>
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	c7 01       	movw	r24, r14
    10b0:	b6 01       	movw	r22, r12
    10b2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__addsf3>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
    10ba:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    10bc:	b1 10       	cpse	r11, r1
    10be:	e4 cf       	rjmp	.-56     	; 0x1088 <read_PRESSURE+0x28>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__divsf3>
    10cc:	2e e5       	ldi	r18, 0x5E	; 94
    10ce:	3a eb       	ldi	r19, 0xBA	; 186
    10d0:	49 e5       	ldi	r20, 0x59	; 89
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__mulsf3>
    10d8:	2f e1       	ldi	r18, 0x1F	; 31
    10da:	35 e8       	ldi	r19, 0x85	; 133
    10dc:	45 ec       	ldi	r20, 0xC5	; 197
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__subsf3>
    10e4:	6b 01       	movw	r12, r22
    10e6:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__cmpsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	1c f4       	brge	.+6      	; 0x10fc <read_PRESSURE+0x9c>
		value = 0.0;
    10f6:	c1 2c       	mov	r12, r1
    10f8:	d1 2c       	mov	r13, r1
    10fa:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	c7 01       	movw	r24, r14
    1106:	b6 01       	movw	r22, r12
    1108:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__addsf3>
    110c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__fixunssfsi>
    1110:	86 2f       	mov	r24, r22

}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	08 95       	ret

00001126 <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    1126:	cf 93       	push	r28

	minute = FALSE;
    1128:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <minute>

	if (BLUVALVEOPEN) {
    112c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1130:	88 23       	and	r24, r24
    1132:	8c f4       	brge	.+34     	; 0x1156 <handle_minute+0x30>
		status.opentime_BLU++;
    1134:	e4 e0       	ldi	r30, 0x04	; 4
    1136:	f8 e2       	ldi	r31, 0x28	; 40
    1138:	c3 85       	ldd	r28, Z+11	; 0x0b
    113a:	cf 5f       	subi	r28, 0xFF	; 255
    113c:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    113e:	8b e0       	ldi	r24, 0x0B	; 11
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
    1146:	c8 17       	cp	r28, r24
    1148:	30 f0       	brcs	.+12     	; 0x1156 <handle_minute+0x30>
			CLOSEVALVE(BLUVALVE);
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 13 28 	sts	0x2813, r24	; 0x802813 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    1156:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    115a:	86 ff       	sbrs	r24, 6
    115c:	11 c0       	rjmp	.+34     	; 0x1180 <handle_minute+0x5a>
		status.opentime_RED++;
    115e:	e4 e0       	ldi	r30, 0x04	; 4
    1160:	f8 e2       	ldi	r31, 0x28	; 40
    1162:	c4 85       	ldd	r28, Z+12	; 0x0c
    1164:	cf 5f       	subi	r28, 0xFF	; 255
    1166:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    1168:	8b e0       	ldi	r24, 0x0B	; 11
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
    1170:	c8 17       	cp	r28, r24
    1172:	30 f0       	brcs	.+12     	; 0x1180 <handle_minute+0x5a>
			CLOSEVALVE(REDVALVE);
    1174:	80 e4       	ldi	r24, 0x40	; 64
    1176:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 14 28 	sts	0x2814, r24	; 0x802814 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    1180:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1184:	85 ff       	sbrs	r24, 5
    1186:	0d c0       	rjmp	.+26     	; 0x11a2 <handle_minute+0x7c>
		status.opentime_BUF++;
    1188:	e4 e0       	ldi	r30, 0x04	; 4
    118a:	f8 e2       	ldi	r31, 0x28	; 40
    118c:	85 85       	ldd	r24, Z+13	; 0x0d
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    1192:	88 37       	cpi	r24, 0x78	; 120
    1194:	30 f0       	brcs	.+12     	; 0x11a2 <handle_minute+0x7c>
			CLOSEVALVE(BUFVALVE);
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BUF = TRUE;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 15 28 	sts	0x2815, r24	; 0x802815 <status+0x11>
		}
	}

	if (SUPVALVEOPEN) {
    11a2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11a6:	84 ff       	sbrs	r24, 4
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <handle_minute+0x8e>
		status.opentime_SUP++;				// Increment supply dewar valve time
    11aa:	e4 e0       	ldi	r30, 0x04	; 4
    11ac:	f8 e2       	ldi	r31, 0x28	; 40
    11ae:	86 85       	ldd	r24, Z+14	; 0x0e
    11b0:	8f 5f       	subi	r24, 0xFF	; 255
    11b2:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    11b4:	e4 e0       	ldi	r30, 0x04	; 4
    11b6:	f8 e2       	ldi	r31, 0x28	; 40
    11b8:	85 89       	ldd	r24, Z+21	; 0x15
    11ba:	81 50       	subi	r24, 0x01	; 1
    11bc:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    11be:	81 11       	cpse	r24, r1
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <handle_minute+0xa0>
		start_FILL();						// See encoder.c
    11c2:	0e 94 8c 05 	call	0xb18	; 0xb18 <start_FILL>
	}
}
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <handle_ticks>:
void handle_ticks(void)
{

//	static uint8_t oldpressure;

	tick = FALSE;
    11ca:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {
    11ce:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    11d2:	8c 33       	cpi	r24, 0x3C	; 60
    11d4:	28 f0       	brcs	.+10     	; 0x11e0 <handle_ticks+0x16>
		minute = TRUE;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <minute>
		seconds = 0;
    11dc:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

//	oldpressure = status.pressure;
	status.pressure = read_PRESSURE();				// LN2 pressure
    11e0:	0e 94 30 08 	call	0x1060	; 0x1060 <read_PRESSURE>
    11e4:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x17>

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    11e8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11ec:	88 23       	and	r24, r24
    11ee:	f4 f4       	brge	.+60     	; 0x122c <handle_ticks+0x62>
    11f0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    11f4:	80 fd       	sbrc	r24, 0
    11f6:	1a c0       	rjmp	.+52     	; 0x122c <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    11f8:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x13>
    11fc:	8a 30       	cpi	r24, 0x0A	; 10
    11fe:	30 f0       	brcs	.+12     	; 0x120c <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    1206:	10 92 17 28 	sts	0x2817, r1	; 0x802817 <status+0x13>
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1212:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	49 f4       	brne	.+18     	; 0x122c <handle_ticks+0x62>
    121a:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <timerOLED>
    121e:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <timerOLED+0x1>
    1222:	89 2b       	or	r24, r25
    1224:	19 f0       	breq	.+6      	; 0x122c <handle_ticks+0x62>
			display(SCRVALVES);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
		}
//		status.opentime_BLU = 0;
//		status.maxopen_BLU = FALSE;
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    122c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1230:	86 ff       	sbrs	r24, 6
    1232:	1e c0       	rjmp	.+60     	; 0x1270 <handle_ticks+0xa6>
    1234:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1238:	81 fd       	sbrc	r24, 1
    123a:	1a c0       	rjmp	.+52     	; 0x1270 <handle_ticks+0xa6>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    123c:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x14>
    1240:	8a 30       	cpi	r24, 0x0A	; 10
    1242:	30 f0       	brcs	.+12     	; 0x1250 <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    1244:	80 e4       	ldi	r24, 0x40	; 64
    1246:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    124a:	10 92 18 28 	sts	0x2818, r1	; 0x802818 <status+0x14>
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	80 93 18 28 	sts	0x2818, r24	; 0x802818 <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1256:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	49 f4       	brne	.+18     	; 0x1270 <handle_ticks+0xa6>
    125e:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <timerOLED>
    1262:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <timerOLED+0x1>
    1266:	89 2b       	or	r24, r25
    1268:	e1 f1       	breq	.+120    	; 0x12e2 <handle_ticks+0x118>
			display(SCRVALVES);
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    1270:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1274:	85 ff       	sbrs	r24, 5
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <handle_ticks+0xea>
    1278:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    127c:	82 fd       	sbrc	r24, 2
    127e:	1a c0       	rjmp	.+52     	; 0x12b4 <handle_ticks+0xea>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    1280:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0x12>
    1284:	8f 30       	cpi	r24, 0x0F	; 15
    1286:	30 f0       	brcs	.+12     	; 0x1294 <handle_ticks+0xca>
			CLOSEVALVE(BUFVALVE);
    1288:	80 e2       	ldi	r24, 0x20	; 32
    128a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BUF = 0;
    128e:	10 92 16 28 	sts	0x2816, r1	; 0x802816 <status+0x12>
    1292:	03 c0       	rjmp	.+6      	; 0x129a <handle_ticks+0xd0>
		} else {
			status.overfill_BUF++;
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    129a:	80 91 1d 28 	lds	r24, 0x281D	; 0x80281d <screen_value>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	49 f4       	brne	.+18     	; 0x12b4 <handle_ticks+0xea>
    12a2:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <timerOLED>
    12a6:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <timerOLED+0x1>
    12aa:	89 2b       	or	r24, r25
    12ac:	11 f1       	breq	.+68     	; 0x12f2 <handle_ticks+0x128>
			display(SCRVALVES);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 8f 01 	call	0x31e	; 0x31e <display>
//		status.buildpressure_time = 0;
//		status.opentime_BUF = 0;
//		status.maxopen_BUF = FALSE;
	}

	if (timerOLED) {
    12b4:	80 91 20 28 	lds	r24, 0x2820	; 0x802820 <timerOLED>
    12b8:	90 91 21 28 	lds	r25, 0x2821	; 0x802821 <timerOLED+0x1>
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	c9 f0       	breq	.+50     	; 0x12f2 <handle_ticks+0x128>
//		if (timerOLED > timeoutOLED) {	// Display timeout
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    12c0:	8b 30       	cpi	r24, 0x0B	; 11
    12c2:	91 05       	cpc	r25, r1
    12c4:	40 f0       	brcs	.+16     	; 0x12d6 <handle_ticks+0x10c>
			clear_OLED(0);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <clear_OLED>
			timerOLED = 0;
    12cc:	10 92 20 28 	sts	0x2820, r1	; 0x802820 <timerOLED>
    12d0:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <timerOLED+0x1>
    12d4:	08 95       	ret
		} else {
			timerOLED++;
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	80 93 20 28 	sts	0x2820, r24	; 0x802820 <timerOLED>
    12dc:	90 93 21 28 	sts	0x2821, r25	; 0x802821 <timerOLED+0x1>
/*
	if ((status.pressure != oldpressure) && !display_off) {
		display(SCRPRESSURE);
	}
*/
}
    12e0:	08 95       	ret
		}
//		status.opentime_RED = 0;
//		status.maxopen_RED = FALSE;
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    12e2:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    12e6:	85 ff       	sbrs	r24, 5
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <handle_ticks+0x128>
    12ea:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    12ee:	82 ff       	sbrs	r24, 2
    12f0:	c7 cf       	rjmp	.-114    	; 0x1280 <handle_ticks+0xb6>
    12f2:	08 95       	ret

000012f4 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    12f4:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    12f6:	e0 e6       	ldi	r30, 0x60	; 96
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    12fe:	98 ed       	ldi	r25, 0xD8	; 216
    1300:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1302:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1304:	83 81       	ldd	r24, Z+3	; 0x03
    1306:	86 ff       	sbrs	r24, 6
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <init_RTC+0x1e>
		asm("nop");
    130a:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	96 fd       	sbrc	r25, 6
    1310:	fc cf       	rjmp	.-8      	; 0x130a <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1312:	e0 e6       	ldi	r30, 0x60	; 96
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    1318:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    131a:	88 ed       	ldi	r24, 0xD8	; 216
    131c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    131e:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    1320:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    1322:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    1324:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1326:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    1328:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    132c:	88 23       	and	r24, r24
    132e:	31 f0       	breq	.+12     	; 0x133c <init_RTC+0x48>
    1330:	e0 e4       	ldi	r30, 0x40	; 64
    1332:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    1334:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	91 11       	cpse	r25, r1
    133a:	fc cf       	rjmp	.-8      	; 0x1334 <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    133c:	e0 e4       	ldi	r30, 0x40	; 64
    133e:	f1 e0       	ldi	r31, 0x01	; 1
    1340:	22 87       	std	Z+10, r18	; 0x0a
    1342:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    1348:	85 81       	ldd	r24, Z+5	; 0x05
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    134e:	81 eb       	ldi	r24, 0xB1	; 177
    1350:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	81 60       	ori	r24, 0x01	; 1
    1356:	82 83       	std	Z+2, r24	; 0x02
    1358:	08 95       	ret

0000135a <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    136e:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    1378:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <start_TCB0>:
volatile uint16_t ticks_TCB0;

void start_TCB0(uint16_t msPeriod)
{

	ticks_TCB0 = 0;
    138a:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <ticks_TCB0>
    138e:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <ticks_TCB0+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    1392:	25 e0       	ldi	r18, 0x05	; 5
    1394:	3d e0       	ldi	r19, 0x0D	; 13
    1396:	ac 01       	movw	r20, r24
    1398:	42 9f       	mul	r20, r18
    139a:	c0 01       	movw	r24, r0
    139c:	43 9f       	mul	r20, r19
    139e:	90 0d       	add	r25, r0
    13a0:	52 9f       	mul	r21, r18
    13a2:	90 0d       	add	r25, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	e0 e8       	ldi	r30, 0x80	; 128
    13a8:	fa e0       	ldi	r31, 0x0A	; 10
    13aa:	84 87       	std	Z+12, r24	; 0x0c
    13ac:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	85 83       	std	Z+5, r24	; 0x05
	//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    13b2:	80 83       	st	Z, r24
    13b4:	08 95       	ret

000013b6 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    13b6:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    13ba:	08 95       	ret

000013bc <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks_TCB0++;
    13d0:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <ticks_TCB0>
    13d4:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <ticks_TCB0+0x1>
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <ticks_TCB0>
    13de:	90 93 24 28 	sts	0x2824, r25	; 0x802824 <ticks_TCB0+0x1>

    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    13f0:	e0 ea       	ldi	r30, 0xA0	; 160
    13f2:	f8 e0       	ldi	r31, 0x08	; 8
    13f4:	8b e0       	ldi	r24, 0x0B	; 11
    13f6:	86 83       	std	Z+6, r24	; 0x06
    13f8:	83 81       	ldd	r24, Z+3	; 0x03
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	83 83       	std	Z+3, r24	; 0x03
    13fe:	85 81       	ldd	r24, Z+5	; 0x05
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	85 83       	std	Z+5, r24	; 0x05
    1404:	08 95       	ret

00001406 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    1406:	61 30       	cpi	r22, 0x01	; 1
    1408:	29 f4       	brne	.+10     	; 0x1414 <start_TWI+0xe>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    140a:	88 0f       	add	r24, r24
    140c:	81 60       	ori	r24, 0x01	; 1
    140e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    1412:	03 c0       	rjmp	.+6      	; 0x141a <start_TWI+0x14>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    1414:	88 0f       	add	r24, r24
    1416:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 c5 09 	call	0x138a	; 0x138a <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1422:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1426:	80 7c       	andi	r24, 0xC0	; 192
    1428:	b9 f4       	brne	.+46     	; 0x1458 <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    142a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <ticks_TCB0>
    142e:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <ticks_TCB0+0x1>
    1432:	0b 97       	sbiw	r24, 0x0b	; 11
    1434:	48 f4       	brcc	.+18     	; 0x1448 <start_TWI+0x42>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1436:	e0 ea       	ldi	r30, 0xA0	; 160
    1438:	f8 e0       	ldi	r31, 0x08	; 8
    143a:	0a c0       	rjmp	.+20     	; 0x1450 <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    143c:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <ticks_TCB0>
    1440:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <ticks_TCB0+0x1>
    1444:	0b 97       	sbiw	r24, 0x0b	; 11
    1446:	20 f0       	brcs	.+8      	; 0x1450 <start_TWI+0x4a>
			stop_TCB0();
    1448:	0e 94 db 09 	call	0x13b6	; 0x13b6 <stop_TCB0>
			return(TWITIMEOUT);
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    1450:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1452:	85 81       	ldd	r24, Z+5	; 0x05
    1454:	80 7c       	andi	r24, 0xC0	; 192
    1456:	91 f3       	breq	.-28     	; 0x143c <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    1458:	0e 94 db 09 	call	0x13b6	; 0x13b6 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    145c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1460:	82 fd       	sbrc	r24, 2
    1462:	0b c0       	rjmp	.+22     	; 0x147a <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    1464:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1468:	83 fd       	sbrc	r24, 3
    146a:	09 c0       	rjmp	.+18     	; 0x147e <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    146c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1470:	89 2f       	mov	r24, r25
    1472:	80 71       	andi	r24, 0x10	; 16
    1474:	94 fd       	sbrc	r25, 4
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <start_TWI+0x7c>
    1478:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    1482:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    1484:	08 95       	ret

00001486 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    1486:	87 e0       	ldi	r24, 0x07	; 7
    1488:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    148c:	08 95       	ret

0000148e <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    148e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1492:	96 fd       	sbrc	r25, 6
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <write_TWI+0x14>
    1496:	e0 ea       	ldi	r30, 0xA0	; 160
    1498:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    149a:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    149c:	95 81       	ldd	r25, Z+5	; 0x05
    149e:	96 ff       	sbrs	r25, 6
    14a0:	fc cf       	rjmp	.-8      	; 0x149a <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    14a2:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 c5 09 	call	0x138a	; 0x138a <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    14ae:	e0 ea       	ldi	r30, 0xA0	; 160
    14b0:	f8 e0       	ldi	r31, 0x08	; 8
    14b2:	0b c0       	rjmp	.+22     	; 0x14ca <write_TWI+0x3c>
		asm("nop");
    14b4:	00 00       	nop
		if (ticks_TCB0 > 50) {
    14b6:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <ticks_TCB0>
    14ba:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <ticks_TCB0+0x1>
    14be:	c3 97       	sbiw	r24, 0x33	; 51
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <write_TWI+0x3c>
			stop_TCB0();
    14c2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <stop_TCB0>
			return(TWITIMEOUT);
    14c6:	84 e0       	ldi	r24, 0x04	; 4
    14c8:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    14ca:	85 81       	ldd	r24, Z+5	; 0x05
    14cc:	86 ff       	sbrs	r24, 6
    14ce:	f2 cf       	rjmp	.-28     	; 0x14b4 <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    14d0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    14d4:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14d8:	89 2f       	mov	r24, r25
    14da:	80 71       	andi	r24, 0x10	; 16
    14dc:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    14de:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    14e0:	08 95       	ret

000014e2 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    14e2:	e0 e0       	ldi	r30, 0x00	; 0
    14e4:	f4 e0       	ldi	r31, 0x04	; 4
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    14ea:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    14ec:	e0 e0       	ldi	r30, 0x00	; 0
    14ee:	f8 e0       	ldi	r31, 0x08	; 8
    14f0:	2d e6       	ldi	r18, 0x6D	; 109
    14f2:	35 e0       	ldi	r19, 0x05	; 5
    14f4:	20 87       	std	Z+8, r18	; 0x08
    14f6:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    14f8:	95 81       	ldd	r25, Z+5	; 0x05
    14fa:	90 68       	ori	r25, 0x80	; 128
    14fc:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    14fe:	96 81       	ldd	r25, Z+6	; 0x06
    1500:	90 64       	ori	r25, 0x40	; 64
    1502:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    1504:	96 81       	ldd	r25, Z+6	; 0x06
    1506:	90 68       	ori	r25, 0x80	; 128
    1508:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    150a:	10 92 78 28 	sts	0x2878, r1	; 0x802878 <recv0_buf+0x53>
	send0_buf.length = 0;
    150e:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <send0_buf+0x53>
	recv0_buf.nxfrd = 0;
    1512:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <recv0_buf+0x52>
	send0_buf.nxfrd = 0;
    1516:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <send0_buf+0x52>
	recv0_buf.done = FALSE;				// Ready to receive data
    151a:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <recv0_buf+0x51>
	send0_buf.done = TRUE;				// No data to send
    151e:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <send0_buf+0x51>
    1522:	08 95       	ret

00001524 <send_USART>:
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
	uint8_t i;
	send0_buf.length = nbytes;
    1524:	60 93 cc 28 	sts	0x28CC, r22	; 0x8028cc <send0_buf+0x53>
	send0_buf.nxfrd = 0;
    1528:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <send0_buf+0x52>
	send0_buf.done = FALSE;
    152c:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <send0_buf+0x51>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    1530:	66 23       	and	r22, r22
    1532:	71 f0       	breq	.+28     	; 0x1550 <send_USART+0x2c>
    1534:	a8 2f       	mov	r26, r24
    1536:	b9 2f       	mov	r27, r25
    1538:	e9 e7       	ldi	r30, 0x79	; 121
    153a:	f8 e2       	ldi	r31, 0x28	; 40
    153c:	61 50       	subi	r22, 0x01	; 1
    153e:	26 2f       	mov	r18, r22
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	26 58       	subi	r18, 0x86	; 134
    1544:	37 4d       	sbci	r19, 0xD7	; 215
		send0_buf.data[i] = *data++;
    1546:	8d 91       	ld	r24, X+
    1548:	81 93       	st	Z+, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    154a:	e2 17       	cp	r30, r18
    154c:	f3 07       	cpc	r31, r19
    154e:	d9 f7       	brne	.-10     	; 0x1546 <send_USART+0x22>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    1550:	e0 e0       	ldi	r30, 0x00	; 0
    1552:	f8 e0       	ldi	r31, 0x08	; 8
    1554:	85 81       	ldd	r24, Z+5	; 0x05
    1556:	80 62       	ori	r24, 0x20	; 32
    1558:	85 83       	std	Z+5, r24	; 0x05
    155a:	08 95       	ret

0000155c <handle_serial>:
	[2] - Red dewar valve status <O|C|T|X>
	[3] - Blue dewar valve status <O|C|T|X>
	[4-6] - Fill interval in minutes
------------------------------------------------------------------------------*/
void handle_serial(void)
{
    155c:	af 92       	push	r10
    155e:	bf 92       	push	r11
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	c2 5a       	subi	r28, 0xA2	; 162
    1576:	d1 09       	sbc	r29, r1
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	de bf       	out	0x3e, r29	; 62
	char strbuf[81], tempstr[81];

	recv0_buf.done = FALSE;
    157c:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <recv0_buf+0x51>

	// Buffer dewar supply Valve
	strcpy(strbuf, "SUP,");
    1580:	85 e0       	ldi	r24, 0x05	; 5
    1582:	e1 ed       	ldi	r30, 0xD1	; 209
    1584:	f6 e6       	ldi	r31, 0x66	; 102
    1586:	de 01       	movw	r26, r28
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	01 90       	ld	r0, Z+
    158c:	0d 92       	st	X+, r0
    158e:	8a 95       	dec	r24
    1590:	e1 f7       	brne	.-8      	; 0x158a <handle_serial+0x2e>
	if (SUPVALVEOPEN) {
    1592:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1596:	84 ff       	sbrs	r24, 4
    1598:	0b c0       	rjmp	.+22     	; 0x15b0 <handle_serial+0x54>
		strcat(strbuf, "O");
    159a:	fe 01       	movw	r30, r28
    159c:	31 96       	adiw	r30, 0x01	; 1
    159e:	01 90       	ld	r0, Z+
    15a0:	00 20       	and	r0, r0
    15a2:	e9 f7       	brne	.-6      	; 0x159e <handle_serial+0x42>
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	8f e4       	ldi	r24, 0x4F	; 79
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	0a c0       	rjmp	.+20     	; 0x15c4 <handle_serial+0x68>
	} else {
		strcat(strbuf, "C");
    15b0:	fe 01       	movw	r30, r28
    15b2:	31 96       	adiw	r30, 0x01	; 1
    15b4:	01 90       	ld	r0, Z+
    15b6:	00 20       	and	r0, r0
    15b8:	e9 f7       	brne	.-6      	; 0x15b4 <handle_serial+0x58>
    15ba:	31 97       	sbiw	r30, 0x01	; 1
    15bc:	83 e4       	ldi	r24, 0x43	; 67
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	80 83       	st	Z, r24
    15c2:	91 83       	std	Z+1, r25	; 0x01
	}

	// Buffer dewar vent valve
	strcat(strbuf, ",BUF,");
    15c4:	de 01       	movw	r26, r28
    15c6:	11 96       	adiw	r26, 0x01	; 1
    15c8:	0d 90       	ld	r0, X+
    15ca:	00 20       	and	r0, r0
    15cc:	e9 f7       	brne	.-6      	; 0x15c8 <handle_serial+0x6c>
    15ce:	11 97       	sbiw	r26, 0x01	; 1
    15d0:	86 e0       	ldi	r24, 0x06	; 6
    15d2:	e6 ed       	ldi	r30, 0xD6	; 214
    15d4:	f6 e6       	ldi	r31, 0x66	; 102
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	8a 95       	dec	r24
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <handle_serial+0x7a>
	if (status.maxopen_BUF) {
    15de:	80 91 15 28 	lds	r24, 0x2815	; 0x802815 <status+0x11>
    15e2:	88 23       	and	r24, r24
    15e4:	59 f0       	breq	.+22     	; 0x15fc <handle_serial+0xa0>
		strcat(strbuf, "T");
    15e6:	fe 01       	movw	r30, r28
    15e8:	31 96       	adiw	r30, 0x01	; 1
    15ea:	01 90       	ld	r0, Z+
    15ec:	00 20       	and	r0, r0
    15ee:	e9 f7       	brne	.-6      	; 0x15ea <handle_serial+0x8e>
    15f0:	31 97       	sbiw	r30, 0x01	; 1
    15f2:	84 e5       	ldi	r24, 0x54	; 84
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	80 83       	st	Z, r24
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	19 c0       	rjmp	.+50     	; 0x162e <handle_serial+0xd2>
	} else if (BUFVALVEOPEN) {
    15fc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1600:	85 ff       	sbrs	r24, 5
    1602:	0b c0       	rjmp	.+22     	; 0x161a <handle_serial+0xbe>
		strcat(strbuf, "O");
    1604:	fe 01       	movw	r30, r28
    1606:	31 96       	adiw	r30, 0x01	; 1
    1608:	01 90       	ld	r0, Z+
    160a:	00 20       	and	r0, r0
    160c:	e9 f7       	brne	.-6      	; 0x1608 <handle_serial+0xac>
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	8f e4       	ldi	r24, 0x4F	; 79
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	80 83       	st	Z, r24
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	0a c0       	rjmp	.+20     	; 0x162e <handle_serial+0xd2>
	} else {
		strcat(strbuf, "C");
    161a:	fe 01       	movw	r30, r28
    161c:	31 96       	adiw	r30, 0x01	; 1
    161e:	01 90       	ld	r0, Z+
    1620:	00 20       	and	r0, r0
    1622:	e9 f7       	brne	.-6      	; 0x161e <handle_serial+0xc2>
    1624:	31 97       	sbiw	r30, 0x01	; 1
    1626:	83 e4       	ldi	r24, 0x43	; 67
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
	}

	// Red CCD vent valve
	strcat(strbuf,",RED,");
    162e:	de 01       	movw	r26, r28
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	0d 90       	ld	r0, X+
    1634:	00 20       	and	r0, r0
    1636:	e9 f7       	brne	.-6      	; 0x1632 <handle_serial+0xd6>
    1638:	11 97       	sbiw	r26, 0x01	; 1
    163a:	86 e0       	ldi	r24, 0x06	; 6
    163c:	ec ed       	ldi	r30, 0xDC	; 220
    163e:	f6 e6       	ldi	r31, 0x66	; 102
    1640:	01 90       	ld	r0, Z+
    1642:	0d 92       	st	X+, r0
    1644:	8a 95       	dec	r24
    1646:	e1 f7       	brne	.-8      	; 0x1640 <handle_serial+0xe4>
	if (!REDENABLED) {
    1648:	8d e0       	ldi	r24, 0x0D	; 13
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
    1650:	81 11       	cpse	r24, r1
    1652:	0b c0       	rjmp	.+22     	; 0x166a <handle_serial+0x10e>
		strcat(strbuf, "X");
    1654:	fe 01       	movw	r30, r28
    1656:	31 96       	adiw	r30, 0x01	; 1
    1658:	01 90       	ld	r0, Z+
    165a:	00 20       	and	r0, r0
    165c:	e9 f7       	brne	.-6      	; 0x1658 <handle_serial+0xfc>
    165e:	31 97       	sbiw	r30, 0x01	; 1
    1660:	88 e5       	ldi	r24, 0x58	; 88
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	80 83       	st	Z, r24
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	28 c0       	rjmp	.+80     	; 0x16ba <handle_serial+0x15e>
	} else if (status.maxopen_RED) {
    166a:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <status+0x10>
    166e:	88 23       	and	r24, r24
    1670:	59 f0       	breq	.+22     	; 0x1688 <handle_serial+0x12c>
		strcat(strbuf, "T");
    1672:	fe 01       	movw	r30, r28
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	01 90       	ld	r0, Z+
    1678:	00 20       	and	r0, r0
    167a:	e9 f7       	brne	.-6      	; 0x1676 <handle_serial+0x11a>
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	84 e5       	ldi	r24, 0x54	; 84
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	80 83       	st	Z, r24
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	19 c0       	rjmp	.+50     	; 0x16ba <handle_serial+0x15e>
	} else if (REDVALVEOPEN) {
    1688:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    168c:	86 ff       	sbrs	r24, 6
    168e:	0b c0       	rjmp	.+22     	; 0x16a6 <handle_serial+0x14a>
		strcat(strbuf, "O");
    1690:	fe 01       	movw	r30, r28
    1692:	31 96       	adiw	r30, 0x01	; 1
    1694:	01 90       	ld	r0, Z+
    1696:	00 20       	and	r0, r0
    1698:	e9 f7       	brne	.-6      	; 0x1694 <handle_serial+0x138>
    169a:	31 97       	sbiw	r30, 0x01	; 1
    169c:	8f e4       	ldi	r24, 0x4F	; 79
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	80 83       	st	Z, r24
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <handle_serial+0x15e>
	} else {
		strcat(strbuf, "C");
    16a6:	fe 01       	movw	r30, r28
    16a8:	31 96       	adiw	r30, 0x01	; 1
    16aa:	01 90       	ld	r0, Z+
    16ac:	00 20       	and	r0, r0
    16ae:	e9 f7       	brne	.-6      	; 0x16aa <handle_serial+0x14e>
    16b0:	31 97       	sbiw	r30, 0x01	; 1
    16b2:	83 e4       	ldi	r24, 0x43	; 67
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	80 83       	st	Z, r24
    16b8:	91 83       	std	Z+1, r25	; 0x01
	}

	// Blue CCD vent valve
	strcat(strbuf, ",BLU,");
    16ba:	de 01       	movw	r26, r28
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	0d 90       	ld	r0, X+
    16c0:	00 20       	and	r0, r0
    16c2:	e9 f7       	brne	.-6      	; 0x16be <handle_serial+0x162>
    16c4:	11 97       	sbiw	r26, 0x01	; 1
    16c6:	86 e0       	ldi	r24, 0x06	; 6
    16c8:	e2 ee       	ldi	r30, 0xE2	; 226
    16ca:	f6 e6       	ldi	r31, 0x66	; 102
    16cc:	01 90       	ld	r0, Z+
    16ce:	0d 92       	st	X+, r0
    16d0:	8a 95       	dec	r24
    16d2:	e1 f7       	brne	.-8      	; 0x16cc <handle_serial+0x170>
	if (!BLUENABLED) {
    16d4:	8c e0       	ldi	r24, 0x0C	; 12
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
    16dc:	81 11       	cpse	r24, r1
    16de:	0b c0       	rjmp	.+22     	; 0x16f6 <handle_serial+0x19a>
		strcat(strbuf, "X");
    16e0:	fe 01       	movw	r30, r28
    16e2:	31 96       	adiw	r30, 0x01	; 1
    16e4:	01 90       	ld	r0, Z+
    16e6:	00 20       	and	r0, r0
    16e8:	e9 f7       	brne	.-6      	; 0x16e4 <handle_serial+0x188>
    16ea:	31 97       	sbiw	r30, 0x01	; 1
    16ec:	88 e5       	ldi	r24, 0x58	; 88
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	28 c0       	rjmp	.+80     	; 0x1746 <handle_serial+0x1ea>
		} else if (status.maxopen_BLU) {
    16f6:	80 91 13 28 	lds	r24, 0x2813	; 0x802813 <status+0xf>
    16fa:	88 23       	and	r24, r24
    16fc:	59 f0       	breq	.+22     	; 0x1714 <handle_serial+0x1b8>
		strcat(strbuf, "T");
    16fe:	fe 01       	movw	r30, r28
    1700:	31 96       	adiw	r30, 0x01	; 1
    1702:	01 90       	ld	r0, Z+
    1704:	00 20       	and	r0, r0
    1706:	e9 f7       	brne	.-6      	; 0x1702 <handle_serial+0x1a6>
    1708:	31 97       	sbiw	r30, 0x01	; 1
    170a:	84 e5       	ldi	r24, 0x54	; 84
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	80 83       	st	Z, r24
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	19 c0       	rjmp	.+50     	; 0x1746 <handle_serial+0x1ea>
		} else if (BLUVALVEOPEN) {
    1714:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1718:	88 23       	and	r24, r24
    171a:	5c f4       	brge	.+22     	; 0x1732 <handle_serial+0x1d6>
		strcat(strbuf, "O");
    171c:	fe 01       	movw	r30, r28
    171e:	31 96       	adiw	r30, 0x01	; 1
    1720:	01 90       	ld	r0, Z+
    1722:	00 20       	and	r0, r0
    1724:	e9 f7       	brne	.-6      	; 0x1720 <handle_serial+0x1c4>
    1726:	31 97       	sbiw	r30, 0x01	; 1
    1728:	8f e4       	ldi	r24, 0x4F	; 79
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	80 83       	st	Z, r24
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <handle_serial+0x1ea>
		} else {
		strcat(strbuf, "C");
    1732:	fe 01       	movw	r30, r28
    1734:	31 96       	adiw	r30, 0x01	; 1
    1736:	01 90       	ld	r0, Z+
    1738:	00 20       	and	r0, r0
    173a:	e9 f7       	brne	.-6      	; 0x1736 <handle_serial+0x1da>
    173c:	31 97       	sbiw	r30, 0x01	; 1
    173e:	83 e4       	ldi	r24, 0x43	; 67
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	80 83       	st	Z, r24
    1744:	91 83       	std	Z+1, r25	; 0x01
	}

	// Fill interval
	strcat(strbuf, ",INT,");
    1746:	8e 01       	movw	r16, r28
    1748:	0f 5f       	subi	r16, 0xFF	; 255
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	d8 01       	movw	r26, r16
    174e:	0d 90       	ld	r0, X+
    1750:	00 20       	and	r0, r0
    1752:	e9 f7       	brne	.-6      	; 0x174e <handle_serial+0x1f2>
    1754:	11 97       	sbiw	r26, 0x01	; 1
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	e8 ee       	ldi	r30, 0xE8	; 232
    175a:	f6 e6       	ldi	r31, 0x66	; 102
    175c:	01 90       	ld	r0, Z+
    175e:	0d 92       	st	X+, r0
    1760:	8a 95       	dec	r24
    1762:	e1 f7       	brne	.-8      	; 0x175c <handle_serial+0x200>
	sprintf(tempstr, "%d", FILLINTERVAL);
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
    176c:	1f 92       	push	r1
    176e:	8f 93       	push	r24
    1770:	0f 2e       	mov	r0, r31
    1772:	fe ee       	ldi	r31, 0xEE	; 238
    1774:	cf 2e       	mov	r12, r31
    1776:	f6 e6       	ldi	r31, 0x66	; 102
    1778:	df 2e       	mov	r13, r31
    177a:	f0 2d       	mov	r31, r0
    177c:	df 92       	push	r13
    177e:	cf 92       	push	r12
    1780:	7e 01       	movw	r14, r28
    1782:	22 e5       	ldi	r18, 0x52	; 82
    1784:	e2 0e       	add	r14, r18
    1786:	f1 1c       	adc	r15, r1
    1788:	ff 92       	push	r15
    178a:	ef 92       	push	r14
    178c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
	strcat(strbuf, tempstr);
    1790:	b7 01       	movw	r22, r14
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <strcat>

	// Time to next fill
	strcat(strbuf, ",NEXT,");
    1798:	d8 01       	movw	r26, r16
    179a:	0d 90       	ld	r0, X+
    179c:	00 20       	and	r0, r0
    179e:	e9 f7       	brne	.-6      	; 0x179a <handle_serial+0x23e>
    17a0:	11 97       	sbiw	r26, 0x01	; 1
    17a2:	87 e0       	ldi	r24, 0x07	; 7
    17a4:	e1 ef       	ldi	r30, 0xF1	; 241
    17a6:	f6 e6       	ldi	r31, 0x66	; 102
    17a8:	01 90       	ld	r0, Z+
    17aa:	0d 92       	st	X+, r0
    17ac:	8a 95       	dec	r24
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <handle_serial+0x24c>
	sprintf(tempstr, "%d", status.next_fill);
    17b0:	0f 2e       	mov	r0, r31
    17b2:	f4 e0       	ldi	r31, 0x04	; 4
    17b4:	af 2e       	mov	r10, r31
    17b6:	f8 e2       	ldi	r31, 0x28	; 40
    17b8:	bf 2e       	mov	r11, r31
    17ba:	f0 2d       	mov	r31, r0
    17bc:	f5 01       	movw	r30, r10
    17be:	85 89       	ldd	r24, Z+21	; 0x15
    17c0:	1f 92       	push	r1
    17c2:	8f 93       	push	r24
    17c4:	df 92       	push	r13
    17c6:	cf 92       	push	r12
    17c8:	ff 92       	push	r15
    17ca:	ef 92       	push	r14
    17cc:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
	strcat(strbuf, tempstr);
    17d0:	b7 01       	movw	r22, r14
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <strcat>

	// Max open time
	strcat(strbuf, ",MAX,");
    17d8:	d8 01       	movw	r26, r16
    17da:	0d 90       	ld	r0, X+
    17dc:	00 20       	and	r0, r0
    17de:	e9 f7       	brne	.-6      	; 0x17da <handle_serial+0x27e>
    17e0:	11 97       	sbiw	r26, 0x01	; 1
    17e2:	86 e0       	ldi	r24, 0x06	; 6
    17e4:	e8 ef       	ldi	r30, 0xF8	; 248
    17e6:	f6 e6       	ldi	r31, 0x66	; 102
    17e8:	01 90       	ld	r0, Z+
    17ea:	0d 92       	st	X+, r0
    17ec:	8a 95       	dec	r24
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <handle_serial+0x28c>
	sprintf(tempstr, "%d", MAXOPENTIME);
    17f0:	8b e0       	ldi	r24, 0x0B	; 11
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 45 12 	call	0x248a	; 0x248a <eeprom_read_byte>
    17f8:	1f 92       	push	r1
    17fa:	8f 93       	push	r24
    17fc:	df 92       	push	r13
    17fe:	cf 92       	push	r12
    1800:	ff 92       	push	r15
    1802:	ef 92       	push	r14
    1804:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
	strcat(strbuf, tempstr);	
    1808:	b7 01       	movw	r22, r14
    180a:	c8 01       	movw	r24, r16
    180c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <strcat>

	// Pressure
	strcat(strbuf, ",PRES,");
    1810:	d8 01       	movw	r26, r16
    1812:	0d 90       	ld	r0, X+
    1814:	00 20       	and	r0, r0
    1816:	e9 f7       	brne	.-6      	; 0x1812 <__DATA_REGION_LENGTH__+0x12>
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	87 e0       	ldi	r24, 0x07	; 7
    181c:	ee ef       	ldi	r30, 0xFE	; 254
    181e:	f6 e6       	ldi	r31, 0x66	; 102
    1820:	01 90       	ld	r0, Z+
    1822:	0d 92       	st	X+, r0
    1824:	8a 95       	dec	r24
    1826:	e1 f7       	brne	.-8      	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
	sprintf(tempstr, "%d", status.pressure);
    1828:	f5 01       	movw	r30, r10
    182a:	87 89       	ldd	r24, Z+23	; 0x17
    182c:	1f 92       	push	r1
    182e:	8f 93       	push	r24
    1830:	df 92       	push	r13
    1832:	cf 92       	push	r12
    1834:	ff 92       	push	r15
    1836:	ef 92       	push	r14
    1838:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sprintf>
	strcat(strbuf, tempstr);
    183c:	b7 01       	movw	r22, r14
    183e:	c8 01       	movw	r24, r16
    1840:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <strcat>

	// Thermistors
	strcat(strbuf, ",TBUF,");
    1844:	d8 01       	movw	r26, r16
    1846:	0d 90       	ld	r0, X+
    1848:	00 20       	and	r0, r0
    184a:	e9 f7       	brne	.-6      	; 0x1846 <__DATA_REGION_LENGTH__+0x46>
    184c:	11 97       	sbiw	r26, 0x01	; 1
    184e:	87 e0       	ldi	r24, 0x07	; 7
    1850:	e5 e0       	ldi	r30, 0x05	; 5
    1852:	f7 e6       	ldi	r31, 0x67	; 103
    1854:	01 90       	ld	r0, Z+
    1856:	0d 92       	st	X+, r0
    1858:	8a 95       	dec	r24
    185a:	e1 f7       	brne	.-8      	; 0x1854 <__DATA_REGION_LENGTH__+0x54>
	if (BUFTHERMWARM) {
    185c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	82 ff       	sbrs	r24, 2
    1866:	0a c0       	rjmp	.+20     	; 0x187c <__DATA_REGION_LENGTH__+0x7c>
		strcat(strbuf, "H");
    1868:	f8 01       	movw	r30, r16
    186a:	01 90       	ld	r0, Z+
    186c:	00 20       	and	r0, r0
    186e:	e9 f7       	brne	.-6      	; 0x186a <__DATA_REGION_LENGTH__+0x6a>
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	88 e4       	ldi	r24, 0x48	; 72
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	80 83       	st	Z, r24
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	0a c0       	rjmp	.+20     	; 0x1890 <__DATA_REGION_LENGTH__+0x90>
	} else {
		strcat(strbuf, "C");
    187c:	fe 01       	movw	r30, r28
    187e:	31 96       	adiw	r30, 0x01	; 1
    1880:	01 90       	ld	r0, Z+
    1882:	00 20       	and	r0, r0
    1884:	e9 f7       	brne	.-6      	; 0x1880 <__DATA_REGION_LENGTH__+0x80>
    1886:	31 97       	sbiw	r30, 0x01	; 1
    1888:	83 e4       	ldi	r24, 0x43	; 67
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	80 83       	st	Z, r24
    188e:	91 83       	std	Z+1, r25	; 0x01
	}
	strcat(strbuf, ",TRED,");
    1890:	de 01       	movw	r26, r28
    1892:	11 96       	adiw	r26, 0x01	; 1
    1894:	0d 90       	ld	r0, X+
    1896:	00 20       	and	r0, r0
    1898:	e9 f7       	brne	.-6      	; 0x1894 <__DATA_REGION_LENGTH__+0x94>
    189a:	11 97       	sbiw	r26, 0x01	; 1
    189c:	87 e0       	ldi	r24, 0x07	; 7
    189e:	ec e0       	ldi	r30, 0x0C	; 12
    18a0:	f7 e6       	ldi	r31, 0x67	; 103
    18a2:	01 90       	ld	r0, Z+
    18a4:	0d 92       	st	X+, r0
    18a6:	8a 95       	dec	r24
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <__DATA_REGION_LENGTH__+0xa2>
	if (REDTHERMWARM) {
    18aa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    18ae:	81 ff       	sbrs	r24, 1
    18b0:	0b c0       	rjmp	.+22     	; 0x18c8 <__DATA_REGION_LENGTH__+0xc8>
		strcat(strbuf, "H");
    18b2:	fe 01       	movw	r30, r28
    18b4:	31 96       	adiw	r30, 0x01	; 1
    18b6:	01 90       	ld	r0, Z+
    18b8:	00 20       	and	r0, r0
    18ba:	e9 f7       	brne	.-6      	; 0x18b6 <__DATA_REGION_LENGTH__+0xb6>
    18bc:	31 97       	sbiw	r30, 0x01	; 1
    18be:	88 e4       	ldi	r24, 0x48	; 72
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	80 83       	st	Z, r24
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	0a c0       	rjmp	.+20     	; 0x18dc <__DATA_REGION_LENGTH__+0xdc>
	} else {
		strcat(strbuf, "C");
    18c8:	fe 01       	movw	r30, r28
    18ca:	31 96       	adiw	r30, 0x01	; 1
    18cc:	01 90       	ld	r0, Z+
    18ce:	00 20       	and	r0, r0
    18d0:	e9 f7       	brne	.-6      	; 0x18cc <__DATA_REGION_LENGTH__+0xcc>
    18d2:	31 97       	sbiw	r30, 0x01	; 1
    18d4:	83 e4       	ldi	r24, 0x43	; 67
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	80 83       	st	Z, r24
    18da:	91 83       	std	Z+1, r25	; 0x01
	}
	strcat(strbuf, ",TBLU,");
    18dc:	de 01       	movw	r26, r28
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	0d 90       	ld	r0, X+
    18e2:	00 20       	and	r0, r0
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <__DATA_REGION_LENGTH__+0xe0>
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	87 e0       	ldi	r24, 0x07	; 7
    18ea:	e3 e1       	ldi	r30, 0x13	; 19
    18ec:	f7 e6       	ldi	r31, 0x67	; 103
    18ee:	01 90       	ld	r0, Z+
    18f0:	0d 92       	st	X+, r0
    18f2:	8a 95       	dec	r24
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <__DATA_REGION_LENGTH__+0xee>
	if (BLUTHERMWARM) {
    18f6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    18fa:	80 ff       	sbrs	r24, 0
    18fc:	0b c0       	rjmp	.+22     	; 0x1914 <__DATA_REGION_LENGTH__+0x114>
		strcat(strbuf, "H");
    18fe:	fe 01       	movw	r30, r28
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	01 90       	ld	r0, Z+
    1904:	00 20       	and	r0, r0
    1906:	e9 f7       	brne	.-6      	; 0x1902 <__DATA_REGION_LENGTH__+0x102>
    1908:	31 97       	sbiw	r30, 0x01	; 1
    190a:	88 e4       	ldi	r24, 0x48	; 72
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	80 83       	st	Z, r24
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	0a c0       	rjmp	.+20     	; 0x1928 <__DATA_REGION_LENGTH__+0x128>
	} else {
		strcat(strbuf, "C");
    1914:	fe 01       	movw	r30, r28
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	01 90       	ld	r0, Z+
    191a:	00 20       	and	r0, r0
    191c:	e9 f7       	brne	.-6      	; 0x1918 <__DATA_REGION_LENGTH__+0x118>
    191e:	31 97       	sbiw	r30, 0x01	; 1
    1920:	83 e4       	ldi	r24, 0x43	; 67
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	80 83       	st	Z, r24
    1926:	91 83       	std	Z+1, r25	; 0x01
	}

	strcat(strbuf,"\r");
    1928:	fe 01       	movw	r30, r28
    192a:	31 96       	adiw	r30, 0x01	; 1
    192c:	01 90       	ld	r0, Z+
    192e:	00 20       	and	r0, r0
    1930:	e9 f7       	brne	.-6      	; 0x192c <__DATA_REGION_LENGTH__+0x12c>
    1932:	31 97       	sbiw	r30, 0x01	; 1
    1934:	8d e0       	ldi	r24, 0x0D	; 13
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	80 83       	st	Z, r24
    193a:	91 83       	std	Z+1, r25	; 0x01
	start_TCB0(100);			// 100 ms ticks
    193c:	84 e6       	ldi	r24, 0x64	; 100
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 c5 09 	call	0x138a	; 0x138a <start_TCB0>
	while (!send0_buf.done) {
    1944:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <send0_buf+0x51>
    1948:	81 11       	cpse	r24, r1
    194a:	13 c0       	rjmp	.+38     	; 0x1972 <__DATA_REGION_LENGTH__+0x172>
		if (ticks_TCB0 > 10) {	// See timers.h
    194c:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <ticks_TCB0>
    1950:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <ticks_TCB0+0x1>
    1954:	0b 97       	sbiw	r24, 0x0b	; 11
    1956:	c8 f4       	brcc	.+50     	; 0x198a <__DATA_REGION_LENGTH__+0x18a>
		strcat(strbuf, "C");
	}

	strcat(strbuf,"\r");
	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    1958:	ea ec       	ldi	r30, 0xCA	; 202
    195a:	f8 e2       	ldi	r31, 0x28	; 40
    195c:	06 c0       	rjmp	.+12     	; 0x196a <__DATA_REGION_LENGTH__+0x16a>
		if (ticks_TCB0 > 10) {	// See timers.h
    195e:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <ticks_TCB0>
    1962:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <ticks_TCB0+0x1>
    1966:	0b 97       	sbiw	r24, 0x0b	; 11
    1968:	80 f4       	brcc	.+32     	; 0x198a <__DATA_REGION_LENGTH__+0x18a>
			return;
		}
		asm("nop");
    196a:	00 00       	nop
		strcat(strbuf, "C");
	}

	strcat(strbuf,"\r");
	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    196c:	80 81       	ld	r24, Z
    196e:	88 23       	and	r24, r24
    1970:	b1 f3       	breq	.-20     	; 0x195e <__DATA_REGION_LENGTH__+0x15e>
		if (ticks_TCB0 > 10) {	// See timers.h
			return;
		}
		asm("nop");
	}
	send_USART((uint8_t*) strbuf, strlen(strbuf));
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	fc 01       	movw	r30, r24
    1978:	01 90       	ld	r0, Z+
    197a:	00 20       	and	r0, r0
    197c:	e9 f7       	brne	.-6      	; 0x1978 <__DATA_REGION_LENGTH__+0x178>
    197e:	31 97       	sbiw	r30, 0x01	; 1
    1980:	bf 01       	movw	r22, r30
    1982:	68 1b       	sub	r22, r24
    1984:	79 0b       	sbc	r23, r25
    1986:	0e 94 92 0a 	call	0x1524	; 0x1524 <send_USART>
}
    198a:	ce 55       	subi	r28, 0x5E	; 94
    198c:	df 4f       	sbci	r29, 0xFF	; 255
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	cf 90       	pop	r12
    19a2:	bf 90       	pop	r11
    19a4:	af 90       	pop	r10
    19a6:	08 95       	ret

000019a8 <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    19be:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    19c2:	90 91 78 28 	lds	r25, 0x2878	; 0x802878 <recv0_buf+0x53>
    19c6:	91 35       	cpi	r25, 0x51	; 81
    19c8:	b0 f4       	brcc	.+44     	; 0x19f6 <__vector_17+0x4e>
		if ((char) c == '\r') {
    19ca:	8d 30       	cpi	r24, 0x0D	; 13
    19cc:	51 f4       	brne	.+20     	; 0x19e2 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    19ce:	e0 91 78 28 	lds	r30, 0x2878	; 0x802878 <recv0_buf+0x53>
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	eb 5d       	subi	r30, 0xDB	; 219
    19d6:	f7 4d       	sbci	r31, 0xD7	; 215
    19d8:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 93 76 28 	sts	0x2876, r24	; 0x802876 <recv0_buf+0x51>
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <__vector_17+0x4e>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    19e2:	a8 e7       	ldi	r26, 0x78	; 120
    19e4:	b8 e2       	ldi	r27, 0x28	; 40
    19e6:	ec 91       	ld	r30, X
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	9e 0f       	add	r25, r30
    19ec:	9c 93       	st	X, r25
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	eb 5d       	subi	r30, 0xDB	; 219
    19f2:	f7 4d       	sbci	r31, 0xD7	; 215
    19f4:	80 83       	st	Z, r24
		}
	}
}
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	bf 91       	pop	r27
    19fc:	af 91       	pop	r26
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	af 93       	push	r26
    1a1c:	bf 93       	push	r27
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	ef 93       	push	r30
    1a24:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
    1a28:	d8 e0       	ldi	r29, 0x08	; 8
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	8f 7d       	andi	r24, 0xDF	; 223
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    1a30:	ab ec       	ldi	r26, 0xCB	; 203
    1a32:	b8 e2       	ldi	r27, 0x28	; 40
    1a34:	ec 91       	ld	r30, X
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	8e 0f       	add	r24, r30
    1a3a:	8c 93       	st	X, r24
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	e7 58       	subi	r30, 0x87	; 135
    1a40:	f7 4d       	sbci	r31, 0xD7	; 215
    1a42:	80 81       	ld	r24, Z
    1a44:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    1a46:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <send0_buf+0x53>
    1a4a:	8c 91       	ld	r24, X
    1a4c:	98 13       	cpse	r25, r24
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <send0_buf+0x51>
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    1a58:	e0 e0       	ldi	r30, 0x00	; 0
    1a5a:	f8 e0       	ldi	r31, 0x08	; 8
    1a5c:	85 81       	ldd	r24, Z+5	; 0x05
    1a5e:	80 62       	ori	r24, 0x20	; 32
    1a60:	85 83       	std	Z+5, r24	; 0x05
	}
}
    1a62:	ff 91       	pop	r31
    1a64:	ef 91       	pop	r30
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	bf 91       	pop	r27
    1a6c:	af 91       	pop	r26
    1a6e:	9f 91       	pop	r25
    1a70:	8f 91       	pop	r24
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	0f 90       	pop	r0
    1a78:	1f 90       	pop	r1
    1a7a:	18 95       	reti

00001a7c <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1a7c:	e0 e4       	ldi	r30, 0x40	; 64
    1a7e:	f4 e0       	ldi	r31, 0x04	; 4
    1a80:	80 ef       	ldi	r24, 0xF0	; 240
    1a82:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1a84:	81 83       	std	Z+1, r24	; 0x01
    1a86:	08 95       	ret

00001a88 <__subsf3>:
    1a88:	50 58       	subi	r21, 0x80	; 128

00001a8a <__addsf3>:
    1a8a:	bb 27       	eor	r27, r27
    1a8c:	aa 27       	eor	r26, r26
    1a8e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__addsf3x>
    1a92:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__fp_round>
    1a96:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_pscA>
    1a9a:	38 f0       	brcs	.+14     	; 0x1aaa <__addsf3+0x20>
    1a9c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_pscB>
    1aa0:	20 f0       	brcs	.+8      	; 0x1aaa <__addsf3+0x20>
    1aa2:	39 f4       	brne	.+14     	; 0x1ab2 <__addsf3+0x28>
    1aa4:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <__addsf3+0x24>
    1aa8:	26 f4       	brtc	.+8      	; 0x1ab2 <__addsf3+0x28>
    1aaa:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__fp_nan>
    1aae:	0e f4       	brtc	.+2      	; 0x1ab2 <__addsf3+0x28>
    1ab0:	e0 95       	com	r30
    1ab2:	e7 fb       	bst	r30, 7
    1ab4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__fp_inf>

00001ab8 <__addsf3x>:
    1ab8:	e9 2f       	mov	r30, r25
    1aba:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_split3>
    1abe:	58 f3       	brcs	.-42     	; 0x1a96 <__addsf3+0xc>
    1ac0:	ba 17       	cp	r27, r26
    1ac2:	62 07       	cpc	r22, r18
    1ac4:	73 07       	cpc	r23, r19
    1ac6:	84 07       	cpc	r24, r20
    1ac8:	95 07       	cpc	r25, r21
    1aca:	20 f0       	brcs	.+8      	; 0x1ad4 <__addsf3x+0x1c>
    1acc:	79 f4       	brne	.+30     	; 0x1aec <__addsf3x+0x34>
    1ace:	a6 f5       	brtc	.+104    	; 0x1b38 <__addsf3x+0x80>
    1ad0:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__fp_zero>
    1ad4:	0e f4       	brtc	.+2      	; 0x1ad8 <__addsf3x+0x20>
    1ad6:	e0 95       	com	r30
    1ad8:	0b 2e       	mov	r0, r27
    1ada:	ba 2f       	mov	r27, r26
    1adc:	a0 2d       	mov	r26, r0
    1ade:	0b 01       	movw	r0, r22
    1ae0:	b9 01       	movw	r22, r18
    1ae2:	90 01       	movw	r18, r0
    1ae4:	0c 01       	movw	r0, r24
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	a0 01       	movw	r20, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	ff 27       	eor	r31, r31
    1aee:	59 1b       	sub	r21, r25
    1af0:	99 f0       	breq	.+38     	; 0x1b18 <__addsf3x+0x60>
    1af2:	59 3f       	cpi	r21, 0xF9	; 249
    1af4:	50 f4       	brcc	.+20     	; 0x1b0a <__addsf3x+0x52>
    1af6:	50 3e       	cpi	r21, 0xE0	; 224
    1af8:	68 f1       	brcs	.+90     	; 0x1b54 <__addsf3x+0x9c>
    1afa:	1a 16       	cp	r1, r26
    1afc:	f0 40       	sbci	r31, 0x00	; 0
    1afe:	a2 2f       	mov	r26, r18
    1b00:	23 2f       	mov	r18, r19
    1b02:	34 2f       	mov	r19, r20
    1b04:	44 27       	eor	r20, r20
    1b06:	58 5f       	subi	r21, 0xF8	; 248
    1b08:	f3 cf       	rjmp	.-26     	; 0x1af0 <__addsf3x+0x38>
    1b0a:	46 95       	lsr	r20
    1b0c:	37 95       	ror	r19
    1b0e:	27 95       	ror	r18
    1b10:	a7 95       	ror	r26
    1b12:	f0 40       	sbci	r31, 0x00	; 0
    1b14:	53 95       	inc	r21
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__addsf3x+0x52>
    1b18:	7e f4       	brtc	.+30     	; 0x1b38 <__addsf3x+0x80>
    1b1a:	1f 16       	cp	r1, r31
    1b1c:	ba 0b       	sbc	r27, r26
    1b1e:	62 0b       	sbc	r22, r18
    1b20:	73 0b       	sbc	r23, r19
    1b22:	84 0b       	sbc	r24, r20
    1b24:	ba f0       	brmi	.+46     	; 0x1b54 <__addsf3x+0x9c>
    1b26:	91 50       	subi	r25, 0x01	; 1
    1b28:	a1 f0       	breq	.+40     	; 0x1b52 <__addsf3x+0x9a>
    1b2a:	ff 0f       	add	r31, r31
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	66 1f       	adc	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	c2 f7       	brpl	.-16     	; 0x1b26 <__addsf3x+0x6e>
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <__addsf3x+0x9c>
    1b38:	ba 0f       	add	r27, r26
    1b3a:	62 1f       	adc	r22, r18
    1b3c:	73 1f       	adc	r23, r19
    1b3e:	84 1f       	adc	r24, r20
    1b40:	48 f4       	brcc	.+18     	; 0x1b54 <__addsf3x+0x9c>
    1b42:	87 95       	ror	r24
    1b44:	77 95       	ror	r23
    1b46:	67 95       	ror	r22
    1b48:	b7 95       	ror	r27
    1b4a:	f7 95       	ror	r31
    1b4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <__addsf3x+0x9a>
    1b50:	b0 cf       	rjmp	.-160    	; 0x1ab2 <__addsf3+0x28>
    1b52:	93 95       	inc	r25
    1b54:	88 0f       	add	r24, r24
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <__addsf3x+0xa2>
    1b58:	99 27       	eor	r25, r25
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	97 95       	ror	r25
    1b5e:	87 95       	ror	r24
    1b60:	08 95       	ret

00001b62 <__cmpsf2>:
    1b62:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__fp_cmp>
    1b66:	08 f4       	brcc	.+2      	; 0x1b6a <__cmpsf2+0x8>
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	08 95       	ret

00001b6c <__divsf3>:
    1b6c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__divsf3x>
    1b70:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__fp_round>
    1b74:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_pscB>
    1b78:	58 f0       	brcs	.+22     	; 0x1b90 <__divsf3+0x24>
    1b7a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_pscA>
    1b7e:	40 f0       	brcs	.+16     	; 0x1b90 <__divsf3+0x24>
    1b80:	29 f4       	brne	.+10     	; 0x1b8c <__divsf3+0x20>
    1b82:	5f 3f       	cpi	r21, 0xFF	; 255
    1b84:	29 f0       	breq	.+10     	; 0x1b90 <__divsf3+0x24>
    1b86:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__fp_inf>
    1b8a:	51 11       	cpse	r21, r1
    1b8c:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__fp_szero>
    1b90:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__fp_nan>

00001b94 <__divsf3x>:
    1b94:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_split3>
    1b98:	68 f3       	brcs	.-38     	; 0x1b74 <__divsf3+0x8>

00001b9a <__divsf3_pse>:
    1b9a:	99 23       	and	r25, r25
    1b9c:	b1 f3       	breq	.-20     	; 0x1b8a <__divsf3+0x1e>
    1b9e:	55 23       	and	r21, r21
    1ba0:	91 f3       	breq	.-28     	; 0x1b86 <__divsf3+0x1a>
    1ba2:	95 1b       	sub	r25, r21
    1ba4:	55 0b       	sbc	r21, r21
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	aa 27       	eor	r26, r26
    1baa:	62 17       	cp	r22, r18
    1bac:	73 07       	cpc	r23, r19
    1bae:	84 07       	cpc	r24, r20
    1bb0:	38 f0       	brcs	.+14     	; 0x1bc0 <__divsf3_pse+0x26>
    1bb2:	9f 5f       	subi	r25, 0xFF	; 255
    1bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb6:	22 0f       	add	r18, r18
    1bb8:	33 1f       	adc	r19, r19
    1bba:	44 1f       	adc	r20, r20
    1bbc:	aa 1f       	adc	r26, r26
    1bbe:	a9 f3       	breq	.-22     	; 0x1baa <__divsf3_pse+0x10>
    1bc0:	35 d0       	rcall	.+106    	; 0x1c2c <__divsf3_pse+0x92>
    1bc2:	0e 2e       	mov	r0, r30
    1bc4:	3a f0       	brmi	.+14     	; 0x1bd4 <__divsf3_pse+0x3a>
    1bc6:	e0 e8       	ldi	r30, 0x80	; 128
    1bc8:	32 d0       	rcall	.+100    	; 0x1c2e <__divsf3_pse+0x94>
    1bca:	91 50       	subi	r25, 0x01	; 1
    1bcc:	50 40       	sbci	r21, 0x00	; 0
    1bce:	e6 95       	lsr	r30
    1bd0:	00 1c       	adc	r0, r0
    1bd2:	ca f7       	brpl	.-14     	; 0x1bc6 <__divsf3_pse+0x2c>
    1bd4:	2b d0       	rcall	.+86     	; 0x1c2c <__divsf3_pse+0x92>
    1bd6:	fe 2f       	mov	r31, r30
    1bd8:	29 d0       	rcall	.+82     	; 0x1c2c <__divsf3_pse+0x92>
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	bb 1f       	adc	r27, r27
    1be2:	26 17       	cp	r18, r22
    1be4:	37 07       	cpc	r19, r23
    1be6:	48 07       	cpc	r20, r24
    1be8:	ab 07       	cpc	r26, r27
    1bea:	b0 e8       	ldi	r27, 0x80	; 128
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <__divsf3_pse+0x56>
    1bee:	bb 0b       	sbc	r27, r27
    1bf0:	80 2d       	mov	r24, r0
    1bf2:	bf 01       	movw	r22, r30
    1bf4:	ff 27       	eor	r31, r31
    1bf6:	93 58       	subi	r25, 0x83	; 131
    1bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfa:	3a f0       	brmi	.+14     	; 0x1c0a <__divsf3_pse+0x70>
    1bfc:	9e 3f       	cpi	r25, 0xFE	; 254
    1bfe:	51 05       	cpc	r21, r1
    1c00:	78 f0       	brcs	.+30     	; 0x1c20 <__divsf3_pse+0x86>
    1c02:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__fp_inf>
    1c06:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__fp_szero>
    1c0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c0c:	e4 f3       	brlt	.-8      	; 0x1c06 <__divsf3_pse+0x6c>
    1c0e:	98 3e       	cpi	r25, 0xE8	; 232
    1c10:	d4 f3       	brlt	.-12     	; 0x1c06 <__divsf3_pse+0x6c>
    1c12:	86 95       	lsr	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	b7 95       	ror	r27
    1c1a:	f7 95       	ror	r31
    1c1c:	9f 5f       	subi	r25, 0xFF	; 255
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__divsf3_pse+0x78>
    1c20:	88 0f       	add	r24, r24
    1c22:	91 1d       	adc	r25, r1
    1c24:	96 95       	lsr	r25
    1c26:	87 95       	ror	r24
    1c28:	97 f9       	bld	r25, 7
    1c2a:	08 95       	ret
    1c2c:	e1 e0       	ldi	r30, 0x01	; 1
    1c2e:	66 0f       	add	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	bb 1f       	adc	r27, r27
    1c36:	62 17       	cp	r22, r18
    1c38:	73 07       	cpc	r23, r19
    1c3a:	84 07       	cpc	r24, r20
    1c3c:	ba 07       	cpc	r27, r26
    1c3e:	20 f0       	brcs	.+8      	; 0x1c48 <__divsf3_pse+0xae>
    1c40:	62 1b       	sub	r22, r18
    1c42:	73 0b       	sbc	r23, r19
    1c44:	84 0b       	sbc	r24, r20
    1c46:	ba 0b       	sbc	r27, r26
    1c48:	ee 1f       	adc	r30, r30
    1c4a:	88 f7       	brcc	.-30     	; 0x1c2e <__divsf3_pse+0x94>
    1c4c:	e0 95       	com	r30
    1c4e:	08 95       	ret

00001c50 <__fixunssfsi>:
    1c50:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_splitA>
    1c54:	88 f0       	brcs	.+34     	; 0x1c78 <__fixunssfsi+0x28>
    1c56:	9f 57       	subi	r25, 0x7F	; 127
    1c58:	98 f0       	brcs	.+38     	; 0x1c80 <__fixunssfsi+0x30>
    1c5a:	b9 2f       	mov	r27, r25
    1c5c:	99 27       	eor	r25, r25
    1c5e:	b7 51       	subi	r27, 0x17	; 23
    1c60:	b0 f0       	brcs	.+44     	; 0x1c8e <__fixunssfsi+0x3e>
    1c62:	e1 f0       	breq	.+56     	; 0x1c9c <__fixunssfsi+0x4c>
    1c64:	66 0f       	add	r22, r22
    1c66:	77 1f       	adc	r23, r23
    1c68:	88 1f       	adc	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	1a f0       	brmi	.+6      	; 0x1c74 <__fixunssfsi+0x24>
    1c6e:	ba 95       	dec	r27
    1c70:	c9 f7       	brne	.-14     	; 0x1c64 <__fixunssfsi+0x14>
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <__fixunssfsi+0x4c>
    1c74:	b1 30       	cpi	r27, 0x01	; 1
    1c76:	91 f0       	breq	.+36     	; 0x1c9c <__fixunssfsi+0x4c>
    1c78:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fp_zero>
    1c7c:	b1 e0       	ldi	r27, 0x01	; 1
    1c7e:	08 95       	ret
    1c80:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__fp_zero>
    1c84:	67 2f       	mov	r22, r23
    1c86:	78 2f       	mov	r23, r24
    1c88:	88 27       	eor	r24, r24
    1c8a:	b8 5f       	subi	r27, 0xF8	; 248
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <__fixunssfsi+0x4c>
    1c8e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c90:	cc f3       	brlt	.-14     	; 0x1c84 <__fixunssfsi+0x34>
    1c92:	86 95       	lsr	r24
    1c94:	77 95       	ror	r23
    1c96:	67 95       	ror	r22
    1c98:	b3 95       	inc	r27
    1c9a:	d9 f7       	brne	.-10     	; 0x1c92 <__fixunssfsi+0x42>
    1c9c:	3e f4       	brtc	.+14     	; 0x1cac <__fixunssfsi+0x5c>
    1c9e:	90 95       	com	r25
    1ca0:	80 95       	com	r24
    1ca2:	70 95       	com	r23
    1ca4:	61 95       	neg	r22
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	08 95       	ret

00001cae <__floatunsisf>:
    1cae:	e8 94       	clt
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <__floatsisf+0x12>

00001cb2 <__floatsisf>:
    1cb2:	97 fb       	bst	r25, 7
    1cb4:	3e f4       	brtc	.+14     	; 0x1cc4 <__floatsisf+0x12>
    1cb6:	90 95       	com	r25
    1cb8:	80 95       	com	r24
    1cba:	70 95       	com	r23
    1cbc:	61 95       	neg	r22
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	99 23       	and	r25, r25
    1cc6:	a9 f0       	breq	.+42     	; 0x1cf2 <__floatsisf+0x40>
    1cc8:	f9 2f       	mov	r31, r25
    1cca:	96 e9       	ldi	r25, 0x96	; 150
    1ccc:	bb 27       	eor	r27, r27
    1cce:	93 95       	inc	r25
    1cd0:	f6 95       	lsr	r31
    1cd2:	87 95       	ror	r24
    1cd4:	77 95       	ror	r23
    1cd6:	67 95       	ror	r22
    1cd8:	b7 95       	ror	r27
    1cda:	f1 11       	cpse	r31, r1
    1cdc:	f8 cf       	rjmp	.-16     	; 0x1cce <__floatsisf+0x1c>
    1cde:	fa f4       	brpl	.+62     	; 0x1d1e <__floatsisf+0x6c>
    1ce0:	bb 0f       	add	r27, r27
    1ce2:	11 f4       	brne	.+4      	; 0x1ce8 <__floatsisf+0x36>
    1ce4:	60 ff       	sbrs	r22, 0
    1ce6:	1b c0       	rjmp	.+54     	; 0x1d1e <__floatsisf+0x6c>
    1ce8:	6f 5f       	subi	r22, 0xFF	; 255
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	8f 4f       	sbci	r24, 0xFF	; 255
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	16 c0       	rjmp	.+44     	; 0x1d1e <__floatsisf+0x6c>
    1cf2:	88 23       	and	r24, r24
    1cf4:	11 f0       	breq	.+4      	; 0x1cfa <__floatsisf+0x48>
    1cf6:	96 e9       	ldi	r25, 0x96	; 150
    1cf8:	11 c0       	rjmp	.+34     	; 0x1d1c <__floatsisf+0x6a>
    1cfa:	77 23       	and	r23, r23
    1cfc:	21 f0       	breq	.+8      	; 0x1d06 <__floatsisf+0x54>
    1cfe:	9e e8       	ldi	r25, 0x8E	; 142
    1d00:	87 2f       	mov	r24, r23
    1d02:	76 2f       	mov	r23, r22
    1d04:	05 c0       	rjmp	.+10     	; 0x1d10 <__floatsisf+0x5e>
    1d06:	66 23       	and	r22, r22
    1d08:	71 f0       	breq	.+28     	; 0x1d26 <__floatsisf+0x74>
    1d0a:	96 e8       	ldi	r25, 0x86	; 134
    1d0c:	86 2f       	mov	r24, r22
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	2a f0       	brmi	.+10     	; 0x1d1e <__floatsisf+0x6c>
    1d14:	9a 95       	dec	r25
    1d16:	66 0f       	add	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	da f7       	brpl	.-10     	; 0x1d14 <__floatsisf+0x62>
    1d1e:	88 0f       	add	r24, r24
    1d20:	96 95       	lsr	r25
    1d22:	87 95       	ror	r24
    1d24:	97 f9       	bld	r25, 7
    1d26:	08 95       	ret

00001d28 <__fp_cmp>:
    1d28:	99 0f       	add	r25, r25
    1d2a:	00 08       	sbc	r0, r0
    1d2c:	55 0f       	add	r21, r21
    1d2e:	aa 0b       	sbc	r26, r26
    1d30:	e0 e8       	ldi	r30, 0x80	; 128
    1d32:	fe ef       	ldi	r31, 0xFE	; 254
    1d34:	16 16       	cp	r1, r22
    1d36:	17 06       	cpc	r1, r23
    1d38:	e8 07       	cpc	r30, r24
    1d3a:	f9 07       	cpc	r31, r25
    1d3c:	c0 f0       	brcs	.+48     	; 0x1d6e <__fp_cmp+0x46>
    1d3e:	12 16       	cp	r1, r18
    1d40:	13 06       	cpc	r1, r19
    1d42:	e4 07       	cpc	r30, r20
    1d44:	f5 07       	cpc	r31, r21
    1d46:	98 f0       	brcs	.+38     	; 0x1d6e <__fp_cmp+0x46>
    1d48:	62 1b       	sub	r22, r18
    1d4a:	73 0b       	sbc	r23, r19
    1d4c:	84 0b       	sbc	r24, r20
    1d4e:	95 0b       	sbc	r25, r21
    1d50:	39 f4       	brne	.+14     	; 0x1d60 <__fp_cmp+0x38>
    1d52:	0a 26       	eor	r0, r26
    1d54:	61 f0       	breq	.+24     	; 0x1d6e <__fp_cmp+0x46>
    1d56:	23 2b       	or	r18, r19
    1d58:	24 2b       	or	r18, r20
    1d5a:	25 2b       	or	r18, r21
    1d5c:	21 f4       	brne	.+8      	; 0x1d66 <__fp_cmp+0x3e>
    1d5e:	08 95       	ret
    1d60:	0a 26       	eor	r0, r26
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <__fp_cmp+0x3e>
    1d64:	a1 40       	sbci	r26, 0x01	; 1
    1d66:	a6 95       	lsr	r26
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	81 1d       	adc	r24, r1
    1d6c:	81 1d       	adc	r24, r1
    1d6e:	08 95       	ret

00001d70 <__fp_inf>:
    1d70:	97 f9       	bld	r25, 7
    1d72:	9f 67       	ori	r25, 0x7F	; 127
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	08 95       	ret

00001d7c <__fp_nan>:
    1d7c:	9f ef       	ldi	r25, 0xFF	; 255
    1d7e:	80 ec       	ldi	r24, 0xC0	; 192
    1d80:	08 95       	ret

00001d82 <__fp_pscA>:
    1d82:	00 24       	eor	r0, r0
    1d84:	0a 94       	dec	r0
    1d86:	16 16       	cp	r1, r22
    1d88:	17 06       	cpc	r1, r23
    1d8a:	18 06       	cpc	r1, r24
    1d8c:	09 06       	cpc	r0, r25
    1d8e:	08 95       	ret

00001d90 <__fp_pscB>:
    1d90:	00 24       	eor	r0, r0
    1d92:	0a 94       	dec	r0
    1d94:	12 16       	cp	r1, r18
    1d96:	13 06       	cpc	r1, r19
    1d98:	14 06       	cpc	r1, r20
    1d9a:	05 06       	cpc	r0, r21
    1d9c:	08 95       	ret

00001d9e <__fp_round>:
    1d9e:	09 2e       	mov	r0, r25
    1da0:	03 94       	inc	r0
    1da2:	00 0c       	add	r0, r0
    1da4:	11 f4       	brne	.+4      	; 0x1daa <__fp_round+0xc>
    1da6:	88 23       	and	r24, r24
    1da8:	52 f0       	brmi	.+20     	; 0x1dbe <__fp_round+0x20>
    1daa:	bb 0f       	add	r27, r27
    1dac:	40 f4       	brcc	.+16     	; 0x1dbe <__fp_round+0x20>
    1dae:	bf 2b       	or	r27, r31
    1db0:	11 f4       	brne	.+4      	; 0x1db6 <__fp_round+0x18>
    1db2:	60 ff       	sbrs	r22, 0
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <__fp_round+0x20>
    1db6:	6f 5f       	subi	r22, 0xFF	; 255
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	8f 4f       	sbci	r24, 0xFF	; 255
    1dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbe:	08 95       	ret

00001dc0 <__fp_split3>:
    1dc0:	57 fd       	sbrc	r21, 7
    1dc2:	90 58       	subi	r25, 0x80	; 128
    1dc4:	44 0f       	add	r20, r20
    1dc6:	55 1f       	adc	r21, r21
    1dc8:	59 f0       	breq	.+22     	; 0x1de0 <__fp_splitA+0x10>
    1dca:	5f 3f       	cpi	r21, 0xFF	; 255
    1dcc:	71 f0       	breq	.+28     	; 0x1dea <__fp_splitA+0x1a>
    1dce:	47 95       	ror	r20

00001dd0 <__fp_splitA>:
    1dd0:	88 0f       	add	r24, r24
    1dd2:	97 fb       	bst	r25, 7
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	61 f0       	breq	.+24     	; 0x1df0 <__fp_splitA+0x20>
    1dd8:	9f 3f       	cpi	r25, 0xFF	; 255
    1dda:	79 f0       	breq	.+30     	; 0x1dfa <__fp_splitA+0x2a>
    1ddc:	87 95       	ror	r24
    1dde:	08 95       	ret
    1de0:	12 16       	cp	r1, r18
    1de2:	13 06       	cpc	r1, r19
    1de4:	14 06       	cpc	r1, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	f2 cf       	rjmp	.-28     	; 0x1dce <__fp_split3+0xe>
    1dea:	46 95       	lsr	r20
    1dec:	f1 df       	rcall	.-30     	; 0x1dd0 <__fp_splitA>
    1dee:	08 c0       	rjmp	.+16     	; 0x1e00 <__fp_splitA+0x30>
    1df0:	16 16       	cp	r1, r22
    1df2:	17 06       	cpc	r1, r23
    1df4:	18 06       	cpc	r1, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	f1 cf       	rjmp	.-30     	; 0x1ddc <__fp_splitA+0xc>
    1dfa:	86 95       	lsr	r24
    1dfc:	71 05       	cpc	r23, r1
    1dfe:	61 05       	cpc	r22, r1
    1e00:	08 94       	sec
    1e02:	08 95       	ret

00001e04 <__fp_zero>:
    1e04:	e8 94       	clt

00001e06 <__fp_szero>:
    1e06:	bb 27       	eor	r27, r27
    1e08:	66 27       	eor	r22, r22
    1e0a:	77 27       	eor	r23, r23
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	97 f9       	bld	r25, 7
    1e10:	08 95       	ret

00001e12 <__mulsf3>:
    1e12:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsf3x>
    1e16:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__fp_round>
    1e1a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_pscA>
    1e1e:	38 f0       	brcs	.+14     	; 0x1e2e <__mulsf3+0x1c>
    1e20:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__fp_pscB>
    1e24:	20 f0       	brcs	.+8      	; 0x1e2e <__mulsf3+0x1c>
    1e26:	95 23       	and	r25, r21
    1e28:	11 f0       	breq	.+4      	; 0x1e2e <__mulsf3+0x1c>
    1e2a:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__fp_inf>
    1e2e:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__fp_nan>
    1e32:	11 24       	eor	r1, r1
    1e34:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__fp_szero>

00001e38 <__mulsf3x>:
    1e38:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__fp_split3>
    1e3c:	70 f3       	brcs	.-36     	; 0x1e1a <__mulsf3+0x8>

00001e3e <__mulsf3_pse>:
    1e3e:	95 9f       	mul	r25, r21
    1e40:	c1 f3       	breq	.-16     	; 0x1e32 <__mulsf3+0x20>
    1e42:	95 0f       	add	r25, r21
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	55 1f       	adc	r21, r21
    1e48:	62 9f       	mul	r22, r18
    1e4a:	f0 01       	movw	r30, r0
    1e4c:	72 9f       	mul	r23, r18
    1e4e:	bb 27       	eor	r27, r27
    1e50:	f0 0d       	add	r31, r0
    1e52:	b1 1d       	adc	r27, r1
    1e54:	63 9f       	mul	r22, r19
    1e56:	aa 27       	eor	r26, r26
    1e58:	f0 0d       	add	r31, r0
    1e5a:	b1 1d       	adc	r27, r1
    1e5c:	aa 1f       	adc	r26, r26
    1e5e:	64 9f       	mul	r22, r20
    1e60:	66 27       	eor	r22, r22
    1e62:	b0 0d       	add	r27, r0
    1e64:	a1 1d       	adc	r26, r1
    1e66:	66 1f       	adc	r22, r22
    1e68:	82 9f       	mul	r24, r18
    1e6a:	22 27       	eor	r18, r18
    1e6c:	b0 0d       	add	r27, r0
    1e6e:	a1 1d       	adc	r26, r1
    1e70:	62 1f       	adc	r22, r18
    1e72:	73 9f       	mul	r23, r19
    1e74:	b0 0d       	add	r27, r0
    1e76:	a1 1d       	adc	r26, r1
    1e78:	62 1f       	adc	r22, r18
    1e7a:	83 9f       	mul	r24, r19
    1e7c:	a0 0d       	add	r26, r0
    1e7e:	61 1d       	adc	r22, r1
    1e80:	22 1f       	adc	r18, r18
    1e82:	74 9f       	mul	r23, r20
    1e84:	33 27       	eor	r19, r19
    1e86:	a0 0d       	add	r26, r0
    1e88:	61 1d       	adc	r22, r1
    1e8a:	23 1f       	adc	r18, r19
    1e8c:	84 9f       	mul	r24, r20
    1e8e:	60 0d       	add	r22, r0
    1e90:	21 1d       	adc	r18, r1
    1e92:	82 2f       	mov	r24, r18
    1e94:	76 2f       	mov	r23, r22
    1e96:	6a 2f       	mov	r22, r26
    1e98:	11 24       	eor	r1, r1
    1e9a:	9f 57       	subi	r25, 0x7F	; 127
    1e9c:	50 40       	sbci	r21, 0x00	; 0
    1e9e:	9a f0       	brmi	.+38     	; 0x1ec6 <__mulsf3_pse+0x88>
    1ea0:	f1 f0       	breq	.+60     	; 0x1ede <__mulsf3_pse+0xa0>
    1ea2:	88 23       	and	r24, r24
    1ea4:	4a f0       	brmi	.+18     	; 0x1eb8 <__mulsf3_pse+0x7a>
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	bb 1f       	adc	r27, r27
    1eac:	66 1f       	adc	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	91 50       	subi	r25, 0x01	; 1
    1eb4:	50 40       	sbci	r21, 0x00	; 0
    1eb6:	a9 f7       	brne	.-22     	; 0x1ea2 <__mulsf3_pse+0x64>
    1eb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1eba:	51 05       	cpc	r21, r1
    1ebc:	80 f0       	brcs	.+32     	; 0x1ede <__mulsf3_pse+0xa0>
    1ebe:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__fp_inf>
    1ec2:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__fp_szero>
    1ec6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec8:	e4 f3       	brlt	.-8      	; 0x1ec2 <__mulsf3_pse+0x84>
    1eca:	98 3e       	cpi	r25, 0xE8	; 232
    1ecc:	d4 f3       	brlt	.-12     	; 0x1ec2 <__mulsf3_pse+0x84>
    1ece:	86 95       	lsr	r24
    1ed0:	77 95       	ror	r23
    1ed2:	67 95       	ror	r22
    1ed4:	b7 95       	ror	r27
    1ed6:	f7 95       	ror	r31
    1ed8:	e7 95       	ror	r30
    1eda:	9f 5f       	subi	r25, 0xFF	; 255
    1edc:	c1 f7       	brne	.-16     	; 0x1ece <__mulsf3_pse+0x90>
    1ede:	fe 2b       	or	r31, r30
    1ee0:	88 0f       	add	r24, r24
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	96 95       	lsr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	97 f9       	bld	r25, 7
    1eea:	08 95       	ret

00001eec <__tablejump2__>:
    1eec:	ee 0f       	add	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	05 90       	lpm	r0, Z+
    1ef2:	f4 91       	lpm	r31, Z
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	09 94       	ijmp

00001ef8 <strcat>:
    1ef8:	fb 01       	movw	r30, r22
    1efa:	dc 01       	movw	r26, r24
    1efc:	0d 90       	ld	r0, X+
    1efe:	00 20       	and	r0, r0
    1f00:	e9 f7       	brne	.-6      	; 0x1efc <strcat+0x4>
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	01 90       	ld	r0, Z+
    1f06:	0d 92       	st	X+, r0
    1f08:	00 20       	and	r0, r0
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <strcat+0xc>
    1f0c:	08 95       	ret

00001f0e <strcpy>:
    1f0e:	fb 01       	movw	r30, r22
    1f10:	dc 01       	movw	r26, r24
    1f12:	01 90       	ld	r0, Z+
    1f14:	0d 92       	st	X+, r0
    1f16:	00 20       	and	r0, r0
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <strcpy+0x4>
    1f1a:	08 95       	ret

00001f1c <sprintf>:
    1f1c:	ae e0       	ldi	r26, 0x0E	; 14
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e9       	ldi	r30, 0x94	; 148
    1f22:	ff e0       	ldi	r31, 0x0F	; 15
    1f24:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__prologue_saves__+0x1c>
    1f28:	0d 89       	ldd	r16, Y+21	; 0x15
    1f2a:	1e 89       	ldd	r17, Y+22	; 0x16
    1f2c:	86 e0       	ldi	r24, 0x06	; 6
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
    1f30:	09 83       	std	Y+1, r16	; 0x01
    1f32:	1a 83       	std	Y+2, r17	; 0x02
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
    1f36:	9f e7       	ldi	r25, 0x7F	; 127
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	47 5e       	subi	r20, 0xE7	; 231
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	6f 89       	ldd	r22, Y+23	; 0x17
    1f44:	78 8d       	ldd	r23, Y+24	; 0x18
    1f46:	ce 01       	movw	r24, r28
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vfprintf>
    1f4e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f50:	f8 85       	ldd	r31, Y+8	; 0x08
    1f52:	e0 0f       	add	r30, r16
    1f54:	f1 1f       	adc	r31, r17
    1f56:	10 82       	st	Z, r1
    1f58:	2e 96       	adiw	r28, 0x0e	; 14
    1f5a:	e4 e0       	ldi	r30, 0x04	; 4
    1f5c:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x1c>

00001f60 <vfprintf>:
    1f60:	ab e0       	ldi	r26, 0x0B	; 11
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 eb       	ldi	r30, 0xB6	; 182
    1f66:	ff e0       	ldi	r31, 0x0F	; 15
    1f68:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__prologue_saves__>
    1f6c:	6c 01       	movw	r12, r24
    1f6e:	7b 01       	movw	r14, r22
    1f70:	8a 01       	movw	r16, r20
    1f72:	fc 01       	movw	r30, r24
    1f74:	16 82       	std	Z+6, r1	; 0x06
    1f76:	17 82       	std	Z+7, r1	; 0x07
    1f78:	83 81       	ldd	r24, Z+3	; 0x03
    1f7a:	81 ff       	sbrs	r24, 1
    1f7c:	cc c1       	rjmp	.+920    	; 0x2316 <vfprintf+0x3b6>
    1f7e:	ce 01       	movw	r24, r28
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	3c 01       	movw	r6, r24
    1f84:	f6 01       	movw	r30, r12
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	f7 01       	movw	r30, r14
    1f8a:	93 fd       	sbrc	r25, 3
    1f8c:	85 91       	lpm	r24, Z+
    1f8e:	93 ff       	sbrs	r25, 3
    1f90:	81 91       	ld	r24, Z+
    1f92:	7f 01       	movw	r14, r30
    1f94:	88 23       	and	r24, r24
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <vfprintf+0x3a>
    1f98:	ba c1       	rjmp	.+884    	; 0x230e <vfprintf+0x3ae>
    1f9a:	85 32       	cpi	r24, 0x25	; 37
    1f9c:	39 f4       	brne	.+14     	; 0x1fac <vfprintf+0x4c>
    1f9e:	93 fd       	sbrc	r25, 3
    1fa0:	85 91       	lpm	r24, Z+
    1fa2:	93 ff       	sbrs	r25, 3
    1fa4:	81 91       	ld	r24, Z+
    1fa6:	7f 01       	movw	r14, r30
    1fa8:	85 32       	cpi	r24, 0x25	; 37
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <vfprintf+0x56>
    1fac:	b6 01       	movw	r22, r12
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    1fb4:	e7 cf       	rjmp	.-50     	; 0x1f84 <vfprintf+0x24>
    1fb6:	91 2c       	mov	r9, r1
    1fb8:	21 2c       	mov	r2, r1
    1fba:	31 2c       	mov	r3, r1
    1fbc:	ff e1       	ldi	r31, 0x1F	; 31
    1fbe:	f3 15       	cp	r31, r3
    1fc0:	d8 f0       	brcs	.+54     	; 0x1ff8 <vfprintf+0x98>
    1fc2:	8b 32       	cpi	r24, 0x2B	; 43
    1fc4:	79 f0       	breq	.+30     	; 0x1fe4 <vfprintf+0x84>
    1fc6:	38 f4       	brcc	.+14     	; 0x1fd6 <vfprintf+0x76>
    1fc8:	80 32       	cpi	r24, 0x20	; 32
    1fca:	79 f0       	breq	.+30     	; 0x1fea <vfprintf+0x8a>
    1fcc:	83 32       	cpi	r24, 0x23	; 35
    1fce:	a1 f4       	brne	.+40     	; 0x1ff8 <vfprintf+0x98>
    1fd0:	23 2d       	mov	r18, r3
    1fd2:	20 61       	ori	r18, 0x10	; 16
    1fd4:	1d c0       	rjmp	.+58     	; 0x2010 <vfprintf+0xb0>
    1fd6:	8d 32       	cpi	r24, 0x2D	; 45
    1fd8:	61 f0       	breq	.+24     	; 0x1ff2 <vfprintf+0x92>
    1fda:	80 33       	cpi	r24, 0x30	; 48
    1fdc:	69 f4       	brne	.+26     	; 0x1ff8 <vfprintf+0x98>
    1fde:	23 2d       	mov	r18, r3
    1fe0:	21 60       	ori	r18, 0x01	; 1
    1fe2:	16 c0       	rjmp	.+44     	; 0x2010 <vfprintf+0xb0>
    1fe4:	83 2d       	mov	r24, r3
    1fe6:	82 60       	ori	r24, 0x02	; 2
    1fe8:	38 2e       	mov	r3, r24
    1fea:	e3 2d       	mov	r30, r3
    1fec:	e4 60       	ori	r30, 0x04	; 4
    1fee:	3e 2e       	mov	r3, r30
    1ff0:	2a c0       	rjmp	.+84     	; 0x2046 <vfprintf+0xe6>
    1ff2:	f3 2d       	mov	r31, r3
    1ff4:	f8 60       	ori	r31, 0x08	; 8
    1ff6:	1d c0       	rjmp	.+58     	; 0x2032 <vfprintf+0xd2>
    1ff8:	37 fc       	sbrc	r3, 7
    1ffa:	2d c0       	rjmp	.+90     	; 0x2056 <vfprintf+0xf6>
    1ffc:	20 ed       	ldi	r18, 0xD0	; 208
    1ffe:	28 0f       	add	r18, r24
    2000:	2a 30       	cpi	r18, 0x0A	; 10
    2002:	40 f0       	brcs	.+16     	; 0x2014 <vfprintf+0xb4>
    2004:	8e 32       	cpi	r24, 0x2E	; 46
    2006:	b9 f4       	brne	.+46     	; 0x2036 <vfprintf+0xd6>
    2008:	36 fc       	sbrc	r3, 6
    200a:	81 c1       	rjmp	.+770    	; 0x230e <vfprintf+0x3ae>
    200c:	23 2d       	mov	r18, r3
    200e:	20 64       	ori	r18, 0x40	; 64
    2010:	32 2e       	mov	r3, r18
    2012:	19 c0       	rjmp	.+50     	; 0x2046 <vfprintf+0xe6>
    2014:	36 fe       	sbrs	r3, 6
    2016:	06 c0       	rjmp	.+12     	; 0x2024 <vfprintf+0xc4>
    2018:	8a e0       	ldi	r24, 0x0A	; 10
    201a:	98 9e       	mul	r9, r24
    201c:	20 0d       	add	r18, r0
    201e:	11 24       	eor	r1, r1
    2020:	92 2e       	mov	r9, r18
    2022:	11 c0       	rjmp	.+34     	; 0x2046 <vfprintf+0xe6>
    2024:	ea e0       	ldi	r30, 0x0A	; 10
    2026:	2e 9e       	mul	r2, r30
    2028:	20 0d       	add	r18, r0
    202a:	11 24       	eor	r1, r1
    202c:	22 2e       	mov	r2, r18
    202e:	f3 2d       	mov	r31, r3
    2030:	f0 62       	ori	r31, 0x20	; 32
    2032:	3f 2e       	mov	r3, r31
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <vfprintf+0xe6>
    2036:	8c 36       	cpi	r24, 0x6C	; 108
    2038:	21 f4       	brne	.+8      	; 0x2042 <vfprintf+0xe2>
    203a:	83 2d       	mov	r24, r3
    203c:	80 68       	ori	r24, 0x80	; 128
    203e:	38 2e       	mov	r3, r24
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <vfprintf+0xe6>
    2042:	88 36       	cpi	r24, 0x68	; 104
    2044:	41 f4       	brne	.+16     	; 0x2056 <vfprintf+0xf6>
    2046:	f7 01       	movw	r30, r14
    2048:	93 fd       	sbrc	r25, 3
    204a:	85 91       	lpm	r24, Z+
    204c:	93 ff       	sbrs	r25, 3
    204e:	81 91       	ld	r24, Z+
    2050:	7f 01       	movw	r14, r30
    2052:	81 11       	cpse	r24, r1
    2054:	b3 cf       	rjmp	.-154    	; 0x1fbc <vfprintf+0x5c>
    2056:	98 2f       	mov	r25, r24
    2058:	9f 7d       	andi	r25, 0xDF	; 223
    205a:	95 54       	subi	r25, 0x45	; 69
    205c:	93 30       	cpi	r25, 0x03	; 3
    205e:	28 f4       	brcc	.+10     	; 0x206a <vfprintf+0x10a>
    2060:	0c 5f       	subi	r16, 0xFC	; 252
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	9f e3       	ldi	r25, 0x3F	; 63
    2066:	99 83       	std	Y+1, r25	; 0x01
    2068:	0d c0       	rjmp	.+26     	; 0x2084 <vfprintf+0x124>
    206a:	83 36       	cpi	r24, 0x63	; 99
    206c:	31 f0       	breq	.+12     	; 0x207a <vfprintf+0x11a>
    206e:	83 37       	cpi	r24, 0x73	; 115
    2070:	71 f0       	breq	.+28     	; 0x208e <vfprintf+0x12e>
    2072:	83 35       	cpi	r24, 0x53	; 83
    2074:	09 f0       	breq	.+2      	; 0x2078 <vfprintf+0x118>
    2076:	59 c0       	rjmp	.+178    	; 0x212a <vfprintf+0x1ca>
    2078:	21 c0       	rjmp	.+66     	; 0x20bc <vfprintf+0x15c>
    207a:	f8 01       	movw	r30, r16
    207c:	80 81       	ld	r24, Z
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	0e 5f       	subi	r16, 0xFE	; 254
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	88 24       	eor	r8, r8
    2086:	83 94       	inc	r8
    2088:	91 2c       	mov	r9, r1
    208a:	53 01       	movw	r10, r6
    208c:	13 c0       	rjmp	.+38     	; 0x20b4 <vfprintf+0x154>
    208e:	28 01       	movw	r4, r16
    2090:	f2 e0       	ldi	r31, 0x02	; 2
    2092:	4f 0e       	add	r4, r31
    2094:	51 1c       	adc	r5, r1
    2096:	f8 01       	movw	r30, r16
    2098:	a0 80       	ld	r10, Z
    209a:	b1 80       	ldd	r11, Z+1	; 0x01
    209c:	36 fe       	sbrs	r3, 6
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <vfprintf+0x146>
    20a0:	69 2d       	mov	r22, r9
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <vfprintf+0x14a>
    20a6:	6f ef       	ldi	r22, 0xFF	; 255
    20a8:	7f ef       	ldi	r23, 0xFF	; 255
    20aa:	c5 01       	movw	r24, r10
    20ac:	0e 94 9c 11 	call	0x2338	; 0x2338 <strnlen>
    20b0:	4c 01       	movw	r8, r24
    20b2:	82 01       	movw	r16, r4
    20b4:	f3 2d       	mov	r31, r3
    20b6:	ff 77       	andi	r31, 0x7F	; 127
    20b8:	3f 2e       	mov	r3, r31
    20ba:	16 c0       	rjmp	.+44     	; 0x20e8 <vfprintf+0x188>
    20bc:	28 01       	movw	r4, r16
    20be:	22 e0       	ldi	r18, 0x02	; 2
    20c0:	42 0e       	add	r4, r18
    20c2:	51 1c       	adc	r5, r1
    20c4:	f8 01       	movw	r30, r16
    20c6:	a0 80       	ld	r10, Z
    20c8:	b1 80       	ldd	r11, Z+1	; 0x01
    20ca:	36 fe       	sbrs	r3, 6
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <vfprintf+0x174>
    20ce:	69 2d       	mov	r22, r9
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x178>
    20d4:	6f ef       	ldi	r22, 0xFF	; 255
    20d6:	7f ef       	ldi	r23, 0xFF	; 255
    20d8:	c5 01       	movw	r24, r10
    20da:	0e 94 91 11 	call	0x2322	; 0x2322 <strnlen_P>
    20de:	4c 01       	movw	r8, r24
    20e0:	f3 2d       	mov	r31, r3
    20e2:	f0 68       	ori	r31, 0x80	; 128
    20e4:	3f 2e       	mov	r3, r31
    20e6:	82 01       	movw	r16, r4
    20e8:	33 fc       	sbrc	r3, 3
    20ea:	1b c0       	rjmp	.+54     	; 0x2122 <vfprintf+0x1c2>
    20ec:	82 2d       	mov	r24, r2
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	88 16       	cp	r8, r24
    20f2:	99 06       	cpc	r9, r25
    20f4:	b0 f4       	brcc	.+44     	; 0x2122 <vfprintf+0x1c2>
    20f6:	b6 01       	movw	r22, r12
    20f8:	80 e2       	ldi	r24, 0x20	; 32
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    2100:	2a 94       	dec	r2
    2102:	f4 cf       	rjmp	.-24     	; 0x20ec <vfprintf+0x18c>
    2104:	f5 01       	movw	r30, r10
    2106:	37 fc       	sbrc	r3, 7
    2108:	85 91       	lpm	r24, Z+
    210a:	37 fe       	sbrs	r3, 7
    210c:	81 91       	ld	r24, Z+
    210e:	5f 01       	movw	r10, r30
    2110:	b6 01       	movw	r22, r12
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    2118:	21 10       	cpse	r2, r1
    211a:	2a 94       	dec	r2
    211c:	21 e0       	ldi	r18, 0x01	; 1
    211e:	82 1a       	sub	r8, r18
    2120:	91 08       	sbc	r9, r1
    2122:	81 14       	cp	r8, r1
    2124:	91 04       	cpc	r9, r1
    2126:	71 f7       	brne	.-36     	; 0x2104 <vfprintf+0x1a4>
    2128:	e8 c0       	rjmp	.+464    	; 0x22fa <vfprintf+0x39a>
    212a:	84 36       	cpi	r24, 0x64	; 100
    212c:	11 f0       	breq	.+4      	; 0x2132 <vfprintf+0x1d2>
    212e:	89 36       	cpi	r24, 0x69	; 105
    2130:	41 f5       	brne	.+80     	; 0x2182 <vfprintf+0x222>
    2132:	f8 01       	movw	r30, r16
    2134:	37 fe       	sbrs	r3, 7
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <vfprintf+0x1e6>
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	0c 5f       	subi	r16, 0xFC	; 252
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <vfprintf+0x1f6>
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	07 2e       	mov	r0, r23
    214c:	00 0c       	add	r0, r0
    214e:	88 0b       	sbc	r24, r24
    2150:	99 0b       	sbc	r25, r25
    2152:	0e 5f       	subi	r16, 0xFE	; 254
    2154:	1f 4f       	sbci	r17, 0xFF	; 255
    2156:	f3 2d       	mov	r31, r3
    2158:	ff 76       	andi	r31, 0x6F	; 111
    215a:	3f 2e       	mov	r3, r31
    215c:	97 ff       	sbrs	r25, 7
    215e:	09 c0       	rjmp	.+18     	; 0x2172 <vfprintf+0x212>
    2160:	90 95       	com	r25
    2162:	80 95       	com	r24
    2164:	70 95       	com	r23
    2166:	61 95       	neg	r22
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	8f 4f       	sbci	r24, 0xFF	; 255
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	f0 68       	ori	r31, 0x80	; 128
    2170:	3f 2e       	mov	r3, r31
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	a3 01       	movw	r20, r6
    2178:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__ultoa_invert>
    217c:	88 2e       	mov	r8, r24
    217e:	86 18       	sub	r8, r6
    2180:	45 c0       	rjmp	.+138    	; 0x220c <vfprintf+0x2ac>
    2182:	85 37       	cpi	r24, 0x75	; 117
    2184:	31 f4       	brne	.+12     	; 0x2192 <vfprintf+0x232>
    2186:	23 2d       	mov	r18, r3
    2188:	2f 7e       	andi	r18, 0xEF	; 239
    218a:	b2 2e       	mov	r11, r18
    218c:	2a e0       	ldi	r18, 0x0A	; 10
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	25 c0       	rjmp	.+74     	; 0x21dc <vfprintf+0x27c>
    2192:	93 2d       	mov	r25, r3
    2194:	99 7f       	andi	r25, 0xF9	; 249
    2196:	b9 2e       	mov	r11, r25
    2198:	8f 36       	cpi	r24, 0x6F	; 111
    219a:	c1 f0       	breq	.+48     	; 0x21cc <vfprintf+0x26c>
    219c:	18 f4       	brcc	.+6      	; 0x21a4 <vfprintf+0x244>
    219e:	88 35       	cpi	r24, 0x58	; 88
    21a0:	79 f0       	breq	.+30     	; 0x21c0 <vfprintf+0x260>
    21a2:	b5 c0       	rjmp	.+362    	; 0x230e <vfprintf+0x3ae>
    21a4:	80 37       	cpi	r24, 0x70	; 112
    21a6:	19 f0       	breq	.+6      	; 0x21ae <vfprintf+0x24e>
    21a8:	88 37       	cpi	r24, 0x78	; 120
    21aa:	21 f0       	breq	.+8      	; 0x21b4 <vfprintf+0x254>
    21ac:	b0 c0       	rjmp	.+352    	; 0x230e <vfprintf+0x3ae>
    21ae:	e9 2f       	mov	r30, r25
    21b0:	e0 61       	ori	r30, 0x10	; 16
    21b2:	be 2e       	mov	r11, r30
    21b4:	b4 fe       	sbrs	r11, 4
    21b6:	0d c0       	rjmp	.+26     	; 0x21d2 <vfprintf+0x272>
    21b8:	fb 2d       	mov	r31, r11
    21ba:	f4 60       	ori	r31, 0x04	; 4
    21bc:	bf 2e       	mov	r11, r31
    21be:	09 c0       	rjmp	.+18     	; 0x21d2 <vfprintf+0x272>
    21c0:	34 fe       	sbrs	r3, 4
    21c2:	0a c0       	rjmp	.+20     	; 0x21d8 <vfprintf+0x278>
    21c4:	29 2f       	mov	r18, r25
    21c6:	26 60       	ori	r18, 0x06	; 6
    21c8:	b2 2e       	mov	r11, r18
    21ca:	06 c0       	rjmp	.+12     	; 0x21d8 <vfprintf+0x278>
    21cc:	28 e0       	ldi	r18, 0x08	; 8
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	05 c0       	rjmp	.+10     	; 0x21dc <vfprintf+0x27c>
    21d2:	20 e1       	ldi	r18, 0x10	; 16
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <vfprintf+0x27c>
    21d8:	20 e1       	ldi	r18, 0x10	; 16
    21da:	32 e0       	ldi	r19, 0x02	; 2
    21dc:	f8 01       	movw	r30, r16
    21de:	b7 fe       	sbrs	r11, 7
    21e0:	07 c0       	rjmp	.+14     	; 0x21f0 <vfprintf+0x290>
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	0c 5f       	subi	r16, 0xFC	; 252
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	06 c0       	rjmp	.+12     	; 0x21fc <vfprintf+0x29c>
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 5f       	subi	r16, 0xFE	; 254
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	a3 01       	movw	r20, r6
    21fe:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__ultoa_invert>
    2202:	88 2e       	mov	r8, r24
    2204:	86 18       	sub	r8, r6
    2206:	fb 2d       	mov	r31, r11
    2208:	ff 77       	andi	r31, 0x7F	; 127
    220a:	3f 2e       	mov	r3, r31
    220c:	36 fe       	sbrs	r3, 6
    220e:	0d c0       	rjmp	.+26     	; 0x222a <vfprintf+0x2ca>
    2210:	23 2d       	mov	r18, r3
    2212:	2e 7f       	andi	r18, 0xFE	; 254
    2214:	a2 2e       	mov	r10, r18
    2216:	89 14       	cp	r8, r9
    2218:	58 f4       	brcc	.+22     	; 0x2230 <vfprintf+0x2d0>
    221a:	34 fe       	sbrs	r3, 4
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <vfprintf+0x2d4>
    221e:	32 fc       	sbrc	r3, 2
    2220:	09 c0       	rjmp	.+18     	; 0x2234 <vfprintf+0x2d4>
    2222:	83 2d       	mov	r24, r3
    2224:	8e 7e       	andi	r24, 0xEE	; 238
    2226:	a8 2e       	mov	r10, r24
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <vfprintf+0x2d4>
    222a:	b8 2c       	mov	r11, r8
    222c:	a3 2c       	mov	r10, r3
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <vfprintf+0x2d6>
    2230:	b8 2c       	mov	r11, r8
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <vfprintf+0x2d6>
    2234:	b9 2c       	mov	r11, r9
    2236:	a4 fe       	sbrs	r10, 4
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <vfprintf+0x2f8>
    223a:	fe 01       	movw	r30, r28
    223c:	e8 0d       	add	r30, r8
    223e:	f1 1d       	adc	r31, r1
    2240:	80 81       	ld	r24, Z
    2242:	80 33       	cpi	r24, 0x30	; 48
    2244:	21 f4       	brne	.+8      	; 0x224e <vfprintf+0x2ee>
    2246:	9a 2d       	mov	r25, r10
    2248:	99 7e       	andi	r25, 0xE9	; 233
    224a:	a9 2e       	mov	r10, r25
    224c:	09 c0       	rjmp	.+18     	; 0x2260 <vfprintf+0x300>
    224e:	a2 fe       	sbrs	r10, 2
    2250:	06 c0       	rjmp	.+12     	; 0x225e <vfprintf+0x2fe>
    2252:	b3 94       	inc	r11
    2254:	b3 94       	inc	r11
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <vfprintf+0x300>
    2258:	8a 2d       	mov	r24, r10
    225a:	86 78       	andi	r24, 0x86	; 134
    225c:	09 f0       	breq	.+2      	; 0x2260 <vfprintf+0x300>
    225e:	b3 94       	inc	r11
    2260:	a3 fc       	sbrc	r10, 3
    2262:	11 c0       	rjmp	.+34     	; 0x2286 <vfprintf+0x326>
    2264:	a0 fe       	sbrs	r10, 0
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <vfprintf+0x314>
    2268:	b2 14       	cp	r11, r2
    226a:	88 f4       	brcc	.+34     	; 0x228e <vfprintf+0x32e>
    226c:	28 0c       	add	r2, r8
    226e:	92 2c       	mov	r9, r2
    2270:	9b 18       	sub	r9, r11
    2272:	0e c0       	rjmp	.+28     	; 0x2290 <vfprintf+0x330>
    2274:	b2 14       	cp	r11, r2
    2276:	60 f4       	brcc	.+24     	; 0x2290 <vfprintf+0x330>
    2278:	b6 01       	movw	r22, r12
    227a:	80 e2       	ldi	r24, 0x20	; 32
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    2282:	b3 94       	inc	r11
    2284:	f7 cf       	rjmp	.-18     	; 0x2274 <vfprintf+0x314>
    2286:	b2 14       	cp	r11, r2
    2288:	18 f4       	brcc	.+6      	; 0x2290 <vfprintf+0x330>
    228a:	2b 18       	sub	r2, r11
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <vfprintf+0x332>
    228e:	98 2c       	mov	r9, r8
    2290:	21 2c       	mov	r2, r1
    2292:	a4 fe       	sbrs	r10, 4
    2294:	10 c0       	rjmp	.+32     	; 0x22b6 <vfprintf+0x356>
    2296:	b6 01       	movw	r22, r12
    2298:	80 e3       	ldi	r24, 0x30	; 48
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    22a0:	a2 fe       	sbrs	r10, 2
    22a2:	17 c0       	rjmp	.+46     	; 0x22d2 <vfprintf+0x372>
    22a4:	a1 fc       	sbrc	r10, 1
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <vfprintf+0x34e>
    22a8:	88 e7       	ldi	r24, 0x78	; 120
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <vfprintf+0x352>
    22ae:	88 e5       	ldi	r24, 0x58	; 88
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	b6 01       	movw	r22, r12
    22b4:	0c c0       	rjmp	.+24     	; 0x22ce <vfprintf+0x36e>
    22b6:	8a 2d       	mov	r24, r10
    22b8:	86 78       	andi	r24, 0x86	; 134
    22ba:	59 f0       	breq	.+22     	; 0x22d2 <vfprintf+0x372>
    22bc:	a1 fe       	sbrs	r10, 1
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <vfprintf+0x364>
    22c0:	8b e2       	ldi	r24, 0x2B	; 43
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <vfprintf+0x366>
    22c4:	80 e2       	ldi	r24, 0x20	; 32
    22c6:	a7 fc       	sbrc	r10, 7
    22c8:	8d e2       	ldi	r24, 0x2D	; 45
    22ca:	b6 01       	movw	r22, r12
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    22d2:	89 14       	cp	r8, r9
    22d4:	38 f4       	brcc	.+14     	; 0x22e4 <vfprintf+0x384>
    22d6:	b6 01       	movw	r22, r12
    22d8:	80 e3       	ldi	r24, 0x30	; 48
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    22e0:	9a 94       	dec	r9
    22e2:	f7 cf       	rjmp	.-18     	; 0x22d2 <vfprintf+0x372>
    22e4:	8a 94       	dec	r8
    22e6:	f3 01       	movw	r30, r6
    22e8:	e8 0d       	add	r30, r8
    22ea:	f1 1d       	adc	r31, r1
    22ec:	80 81       	ld	r24, Z
    22ee:	b6 01       	movw	r22, r12
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    22f6:	81 10       	cpse	r8, r1
    22f8:	f5 cf       	rjmp	.-22     	; 0x22e4 <vfprintf+0x384>
    22fa:	22 20       	and	r2, r2
    22fc:	09 f4       	brne	.+2      	; 0x2300 <vfprintf+0x3a0>
    22fe:	42 ce       	rjmp	.-892    	; 0x1f84 <vfprintf+0x24>
    2300:	b6 01       	movw	r22, r12
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 a7 11 	call	0x234e	; 0x234e <fputc>
    230a:	2a 94       	dec	r2
    230c:	f6 cf       	rjmp	.-20     	; 0x22fa <vfprintf+0x39a>
    230e:	f6 01       	movw	r30, r12
    2310:	86 81       	ldd	r24, Z+6	; 0x06
    2312:	97 81       	ldd	r25, Z+7	; 0x07
    2314:	02 c0       	rjmp	.+4      	; 0x231a <vfprintf+0x3ba>
    2316:	8f ef       	ldi	r24, 0xFF	; 255
    2318:	9f ef       	ldi	r25, 0xFF	; 255
    231a:	2b 96       	adiw	r28, 0x0b	; 11
    231c:	e2 e1       	ldi	r30, 0x12	; 18
    231e:	0c 94 95 12 	jmp	0x252a	; 0x252a <__epilogue_restores__>

00002322 <strnlen_P>:
    2322:	fc 01       	movw	r30, r24
    2324:	05 90       	lpm	r0, Z+
    2326:	61 50       	subi	r22, 0x01	; 1
    2328:	70 40       	sbci	r23, 0x00	; 0
    232a:	01 10       	cpse	r0, r1
    232c:	d8 f7       	brcc	.-10     	; 0x2324 <strnlen_P+0x2>
    232e:	80 95       	com	r24
    2330:	90 95       	com	r25
    2332:	8e 0f       	add	r24, r30
    2334:	9f 1f       	adc	r25, r31
    2336:	08 95       	ret

00002338 <strnlen>:
    2338:	fc 01       	movw	r30, r24
    233a:	61 50       	subi	r22, 0x01	; 1
    233c:	70 40       	sbci	r23, 0x00	; 0
    233e:	01 90       	ld	r0, Z+
    2340:	01 10       	cpse	r0, r1
    2342:	d8 f7       	brcc	.-10     	; 0x233a <strnlen+0x2>
    2344:	80 95       	com	r24
    2346:	90 95       	com	r25
    2348:	8e 0f       	add	r24, r30
    234a:	9f 1f       	adc	r25, r31
    234c:	08 95       	ret

0000234e <fputc>:
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	fb 01       	movw	r30, r22
    2358:	23 81       	ldd	r18, Z+3	; 0x03
    235a:	21 fd       	sbrc	r18, 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <fputc+0x16>
    235e:	8f ef       	ldi	r24, 0xFF	; 255
    2360:	9f ef       	ldi	r25, 0xFF	; 255
    2362:	2c c0       	rjmp	.+88     	; 0x23bc <fputc+0x6e>
    2364:	22 ff       	sbrs	r18, 2
    2366:	16 c0       	rjmp	.+44     	; 0x2394 <fputc+0x46>
    2368:	46 81       	ldd	r20, Z+6	; 0x06
    236a:	57 81       	ldd	r21, Z+7	; 0x07
    236c:	24 81       	ldd	r18, Z+4	; 0x04
    236e:	35 81       	ldd	r19, Z+5	; 0x05
    2370:	42 17       	cp	r20, r18
    2372:	53 07       	cpc	r21, r19
    2374:	44 f4       	brge	.+16     	; 0x2386 <fputc+0x38>
    2376:	a0 81       	ld	r26, Z
    2378:	b1 81       	ldd	r27, Z+1	; 0x01
    237a:	9d 01       	movw	r18, r26
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	20 83       	st	Z, r18
    2382:	31 83       	std	Z+1, r19	; 0x01
    2384:	8c 93       	st	X, r24
    2386:	26 81       	ldd	r18, Z+6	; 0x06
    2388:	37 81       	ldd	r19, Z+7	; 0x07
    238a:	2f 5f       	subi	r18, 0xFF	; 255
    238c:	3f 4f       	sbci	r19, 0xFF	; 255
    238e:	26 83       	std	Z+6, r18	; 0x06
    2390:	37 83       	std	Z+7, r19	; 0x07
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <fputc+0x6e>
    2394:	8b 01       	movw	r16, r22
    2396:	ec 01       	movw	r28, r24
    2398:	fb 01       	movw	r30, r22
    239a:	00 84       	ldd	r0, Z+8	; 0x08
    239c:	f1 85       	ldd	r31, Z+9	; 0x09
    239e:	e0 2d       	mov	r30, r0
    23a0:	09 95       	icall
    23a2:	89 2b       	or	r24, r25
    23a4:	e1 f6       	brne	.-72     	; 0x235e <fputc+0x10>
    23a6:	d8 01       	movw	r26, r16
    23a8:	16 96       	adiw	r26, 0x06	; 6
    23aa:	8d 91       	ld	r24, X+
    23ac:	9c 91       	ld	r25, X
    23ae:	17 97       	sbiw	r26, 0x07	; 7
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	16 96       	adiw	r26, 0x06	; 6
    23b4:	8d 93       	st	X+, r24
    23b6:	9c 93       	st	X, r25
    23b8:	17 97       	sbiw	r26, 0x07	; 7
    23ba:	ce 01       	movw	r24, r28
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

000023c6 <__ultoa_invert>:
    23c6:	fa 01       	movw	r30, r20
    23c8:	aa 27       	eor	r26, r26
    23ca:	28 30       	cpi	r18, 0x08	; 8
    23cc:	51 f1       	breq	.+84     	; 0x2422 <__ultoa_invert+0x5c>
    23ce:	20 31       	cpi	r18, 0x10	; 16
    23d0:	81 f1       	breq	.+96     	; 0x2432 <__ultoa_invert+0x6c>
    23d2:	e8 94       	clt
    23d4:	6f 93       	push	r22
    23d6:	6e 7f       	andi	r22, 0xFE	; 254
    23d8:	6e 5f       	subi	r22, 0xFE	; 254
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	8f 4f       	sbci	r24, 0xFF	; 255
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	af 4f       	sbci	r26, 0xFF	; 255
    23e2:	b1 e0       	ldi	r27, 0x01	; 1
    23e4:	3e d0       	rcall	.+124    	; 0x2462 <__ultoa_invert+0x9c>
    23e6:	b4 e0       	ldi	r27, 0x04	; 4
    23e8:	3c d0       	rcall	.+120    	; 0x2462 <__ultoa_invert+0x9c>
    23ea:	67 0f       	add	r22, r23
    23ec:	78 1f       	adc	r23, r24
    23ee:	89 1f       	adc	r24, r25
    23f0:	9a 1f       	adc	r25, r26
    23f2:	a1 1d       	adc	r26, r1
    23f4:	68 0f       	add	r22, r24
    23f6:	79 1f       	adc	r23, r25
    23f8:	8a 1f       	adc	r24, r26
    23fa:	91 1d       	adc	r25, r1
    23fc:	a1 1d       	adc	r26, r1
    23fe:	6a 0f       	add	r22, r26
    2400:	71 1d       	adc	r23, r1
    2402:	81 1d       	adc	r24, r1
    2404:	91 1d       	adc	r25, r1
    2406:	a1 1d       	adc	r26, r1
    2408:	20 d0       	rcall	.+64     	; 0x244a <__ultoa_invert+0x84>
    240a:	09 f4       	brne	.+2      	; 0x240e <__ultoa_invert+0x48>
    240c:	68 94       	set
    240e:	3f 91       	pop	r19
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	26 9f       	mul	r18, r22
    2414:	11 24       	eor	r1, r1
    2416:	30 19       	sub	r19, r0
    2418:	30 5d       	subi	r19, 0xD0	; 208
    241a:	31 93       	st	Z+, r19
    241c:	de f6       	brtc	.-74     	; 0x23d4 <__ultoa_invert+0xe>
    241e:	cf 01       	movw	r24, r30
    2420:	08 95       	ret
    2422:	46 2f       	mov	r20, r22
    2424:	47 70       	andi	r20, 0x07	; 7
    2426:	40 5d       	subi	r20, 0xD0	; 208
    2428:	41 93       	st	Z+, r20
    242a:	b3 e0       	ldi	r27, 0x03	; 3
    242c:	0f d0       	rcall	.+30     	; 0x244c <__ultoa_invert+0x86>
    242e:	c9 f7       	brne	.-14     	; 0x2422 <__ultoa_invert+0x5c>
    2430:	f6 cf       	rjmp	.-20     	; 0x241e <__ultoa_invert+0x58>
    2432:	46 2f       	mov	r20, r22
    2434:	4f 70       	andi	r20, 0x0F	; 15
    2436:	40 5d       	subi	r20, 0xD0	; 208
    2438:	4a 33       	cpi	r20, 0x3A	; 58
    243a:	18 f0       	brcs	.+6      	; 0x2442 <__ultoa_invert+0x7c>
    243c:	49 5d       	subi	r20, 0xD9	; 217
    243e:	31 fd       	sbrc	r19, 1
    2440:	40 52       	subi	r20, 0x20	; 32
    2442:	41 93       	st	Z+, r20
    2444:	02 d0       	rcall	.+4      	; 0x244a <__ultoa_invert+0x84>
    2446:	a9 f7       	brne	.-22     	; 0x2432 <__ultoa_invert+0x6c>
    2448:	ea cf       	rjmp	.-44     	; 0x241e <__ultoa_invert+0x58>
    244a:	b4 e0       	ldi	r27, 0x04	; 4
    244c:	a6 95       	lsr	r26
    244e:	97 95       	ror	r25
    2450:	87 95       	ror	r24
    2452:	77 95       	ror	r23
    2454:	67 95       	ror	r22
    2456:	ba 95       	dec	r27
    2458:	c9 f7       	brne	.-14     	; 0x244c <__ultoa_invert+0x86>
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	61 05       	cpc	r22, r1
    245e:	71 05       	cpc	r23, r1
    2460:	08 95       	ret
    2462:	9b 01       	movw	r18, r22
    2464:	ac 01       	movw	r20, r24
    2466:	0a 2e       	mov	r0, r26
    2468:	06 94       	lsr	r0
    246a:	57 95       	ror	r21
    246c:	47 95       	ror	r20
    246e:	37 95       	ror	r19
    2470:	27 95       	ror	r18
    2472:	ba 95       	dec	r27
    2474:	c9 f7       	brne	.-14     	; 0x2468 <__ultoa_invert+0xa2>
    2476:	62 0f       	add	r22, r18
    2478:	73 1f       	adc	r23, r19
    247a:	84 1f       	adc	r24, r20
    247c:	95 1f       	adc	r25, r21
    247e:	a0 1d       	adc	r26, r0
    2480:	08 95       	ret

00002482 <eeprom_read_block>:
    2482:	60 50       	subi	r22, 0x00	; 0
    2484:	7c 4e       	sbci	r23, 0xEC	; 236
    2486:	0c 94 ad 12 	jmp	0x255a	; 0x255a <memcpy>

0000248a <eeprom_read_byte>:
    248a:	03 d0       	rcall	.+6      	; 0x2492 <eeprom_mapen>
    248c:	80 81       	ld	r24, Z
    248e:	99 27       	eor	r25, r25
    2490:	08 95       	ret

00002492 <eeprom_mapen>:
    2492:	fc 01       	movw	r30, r24
    2494:	e0 50       	subi	r30, 0x00	; 0
    2496:	fc 4e       	sbci	r31, 0xEC	; 236
    2498:	08 95       	ret

0000249a <eeprom_update_block>:
    249a:	dc 01       	movw	r26, r24
    249c:	a4 0f       	add	r26, r20
    249e:	b5 1f       	adc	r27, r21
    24a0:	41 50       	subi	r20, 0x01	; 1
    24a2:	50 40       	sbci	r21, 0x00	; 0
    24a4:	48 f0       	brcs	.+18     	; 0x24b8 <eeprom_update_block+0x1e>
    24a6:	cb 01       	movw	r24, r22
    24a8:	84 0f       	add	r24, r20
    24aa:	95 1f       	adc	r25, r21
    24ac:	2e 91       	ld	r18, -X
    24ae:	0e 94 5e 12 	call	0x24bc	; 0x24bc <eeprom_update_r18>
    24b2:	41 50       	subi	r20, 0x01	; 1
    24b4:	50 40       	sbci	r21, 0x00	; 0
    24b6:	d0 f7       	brcc	.-12     	; 0x24ac <eeprom_update_block+0x12>
    24b8:	08 95       	ret

000024ba <eeprom_update_byte>:
    24ba:	26 2f       	mov	r18, r22

000024bc <eeprom_update_r18>:
    24bc:	0e 94 49 12 	call	0x2492	; 0x2492 <eeprom_mapen>
    24c0:	00 80       	ld	r0, Z
    24c2:	02 16       	cp	r0, r18
    24c4:	19 f0       	breq	.+6      	; 0x24cc <eeprom_update_r18+0x10>
    24c6:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eeprom_write_r18>
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	08 95       	ret

000024d0 <eeprom_write_byte>:
    24d0:	26 2f       	mov	r18, r22

000024d2 <eeprom_write_r18>:
    24d2:	af 93       	push	r26
    24d4:	bf 93       	push	r27
    24d6:	e0 e0       	ldi	r30, 0x00	; 0
    24d8:	f0 e1       	ldi	r31, 0x10	; 16
    24da:	32 81       	ldd	r19, Z+2	; 0x02
    24dc:	31 fd       	sbrc	r19, 1
    24de:	fd cf       	rjmp	.-6      	; 0x24da <eeprom_write_r18+0x8>
    24e0:	dc 01       	movw	r26, r24
    24e2:	a0 50       	subi	r26, 0x00	; 0
    24e4:	bc 4e       	sbci	r27, 0xEC	; 236
    24e6:	2c 93       	st	X, r18
    24e8:	2d e9       	ldi	r18, 0x9D	; 157
    24ea:	24 bf       	out	0x34, r18	; 52
    24ec:	23 e0       	ldi	r18, 0x03	; 3
    24ee:	20 83       	st	Z, r18
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	bf 91       	pop	r27
    24f4:	af 91       	pop	r26
    24f6:	08 95       	ret

000024f8 <__prologue_saves__>:
    24f8:	2f 92       	push	r2
    24fa:	3f 92       	push	r3
    24fc:	4f 92       	push	r4
    24fe:	5f 92       	push	r5
    2500:	6f 92       	push	r6
    2502:	7f 92       	push	r7
    2504:	8f 92       	push	r8
    2506:	9f 92       	push	r9
    2508:	af 92       	push	r10
    250a:	bf 92       	push	r11
    250c:	cf 92       	push	r12
    250e:	df 92       	push	r13
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	ca 1b       	sub	r28, r26
    2522:	db 0b       	sbc	r29, r27
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	09 94       	ijmp

0000252a <__epilogue_restores__>:
    252a:	2a 88       	ldd	r2, Y+18	; 0x12
    252c:	39 88       	ldd	r3, Y+17	; 0x11
    252e:	48 88       	ldd	r4, Y+16	; 0x10
    2530:	5f 84       	ldd	r5, Y+15	; 0x0f
    2532:	6e 84       	ldd	r6, Y+14	; 0x0e
    2534:	7d 84       	ldd	r7, Y+13	; 0x0d
    2536:	8c 84       	ldd	r8, Y+12	; 0x0c
    2538:	9b 84       	ldd	r9, Y+11	; 0x0b
    253a:	aa 84       	ldd	r10, Y+10	; 0x0a
    253c:	b9 84       	ldd	r11, Y+9	; 0x09
    253e:	c8 84       	ldd	r12, Y+8	; 0x08
    2540:	df 80       	ldd	r13, Y+7	; 0x07
    2542:	ee 80       	ldd	r14, Y+6	; 0x06
    2544:	fd 80       	ldd	r15, Y+5	; 0x05
    2546:	0c 81       	ldd	r16, Y+4	; 0x04
    2548:	1b 81       	ldd	r17, Y+3	; 0x03
    254a:	aa 81       	ldd	r26, Y+2	; 0x02
    254c:	b9 81       	ldd	r27, Y+1	; 0x01
    254e:	ce 0f       	add	r28, r30
    2550:	d1 1d       	adc	r29, r1
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	ed 01       	movw	r28, r26
    2558:	08 95       	ret

0000255a <memcpy>:
    255a:	fb 01       	movw	r30, r22
    255c:	dc 01       	movw	r26, r24
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <memcpy+0xa>
    2560:	01 90       	ld	r0, Z+
    2562:	0d 92       	st	X+, r0
    2564:	41 50       	subi	r20, 0x01	; 1
    2566:	50 40       	sbci	r21, 0x00	; 0
    2568:	d8 f7       	brcc	.-10     	; 0x2560 <memcpy+0x6>
    256a:	08 95       	ret

0000256c <_exit>:
    256c:	f8 94       	cli

0000256e <__stop_program>:
    256e:	ff cf       	rjmp	.-2      	; 0x256e <__stop_program>
