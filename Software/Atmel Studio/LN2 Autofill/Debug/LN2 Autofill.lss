
LN2 Autofill.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000025b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  00006380  00002380  00002414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000022f  00802800  00802800  000025b4  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00002650  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000742a  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003519  00000000  00000000  00009db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002647  00000000  00000000  0000d2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005e8  00000000  00000000  0000f914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000206c  00000000  00000000  0000fefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d6c  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  00012cd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_3>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_17>
      48:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__vector_18>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__vector_24>
      64:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_25>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      80:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      88:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      8c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      90:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      94:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      98:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      9c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      a0:	8c 01       	movw	r16, r24
      a2:	aa 01       	movw	r20, r20
      a4:	81 02       	muls	r24, r17
      a6:	b7 02       	muls	r27, r23
      a8:	ef 02       	muls	r30, r31
      aa:	27 03       	mulsu	r18, r23
      ac:	48 03       	fmul	r20, r16
      ae:	77 03       	mulsu	r23, r23

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	df e3       	ldi	r29, 0x3F	; 63
      ba:	de bf       	out	0x3e, r29	; 62

000000bc <__do_clear_bss>:
      bc:	2a e2       	ldi	r18, 0x2A	; 42
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b8 e2       	ldi	r27, 0x28	; 40
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	af 32       	cpi	r26, 0x2F	; 47
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
      d0:	0c 94 be 11 	jmp	0x237c	; 0x237c <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <disp_coldtherm>:

volatile uint8_t button_pushed;

void disp_coldtherm(void)
{
	clear_OLED(0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 db 07 	call	0xfb6	; 0xfb6 <clear_OLED>
	writestr_OLED(0, "Sensor cold or", 1);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	60 e8       	ldi	r22, 0x80	; 128
      e2:	73 e6       	ldi	r23, 0x63	; 99
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	writestr_OLED(0, "cable unplugged", 2);
      ea:	42 e0       	ldi	r20, 0x02	; 2
      ec:	6f e8       	ldi	r22, 0x8F	; 143
      ee:	73 e6       	ldi	r23, 0x63	; 99
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
      f6:	08 95       	ret

000000f8 <handle_button>:
	valve or valves are acted upon, toggling the state of the valve.
----------------------------------------------------------------------*/
void handle_button(void)
{

	switch (button_pushed) {
      f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	c9 f1       	breq	.+114    	; 0x172 <__EEPROM_REGION_LENGTH__+0x72>
     100:	18 f4       	brcc	.+6      	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	41 f0       	breq	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
     106:	a4 c0       	rjmp	.+328    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f4       	brne	.+2      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     10c:	60 c0       	rjmp	.+192    	; 0x1ce <__EEPROM_REGION_LENGTH__+0xce>
     10e:	84 30       	cpi	r24, 0x04	; 4
     110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     112:	7e c0       	rjmp	.+252    	; 0x210 <__EEPROM_REGION_LENGTH__+0x110>
     114:	9d c0       	rjmp	.+314    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
		case BLUEBUTTON:
			if (BLUVALVEOPEN) {				// See valves.h
     116:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     11a:	88 23       	and	r24, r24
     11c:	24 f4       	brge	.+8      	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
				CLOSEVALVE(BLUVALVE);
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     124:	11 c0       	rjmp	.+34     	; 0x148 <__EEPROM_REGION_LENGTH__+0x48>
			} else if (BLUENABLED && BLUTHERMWARM) {
     126:	8c e0       	ldi	r24, 0x0C	; 12
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     12e:	88 23       	and	r24, r24
     130:	c1 f0       	breq	.+48     	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     132:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     136:	80 ff       	sbrs	r24, 0
     138:	0d c0       	rjmp	.+26     	; 0x154 <__EEPROM_REGION_LENGTH__+0x54>
				OPENVALVE(BLUVALVE);
     13a:	80 e8       	ldi	r24, 0x80	; 128
     13c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BLU = 0;
     140:	e7 e0       	ldi	r30, 0x07	; 7
     142:	f8 e2       	ldi	r31, 0x28	; 40
     144:	13 86       	std	Z+11, r1	; 0x0b
				status.maxopen_BLU = FALSE;
     146:	17 86       	std	Z+15, r1	; 0x0f
			}
			if (BLUENABLED && !BLUTHERMWARM) {
     148:	8c e0       	ldi	r24, 0x0C	; 12
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     150:	88 23       	and	r24, r24
     152:	39 f0       	breq	.+14     	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     154:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     158:	80 fd       	sbrc	r24, 0
     15a:	03 c0       	rjmp	.+6      	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
				disp_coldtherm();
     15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     160:	77 c0       	rjmp	.+238    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			} else if ((screen_value == SCRVALVES)) {
     162:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	09 f0       	breq	.+2      	; 0x16c <__EEPROM_REGION_LENGTH__+0x6c>
     16a:	72 c0       	rjmp	.+228    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
				display(SCRVALVES);
     16c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     170:	6f c0       	rjmp	.+222    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			}
			break;

		case REDBUTTON:
			if (REDVALVEOPEN) {				// See valves.h
     172:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     176:	86 ff       	sbrs	r24, 6
     178:	04 c0       	rjmp	.+8      	; 0x182 <__EEPROM_REGION_LENGTH__+0x82>
				CLOSEVALVE(REDVALVE);
     17a:	80 e4       	ldi	r24, 0x40	; 64
     17c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     180:	11 c0       	rjmp	.+34     	; 0x1a4 <__EEPROM_REGION_LENGTH__+0xa4>
			} else if (REDENABLED && REDTHERMWARM) {
     182:	8d e0       	ldi	r24, 0x0D	; 13
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     18a:	88 23       	and	r24, r24
     18c:	c1 f0       	breq	.+48     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
     18e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     192:	81 ff       	sbrs	r24, 1
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <__EEPROM_REGION_LENGTH__+0xb0>
				OPENVALVE(REDVALVE);
     196:	80 e4       	ldi	r24, 0x40	; 64
     198:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_RED = 0;
     19c:	e7 e0       	ldi	r30, 0x07	; 7
     19e:	f8 e2       	ldi	r31, 0x28	; 40
     1a0:	14 86       	std	Z+12, r1	; 0x0c
				status.maxopen_RED = FALSE;
     1a2:	10 8a       	std	Z+16, r1	; 0x10
			}
			if (REDENABLED && !REDTHERMWARM) {
     1a4:	8d e0       	ldi	r24, 0x0D	; 13
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     1ac:	88 23       	and	r24, r24
     1ae:	39 f0       	breq	.+14     	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
     1b0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1b4:	81 fd       	sbrc	r24, 1
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <__EEPROM_REGION_LENGTH__+0xbe>
				disp_coldtherm();
     1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     1bc:	49 c0       	rjmp	.+146    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			} else if ((screen_value == SCRVALVES)) {
     1be:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <__EEPROM_REGION_LENGTH__+0xc8>
     1c6:	44 c0       	rjmp	.+136    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
				display(SCRVALVES);
     1c8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     1cc:	41 c0       	rjmp	.+130    	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			}
			break;

		case BUFFERBUTTON:
			if (BUFVALVEOPEN) {				// See valves.h
     1ce:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     1d2:	85 ff       	sbrs	r24, 5
     1d4:	04 c0       	rjmp	.+8      	; 0x1de <__EEPROM_REGION_LENGTH__+0xde>
				CLOSEVALVE(BUFVALVE);
     1d6:	80 e2       	ldi	r24, 0x20	; 32
     1d8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <__EEPROM_REGION_LENGTH__+0xf4>
			} else if (BUFTHERMWARM) {
     1de:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1e2:	82 ff       	sbrs	r24, 2
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__EEPROM_REGION_LENGTH__+0xf4>
				OPENVALVE(BUFVALVE);
     1e6:	80 e2       	ldi	r24, 0x20	; 32
     1e8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.opentime_BUF = 0;
     1ec:	e7 e0       	ldi	r30, 0x07	; 7
     1ee:	f8 e2       	ldi	r31, 0x28	; 40
     1f0:	15 86       	std	Z+13, r1	; 0x0d
				status.maxopen_BUF = FALSE;
     1f2:	11 8a       	std	Z+17, r1	; 0x11
			}
			if (!BUFTHERMWARM) {
     1f4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     1f8:	82 fd       	sbrc	r24, 2
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <__EEPROM_REGION_LENGTH__+0x102>
				disp_coldtherm();
     1fc:	0e 94 6c 00 	call	0xd8	; 0xd8 <disp_coldtherm>
     200:	27 c0       	rjmp	.+78     	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			} else if ((screen_value == SCRVALVES)) {
     202:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	19 f5       	brne	.+70     	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
				display(SCRVALVES);
     20a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     20e:	20 c0       	rjmp	.+64     	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
			}
			break;

		case SUPPLYBUTTON:
			if (SUPVALVEOPEN) {				// See valves.h
     210:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     214:	84 ff       	sbrs	r24, 4
     216:	04 c0       	rjmp	.+8      	; 0x220 <__EEPROM_REGION_LENGTH__+0x120>
				CLOSEVALVE(SUPVALVE);
     218:	80 e1       	ldi	r24, 0x10	; 16
     21a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
     21e:	12 c0       	rjmp	.+36     	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
			} else if (status.supply_button_time > 2) {
     220:	80 91 1f 28 	lds	r24, 0x281F	; 0x80281f <status+0x18>
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	70 f0       	brcs	.+28     	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
				OPENVALVE(SUPVALVE);
     228:	80 e1       	ldi	r24, 0x10	; 16
     22a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
				status.supply_button_time = 0;		// # secs button has been held down
     22e:	e7 e0       	ldi	r30, 0x07	; 7
     230:	f8 e2       	ldi	r31, 0x28	; 40
     232:	10 8e       	std	Z+24, r1	; 0x18
				status.opentime_SUP = 0;
     234:	16 86       	std	Z+14, r1	; 0x0e
				status.supply_button_pushed = FALSE;
     236:	17 8a       	std	Z+23, r1	; 0x17
				if ((screen_value == SCRVALVES)) {
     238:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	11 f4       	brne	.+4      	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
					display(SCRVALVES);
     240:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
				}
			}
			if ((screen_value == SCRVALVES)) {
     244:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	11 f4       	brne	.+4      	; 0x250 <__EEPROM_REGION_LENGTH__+0x150>
				display(SCRVALVES);
     24c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>

		default:
			break;
	}

	button_pushed = FALSE;
     250:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
     254:	08 95       	ret

00000256 <init_BUTTONS>:
/*----------------------------------------------------------------------
INITIALIZE BUTTON PINS
	Set up the pins for interrupts.
----------------------------------------------------------------------*/
void init_BUTTONS(void)
{
     256:	08 95       	ret

00000258 <scan_buttons>:
uint8_t scan_buttons(void)
{

	uint8_t value;

	if (~PORTB.IN & PIN2_bm) {
     258:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     25c:	82 ff       	sbrs	r24, 2
     25e:	1e c0       	rjmp	.+60     	; 0x29c <scan_buttons+0x44>
		value = BLUEBUTTON;
	} else if (~PORTB.IN & PIN3_bm) {
     260:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     264:	83 ff       	sbrs	r24, 3
     266:	1c c0       	rjmp	.+56     	; 0x2a0 <scan_buttons+0x48>
		value = REDBUTTON;
	} else if (~PORTB.IN & PIN0_bm) {
     268:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     26c:	80 ff       	sbrs	r24, 0
     26e:	1a c0       	rjmp	.+52     	; 0x2a4 <scan_buttons+0x4c>
		value = BUFFERBUTTON;
	} else if (~PORTB.IN & PIN1_bm) {
     270:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7f4428>
     274:	81 fd       	sbrc	r24, 1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <scan_buttons+0x50>
		value = SUPPLYBUTTON;
		if (status.supply_button_pushed) {		// Button was already pushed
     278:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <status+0x17>
     27c:	88 23       	and	r24, r24
     27e:	39 f0       	breq	.+14     	; 0x28e <scan_buttons+0x36>
			status.supply_button_time++;		// # secs button has been held down
     280:	e7 e0       	ldi	r30, 0x07	; 7
     282:	f8 e2       	ldi	r31, 0x28	; 40
     284:	80 8d       	ldd	r24, Z+24	; 0x18
     286:	8f 5f       	subi	r24, 0xFF	; 255
     288:	80 8f       	std	Z+24, r24	; 0x18
	} else if (~PORTB.IN & PIN3_bm) {
		value = REDBUTTON;
	} else if (~PORTB.IN & PIN0_bm) {
		value = BUFFERBUTTON;
	} else if (~PORTB.IN & PIN1_bm) {
		value = SUPPLYBUTTON;
     28a:	84 e0       	ldi	r24, 0x04	; 4
     28c:	08 95       	ret
		if (status.supply_button_pushed) {		// Button was already pushed
			status.supply_button_time++;		// # secs button has been held down
		} else {
			status.supply_button_pushed = TRUE;
     28e:	e7 e0       	ldi	r30, 0x07	; 7
     290:	f8 e2       	ldi	r31, 0x28	; 40
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	87 8b       	std	Z+23, r24	; 0x17
			status.supply_button_time = 0;
     296:	10 8e       	std	Z+24, r1	; 0x18
	} else if (~PORTB.IN & PIN3_bm) {
		value = REDBUTTON;
	} else if (~PORTB.IN & PIN0_bm) {
		value = BUFFERBUTTON;
	} else if (~PORTB.IN & PIN1_bm) {
		value = SUPPLYBUTTON;
     298:	84 e0       	ldi	r24, 0x04	; 4
     29a:	08 95       	ret
{

	uint8_t value;

	if (~PORTB.IN & PIN2_bm) {
		value = BLUEBUTTON;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	08 95       	ret
	} else if (~PORTB.IN & PIN3_bm) {
		value = REDBUTTON;
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	08 95       	ret
	} else if (~PORTB.IN & PIN0_bm) {
		value = BUFFERBUTTON;
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	08 95       	ret
		} else {
			status.supply_button_pushed = TRUE;
			status.supply_button_time = 0;
		}
	} else {
		value = FALSE;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
	}

	return(value);

     2aa:	08 95       	ret

000002ac <get_VERSION>:
eeprom.c
	Reads and writes the software version.
------------------------------------------------------------------------------*/
void get_VERSION(char *version)
{
	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     2ac:	4a e0       	ldi	r20, 0x0A	; 10
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	0e 94 49 11 	call	0x2292	; 0x2292 <eeprom_read_block>
     2b8:	08 95       	ret

000002ba <update_VERSION>:
}

void update_VERSION(void)
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	2b 97       	sbiw	r28, 0x0b	; 11
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	de bf       	out	0x3e, r29	; 62
	char version[11];

	strcpy(version, VERSION);
     2c8:	8b e0       	ldi	r24, 0x0B	; 11
     2ca:	ef e9       	ldi	r30, 0x9F	; 159
     2cc:	f3 e6       	ldi	r31, 0x63	; 99
     2ce:	de 01       	movw	r26, r28
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	01 90       	ld	r0, Z+
     2d4:	0d 92       	st	X+, r0
     2d6:	8a 95       	dec	r24
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     2da:	4a e0       	ldi	r20, 0x0A	; 10
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	ce 01       	movw	r24, r28
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	0e 94 55 11 	call	0x22aa	; 0x22aa <eeprom_update_block>
}
     2ea:	2b 96       	adiw	r28, 0x0b	; 11
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <display>:
	Writes the top level OLED display screens. Each screen has a value
	defined in encoder.h. Pushing the encoder knob for some screens
	takes you to a lower level for more options.
----------------------------------------------------------------------*/
void display(uint8_t value)
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	aa 97       	sbiw	r28, 0x2a	; 42
     300:	cd bf       	out	0x3d, r28	; 61
     302:	de bf       	out	0x3e, r29	; 62
	char line1[21], line2[21];

	switch (value) {
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	88 30       	cpi	r24, 0x08	; 8
     308:	91 05       	cpc	r25, r1
     30a:	08 f0       	brcs	.+2      	; 0x30e <display+0x18>
     30c:	1f c2       	rjmp	.+1086   	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     30e:	fc 01       	movw	r30, r24
     310:	e0 5b       	subi	r30, 0xB0	; 176
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__tablejump2__>
		case SCRVERSION:						// See encoder.h
			strcpy(line1, "  LN2 Autofill");
     318:	8f e0       	ldi	r24, 0x0F	; 15
     31a:	ea ea       	ldi	r30, 0xAA	; 170
     31c:	f3 e6       	ldi	r31, 0x63	; 99
     31e:	de 01       	movw	r26, r28
     320:	11 96       	adiw	r26, 0x01	; 1
     322:	01 90       	ld	r0, Z+
     324:	0d 92       	st	X+, r0
     326:	8a 95       	dec	r24
     328:	e1 f7       	brne	.-8      	; 0x322 <display+0x2c>
			get_VERSION(status.version);
     32a:	87 e0       	ldi	r24, 0x07	; 7
     32c:	98 e2       	ldi	r25, 0x28	; 40
     32e:	0e 94 56 01 	call	0x2ac	; 0x2ac <get_VERSION>
			strcpy(line2, "   ");
     332:	80 e2       	ldi	r24, 0x20	; 32
     334:	90 e2       	ldi	r25, 0x20	; 32
     336:	8e 8b       	std	Y+22, r24	; 0x16
     338:	9f 8b       	std	Y+23, r25	; 0x17
     33a:	80 e2       	ldi	r24, 0x20	; 32
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	88 8f       	std	Y+24, r24	; 0x18
     340:	99 8f       	std	Y+25, r25	; 0x19
			strcat(line2, status.version);
     342:	67 e0       	ldi	r22, 0x07	; 7
     344:	78 e2       	ldi	r23, 0x28	; 40
     346:	ce 01       	movw	r24, r28
     348:	46 96       	adiw	r24, 0x16	; 22
     34a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <strcat>
			screen_value = SCRVERSION;
     34e:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
     352:	10 c2       	rjmp	.+1056   	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
	
		case SCRVALVES:							// encoder.h
			strcpy(line1, "SUP BUF RED BLU");
     354:	80 e1       	ldi	r24, 0x10	; 16
     356:	e9 eb       	ldi	r30, 0xB9	; 185
     358:	f3 e6       	ldi	r31, 0x63	; 99
     35a:	de 01       	movw	r26, r28
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	01 90       	ld	r0, Z+
     360:	0d 92       	st	X+, r0
     362:	8a 95       	dec	r24
     364:	e1 f7       	brne	.-8      	; 0x35e <display+0x68>
			if (SUPVALVEOPEN) {					// valves.h
     366:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     36a:	84 ff       	sbrs	r24, 4
     36c:	0a c0       	rjmp	.+20     	; 0x382 <display+0x8c>
				strcpy(line2, " O  ");
     36e:	85 e0       	ldi	r24, 0x05	; 5
     370:	e9 ec       	ldi	r30, 0xC9	; 201
     372:	f3 e6       	ldi	r31, 0x63	; 99
     374:	de 01       	movw	r26, r28
     376:	56 96       	adiw	r26, 0x16	; 22
     378:	01 90       	ld	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	8a 95       	dec	r24
     37e:	e1 f7       	brne	.-8      	; 0x378 <display+0x82>
     380:	09 c0       	rjmp	.+18     	; 0x394 <display+0x9e>
			} else {
				strcpy(line2, " C  ");
     382:	85 e0       	ldi	r24, 0x05	; 5
     384:	ee ec       	ldi	r30, 0xCE	; 206
     386:	f3 e6       	ldi	r31, 0x63	; 99
     388:	de 01       	movw	r26, r28
     38a:	56 96       	adiw	r26, 0x16	; 22
     38c:	01 90       	ld	r0, Z+
     38e:	0d 92       	st	X+, r0
     390:	8a 95       	dec	r24
     392:	e1 f7       	brne	.-8      	; 0x38c <display+0x96>
			}
			if (BUFVALVEOPEN) {					// valves.h
     394:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     398:	85 ff       	sbrs	r24, 5
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <display+0xc2>
				strcat(line2, " O  ");
     39c:	de 01       	movw	r26, r28
     39e:	56 96       	adiw	r26, 0x16	; 22
     3a0:	0d 90       	ld	r0, X+
     3a2:	00 20       	and	r0, r0
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <display+0xaa>
     3a6:	11 97       	sbiw	r26, 0x01	; 1
     3a8:	85 e0       	ldi	r24, 0x05	; 5
     3aa:	e9 ec       	ldi	r30, 0xC9	; 201
     3ac:	f3 e6       	ldi	r31, 0x63	; 99
     3ae:	01 90       	ld	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	8a 95       	dec	r24
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <display+0xb8>
     3b6:	1f c0       	rjmp	.+62     	; 0x3f6 <display+0x100>
			} else if (status.maxopen_BUF) {
     3b8:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
     3bc:	88 23       	and	r24, r24
     3be:	71 f0       	breq	.+28     	; 0x3dc <display+0xe6>
				strcat(line2, " T  ");
     3c0:	de 01       	movw	r26, r28
     3c2:	56 96       	adiw	r26, 0x16	; 22
     3c4:	0d 90       	ld	r0, X+
     3c6:	00 20       	and	r0, r0
     3c8:	e9 f7       	brne	.-6      	; 0x3c4 <display+0xce>
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	e3 ed       	ldi	r30, 0xD3	; 211
     3d0:	f3 e6       	ldi	r31, 0x63	; 99
     3d2:	01 90       	ld	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	8a 95       	dec	r24
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <display+0xdc>
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <display+0x100>
			} else {
				strcat(line2, " C  ");
     3dc:	de 01       	movw	r26, r28
     3de:	56 96       	adiw	r26, 0x16	; 22
     3e0:	0d 90       	ld	r0, X+
     3e2:	00 20       	and	r0, r0
     3e4:	e9 f7       	brne	.-6      	; 0x3e0 <display+0xea>
     3e6:	11 97       	sbiw	r26, 0x01	; 1
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	ee ec       	ldi	r30, 0xCE	; 206
     3ec:	f3 e6       	ldi	r31, 0x63	; 99
     3ee:	01 90       	ld	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	8a 95       	dec	r24
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <display+0xf8>
			}
			if (!REDENABLED) {					// eeprom.h
     3f6:	8d e0       	ldi	r24, 0x0D	; 13
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     3fe:	81 11       	cpse	r24, r1
     400:	0e c0       	rjmp	.+28     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				strcat(line2, " X  ");
     402:	de 01       	movw	r26, r28
     404:	56 96       	adiw	r26, 0x16	; 22
     406:	0d 90       	ld	r0, X+
     408:	00 20       	and	r0, r0
     40a:	e9 f7       	brne	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40c:	11 97       	sbiw	r26, 0x01	; 1
     40e:	85 e0       	ldi	r24, 0x05	; 5
     410:	e8 ed       	ldi	r30, 0xD8	; 216
     412:	f3 e6       	ldi	r31, 0x63	; 99
     414:	01 90       	ld	r0, Z+
     416:	0d 92       	st	X+, r0
     418:	8a 95       	dec	r24
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	31 c0       	rjmp	.+98     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			} else if (REDVALVEOPEN) {			// valves.h
     41e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     422:	86 ff       	sbrs	r24, 6
     424:	0e c0       	rjmp	.+28     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				strcat(line2, " O  ");
     426:	de 01       	movw	r26, r28
     428:	56 96       	adiw	r26, 0x16	; 22
     42a:	0d 90       	ld	r0, X+
     42c:	00 20       	and	r0, r0
     42e:	e9 f7       	brne	.-6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	85 e0       	ldi	r24, 0x05	; 5
     434:	e9 ec       	ldi	r30, 0xC9	; 201
     436:	f3 e6       	ldi	r31, 0x63	; 99
     438:	01 90       	ld	r0, Z+
     43a:	0d 92       	st	X+, r0
     43c:	8a 95       	dec	r24
     43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     440:	1f c0       	rjmp	.+62     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			} else if (status.maxopen_RED) {
     442:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
     446:	88 23       	and	r24, r24
     448:	71 f0       	breq	.+28     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
				strcat(line2, " T  ");
     44a:	de 01       	movw	r26, r28
     44c:	56 96       	adiw	r26, 0x16	; 22
     44e:	0d 90       	ld	r0, X+
     450:	00 20       	and	r0, r0
     452:	e9 f7       	brne	.-6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     454:	11 97       	sbiw	r26, 0x01	; 1
     456:	85 e0       	ldi	r24, 0x05	; 5
     458:	e3 ed       	ldi	r30, 0xD3	; 211
     45a:	f3 e6       	ldi	r31, 0x63	; 99
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	8a 95       	dec	r24
     462:	e1 f7       	brne	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     464:	0d c0       	rjmp	.+26     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			} else {
				strcat(line2, " C  ");
     466:	de 01       	movw	r26, r28
     468:	56 96       	adiw	r26, 0x16	; 22
     46a:	0d 90       	ld	r0, X+
     46c:	00 20       	and	r0, r0
     46e:	e9 f7       	brne	.-6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     470:	11 97       	sbiw	r26, 0x01	; 1
     472:	85 e0       	ldi	r24, 0x05	; 5
     474:	ee ec       	ldi	r30, 0xCE	; 206
     476:	f3 e6       	ldi	r31, 0x63	; 99
     478:	01 90       	ld	r0, Z+
     47a:	0d 92       	st	X+, r0
     47c:	8a 95       	dec	r24
     47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}
			if (!BLUENABLED) {
     480:	8c e0       	ldi	r24, 0x0C	; 12
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     488:	81 11       	cpse	r24, r1
     48a:	0c c0       	rjmp	.+24     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
				strcat(line2, " X");
     48c:	fe 01       	movw	r30, r28
     48e:	76 96       	adiw	r30, 0x16	; 22
     490:	01 90       	ld	r0, Z+
     492:	00 20       	and	r0, r0
     494:	e9 f7       	brne	.-6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	80 e2       	ldi	r24, 0x20	; 32
     49a:	98 e5       	ldi	r25, 0x58	; 88
     49c:	80 83       	st	Z, r24
     49e:	91 83       	std	Z+1, r25	; 0x01
     4a0:	12 82       	std	Z+2, r1	; 0x02
     4a2:	2b c0       	rjmp	.+86     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			} else if (BLUVALVEOPEN) {			// valves.h
     4a4:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     4a8:	88 23       	and	r24, r24
     4aa:	64 f4       	brge	.+24     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				strcat(line2, " O");
     4ac:	fe 01       	movw	r30, r28
     4ae:	76 96       	adiw	r30, 0x16	; 22
     4b0:	01 90       	ld	r0, Z+
     4b2:	00 20       	and	r0, r0
     4b4:	e9 f7       	brne	.-6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	80 e2       	ldi	r24, 0x20	; 32
     4ba:	9f e4       	ldi	r25, 0x4F	; 79
     4bc:	80 83       	st	Z, r24
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	12 82       	std	Z+2, r1	; 0x02
     4c2:	1b c0       	rjmp	.+54     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			} else if (status.maxopen_BLU) {
     4c4:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
     4c8:	88 23       	and	r24, r24
     4ca:	61 f0       	breq	.+24     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
				strcat(line2, " T");
     4cc:	fe 01       	movw	r30, r28
     4ce:	76 96       	adiw	r30, 0x16	; 22
     4d0:	01 90       	ld	r0, Z+
     4d2:	00 20       	and	r0, r0
     4d4:	e9 f7       	brne	.-6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d6:	31 97       	sbiw	r30, 0x01	; 1
     4d8:	80 e2       	ldi	r24, 0x20	; 32
     4da:	94 e5       	ldi	r25, 0x54	; 84
     4dc:	80 83       	st	Z, r24
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	12 82       	std	Z+2, r1	; 0x02
     4e2:	0b c0       	rjmp	.+22     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			} else {
				strcat(line2, " C");
     4e4:	fe 01       	movw	r30, r28
     4e6:	76 96       	adiw	r30, 0x16	; 22
     4e8:	01 90       	ld	r0, Z+
     4ea:	00 20       	and	r0, r0
     4ec:	e9 f7       	brne	.-6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	93 e4       	ldi	r25, 0x43	; 67
     4f4:	80 83       	st	Z, r24
     4f6:	91 83       	std	Z+1, r25	; 0x01
     4f8:	12 82       	std	Z+2, r1	; 0x02
			}
			screen_value = SCRVALVES;			// encoder.h
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     500:	39 c1       	rjmp	.+626    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>

		case SCRNEXTFILL:
			strcpy(line1, "Next fill in");
     502:	8d e0       	ldi	r24, 0x0D	; 13
     504:	ed ed       	ldi	r30, 0xDD	; 221
     506:	f3 e6       	ldi	r31, 0x63	; 99
     508:	de 01       	movw	r26, r28
     50a:	11 96       	adiw	r26, 0x01	; 1
     50c:	01 90       	ld	r0, Z+
     50e:	0d 92       	st	X+, r0
     510:	8a 95       	dec	r24
     512:	e1 f7       	brne	.-8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			if (status.next_fill < 2) {
     514:	80 91 1c 28 	lds	r24, 0x281C	; 0x80281c <status+0x15>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	98 f4       	brcc	.+38     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
				sprintf(line2, "%d minute", status.next_fill);
     51c:	1f 92       	push	r1
     51e:	8f 93       	push	r24
     520:	8a ee       	ldi	r24, 0xEA	; 234
     522:	93 e6       	ldi	r25, 0x63	; 99
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	ce 01       	movw	r24, r28
     52a:	46 96       	adiw	r24, 0x16	; 22
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	12 c0       	rjmp	.+36     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
			} else {
				sprintf(line2, "%d minutes", status.next_fill);
     542:	1f 92       	push	r1
     544:	8f 93       	push	r24
     546:	84 ef       	ldi	r24, 0xF4	; 244
     548:	93 e6       	ldi	r25, 0x63	; 99
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	ce 01       	movw	r24, r28
     550:	46 96       	adiw	r24, 0x16	; 22
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
			}
			screen_value = SCRNEXTFILL;			// encoder.h
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     56c:	03 c1       	rjmp	.+518    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>

		case SCRFILLINT:
			strcpy(line1, "Fill interval");
     56e:	8e e0       	ldi	r24, 0x0E	; 14
     570:	ef ef       	ldi	r30, 0xFF	; 255
     572:	f3 e6       	ldi	r31, 0x63	; 99
     574:	de 01       	movw	r26, r28
     576:	11 96       	adiw	r26, 0x01	; 1
     578:	01 90       	ld	r0, Z+
     57a:	0d 92       	st	X+, r0
     57c:	8a 95       	dec	r24
     57e:	e1 f7       	brne	.-8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
			if (FILLINTERVAL == 1) {			// eeprom.h
     580:	8a e0       	ldi	r24, 0x0A	; 10
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	99 f4       	brne	.+38     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
				sprintf(line2, "%d minute", FILLINTERVAL);
     58c:	1f 92       	push	r1
     58e:	8f 93       	push	r24
     590:	8a ee       	ldi	r24, 0xEA	; 234
     592:	93 e6       	ldi	r25, 0x63	; 99
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	ce 01       	movw	r24, r28
     59a:	46 96       	adiw	r24, 0x16	; 22
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	12 c0       	rjmp	.+36     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
			} else {
				sprintf(line2, "%d minutes", FILLINTERVAL);
     5b2:	1f 92       	push	r1
     5b4:	8f 93       	push	r24
     5b6:	84 ef       	ldi	r24, 0xF4	; 244
     5b8:	93 e6       	ldi	r25, 0x63	; 99
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	ce 01       	movw	r24, r28
     5c0:	46 96       	adiw	r24, 0x16	; 22
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
			}
			screen_value = SCRFILLINT;			// encoder.h
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     5dc:	cb c0       	rjmp	.+406    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
			
		case SCRMAXOPENTIME:					// encoder.h
			strcpy(line1, "Max open time");
     5de:	8e e0       	ldi	r24, 0x0E	; 14
     5e0:	ed e0       	ldi	r30, 0x0D	; 13
     5e2:	f4 e6       	ldi	r31, 0x64	; 100
     5e4:	de 01       	movw	r26, r28
     5e6:	11 96       	adiw	r26, 0x01	; 1
     5e8:	01 90       	ld	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	8a 95       	dec	r24
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
			if (MAXOPENTIME < 2) {				// eeprom.h
     5f0:	8b e0       	ldi	r24, 0x0B	; 11
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	98 f4       	brcc	.+38     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
				sprintf(line2, "%d minute", MAXOPENTIME);
     5fc:	1f 92       	push	r1
     5fe:	8f 93       	push	r24
     600:	8a ee       	ldi	r24, 0xEA	; 234
     602:	93 e6       	ldi	r25, 0x63	; 99
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	ce 01       	movw	r24, r28
     60a:	46 96       	adiw	r24, 0x16	; 22
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	12 c0       	rjmp	.+36     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
			} else {
				sprintf(line2, "%d minutes", MAXOPENTIME);
     622:	1f 92       	push	r1
     624:	8f 93       	push	r24
     626:	84 ef       	ldi	r24, 0xF4	; 244
     628:	93 e6       	ldi	r25, 0x63	; 99
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	ce 01       	movw	r24, r28
     630:	46 96       	adiw	r24, 0x16	; 22
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
			}
			screen_value = SCRMAXOPENTIME;		// encoder.h
     646:	84 e0       	ldi	r24, 0x04	; 4
     648:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     64c:	93 c0       	rjmp	.+294    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>

		case SCRPRESSURE:						// encoder.h
			strcpy(line1, "LN2 pressure");
     64e:	8d e0       	ldi	r24, 0x0D	; 13
     650:	eb e1       	ldi	r30, 0x1B	; 27
     652:	f4 e6       	ldi	r31, 0x64	; 100
     654:	de 01       	movw	r26, r28
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	01 90       	ld	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	8a 95       	dec	r24
     65e:	e1 f7       	brne	.-8      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
			sprintf(line2, "%d kPa", status.pressure);
     660:	80 91 21 28 	lds	r24, 0x2821	; 0x802821 <status+0x1a>
     664:	1f 92       	push	r1
     666:	8f 93       	push	r24
     668:	88 e2       	ldi	r24, 0x28	; 40
     66a:	94 e6       	ldi	r25, 0x64	; 100
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	ce 01       	movw	r24, r28
     672:	46 96       	adiw	r24, 0x16	; 22
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
			screen_value = SCRPRESSURE;
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	72 c0       	rjmp	.+228    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>

		case SCRDISABLEBLU:						// encoder.h
			if (BLUENABLED) {					// eeprom.h
     690:	8c e0       	ldi	r24, 0x0C	; 12
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     698:	88 23       	and	r24, r24
     69a:	99 f0       	breq	.+38     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
				strcpy(line1, "BLUE is ENABLED");
     69c:	80 e1       	ldi	r24, 0x10	; 16
     69e:	ef e2       	ldi	r30, 0x2F	; 47
     6a0:	f4 e6       	ldi	r31, 0x64	; 100
     6a2:	de 01       	movw	r26, r28
     6a4:	11 96       	adiw	r26, 0x01	; 1
     6a6:	01 90       	ld	r0, Z+
     6a8:	0d 92       	st	X+, r0
     6aa:	8a 95       	dec	r24
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
				strcpy(line2, "Push to disable");
     6ae:	80 e1       	ldi	r24, 0x10	; 16
     6b0:	ef e3       	ldi	r30, 0x3F	; 63
     6b2:	f4 e6       	ldi	r31, 0x64	; 100
     6b4:	de 01       	movw	r26, r28
     6b6:	56 96       	adiw	r26, 0x16	; 22
     6b8:	01 90       	ld	r0, Z+
     6ba:	0d 92       	st	X+, r0
     6bc:	8a 95       	dec	r24
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     6c0:	12 c0       	rjmp	.+36     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
			} else {
				strcpy(line1, "Blue is DISABLED");
     6c2:	81 e1       	ldi	r24, 0x11	; 17
     6c4:	ef e4       	ldi	r30, 0x4F	; 79
     6c6:	f4 e6       	ldi	r31, 0x64	; 100
     6c8:	de 01       	movw	r26, r28
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	01 90       	ld	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	8a 95       	dec	r24
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
				strcpy(line2, "Push to enable");
     6d4:	8f e0       	ldi	r24, 0x0F	; 15
     6d6:	e0 e6       	ldi	r30, 0x60	; 96
     6d8:	f4 e6       	ldi	r31, 0x64	; 100
     6da:	de 01       	movw	r26, r28
     6dc:	56 96       	adiw	r26, 0x16	; 22
     6de:	01 90       	ld	r0, Z+
     6e0:	0d 92       	st	X+, r0
     6e2:	8a 95       	dec	r24
     6e4:	e1 f7       	brne	.-8      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
			}
			screen_value = SCRDISABLEBLU;		// encoder.h
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     6ec:	43 c0       	rjmp	.+134    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>

		case SCRDISABLERED:						// encoder.h
			if (REDENABLED) {					// eeprom.h
     6ee:	8d e0       	ldi	r24, 0x0D	; 13
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     6f6:	88 23       	and	r24, r24
     6f8:	99 f0       	breq	.+38     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
				strcpy(line1, "RED is ENABLED");
     6fa:	8f e0       	ldi	r24, 0x0F	; 15
     6fc:	ef e6       	ldi	r30, 0x6F	; 111
     6fe:	f4 e6       	ldi	r31, 0x64	; 100
     700:	de 01       	movw	r26, r28
     702:	11 96       	adiw	r26, 0x01	; 1
     704:	01 90       	ld	r0, Z+
     706:	0d 92       	st	X+, r0
     708:	8a 95       	dec	r24
     70a:	e1 f7       	brne	.-8      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
				strcpy(line2, "Push to disable");
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	ef e3       	ldi	r30, 0x3F	; 63
     710:	f4 e6       	ldi	r31, 0x64	; 100
     712:	de 01       	movw	r26, r28
     714:	56 96       	adiw	r26, 0x16	; 22
     716:	01 90       	ld	r0, Z+
     718:	0d 92       	st	X+, r0
     71a:	8a 95       	dec	r24
     71c:	e1 f7       	brne	.-8      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     71e:	12 c0       	rjmp	.+36     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
			} else {
				strcpy(line1, "RED is DISABLED");
     720:	80 e1       	ldi	r24, 0x10	; 16
     722:	ee e7       	ldi	r30, 0x7E	; 126
     724:	f4 e6       	ldi	r31, 0x64	; 100
     726:	de 01       	movw	r26, r28
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
				strcpy(line2, "Push to enable");
     732:	8f e0       	ldi	r24, 0x0F	; 15
     734:	e0 e6       	ldi	r30, 0x60	; 96
     736:	f4 e6       	ldi	r31, 0x64	; 100
     738:	de 01       	movw	r26, r28
     73a:	56 96       	adiw	r26, 0x16	; 22
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
			}
			screen_value = SCRDISABLERED;		// encoder.h
     744:	87 e0       	ldi	r24, 0x07	; 7
     746:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
			break;
     74a:	14 c0       	rjmp	.+40     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>

		default:
			strcpy(line1, "default");
     74c:	88 e0       	ldi	r24, 0x08	; 8
     74e:	ee e8       	ldi	r30, 0x8E	; 142
     750:	f4 e6       	ldi	r31, 0x64	; 100
     752:	de 01       	movw	r26, r28
     754:	11 96       	adiw	r26, 0x01	; 1
     756:	01 90       	ld	r0, Z+
     758:	0d 92       	st	X+, r0
     75a:	8a 95       	dec	r24
     75c:	e1 f7       	brne	.-8      	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
			strcpy(line2, "overrun");
     75e:	88 e0       	ldi	r24, 0x08	; 8
     760:	e6 e9       	ldi	r30, 0x96	; 150
     762:	f4 e6       	ldi	r31, 0x64	; 100
     764:	de 01       	movw	r26, r28
     766:	56 96       	adiw	r26, 0x16	; 22
     768:	01 90       	ld	r0, Z+
     76a:	0d 92       	st	X+, r0
     76c:	8a 95       	dec	r24
     76e:	e1 f7       	brne	.-8      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
			screen_value = SCRVERSION;			// encoder.h
     770:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <screen_value>
			break;
	}
	writestr_OLED(0, line1, 1);
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	writestr_OLED(0, line2, 2);
     782:	42 e0       	ldi	r20, 0x02	; 2
     784:	be 01       	movw	r22, r28
     786:	6a 5e       	subi	r22, 0xEA	; 234
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
}
     790:	aa 96       	adiw	r28, 0x2a	; 42
     792:	cd bf       	out	0x3d, r28	; 61
     794:	de bf       	out	0x3e, r29	; 62
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <change_DISABLEBLU>:
	Pushing the knob toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLEBLU(void)
{
	eeprom_update_byte((uint8_t *)BLUENABLEADDR, !BLUENABLED);
     79c:	8c e0       	ldi	r24, 0x0C	; 12
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	81 11       	cpse	r24, r1
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	8c e0       	ldi	r24, 0x0C	; 12
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 65 11 	call	0x22ca	; 0x22ca <eeprom_update_byte>
	encoder_sensed = FALSE;
     7b2:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLEBLU);						// encoder.h
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     7bc:	08 95       	ret

000007be <change_DISABLERED>:
	Pushing the button toggles the ENABLE/DISABLE state by writing the
	state to eeprom.
----------------------------------------------------------------------*/
void change_DISABLERED(void)
{
	eeprom_update_byte((uint8_t *)REDENABLEADDR, !REDENABLED);
     7be:	8d e0       	ldi	r24, 0x0D	; 13
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	81 11       	cpse	r24, r1
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	8d e0       	ldi	r24, 0x0D	; 13
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 65 11 	call	0x22ca	; 0x22ca <eeprom_update_byte>
	encoder_sensed = FALSE;
     7d4:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	display(SCRDISABLERED);						// encoder.h
     7d8:	87 e0       	ldi	r24, 0x07	; 7
     7da:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     7de:	08 95       	ret

000007e0 <change_FILLINT>:
CHANGE FILL INTERVAL
	Pushing the knob lets you change the fill interval in minutes. Push
	the knob again to save the value.
----------------------------------------------------------------------*/
void change_FILLINT(void)
{
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	65 97       	sbiw	r28, 0x15	; 21
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = FILLINTERVAL;				// eeprom.h
     7f6:	8a e0       	ldi	r24, 0x0A	; 10
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     7fe:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     802:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	a9 f4       	brne	.+42     	; 0x834 <change_FILLINT+0x54>
		sprintf(strbuf, "%d minute", encoder_value);
     80a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     80e:	1f 92       	push	r1
     810:	8f 93       	push	r24
     812:	8a ee       	ldi	r24, 0xEA	; 234
     814:	93 e6       	ldi	r25, 0x63	; 99
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	ce 01       	movw	r24, r28
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	14 c0       	rjmp	.+40     	; 0x85c <change_FILLINT+0x7c>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     834:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     838:	1f 92       	push	r1
     83a:	8f 93       	push	r24
     83c:	84 ef       	ldi	r24, 0xF4	; 244
     83e:	93 e6       	ldi	r25, 0x63	; 99
     840:	9f 93       	push	r25
     842:	8f 93       	push	r24
     844:	ce 01       	movw	r24, r28
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set intv", 1);
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	6e e9       	ldi	r22, 0x9E	; 158
     860:	74 e6       	ldi	r23, 0x64	; 100
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     868:	42 e0       	ldi	r20, 0x02	; 2
     86a:	be 01       	movw	r22, r28
     86c:	6f 5f       	subi	r22, 0xFF	; 255
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
				} else if (encoder_value == 255) {
				encoder_value = 254;
     876:	0f 2e       	mov	r0, r31
     878:	fe ef       	ldi	r31, 0xFE	; 254
     87a:	ef 2e       	mov	r14, r31
     87c:	f0 2d       	mov	r31, r0
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
		if (encoder_sensed == ENCODERA) {
			if (encoder_value <= 1) {
				encoder_value = 2;
     87e:	68 94       	set
     880:	ff 24       	eor	r15, r15
     882:	f1 f8       	bld	r15, 1
				} else if (encoder_value == 255) {
				encoder_value = 254;
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     884:	04 ef       	ldi	r16, 0xF4	; 244
     886:	13 e6       	ldi	r17, 0x63	; 99
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     888:	32 c0       	rjmp	.+100    	; 0x8ee <change_FILLINT+0x10e>
		if (encoder_sensed == ENCODERA) {
     88a:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     88e:	87 30       	cpi	r24, 0x07	; 7
     890:	71 f5       	brne	.+92     	; 0x8ee <change_FILLINT+0x10e>
			if (encoder_value <= 1) {
     892:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	18 f4       	brcc	.+6      	; 0x8a0 <change_FILLINT+0xc0>
				encoder_value = 2;
     89a:	f0 92 24 28 	sts	0x2824, r15	; 0x802824 <encoder_value>
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <change_FILLINT+0xcc>
				} else if (encoder_value == 255) {
     8a0:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8a4:	8f 3f       	cpi	r24, 0xFF	; 255
     8a6:	11 f4       	brne	.+4      	; 0x8ac <change_FILLINT+0xcc>
				encoder_value = 254;
     8a8:	e0 92 24 28 	sts	0x2824, r14	; 0x802824 <encoder_value>
			}
			sprintf(strbuf, "%d minutes", encoder_value);
     8ac:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     8b0:	1f 92       	push	r1
     8b2:	8f 93       	push	r24
     8b4:	1f 93       	push	r17
     8b6:	0f 93       	push	r16
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	8c 0f       	add	r24, r28
     8be:	9d 1f       	adc	r25, r29
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
			writestr_OLED(0, "Push to set int", 1);
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	6f ea       	ldi	r22, 0xAF	; 175
     8cc:	74 e6       	ldi	r23, 0x64	; 100
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     8d4:	4f 2d       	mov	r20, r15
     8d6:	be 01       	movw	r22, r28
     8d8:	6f 5f       	subi	r22, 0xFF	; 255
     8da:	7f 4f       	sbci	r23, 0xFF	; 255
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set intv", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {	// encoder.h
     8ee:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     8f2:	85 30       	cpi	r24, 0x05	; 5
     8f4:	51 f6       	brne	.-108    	; 0x88a <change_FILLINT+0xaa>
			sprintf(strbuf, "%d minutes", encoder_value);
			writestr_OLED(0, "Push to set int", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     8f6:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)FILLINTADDR, encoder_value);
     8fa:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 65 11 	call	0x22ca	; 0x22ca <eeprom_update_byte>
	if (MAXOPENTIME >= FILLINTERVAL) {
     906:	8b e0       	ldi	r24, 0x0B	; 11
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     90e:	18 2f       	mov	r17, r24
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     918:	18 17       	cp	r17, r24
     91a:	30 f0       	brcs	.+12     	; 0x928 <change_FILLINT+0x148>
		eeprom_update_byte((uint8_t *)MAXOPENADDR, (FILLINTERVAL - 1));
     91c:	6f ef       	ldi	r22, 0xFF	; 255
     91e:	68 0f       	add	r22, r24
     920:	8b e0       	ldi	r24, 0x0B	; 11
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 65 11 	call	0x22ca	; 0x22ca <eeprom_update_byte>
	}
	display(SCRFILLINT);
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
}
     92e:	65 96       	adiw	r28, 0x15	; 21
     930:	cd bf       	out	0x3d, r28	; 61
     932:	de bf       	out	0x3e, r29	; 62
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	08 95       	ret

00000942 <change_MAXOPENTIME>:
CHANGE MAXIMUM OPEN TIME
	Pushing and then rotating the knob lets you change the maximum
	open time in minutes. Push the knob again to save the new value.
----------------------------------------------------------------------*/
void change_MAXOPENTIME(void)
{
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	65 97       	sbiw	r28, 0x15	; 21
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	de bf       	out	0x3e, r29	; 62
	char strbuf[21];

	encoder_value = MAXOPENTIME;			// eeprom.h
     95c:	8b e0       	ldi	r24, 0x0B	; 11
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     964:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
	if (encoder_value == 1) {
     968:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	a9 f4       	brne	.+42     	; 0x99a <change_MAXOPENTIME+0x58>
		sprintf(strbuf, "%d minute", encoder_value);
     970:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     974:	1f 92       	push	r1
     976:	8f 93       	push	r24
     978:	8a ee       	ldi	r24, 0xEA	; 234
     97a:	93 e6       	ldi	r25, 0x63	; 99
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	14 c0       	rjmp	.+40     	; 0x9c2 <change_MAXOPENTIME+0x80>
		} else {
		sprintf(strbuf, "%d minutes", encoder_value);
     99a:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     99e:	1f 92       	push	r1
     9a0:	8f 93       	push	r24
     9a2:	84 ef       	ldi	r24, 0xF4	; 244
     9a4:	93 e6       	ldi	r25, 0x63	; 99
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
	}
	writestr_OLED(0, "Push to set maxo", 1);
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	6f eb       	ldi	r22, 0xBF	; 191
     9c6:	74 e6       	ldi	r23, 0x64	; 100
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	writestr_OLED(0, strbuf, 2);
     9ce:	42 e0       	ldi	r20, 0x02	; 2
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
			} else if (encoder_value == 255) {
				encoder_value = 254;
     9dc:	0e ef       	ldi	r16, 0xFE	; 254
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
		if (encoder_sensed == ENCODERA) {
			if (encoder_value == 0) {
				encoder_value = 1;
     9de:	11 e0       	ldi	r17, 0x01	; 1
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f4 ef       	ldi	r31, 0xF4	; 244
     9e4:	ef 2e       	mov	r14, r31
     9e6:	f3 e6       	ldi	r31, 0x63	; 99
     9e8:	ff 2e       	mov	r15, r31
     9ea:	f0 2d       	mov	r31, r0
			}
			if (encoder_value >= FILLINTERVAL) {
				encoder_value = FILLINTERVAL - 1;
			}
			if (encoder_value == 1) {
				sprintf(strbuf, "%d minute", encoder_value);
     9ec:	0f 2e       	mov	r0, r31
     9ee:	fa ee       	ldi	r31, 0xEA	; 234
     9f0:	cf 2e       	mov	r12, r31
     9f2:	f3 e6       	ldi	r31, 0x63	; 99
     9f4:	df 2e       	mov	r13, r31
     9f6:	f0 2d       	mov	r31, r0
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     9f8:	57 c0       	rjmp	.+174    	; 0xaa8 <change_MAXOPENTIME+0x166>
		if (encoder_sensed == ENCODERA) {
     9fa:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     9fe:	87 30       	cpi	r24, 0x07	; 7
     a00:	09 f0       	breq	.+2      	; 0xa04 <change_MAXOPENTIME+0xc2>
     a02:	52 c0       	rjmp	.+164    	; 0xaa8 <change_MAXOPENTIME+0x166>
			if (encoder_value == 0) {
     a04:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a08:	81 11       	cpse	r24, r1
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <change_MAXOPENTIME+0xd0>
				encoder_value = 1;
     a0c:	10 93 24 28 	sts	0x2824, r17	; 0x802824 <encoder_value>
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <change_MAXOPENTIME+0xdc>
			} else if (encoder_value == 255) {
     a12:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a16:	8f 3f       	cpi	r24, 0xFF	; 255
     a18:	11 f4       	brne	.+4      	; 0xa1e <change_MAXOPENTIME+0xdc>
				encoder_value = 254;
     a1a:	00 93 24 28 	sts	0x2824, r16	; 0x802824 <encoder_value>
			}
			if (encoder_value >= FILLINTERVAL) {
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     a26:	90 91 24 28 	lds	r25, 0x2824	; 0x802824 <encoder_value>
     a2a:	98 17       	cp	r25, r24
     a2c:	18 f0       	brcs	.+6      	; 0xa34 <change_MAXOPENTIME+0xf2>
				encoder_value = FILLINTERVAL - 1;
     a2e:	81 50       	subi	r24, 0x01	; 1
     a30:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			}
			if (encoder_value == 1) {
     a34:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	a9 f4       	brne	.+42     	; 0xa66 <change_MAXOPENTIME+0x124>
				sprintf(strbuf, "%d minute", encoder_value);
     a3c:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a40:	1f 92       	push	r1
     a42:	8f 93       	push	r24
     a44:	df 92       	push	r13
     a46:	cf 92       	push	r12
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	8c 0f       	add	r24, r28
     a4e:	9d 1f       	adc	r25, r29
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	14 c0       	rjmp	.+40     	; 0xa8e <change_MAXOPENTIME+0x14c>
				} else {
				sprintf(strbuf, "%d minutes", encoder_value);
     a66:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     a6a:	1f 92       	push	r1
     a6c:	8f 93       	push	r24
     a6e:	ff 92       	push	r15
     a70:	ef 92       	push	r14
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	8c 0f       	add	r24, r28
     a78:	9d 1f       	adc	r25, r29
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
			}
			writestr_OLED(0, "Push to set maxo", 1);
     a8e:	41 2f       	mov	r20, r17
     a90:	6f eb       	ldi	r22, 0xBF	; 191
     a92:	74 e6       	ldi	r23, 0x64	; 100
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
			writestr_OLED(0, strbuf, 2);
     a9a:	42 e0       	ldi	r20, 0x02	; 2
     a9c:	be 01       	movw	r22, r28
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
		sprintf(strbuf, "%d minutes", encoder_value);
	}
	writestr_OLED(0, "Push to set maxo", 1);
	writestr_OLED(0, strbuf, 2);

	while (encoder_sensed != ENCODERBUTTON) {
     aa8:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     aac:	85 30       	cpi	r24, 0x05	; 5
     aae:	09 f0       	breq	.+2      	; 0xab2 <change_MAXOPENTIME+0x170>
     ab0:	a4 cf       	rjmp	.-184    	; 0x9fa <change_MAXOPENTIME+0xb8>
			}
			writestr_OLED(0, "Push to set maxo", 1);
			writestr_OLED(0, strbuf, 2);
		}
	}
	encoder_sensed = FALSE;
     ab2:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
	eeprom_update_byte((uint8_t *)MAXOPENADDR, encoder_value);
     ab6:	60 91 24 28 	lds	r22, 0x2824	; 0x802824 <encoder_value>
     aba:	8b e0       	ldi	r24, 0x0B	; 11
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 65 11 	call	0x22ca	; 0x22ca <eeprom_update_byte>
	display(SCRMAXOPENTIME);
     ac2:	84 e0       	ldi	r24, 0x04	; 4
     ac4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>

}
     ac8:	65 96       	adiw	r28, 0x15	; 21
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	08 95       	ret

00000ae0 <init_ENCODER>:
----------------------------------------------------------------------*/
void init_ENCODER(void)
{
	
	// Rotary Encoder
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// ENCA
     ae0:	e0 e4       	ldi	r30, 0x40	; 64
     ae2:	f4 e0       	ldi	r31, 0x04	; 4
     ae4:	8b e0       	ldi	r24, 0x0B	; 11
     ae6:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;							// ENCB
     ae8:	98 e0       	ldi	r25, 0x08	; 8
     aea:	92 8b       	std	Z+18, r25	; 0x12
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// PUSH
     aec:	81 8b       	std	Z+17, r24	; 0x11
     aee:	08 95       	ret

00000af0 <start_FILL>:
	starts an immediate fill cycle. This is not obvious from the
	display screen, which doesn't prompt for a button push.
----------------------------------------------------------------------*/
void start_FILL(void)
{
	if (BLUENABLED) {
     af0:	8c e0       	ldi	r24, 0x0C	; 12
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     af8:	88 23       	and	r24, r24
     afa:	79 f0       	breq	.+30     	; 0xb1a <start_FILL+0x2a>
		if (!BLUVALVEOPEN && BLUTHERMWARM) {
     afc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b00:	88 23       	and	r24, r24
     b02:	5c f0       	brlt	.+22     	; 0xb1a <start_FILL+0x2a>
     b04:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b08:	80 ff       	sbrs	r24, 0
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <start_FILL+0x2a>
			OPENVALVE(BLUVALVE);
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_BLU = 0;
     b12:	e7 e0       	ldi	r30, 0x07	; 7
     b14:	f8 e2       	ldi	r31, 0x28	; 40
     b16:	13 86       	std	Z+11, r1	; 0x0b
			status.maxopen_BLU = FALSE;
     b18:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
	if (REDENABLED) {
     b1a:	8d e0       	ldi	r24, 0x0D	; 13
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     b22:	88 23       	and	r24, r24
     b24:	79 f0       	breq	.+30     	; 0xb44 <start_FILL+0x54>
		if (!REDVALVEOPEN && REDTHERMWARM) {
     b26:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
     b2a:	86 fd       	sbrc	r24, 6
     b2c:	0b c0       	rjmp	.+22     	; 0xb44 <start_FILL+0x54>
     b2e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
     b32:	81 ff       	sbrs	r24, 1
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <start_FILL+0x54>
			OPENVALVE(REDVALVE);
     b36:	80 e4       	ldi	r24, 0x40	; 64
     b38:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f4445>
			status.opentime_RED = 0;
     b3c:	e7 e0       	ldi	r30, 0x07	; 7
     b3e:	f8 e2       	ldi	r31, 0x28	; 40
     b40:	14 86       	std	Z+12, r1	; 0x0c
			status.maxopen_RED = FALSE;
     b42:	10 8a       	std	Z+16, r1	; 0x10
		}
	}
	if (screen_value == SCRVALVES) {
     b44:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	11 f4       	brne	.+4      	; 0xb50 <start_FILL+0x60>
		display(SCRVALVES);
     b4c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
	}
	status.next_fill = FILLINTERVAL;
     b50:	8a e0       	ldi	r24, 0x0A	; 10
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     b58:	80 93 1c 28 	sts	0x281C, r24	; 0x80281c <status+0x15>
     b5c:	08 95       	ret

00000b5e <handle_encoder>:
	The main() routine waits for either of these non-zero values after
	which it calls this.
----------------------------------------------------------------------*/
void handle_encoder(void)
{
	if (display_off) {
     b5e:	80 91 28 28 	lds	r24, 0x2828	; 0x802828 <display_off>
     b62:	88 23       	and	r24, r24
     b64:	29 f0       	breq	.+10     	; 0xb70 <handle_encoder+0x12>
		display(screen_value);
     b66:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b6a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     b6e:	08 95       	ret
	} else if (encoder_sensed == ENCODERA) {
     b70:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     b74:	87 30       	cpi	r24, 0x07	; 7
     b76:	a9 f4       	brne	.+42     	; 0xba2 <handle_encoder+0x44>
		encoder_sensed = FALSE;
     b78:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		screen_value = (screen_value + encoder_change);
     b7c:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b80:	90 91 25 28 	lds	r25, 0x2825	; 0x802825 <encoder_change>
     b84:	89 0f       	add	r24, r25
     b86:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		if (screen_value < 0) {
     b8a:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
			screen_value = MAXSCREENS-1;
		} else {
			screen_value %= MAXSCREENS;
     b8e:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b92:	87 70       	andi	r24, 0x07	; 7
     b94:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <screen_value>
		}
		display(screen_value);
     b98:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     b9c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     ba0:	08 95       	ret
	} else if (encoder_sensed == ENCODERBUTTON) {	// Some screens allow
     ba2:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     ba6:	85 30       	cpi	r24, 0x05	; 5
     ba8:	f9 f4       	brne	.+62     	; 0xbe8 <handle_encoder+0x8a>
		encoder_sensed = FALSE;						// parameter changes
     baa:	10 92 22 28 	sts	0x2822, r1	; 0x802822 <encoder_sensed>
		switch (screen_value) {
     bae:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	89 f0       	breq	.+34     	; 0xbd8 <handle_encoder+0x7a>
     bb6:	28 f4       	brcc	.+10     	; 0xbc2 <handle_encoder+0x64>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	41 f0       	breq	.+16     	; 0xbcc <handle_encoder+0x6e>
     bbc:	83 30       	cpi	r24, 0x03	; 3
     bbe:	49 f0       	breq	.+18     	; 0xbd2 <handle_encoder+0x74>
     bc0:	08 95       	ret
     bc2:	86 30       	cpi	r24, 0x06	; 6
     bc4:	61 f0       	breq	.+24     	; 0xbde <handle_encoder+0x80>
     bc6:	87 30       	cpi	r24, 0x07	; 7
     bc8:	69 f0       	breq	.+26     	; 0xbe4 <handle_encoder+0x86>
     bca:	08 95       	ret
			case SCRNEXTFILL:				// Immediate start fill
				start_FILL();
     bcc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <start_FILL>
				break;
     bd0:	08 95       	ret
			case SCRFILLINT:				// Change fill interval
				change_FILLINT();
     bd2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <change_FILLINT>
				break;
     bd6:	08 95       	ret
			case SCRMAXOPENTIME:			// Change max open time
				change_MAXOPENTIME();
     bd8:	0e 94 a1 04 	call	0x942	; 0x942 <change_MAXOPENTIME>
				break;
     bdc:	08 95       	ret
			case SCRDISABLEBLU:				// Disable blue fills
				change_DISABLEBLU();
     bde:	0e 94 ce 03 	call	0x79c	; 0x79c <change_DISABLEBLU>
				break;
     be2:	08 95       	ret
			case SCRDISABLERED:				// Disable red fills
				change_DISABLERED();
     be4:	0e 94 df 03 	call	0x7be	; 0x7be <change_DISABLERED>
     be8:	08 95       	ret

00000bea <__vector_24>:

/*----------------------------------------------------------------------
Interrupt routine for encoder rotation or pushbutton
----------------------------------------------------------------------*/
ISR(PORTC_PORT_vect)
{
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	8f 93       	push	r24
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
	if (PORTC.INTFLAGS & PIN1_bm) {			// Encoder pushbutton
     bfa:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     bfe:	81 ff       	sbrs	r24, 1
     c00:	07 c0       	rjmp	.+14     	; 0xc10 <__vector_24+0x26>
		PORTC.INTFLAGS = PIN1_bm;			// Clear interrupt flag
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
		encoder_sensed = ENCODERBUTTON;
     c08:	85 e0       	ldi	r24, 0x05	; 5
     c0a:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
     c0e:	1f c0       	rjmp	.+62     	; 0xc4e <__vector_24+0x64>
	} else if (PORTC.INTFLAGS & PIN3_bm) {	// Encoder rotary
     c10:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__TEXT_REGION_LENGTH__+0x7f4449>
     c14:	83 ff       	sbrs	r24, 3
     c16:	1b c0       	rjmp	.+54     	; 0xc4e <__vector_24+0x64>
		PORTC.INTFLAGS = PIN3_bm;			// Clear interrupt flag
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f4 e0       	ldi	r31, 0x04	; 4
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	81 87       	std	Z+9, r24	; 0x09
		if (PORTC.IN & PIN2_bm) {
     c20:	80 85       	ldd	r24, Z+8	; 0x08
     c22:	82 ff       	sbrs	r24, 2
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__vector_24+0x4e>
			encoder_value++;
     c26:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
     c36:	08 c0       	rjmp	.+16     	; 0xc48 <__vector_24+0x5e>
		} else {
			encoder_value--;
     c38:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <encoder_value>
     c3c:	81 50       	subi	r24, 0x01	; 1
     c3e:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <encoder_value>
			encoder_change = -1;
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	80 93 25 28 	sts	0x2825, r24	; 0x802825 <encoder_change>
		}
		encoder_sensed = ENCODERA;
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	80 93 22 28 	sts	0x2822, r24	; 0x802822 <encoder_sensed>
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	8f 91       	pop	r24
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <init_STATUS>:
//	clear_BUTTONS();

}

void init_STATUS()
{
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29

	status.next_buftank_fill = BIGFILLINTERVAL;
     c62:	c7 e0       	ldi	r28, 0x07	; 7
     c64:	d8 e2       	ldi	r29, 0x28	; 40
     c66:	8c e0       	ldi	r24, 0x0C	; 12
     c68:	8e 8b       	std	Y+22, r24	; 0x16
	status.next_fill = FILLINTERVAL;
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
     c72:	8d 8b       	std	Y+21, r24	; 0x15
	status.opentime_BLU = 0;
     c74:	1b 86       	std	Y+11, r1	; 0x0b
	status.opentime_RED = 0;
     c76:	1c 86       	std	Y+12, r1	; 0x0c
	status.opentime_BUF = 0;
     c78:	1d 86       	std	Y+13, r1	; 0x0d
	status.opentime_SUP = 0;
     c7a:	1e 86       	std	Y+14, r1	; 0x0e
	status.maxopen_BLU = FALSE;		// TRUE when open too long
     c7c:	1f 86       	std	Y+15, r1	; 0x0f
	status.maxopen_RED = FALSE;
     c7e:	18 8a       	std	Y+16, r1	; 0x10
	status.maxopen_BUF = FALSE;
     c80:	19 8a       	std	Y+17, r1	; 0x11
	status.overfill_BUF = 0;
     c82:	1a 8a       	std	Y+18, r1	; 0x12
	status.overfill_BLU = 0;
     c84:	1b 8a       	std	Y+19, r1	; 0x13
	status.overfill_RED = 0;
     c86:	1c 8a       	std	Y+20, r1	; 0x14
	status.pressure = read_PRESSURE();
     c88:	0e 94 28 08 	call	0x1050	; 0x1050 <read_PRESSURE>
     c8c:	8a 8f       	std	Y+26, r24	; 0x1a

}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <init_PORTS>:

void init_PORTS(void)
{

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c94:	e0 e6       	ldi	r30, 0x60	; 96
     c96:	f4 e0       	ldi	r31, 0x04	; 4
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c9c:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     c9e:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca0:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca2:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca4:	85 8b       	std	Z+21, r24	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca6:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
     ca8:	87 8b       	std	Z+23, r24	; 0x17
     caa:	08 95       	ret

00000cac <init>:
void init_STATUS(void);

void init(void)
{

	hour_flag = FALSE;
     cac:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
	minute_flag = FALSE;
     cb0:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>
	seconds = 0;
     cb4:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	init_PORTS();
     cb8:	0e 94 4a 06 	call	0xc94	; 0xc94 <init_PORTS>
	init_VALVES();
     cbc:	0e 94 46 0c 	call	0x188c	; 0x188c <init_VALVES>
//	init_TCB2();
	init_USART();
     cc0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <init_USART>
	init_BUTTONS();
     cc4:	0e 94 2b 01 	call	0x256	; 0x256 <init_BUTTONS>
	init_ENCODER();
     cc8:	0e 94 70 05 	call	0xae0	; 0xae0 <init_ENCODER>
	init_TWI();
     ccc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <init_TWI>
	init_RTC(511);
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 94 09 	call	0x1328	; 0x1328 <init_RTC>
	init_ADC();
     cd8:	0e 94 fc 07 	call	0xff8	; 0xff8 <init_ADC>
	init_STATUS();
     cdc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <init_STATUS>
	init_OLED(0);
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	0e 94 b4 06 	call	0xd68	; 0xd68 <init_OLED>
	update_VERSION();
     ce6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <update_VERSION>
	display(SCRVERSION);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
     cf0:	08 95       	ret

00000cf2 <main>:
#include "rtc.h"
#include "usart.h"

int main(void)
{
	init();
     cf2:	0e 94 56 06 	call	0xcac	; 0xcac <init>
	sei();
     cf6:	78 94       	sei
		}
		if (tick) {				// Things to do once a second
			handle_ticks();		// See rtc.c
			button_pushed = scan_buttons();
		}
		if (recv0_buf.done) {	// Serial communication received
     cf8:	ca e2       	ldi	r28, 0x2A	; 42
     cfa:	d9 e2       	ldi	r29, 0x29	; 41
int main(void)
{
	init();
	sei();
	for (;;) {
		if (button_pushed) {	// Front panel button pushed
     cfc:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     d00:	81 11       	cpse	r24, r1
			handle_button();	// See buttons.c
     d02:	0e 94 7c 00 	call	0xf8	; 0xf8 <handle_button>
		}
		if (encoder_sensed) {	// Front panel encoder changed
     d06:	80 91 22 28 	lds	r24, 0x2822	; 0x802822 <encoder_sensed>
     d0a:	81 11       	cpse	r24, r1
			handle_encoder();	// See encoder.c
     d0c:	0e 94 af 05 	call	0xb5e	; 0xb5e <handle_encoder>
		}
		if (hour_flag) {		// Things to do once an hour
     d10:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <hour_flag>
     d14:	81 11       	cpse	r24, r1
			handle_hour();		// See rtc.c
     d16:	0e 94 8b 08 	call	0x1116	; 0x1116 <handle_hour>
		}
		if (minute_flag) {		// Things to do once a minute
     d1a:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <minute_flag>
     d1e:	81 11       	cpse	r24, r1
			handle_minute();	// See rtc.c
     d20:	0e 94 8e 08 	call	0x111c	; 0x111c <handle_minute>
		}
		if (tick) {				// Things to do once a second
     d24:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <tick>
     d28:	88 23       	and	r24, r24
     d2a:	31 f0       	breq	.+12     	; 0xd38 <main+0x46>
			handle_ticks();		// See rtc.c
     d2c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <handle_ticks>
			button_pushed = scan_buttons();
     d30:	0e 94 2c 01 	call	0x258	; 0x258 <scan_buttons>
     d34:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
		}
		if (recv0_buf.done) {	// Serial communication received
     d38:	88 81       	ld	r24, Y
     d3a:	88 23       	and	r24, r24
     d3c:	f9 f2       	breq	.-66     	; 0xcfc <main+0xa>
			handle_serial();	// See usart.c
     d3e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <handle_serial>
     d42:	dc cf       	rjmp	.-72     	; 0xcfc <main+0xa>

00000d44 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	d6 2f       	mov	r29, r22
     d4a:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	0e 94 35 0a 	call	0x146a	; 0x146a <start_TWI>
	write_TWI(type);
     d52:	8d 2f       	mov	r24, r29
     d54:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <write_TWI>
	write_TWI(byteToSend);
     d58:	8c 2f       	mov	r24, r28
     d5a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <write_TWI>
	stop_TWI();
     d5e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <stop_TWI>

}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
     d68:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTA.OUTCLR = PIN7_bm;		// PA7 is the /RESET pin for the OLED display
     d6a:	e0 e0       	ldi	r30, 0x00	; 0
     d6c:	f4 e0       	ldi	r31, 0x04	; 4
     d6e:	90 e8       	ldi	r25, 0x80	; 128
     d70:	96 83       	std	Z+6, r25	; 0x06
	PORTA.DIRSET = PIN7_bm;
     d72:	91 83       	std	Z+1, r25	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d74:	a6 e4       	ldi	r26, 0x46	; 70
     d76:	b0 e1       	ldi	r27, 0x10	; 16
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <init_OLED+0x10>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <init_OLED+0x16>
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;
     d7e:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
     d80:	88 23       	and	r24, r24
     d82:	11 f0       	breq	.+4      	; 0xd88 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     d84:	cd e3       	ldi	r28, 0x3D	; 61
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <init_OLED+0x22>
	PORTA.DIRSET = PIN7_bm;
	_delay_ms(5);				// Reset time (was 1 ms)
	PORTA.OUTSET = PIN7_bm;

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     d88:	cc e3       	ldi	r28, 0x3C	; 60
	} else {
		twiaddr = OLEDADDR1;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
     d8a:	4a e2       	ldi	r20, 0x2A	; 42
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	8c 2f       	mov	r24, r28
     d90:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
     d94:	41 e7       	ldi	r20, 0x71	; 113
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	8c 2f       	mov	r24, r28
     d9a:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
     d9e:	4c e5       	ldi	r20, 0x5C	; 92
     da0:	60 e4       	ldi	r22, 0x40	; 64
     da2:	8c 2f       	mov	r24, r28
     da4:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     da8:	48 e2       	ldi	r20, 0x28	; 40
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	8c 2f       	mov	r24, r28
     dae:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
     db2:	48 e0       	ldi	r20, 0x08	; 8
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	8c 2f       	mov	r24, r28
     db8:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     dbc:	4a e2       	ldi	r20, 0x2A	; 42
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	8c 2f       	mov	r24, r28
     dc2:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     dc6:	49 e7       	ldi	r20, 0x79	; 121
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	8c 2f       	mov	r24, r28
     dcc:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
     dd0:	45 ed       	ldi	r20, 0xD5	; 213
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	8c 2f       	mov	r24, r28
     dd6:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
     dda:	40 e7       	ldi	r20, 0x70	; 112
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	8c 2f       	mov	r24, r28
     de0:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     de4:	48 e7       	ldi	r20, 0x78	; 120
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	8c 2f       	mov	r24, r28
     dea:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
     dee:	48 e0       	ldi	r20, 0x08	; 8
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	8c 2f       	mov	r24, r28
     df4:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
     df8:	46 e0       	ldi	r20, 0x06	; 6
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	8c 2f       	mov	r24, r28
     dfe:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
     e02:	42 e7       	ldi	r20, 0x72	; 114
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	8c 2f       	mov	r24, r28
     e08:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	60 e4       	ldi	r22, 0x40	; 64
     e10:	8c 2f       	mov	r24, r28
     e12:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
     e16:	4a e2       	ldi	r20, 0x2A	; 42
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	8c 2f       	mov	r24, r28
     e1c:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
     e20:	49 e7       	ldi	r20, 0x79	; 121
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	8c 2f       	mov	r24, r28
     e26:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
     e2a:	4a ed       	ldi	r20, 0xDA	; 218
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	8c 2f       	mov	r24, r28
     e30:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	8c 2f       	mov	r24, r28
     e3a:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
     e3e:	4c ed       	ldi	r20, 0xDC	; 220
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	8c 2f       	mov	r24, r28
     e44:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	8c 2f       	mov	r24, r28
     e4e:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
     e52:	41 e8       	ldi	r20, 0x81	; 129
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	8c 2f       	mov	r24, r28
     e58:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
     e5c:	4f e7       	ldi	r20, 0x7F	; 127
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	8c 2f       	mov	r24, r28
     e62:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
     e66:	49 ed       	ldi	r20, 0xD9	; 217
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	8c 2f       	mov	r24, r28
     e6c:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
     e70:	41 ef       	ldi	r20, 0xF1	; 241
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	8c 2f       	mov	r24, r28
     e76:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
     e7a:	4b ed       	ldi	r20, 0xDB	; 219
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	8c 2f       	mov	r24, r28
     e80:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
     e84:	40 e4       	ldi	r20, 0x40	; 64
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	8c 2f       	mov	r24, r28
     e8a:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
     e8e:	48 e7       	ldi	r20, 0x78	; 120
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	8c 2f       	mov	r24, r28
     e94:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
     e98:	48 e2       	ldi	r20, 0x28	; 40
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8c 2f       	mov	r24, r28
     e9e:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	8c 2f       	mov	r24, r28
     ea8:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	8c 2f       	mov	r24, r28
     eb2:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
     eb6:	4c e0       	ldi	r20, 0x0C	; 12
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	8c 2f       	mov	r24, r28
     ebc:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
     ec0:	ba e6       	ldi	r27, 0x6A	; 106
     ec2:	24 e0       	ldi	r18, 0x04	; 4
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	b1 50       	subi	r27, 0x01	; 1
     ec8:	20 40       	sbci	r18, 0x00	; 0
     eca:	80 40       	sbci	r24, 0x00	; 0
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <init_OLED+0x15e>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
     ed0:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     ed4:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>

}
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	e2 97       	sbiw	r28, 0x32	; 50
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	d4 2e       	mov	r13, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
     ef6:	91 e1       	ldi	r25, 0x11	; 17
     ef8:	e0 ed       	ldi	r30, 0xD0	; 208
     efa:	f4 e6       	ldi	r31, 0x64	; 100
     efc:	de 01       	movw	r26, r28
     efe:	92 96       	adiw	r26, 0x22	; 34
     f00:	01 90       	ld	r0, Z+
     f02:	0d 92       	st	X+, r0
     f04:	9a 95       	dec	r25
     f06:	e1 f7       	brne	.-8      	; 0xf00 <writestr_OLED+0x24>

	if (displaynumber == 0) {
     f08:	88 23       	and	r24, r24
     f0a:	29 f0       	breq	.+10     	; 0xf16 <writestr_OLED+0x3a>
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
     f0c:	0f 2e       	mov	r0, r31
     f0e:	fd e3       	ldi	r31, 0x3D	; 61
     f10:	ff 2e       	mov	r15, r31
     f12:	f0 2d       	mov	r31, r0
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <writestr_OLED+0x42>
	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
     f16:	0f 2e       	mov	r0, r31
     f18:	fc e3       	ldi	r31, 0x3C	; 60
     f1a:	ff 2e       	mov	r15, r31
     f1c:	f0 2d       	mov	r31, r0
	} else {
		twiaddr = OLEDADDR1;
	}
	strcpy(strbuf, str);
     f1e:	8e 01       	movw	r16, r28
     f20:	0f 5f       	subi	r16, 0xFF	; 255
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <strcpy>
	if (strlen(strbuf) > 16) {
     f2a:	f8 01       	movw	r30, r16
     f2c:	01 90       	ld	r0, Z+
     f2e:	00 20       	and	r0, r0
     f30:	e9 f7       	brne	.-6      	; 0xf2c <writestr_OLED+0x50>
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	e0 1b       	sub	r30, r16
     f36:	f1 0b       	sbc	r31, r17
     f38:	71 97       	sbiw	r30, 0x11	; 17
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <writestr_OLED+0x62>
		strbuf[16] = '\0';
     f3c:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
     f3e:	be 01       	movw	r22, r28
     f40:	6e 5d       	subi	r22, 0xDE	; 222
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <strcat>

	if (lineno == 1) {
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	d8 12       	cpse	r13, r24
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <writestr_OLED+0x82>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	8f 2d       	mov	r24, r15
     f58:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
     f5c:	19 c0       	rjmp	.+50     	; 0xf90 <writestr_OLED+0xb4>
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
     f5e:	40 ec       	ldi	r20, 0xC0	; 192
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	8f 2d       	mov	r24, r15
     f64:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
     f68:	13 c0       	rjmp	.+38     	; 0xf90 <writestr_OLED+0xb4>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
     f6a:	f8 01       	movw	r30, r16
     f6c:	41 91       	ld	r20, Z+
     f6e:	8f 01       	movw	r16, r30
     f70:	60 e4       	ldi	r22, 0x40	; 64
     f72:	8f 2d       	mov	r24, r15
     f74:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_OLED>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
     f78:	0c 15       	cp	r16, r12
     f7a:	1d 05       	cpc	r17, r13
     f7c:	b1 f7       	brne	.-20     	; 0xf6a <writestr_OLED+0x8e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
     f86:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
	display_off = FALSE;
     f8a:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <display_off>

}
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <writestr_OLED+0xc4>
     f90:	8e 01       	movw	r16, r28
     f92:	0f 5f       	subi	r16, 0xFF	; 255
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	6e 01       	movw	r12, r28
     f98:	f1 e1       	ldi	r31, 0x11	; 17
     f9a:	cf 0e       	add	r12, r31
     f9c:	d1 1c       	adc	r13, r1
     f9e:	e5 cf       	rjmp	.-54     	; 0xf6a <writestr_OLED+0x8e>
     fa0:	e2 96       	adiw	r28, 0x32	; 50
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	08 95       	ret

00000fb6 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	1f 92       	push	r1
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	18 2f       	mov	r17, r24

	char nullstr[] = "";
     fc4:	19 82       	std	Y+1, r1	; 0x01

	writestr_OLED(displaynumber, nullstr, 1);
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	be 01       	movw	r22, r28
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
     fd2:	42 e0       	ldi	r20, 0x02	; 2
     fd4:	be 01       	movw	r22, r28
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	81 2f       	mov	r24, r17
     fdc:	0e 94 6e 07 	call	0xedc	; 0xedc <writestr_OLED>
	timerOLED = 0;
     fe0:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
     fe4:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
	display_off = TRUE;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <display_off>

}
     fee:	0f 90       	pop	r0
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	08 95       	ret

00000ff8 <init_ADC>:
 Trigger a conversion by writing 1 to STCONV in ADCn.COMMAND
----------------------------------------------------------------------*/
void init_ADC()
{

	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;		// Disable digital input
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	ADC0_CTRLA |= ADC_RESSEL_8BIT_gc;		// 8-bit resolution
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f6 e0       	ldi	r31, 0x06	; 6
    1002:	80 81       	ld	r24, Z
    1004:	84 60       	ori	r24, 0x04	; 4
    1006:	80 83       	st	Z, r24
//	ADC0_CTRLA |= ADC_RESSEL_10BIT_gc;		// 10-bit resolution
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;	// Use 4.3V reference
    1008:	a0 ea       	ldi	r26, 0xA0	; 160
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	8c 91       	ld	r24, X
    100e:	80 63       	ori	r24, 0x30	; 48
    1010:	8c 93       	st	X, r24
//	VREF.CTRLA |= VREF_ADC0REFSEL_2V5_gc;	// Use 2.5V reference
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
    1012:	a2 e0       	ldi	r26, 0x02	; 2
    1014:	b6 e0       	ldi	r27, 0x06	; 6
    1016:	8c 91       	ld	r24, X
    1018:	8c 93       	st	X, r24
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
    101a:	8c 91       	ld	r24, X
    101c:	80 64       	ori	r24, 0x40	; 64
    101e:	8c 93       	st	X, r24
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
    1020:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
    1024:	80 81       	ld	r24, Z
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	80 83       	st	Z, r24
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
    102a:	e8 e0       	ldi	r30, 0x08	; 8
    102c:	f6 e0       	ldi	r31, 0x06	; 6
    102e:	80 81       	ld	r24, Z
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	80 83       	st	Z, r24
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    1034:	80 81       	ld	r24, Z
    1036:	80 ff       	sbrs	r24, 0
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <init_ADC+0x4a>
		asm("nop");
    103a:	00 00       	nop
	ADC0_CTRLC |= ADC_REFSEL_INTREF_gc;		// Use internal vref
	ADC0_CTRLC |= ADC_SAMPCAP_bm;			// Reduce sampling capacitance
	ADC0_MUXPOS = ADC_MUXPOS_AIN0_gc;		// PD0 pin feeds ADC
	ADC0.CTRLA |= ADC_ENABLE_bm;			// Enable ADC
	ADC0_COMMAND |= ADC_STCONV_bm;			// Start ADC conversion
	while (ADC0_COMMAND & ADC_STCONV_bm) {	// Wait
    103c:	80 81       	ld	r24, Z
    103e:	80 fd       	sbrc	r24, 0
    1040:	fc cf       	rjmp	.-8      	; 0x103a <init_ADC+0x42>
		asm("nop");
	}
	status.pressure = ADC0_RES;				// Throw first one away
    1042:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    1046:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	status.pressure = 0;
    104a:	10 92 21 28 	sts	0x2821, r1	; 0x802821 <status+0x1a>
    104e:	08 95       	ret

00001050 <read_PRESSURE>:
	The ADC is set up for a 4.3 V reference. The PSSLOPE and PSINTERCEPT
	were determined from actual voltage measurements on a Curiosity
	Nano but it looks like data sheet values would be OK.
----------------------------------------------------------------------*/
uint8_t read_PRESSURE(void)
{
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	0f 2e       	mov	r0, r31
    1064:	fa e0       	ldi	r31, 0x0A	; 10
    1066:	bf 2e       	mov	r11, r31
    1068:	f0 2d       	mov	r31, r0

	uint8_t i, nsamples;
	float value;

	value = 0.0;
    106a:	c1 2c       	mov	r12, r1
    106c:	d1 2c       	mov	r13, r1
    106e:	76 01       	movw	r14, r12
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1070:	c8 e0       	ldi	r28, 0x08	; 8
    1072:	d6 e0       	ldi	r29, 0x06	; 6
		while (ADC0_COMMAND & ADC_STCONV_bm) {
			asm("nop");
		}
		value += (float) ADC0_RESL;
    1074:	00 e1       	ldi	r16, 0x10	; 16
    1076:	16 e0       	ldi	r17, 0x06	; 6
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
    1078:	88 81       	ld	r24, Y
    107a:	81 60       	ori	r24, 0x01	; 1
    107c:	88 83       	st	Y, r24
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    107e:	88 81       	ld	r24, Y
    1080:	80 ff       	sbrs	r24, 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <read_PRESSURE+0x3c>
			asm("nop");
    1084:	00 00       	nop

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
		ADC0_COMMAND |= ADC_STCONV_bm;
		while (ADC0_COMMAND & ADC_STCONV_bm) {
    1086:	88 81       	ld	r24, Y
    1088:	80 fd       	sbrc	r24, 0
    108a:	fc cf       	rjmp	.-8      	; 0x1084 <read_PRESSURE+0x34>
			asm("nop");
		}
		value += (float) ADC0_RESL;
    108c:	f8 01       	movw	r30, r16
    108e:	60 81       	ld	r22, Z
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__floatunsisf>
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	0e 94 4d 0c 	call	0x189a	; 0x189a <__addsf3>
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
    10aa:	ba 94       	dec	r11
	uint8_t i, nsamples;
	float value;

	value = 0.0;
	nsamples = 10;
	for (i = 0; i < nsamples; i++) {
    10ac:	b1 10       	cpse	r11, r1
    10ae:	e4 cf       	rjmp	.-56     	; 0x1078 <read_PRESSURE+0x28>
			asm("nop");
		}
		value += (float) ADC0_RESL;
	}

	value = PSSLOPE * (value/((float)nsamples)) + PSINTERCEPT;
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 be 0c 	call	0x197c	; 0x197c <__divsf3>
    10bc:	2e e5       	ldi	r18, 0x5E	; 94
    10be:	3a eb       	ldi	r19, 0xBA	; 186
    10c0:	49 e5       	ldi	r20, 0x59	; 89
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__mulsf3>
    10c8:	2f e1       	ldi	r18, 0x1F	; 31
    10ca:	35 e8       	ldi	r19, 0x85	; 133
    10cc:	45 ec       	ldi	r20, 0xC5	; 197
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__subsf3>
    10d4:	6b 01       	movw	r12, r22
    10d6:	7c 01       	movw	r14, r24
	if (value < 0.0) {
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__cmpsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	1c f4       	brge	.+6      	; 0x10ec <read_PRESSURE+0x9c>
		value = 0.0;
    10e6:	c1 2c       	mov	r12, r1
    10e8:	d1 2c       	mov	r13, r1
    10ea:	76 01       	movw	r14, r12
	}

	return ((uint8_t)(value+0.5));
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	c7 01       	movw	r24, r14
    10f6:	b6 01       	movw	r22, r12
    10f8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__addsf3>
    10fc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fixunssfsi>
    1100:	86 2f       	mov	r24, r22

}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	08 95       	ret

00001116 <handle_hour>:
THINGS TO DO EVERY HOUR
----------------------------------------------------------------------*/
void handle_hour(void)
{

	hour_flag = FALSE;
    1116:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <hour_flag>
    111a:	08 95       	ret

0000111c <handle_minute>:

/*----------------------------------------------------------------------
THINGS TO DO EVERY MINUTE
----------------------------------------------------------------------*/
void handle_minute(void)
{
    111c:	cf 93       	push	r28

	if (++minutes >= 60) {
    111e:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <minutes>
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <minutes>
    1128:	8c 33       	cpi	r24, 0x3C	; 60
    112a:	28 f0       	brcs	.+10     	; 0x1136 <handle_minute+0x1a>
		hour_flag = TRUE;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <hour_flag>
		minutes = 0;
    1132:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <minutes>
	}

	minute_flag = FALSE;
    1136:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <minute_flag>

	if (BLUVALVEOPEN) {
    113a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    113e:	88 23       	and	r24, r24
    1140:	8c f4       	brge	.+34     	; 0x1164 <handle_minute+0x48>
		status.opentime_BLU++;
    1142:	e7 e0       	ldi	r30, 0x07	; 7
    1144:	f8 e2       	ldi	r31, 0x28	; 40
    1146:	c3 85       	ldd	r28, Z+11	; 0x0b
    1148:	cf 5f       	subi	r28, 0xFF	; 255
    114a:	c3 87       	std	Z+11, r28	; 0x0b
		if (status.opentime_BLU >= MAXOPENTIME) {	// MAX OPEN ERROR
    114c:	8b e0       	ldi	r24, 0x0B	; 11
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
    1154:	c8 17       	cp	r28, r24
    1156:	30 f0       	brcs	.+12     	; 0x1164 <handle_minute+0x48>
			CLOSEVALVE(BLUVALVE);
    1158:	80 e8       	ldi	r24, 0x80	; 128
    115a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_BLU = TRUE;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 16 28 	sts	0x2816, r24	; 0x802816 <status+0xf>
		}
	}

	if (REDVALVEOPEN) {
    1164:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1168:	86 ff       	sbrs	r24, 6
    116a:	11 c0       	rjmp	.+34     	; 0x118e <handle_minute+0x72>
		status.opentime_RED++;
    116c:	e7 e0       	ldi	r30, 0x07	; 7
    116e:	f8 e2       	ldi	r31, 0x28	; 40
    1170:	c4 85       	ldd	r28, Z+12	; 0x0c
    1172:	cf 5f       	subi	r28, 0xFF	; 255
    1174:	c4 87       	std	Z+12, r28	; 0x0c
		if (status.opentime_RED >= MAXOPENTIME) {	// MAX OPEN ERROR
    1176:	8b e0       	ldi	r24, 0x0B	; 11
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
    117e:	c8 17       	cp	r28, r24
    1180:	30 f0       	brcs	.+12     	; 0x118e <handle_minute+0x72>
			CLOSEVALVE(REDVALVE);
    1182:	80 e4       	ldi	r24, 0x40	; 64
    1184:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.maxopen_RED = TRUE;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 17 28 	sts	0x2817, r24	; 0x802817 <status+0x10>
		}
	}

	if (BUFVALVEOPEN) {
    118e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1192:	85 ff       	sbrs	r24, 5
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <handle_minute+0xa0>
		status.opentime_BUF++;
    1196:	e7 e0       	ldi	r30, 0x07	; 7
    1198:	f8 e2       	ldi	r31, 0x28	; 40
    119a:	85 85       	ldd	r24, Z+13	; 0x0d
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	85 87       	std	Z+13, r24	; 0x0d
		if (status.opentime_BUF >= BUFMAXOPEN) {	// valves.h MAX OPEN ERROR
    11a0:	84 31       	cpi	r24, 0x14	; 20
    11a2:	60 f0       	brcs	.+24     	; 0x11bc <handle_minute+0xa0>
			CLOSEVALVE(BUFVALVE);
    11a4:	e0 e4       	ldi	r30, 0x40	; 64
    11a6:	f4 e0       	ldi	r31, 0x04	; 4
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	86 83       	std	Z+6, r24	; 0x06
			CLOSEVALVE(SUPVALVE);
    11ac:	80 e1       	ldi	r24, 0x10	; 16
    11ae:	86 83       	std	Z+6, r24	; 0x06
			status.maxopen_BUF = TRUE;
    11b0:	e7 e0       	ldi	r30, 0x07	; 7
    11b2:	f8 e2       	ldi	r31, 0x28	; 40
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	81 8b       	std	Z+17, r24	; 0x11
			status.next_buftank_fill = BIGFILLINTERVAL;
    11b8:	8c e0       	ldi	r24, 0x0C	; 12
    11ba:	86 8b       	std	Z+22, r24	; 0x16
		}
	}

	if (SUPVALVEOPEN) {
    11bc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    11c0:	84 ff       	sbrs	r24, 4
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <handle_minute+0xb2>
		status.opentime_SUP++;				// Increment supply dewar valve time
    11c4:	e7 e0       	ldi	r30, 0x07	; 7
    11c6:	f8 e2       	ldi	r31, 0x28	; 40
    11c8:	86 85       	ldd	r24, Z+14	; 0x0e
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	86 87       	std	Z+14, r24	; 0x0e
	}

	status.next_fill--;
    11ce:	e7 e0       	ldi	r30, 0x07	; 7
    11d0:	f8 e2       	ldi	r31, 0x28	; 40
    11d2:	85 89       	ldd	r24, Z+21	; 0x15
    11d4:	81 50       	subi	r24, 0x01	; 1
    11d6:	85 8b       	std	Z+21, r24	; 0x15
	if (status.next_fill == 0) {
    11d8:	81 11       	cpse	r24, r1
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <handle_minute+0xc4>
		start_FILL();						// See encoder.c
    11dc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <start_FILL>
	}
}
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <handle_ticks>:
THINGS TO DO EVERY SECOND
----------------------------------------------------------------------*/
void handle_ticks(void)
{

	tick = FALSE;
    11e4:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <tick>

	if (seconds >= 60) {		// seconds incremented in ISR
    11e8:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    11ec:	8c 33       	cpi	r24, 0x3C	; 60
    11ee:	28 f0       	brcs	.+10     	; 0x11fa <handle_ticks+0x16>
		minute_flag = TRUE;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <minute_flag>
		seconds = 0;
    11f6:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <seconds>
	}

	status.pressure = read_PRESSURE();				// LN2 pressure
    11fa:	0e 94 28 08 	call	0x1050	; 0x1050 <read_PRESSURE>
    11fe:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <status+0x1a>

//	handle_button();

	if (BLUVALVEOPEN && !BLUTHERMWARM) {			// Valve open, therm cold
    1202:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1206:	88 23       	and	r24, r24
    1208:	f4 f4       	brge	.+60     	; 0x1246 <handle_ticks+0x62>
    120a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    120e:	80 fd       	sbrc	r24, 0
    1210:	1a c0       	rjmp	.+52     	; 0x1246 <handle_ticks+0x62>
		if (status.overfill_BLU >= OVERFILLBLU) {	// valves.h
    1212:	80 91 1a 28 	lds	r24, 0x281A	; 0x80281a <status+0x13>
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	30 f0       	brcs	.+12     	; 0x1226 <handle_ticks+0x42>
			CLOSEVALVE(BLUVALVE);
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_BLU = 0;
    1220:	10 92 1a 28 	sts	0x281A, r1	; 0x80281a <status+0x13>
    1224:	03 c0       	rjmp	.+6      	; 0x122c <handle_ticks+0x48>
		} else {
			status.overfill_BLU++;
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 1a 28 	sts	0x281A, r24	; 0x80281a <status+0x13>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    122c:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	49 f4       	brne	.+18     	; 0x1246 <handle_ticks+0x62>
    1234:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    1238:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    123c:	89 2b       	or	r24, r25
    123e:	19 f0       	breq	.+6      	; 0x1246 <handle_ticks+0x62>
			display(SCRVALVES);
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
		}
	}

	if (REDVALVEOPEN && !REDTHERMWARM) {			// Valve open, therm cold
    1246:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    124a:	86 ff       	sbrs	r24, 6
    124c:	1f c0       	rjmp	.+62     	; 0x128c <handle_ticks+0xa8>
    124e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1252:	81 fd       	sbrc	r24, 1
    1254:	1b c0       	rjmp	.+54     	; 0x128c <handle_ticks+0xa8>
		if (status.overfill_RED >= OVERFILLRED) {	// valves.h
    1256:	80 91 1b 28 	lds	r24, 0x281B	; 0x80281b <status+0x14>
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	30 f0       	brcs	.+12     	; 0x126a <handle_ticks+0x86>
			CLOSEVALVE(REDVALVE);
    125e:	80 e4       	ldi	r24, 0x40	; 64
    1260:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f4446>
			status.overfill_RED = 0;
    1264:	10 92 1b 28 	sts	0x281B, r1	; 0x80281b <status+0x14>
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <handle_ticks+0x8c>
		} else {
			status.overfill_RED++;
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	80 93 1b 28 	sts	0x281B, r24	; 0x80281b <status+0x14>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    1270:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	51 f4       	brne	.+20     	; 0x128c <handle_ticks+0xa8>
    1278:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    127c:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    1280:	89 2b       	or	r24, r25
    1282:	09 f4       	brne	.+2      	; 0x1286 <handle_ticks+0xa2>
    1284:	48 c0       	rjmp	.+144    	; 0x1316 <handle_ticks+0x132>
			display(SCRVALVES);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
		}
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    128c:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1290:	85 ff       	sbrs	r24, 5
    1292:	2a c0       	rjmp	.+84     	; 0x12e8 <handle_ticks+0x104>
    1294:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1298:	82 fd       	sbrc	r24, 2
    129a:	26 c0       	rjmp	.+76     	; 0x12e8 <handle_ticks+0x104>
		if (status.overfill_BUF >= OVERFILLBUF) {	// valves.h
    129c:	80 91 19 28 	lds	r24, 0x2819	; 0x802819 <status+0x12>
    12a0:	85 30       	cpi	r24, 0x05	; 5
    12a2:	90 f0       	brcs	.+36     	; 0x12c8 <handle_ticks+0xe4>
			CLOSEVALVE(BUFVALVE);
    12a4:	e0 e4       	ldi	r30, 0x40	; 64
    12a6:	f4 e0       	ldi	r31, 0x04	; 4
    12a8:	80 e2       	ldi	r24, 0x20	; 32
    12aa:	86 83       	std	Z+6, r24	; 0x06
			status.overfill_BUF = 0;
    12ac:	10 92 19 28 	sts	0x2819, r1	; 0x802819 <status+0x12>
    12b0:	24 e5       	ldi	r18, 0x54	; 84
    12b2:	88 e5       	ldi	r24, 0x58	; 88
    12b4:	94 e1       	ldi	r25, 0x14	; 20
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	80 40       	sbci	r24, 0x00	; 0
    12ba:	90 40       	sbci	r25, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <handle_ticks+0xd2>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <handle_ticks+0xdc>
    12c0:	00 c0       	rjmp	.+0      	; 0x12c2 <handle_ticks+0xde>
			_delay_ms(2000);
			CLOSEVALVE(SUPVALVE);
    12c2:	80 e1       	ldi	r24, 0x10	; 16
    12c4:	86 83       	std	Z+6, r24	; 0x06
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <handle_ticks+0xea>
		} else {
			status.overfill_BUF++;
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	80 93 19 28 	sts	0x2819, r24	; 0x802819 <status+0x12>
		}
		if ((screen_value == SCRVALVES) && timerOLED) {
    12ce:	80 91 23 28 	lds	r24, 0x2823	; 0x802823 <screen_value>
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	49 f4       	brne	.+18     	; 0x12e8 <handle_ticks+0x104>
    12d6:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12da:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12de:	89 2b       	or	r24, r25
    12e0:	11 f1       	breq	.+68     	; 0x1326 <handle_ticks+0x142>
			display(SCRVALVES);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <display>
			status.supply_button_time = 0;
		}
	}
*/

	if (timerOLED) {
    12e8:	80 91 26 28 	lds	r24, 0x2826	; 0x802826 <timerOLED>
    12ec:	90 91 27 28 	lds	r25, 0x2827	; 0x802827 <timerOLED+0x1>
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	c9 f0       	breq	.+50     	; 0x1326 <handle_ticks+0x142>
		if (timerOLED > OLEDTIMEOUT) {	// Display timeout
    12f4:	8b 30       	cpi	r24, 0x0B	; 11
    12f6:	91 05       	cpc	r25, r1
    12f8:	40 f0       	brcs	.+16     	; 0x130a <handle_ticks+0x126>
			clear_OLED(0);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <clear_OLED>
			timerOLED = 0;
    1300:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <timerOLED>
    1304:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <timerOLED+0x1>
    1308:	08 95       	ret
		} else {
			timerOLED++;
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <timerOLED>
    1310:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <timerOLED+0x1>
		}
	}

}
    1314:	08 95       	ret
		if ((screen_value == SCRVALVES) && timerOLED) {
			display(SCRVALVES);
		}
	}

	if (BUFVALVEOPEN && !BUFTHERMWARM) {			// Valve open, therm cold
    1316:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    131a:	85 ff       	sbrs	r24, 5
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <handle_ticks+0x142>
    131e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    1322:	82 ff       	sbrs	r24, 2
    1324:	bb cf       	rjmp	.-138    	; 0x129c <handle_ticks+0xb8>
    1326:	08 95       	ret

00001328 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    1328:	9c 01       	movw	r18, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    132a:	e0 e6       	ldi	r30, 0x60	; 96
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	84 8d       	ldd	r24, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    1330:	8e 7f       	andi	r24, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    1332:	98 ed       	ldi	r25, 0xD8	; 216
    1334:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1336:	84 8f       	std	Z+28, r24	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1338:	83 81       	ldd	r24, Z+3	; 0x03
    133a:	86 ff       	sbrs	r24, 6
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <init_RTC+0x1e>
		asm("nop");
    133e:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	96 fd       	sbrc	r25, 6
    1344:	fc cf       	rjmp	.-8      	; 0x133e <init_RTC+0x16>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1346:	e0 e6       	ldi	r30, 0x60	; 96
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    134c:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    134e:	88 ed       	ldi	r24, 0xD8	; 216
    1350:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1352:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    1354:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    1356:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    1358:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    135a:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    135c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    1360:	88 23       	and	r24, r24
    1362:	31 f0       	breq	.+12     	; 0x1370 <init_RTC+0x48>
    1364:	e0 e4       	ldi	r30, 0x40	; 64
    1366:	f1 e0       	ldi	r31, 0x01	; 1
		asm("nop");
    1368:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    136a:	91 81       	ldd	r25, Z+1	; 0x01
    136c:	91 11       	cpse	r25, r1
    136e:	fc cf       	rjmp	.-8      	; 0x1368 <init_RTC+0x40>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    1370:	e0 e4       	ldi	r30, 0x40	; 64
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	22 87       	std	Z+10, r18	; 0x0a
    1376:	33 87       	std	Z+11, r19	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    137c:	85 81       	ldd	r24, Z+5	; 0x05
    137e:	81 60       	ori	r24, 0x01	; 1
    1380:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    1382:	81 eb       	ldi	r24, 0xB1	; 177
    1384:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	81 60       	ori	r24, 0x01	; 1
    138a:	82 83       	std	Z+2, r24	; 0x02
    138c:	08 95       	ret

0000138e <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	seconds++;
    13a2:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <seconds>
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <seconds>
	tick = TRUE;
    13ac:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <tick>

}
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <start_TCB0>:
	PORTC_DIR |= PIN0_bm;					// PIN PC0 has haywire
	PORTC_OUT |= PIN0_bm;					// to debouncer Osc-in
	TCB2.CCMP = F_CPU/(4 * TCB2FREQ) + 1;
	TCB2.CTRLA |= TCB_ENABLE_bm;			// Enable the timer
	TCB2.CTRLA |= TCB_CLKSEL_CLKDIV2_gc;	// 2X divider
	TCB2.INTCTRL |= TCB_CAPT_bm;			// Enable interrupts
    13be:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <ticks_TCB0>
    13c2:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <ticks_TCB0+0x1>
    13c6:	25 e0       	ldi	r18, 0x05	; 5
    13c8:	3d e0       	ldi	r19, 0x0D	; 13
    13ca:	ac 01       	movw	r20, r24
    13cc:	42 9f       	mul	r20, r18
    13ce:	c0 01       	movw	r24, r0
    13d0:	43 9f       	mul	r20, r19
    13d2:	90 0d       	add	r25, r0
    13d4:	52 9f       	mul	r21, r18
    13d6:	90 0d       	add	r25, r0
    13d8:	11 24       	eor	r1, r1
    13da:	e0 e8       	ldi	r30, 0x80	; 128
    13dc:	fa e0       	ldi	r31, 0x0A	; 10
    13de:	84 87       	std	Z+12, r24	; 0x0c
    13e0:	95 87       	std	Z+13, r25	; 0x0d
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	85 83       	std	Z+5, r24	; 0x05
    13e6:	80 83       	st	Z, r24
    13e8:	08 95       	ret

000013ea <stop_TCB0>:
    13ea:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    13ee:	08 95       	ret

000013f0 <__vector_12>:
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	8f 93       	push	r24
    13fc:	9f 93       	push	r25
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
    1404:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1408:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <ticks_TCB0>
    1412:	90 93 2a 28 	sts	0x282A, r25	; 0x80282a <ticks_TCB0+0x1>
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <__vector_25>:

/*----------------------------------------------------------------------
Generate a square wave by toggling the state of PC0
----------------------------------------------------------------------*/
ISR(TCB2_INT_vect)
{
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	8f 93       	push	r24
    1430:	ef 93       	push	r30
    1432:	ff 93       	push	r31

	TCB2.INTFLAGS = TCB_CAPT_bm;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
	PORTC.OUTTGL |= PIN0_bm;
    143a:	e0 e4       	ldi	r30, 0x40	; 64
    143c:	f4 e0       	ldi	r31, 0x04	; 4
    143e:	87 81       	ldd	r24, Z+7	; 0x07
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	87 83       	std	Z+7, r24	; 0x07

}
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	8f 91       	pop	r24
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0
    1450:	1f 90       	pop	r1
    1452:	18 95       	reti

00001454 <init_TWI>:
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
	data = TWI0.MDATA;

	return(data);

}
    1454:	e0 ea       	ldi	r30, 0xA0	; 160
    1456:	f8 e0       	ldi	r31, 0x08	; 8
    1458:	8b e0       	ldi	r24, 0x0B	; 11
    145a:	86 83       	std	Z+6, r24	; 0x06
    145c:	83 81       	ldd	r24, Z+3	; 0x03
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	83 83       	std	Z+3, r24	; 0x03
    1462:	85 81       	ldd	r24, Z+5	; 0x05
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	85 83       	std	Z+5, r24	; 0x05
    1468:	08 95       	ret

0000146a <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    146a:	61 30       	cpi	r22, 0x01	; 1
    146c:	29 f4       	brne	.+10     	; 0x1478 <start_TWI+0xe>
		TWI0.MADDR = ((addr << 1) | 0x01);
    146e:	88 0f       	add	r24, r24
    1470:	81 60       	ori	r24, 0x01	; 1
    1472:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    1476:	03 c0       	rjmp	.+6      	; 0x147e <start_TWI+0x14>
	} else {
		TWI0.MADDR = (addr << 1);
    1478:	88 0f       	add	r24, r24
    147a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	start_TCB0(1);
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 df 09 	call	0x13be	; 0x13be <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    1486:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    148a:	80 7c       	andi	r24, 0xC0	; 192
    148c:	b9 f4       	brne	.+46     	; 0x14bc <start_TWI+0x52>
		if (ticks_TCB0 > 10) {
    148e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1492:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1496:	0b 97       	sbiw	r24, 0x0b	; 11
    1498:	48 f4       	brcc	.+18     	; 0x14ac <start_TWI+0x42>
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    149a:	e0 ea       	ldi	r30, 0xA0	; 160
    149c:	f8 e0       	ldi	r31, 0x08	; 8
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <start_TWI+0x4a>
		if (ticks_TCB0 > 10) {
    14a0:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    14a4:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    14a8:	0b 97       	sbiw	r24, 0x0b	; 11
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <start_TWI+0x4a>
			stop_TCB0();
    14ac:	0e 94 f5 09 	call	0x13ea	; 0x13ea <stop_TCB0>
			return(TWITIMEOUT);
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    14b4:	00 00       	nop
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    14b6:	85 81       	ldd	r24, Z+5	; 0x05
    14b8:	80 7c       	andi	r24, 0xC0	; 192
    14ba:	91 f3       	breq	.-28     	; 0x14a0 <start_TWI+0x36>
			stop_TCB0();
			return(TWITIMEOUT);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    14bc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    14c0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14c4:	82 fd       	sbrc	r24, 2
    14c6:	0b c0       	rjmp	.+22     	; 0x14de <start_TWI+0x74>
		return(TWIBUSERROR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    14c8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14cc:	83 fd       	sbrc	r24, 3
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <start_TWI+0x78>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    14d0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14d4:	89 2f       	mov	r24, r25
    14d6:	80 71       	andi	r24, 0x10	; 16
    14d8:	94 fd       	sbrc	r25, 4
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <start_TWI+0x7c>
    14dc:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERROR);
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
    14e6:	85 e0       	ldi	r24, 0x05	; 5
	}

	return(0);

}
    14e8:	08 95       	ret

000014ea <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    14ea:	87 e0       	ldi	r24, 0x07	; 7
    14ec:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    14f0:	08 95       	ret

000014f2 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    14f2:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14f6:	96 fd       	sbrc	r25, 6
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <write_TWI+0x14>
    14fa:	e0 ea       	ldi	r30, 0xA0	; 160
    14fc:	f8 e0       	ldi	r31, 0x08	; 8
		asm("nop");
    14fe:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    1500:	95 81       	ldd	r25, Z+5	; 0x05
    1502:	96 ff       	sbrs	r25, 6
    1504:	fc cf       	rjmp	.-8      	; 0x14fe <write_TWI+0xc>
		asm("nop");
	}

	TWI0.MDATA = data;
    1506:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 df 09 	call	0x13be	; 0x13be <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    1512:	e0 ea       	ldi	r30, 0xA0	; 160
    1514:	f8 e0       	ldi	r31, 0x08	; 8
    1516:	0b c0       	rjmp	.+22     	; 0x152e <write_TWI+0x3c>
		asm("nop");
    1518:	00 00       	nop
		if (ticks_TCB0 > 50) {
    151a:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    151e:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1522:	c3 97       	sbiw	r24, 0x33	; 51
    1524:	20 f0       	brcs	.+8      	; 0x152e <write_TWI+0x3c>
			stop_TCB0();
    1526:	0e 94 f5 09 	call	0x13ea	; 0x13ea <stop_TCB0>
			return(TWITIMEOUT);
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    152e:	85 81       	ldd	r24, Z+5	; 0x05
    1530:	86 ff       	sbrs	r24, 6
    1532:	f2 cf       	rjmp	.-28     	; 0x1518 <write_TWI+0x26>
			stop_TCB0();
			return(TWITIMEOUT);
			break;
		}
	}
	stop_TCB0();
    1534:	0e 94 f5 09 	call	0x13ea	; 0x13ea <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    1538:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    153c:	89 2f       	mov	r24, r25
    153e:	80 71       	andi	r24, 0x10	; 16
    1540:	94 fd       	sbrc	r25, 4
		return(TWINOACK);
    1542:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		return(0);
	}

}
    1544:	08 95       	ret

00001546 <init_USART>:
	Initialize the serial buffers.
------------------------------------------------------------------------------*/
void init_USART(void)
{
	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    1546:	e0 e0       	ldi	r30, 0x00	; 0
    1548:	f4 e0       	ldi	r31, 0x04	; 4
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    154e:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    1550:	e0 e0       	ldi	r30, 0x00	; 0
    1552:	f8 e0       	ldi	r31, 0x08	; 8
    1554:	2d e6       	ldi	r18, 0x6D	; 109
    1556:	35 e0       	ldi	r19, 0x05	; 5
    1558:	20 87       	std	Z+8, r18	; 0x08
    155a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    155c:	95 81       	ldd	r25, Z+5	; 0x05
    155e:	90 68       	ori	r25, 0x80	; 128
    1560:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    1562:	96 81       	ldd	r25, Z+6	; 0x06
    1564:	90 64       	ori	r25, 0x40	; 64
    1566:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    1568:	96 81       	ldd	r25, Z+6	; 0x06
    156a:	90 68       	ori	r25, 0x80	; 128
    156c:	96 83       	std	Z+6, r25	; 0x06
	recv0_buf.length = 0;
    156e:	10 92 2c 29 	sts	0x292C, r1	; 0x80292c <recv0_buf+0x101>
	send0_buf.length = 0;
    1572:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <send0_buf+0x101>
	recv0_buf.nxfrd = 0;
    1576:	10 92 2b 29 	sts	0x292B, r1	; 0x80292b <recv0_buf+0x100>
	send0_buf.nxfrd = 0;
    157a:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	recv0_buf.done = FALSE;				// Ready to receive data
    157e:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>
	send0_buf.done = TRUE;				// No data to send
    1582:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    1586:	08 95       	ret

00001588 <send_USART>:
		starts puts the bytes into the transmit register.
------------------------------------------------------------------------------*/
void send_USART(uint8_t *data, uint8_t nbytes)
{
	uint8_t i;
	send0_buf.length = nbytes;
    1588:	60 93 2e 2a 	sts	0x2A2E, r22	; 0x802a2e <send0_buf+0x101>
	send0_buf.nxfrd = 0;
    158c:	10 92 2d 2a 	sts	0x2A2D, r1	; 0x802a2d <send0_buf+0x100>
	send0_buf.done = FALSE;
    1590:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <send0_buf+0xff>
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    1594:	66 23       	and	r22, r22
    1596:	71 f0       	breq	.+28     	; 0x15b4 <send_USART+0x2c>
    1598:	a8 2f       	mov	r26, r24
    159a:	b9 2f       	mov	r27, r25
    159c:	ed e2       	ldi	r30, 0x2D	; 45
    159e:	f9 e2       	ldi	r31, 0x29	; 41
    15a0:	61 50       	subi	r22, 0x01	; 1
    15a2:	26 2f       	mov	r18, r22
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	22 5d       	subi	r18, 0xD2	; 210
    15a8:	36 4d       	sbci	r19, 0xD6	; 214
		send0_buf.data[i] = *data++;
    15aa:	8d 91       	ld	r24, X+
    15ac:	81 93       	st	Z+, r24
{
	uint8_t i;
	send0_buf.length = nbytes;
	send0_buf.nxfrd = 0;
	send0_buf.done = FALSE;
	for (i = 0; i < nbytes; i++) {		// Copy nbytes to send buffer
    15ae:	e2 17       	cp	r30, r18
    15b0:	f3 07       	cpc	r31, r19
    15b2:	d9 f7       	brne	.-10     	; 0x15aa <send_USART+0x22>
		send0_buf.data[i] = *data++;
	}
	USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    15b4:	e0 e0       	ldi	r30, 0x00	; 0
    15b6:	f8 e0       	ldi	r31, 0x08	; 8
    15b8:	85 81       	ldd	r24, Z+5	; 0x05
    15ba:	80 62       	ori	r24, 0x20	; 32
    15bc:	85 83       	std	Z+5, r24	; 0x05
    15be:	08 95       	ret

000015c0 <handle_serial>:

LN2,C,SUP,T,BUF,X,RED,C,BLU,111,NXT,222,MAX,333,INT,100,PRES,H,TBUF,H,TRED,H,TBLU

------------------------------------------------------------------------------*/
void handle_serial(void)
{
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	c3 5a       	subi	r28, 0xA3	; 163
    15da:	d1 09       	sbc	r29, r1
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	de bf       	out	0x3e, r29	; 62

	const char fmt0[] = "%c%c%c%c,%d,NXT,%d,MAX,%d,INT,%d,PRES,%c,TBUF,%c,TRED,%c,TBLU\r";
    15e0:	8f e3       	ldi	r24, 0x3F	; 63
    15e2:	e1 ee       	ldi	r30, 0xE1	; 225
    15e4:	f4 e6       	ldi	r31, 0x64	; 100
    15e6:	de 01       	movw	r26, r28
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	01 90       	ld	r0, Z+
    15ec:	0d 92       	st	X+, r0
    15ee:	8a 95       	dec	r24
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <handle_serial+0x2a>
	char strbuf[100], supvalve, bufvalve, redvalve, bluvalve, bufther, redther, bluther;
	uint8_t nextfill, maxopen, fillint, pressure;

	recv0_buf.done = FALSE;
    15f2:	10 92 2a 29 	sts	0x292A, r1	; 0x80292a <recv0_buf+0xff>

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
    15f6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    15fa:	84 fd       	sbrc	r24, 4
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <handle_serial+0x48>
		supvalve = 'O';
	} else {
		supvalve = 'C';
    15fe:	0f 2e       	mov	r0, r31
    1600:	f3 e4       	ldi	r31, 0x43	; 67
    1602:	ff 2e       	mov	r15, r31
    1604:	f0 2d       	mov	r31, r0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <handle_serial+0x50>

	recv0_buf.done = FALSE;

	// Buffer dewar supply valve state
	if (SUPVALVEOPEN) {
		supvalve = 'O';
    1608:	0f 2e       	mov	r0, r31
    160a:	ff e4       	ldi	r31, 0x4F	; 79
    160c:	ff 2e       	mov	r15, r31
    160e:	f0 2d       	mov	r31, r0
	} else {
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
    1610:	80 91 18 28 	lds	r24, 0x2818	; 0x802818 <status+0x11>
    1614:	81 11       	cpse	r24, r1
    1616:	09 c0       	rjmp	.+18     	; 0x162a <handle_serial+0x6a>
		bufvalve = 'T';
	} else if (BUFVALVEOPEN) {
    1618:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    161c:	85 fd       	sbrc	r24, 5
    161e:	0a c0       	rjmp	.+20     	; 0x1634 <handle_serial+0x74>
		bufvalve = 'O';
	} else {
		bufvalve = 'C';
    1620:	0f 2e       	mov	r0, r31
    1622:	f3 e4       	ldi	r31, 0x43	; 67
    1624:	ef 2e       	mov	r14, r31
    1626:	f0 2d       	mov	r31, r0
    1628:	09 c0       	rjmp	.+18     	; 0x163c <handle_serial+0x7c>
		supvalve = 'C';
	}

	// Buffer dewar vent valve
	if (status.maxopen_BUF) {
		bufvalve = 'T';
    162a:	0f 2e       	mov	r0, r31
    162c:	f4 e5       	ldi	r31, 0x54	; 84
    162e:	ef 2e       	mov	r14, r31
    1630:	f0 2d       	mov	r31, r0
    1632:	04 c0       	rjmp	.+8      	; 0x163c <handle_serial+0x7c>
	} else if (BUFVALVEOPEN) {
		bufvalve = 'O';
    1634:	0f 2e       	mov	r0, r31
    1636:	ff e4       	ldi	r31, 0x4F	; 79
    1638:	ef 2e       	mov	r14, r31
    163a:	f0 2d       	mov	r31, r0
	} else {
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
    163c:	8d e0       	ldi	r24, 0x0D	; 13
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
    1644:	88 23       	and	r24, r24
    1646:	69 f0       	breq	.+26     	; 0x1662 <handle_serial+0xa2>
		redvalve = 'X';
	} else if (status.maxopen_RED) {
    1648:	80 91 17 28 	lds	r24, 0x2817	; 0x802817 <status+0x10>
    164c:	81 11       	cpse	r24, r1
    164e:	0e c0       	rjmp	.+28     	; 0x166c <handle_serial+0xac>
		redvalve = 'T';
	} else if (REDVALVEOPEN) {
    1650:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1654:	86 fd       	sbrc	r24, 6
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <handle_serial+0xb6>
		redvalve = 'O';
	} else {
		redvalve = 'C';
    1658:	0f 2e       	mov	r0, r31
    165a:	f3 e4       	ldi	r31, 0x43	; 67
    165c:	df 2e       	mov	r13, r31
    165e:	f0 2d       	mov	r31, r0
    1660:	0e c0       	rjmp	.+28     	; 0x167e <handle_serial+0xbe>
		bufvalve = 'C';
	}

	// Red CCD vent valve
	if (!REDENABLED) {
		redvalve = 'X';
    1662:	0f 2e       	mov	r0, r31
    1664:	f8 e5       	ldi	r31, 0x58	; 88
    1666:	df 2e       	mov	r13, r31
    1668:	f0 2d       	mov	r31, r0
    166a:	09 c0       	rjmp	.+18     	; 0x167e <handle_serial+0xbe>
	} else if (status.maxopen_RED) {
		redvalve = 'T';
    166c:	0f 2e       	mov	r0, r31
    166e:	f4 e5       	ldi	r31, 0x54	; 84
    1670:	df 2e       	mov	r13, r31
    1672:	f0 2d       	mov	r31, r0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <handle_serial+0xbe>
	} else if (REDVALVEOPEN) {
		redvalve = 'O';
    1676:	0f 2e       	mov	r0, r31
    1678:	ff e4       	ldi	r31, 0x4F	; 79
    167a:	df 2e       	mov	r13, r31
    167c:	f0 2d       	mov	r31, r0
	} else {
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
    167e:	8c e0       	ldi	r24, 0x0C	; 12
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
    1686:	88 23       	and	r24, r24
    1688:	69 f0       	breq	.+26     	; 0x16a4 <handle_serial+0xe4>
		bluvalve = 'X';
	} else if (status.maxopen_BLU) {
    168a:	80 91 16 28 	lds	r24, 0x2816	; 0x802816 <status+0xf>
    168e:	81 11       	cpse	r24, r1
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <handle_serial+0xee>
		bluvalve = 'T';
	} else if (BLUVALVEOPEN) {
    1692:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
    1696:	88 23       	and	r24, r24
    1698:	7c f0       	brlt	.+30     	; 0x16b8 <handle_serial+0xf8>
		bluvalve = 'O';
	} else {
		bluvalve = 'C';
    169a:	0f 2e       	mov	r0, r31
    169c:	f3 e4       	ldi	r31, 0x43	; 67
    169e:	af 2e       	mov	r10, r31
    16a0:	f0 2d       	mov	r31, r0
    16a2:	0e c0       	rjmp	.+28     	; 0x16c0 <handle_serial+0x100>
		redvalve = 'C';
	}

	// Blue CCD vent valve
	if (!BLUENABLED) {
		bluvalve = 'X';
    16a4:	0f 2e       	mov	r0, r31
    16a6:	f8 e5       	ldi	r31, 0x58	; 88
    16a8:	af 2e       	mov	r10, r31
    16aa:	f0 2d       	mov	r31, r0
    16ac:	09 c0       	rjmp	.+18     	; 0x16c0 <handle_serial+0x100>
	} else if (status.maxopen_BLU) {
		bluvalve = 'T';
    16ae:	0f 2e       	mov	r0, r31
    16b0:	f4 e5       	ldi	r31, 0x54	; 84
    16b2:	af 2e       	mov	r10, r31
    16b4:	f0 2d       	mov	r31, r0
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <handle_serial+0x100>
	} else if (BLUVALVEOPEN) {
		bluvalve = 'O';
    16b8:	0f 2e       	mov	r0, r31
    16ba:	ff e4       	ldi	r31, 0x4F	; 79
    16bc:	af 2e       	mov	r10, r31
    16be:	f0 2d       	mov	r31, r0
	} else {
		bluvalve = 'C';
	}

	// Fill interval
	fillint = FILLINTERVAL;
    16c0:	8a e0       	ldi	r24, 0x0A	; 10
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>
    16c8:	b8 2e       	mov	r11, r24

	// Next fill in
	nextfill = status.next_fill;
    16ca:	07 e0       	ldi	r16, 0x07	; 7
    16cc:	18 e2       	ldi	r17, 0x28	; 40
    16ce:	f8 01       	movw	r30, r16
    16d0:	c5 88       	ldd	r12, Z+21	; 0x15

	// Max open time
	maxopen = MAXOPENTIME;
    16d2:	8b e0       	ldi	r24, 0x0B	; 11
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 4d 11 	call	0x229a	; 0x229a <eeprom_read_byte>

	// Pressure
	pressure = status.pressure;
    16da:	f8 01       	movw	r30, r16
    16dc:	92 8d       	ldd	r25, Z+26	; 0x1a

	// BUF thermistor
	if (BUFTHERMWARM) {
    16de:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16e2:	22 fd       	sbrc	r18, 2
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <handle_serial+0x12a>
		bufther = 'H';
	} else {
		bufther = 'C';
    16e6:	23 e4       	ldi	r18, 0x43	; 67
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <handle_serial+0x12c>
	// Pressure
	pressure = status.pressure;

	// BUF thermistor
	if (BUFTHERMWARM) {
		bufther = 'H';
    16ea:	28 e4       	ldi	r18, 0x48	; 72
	} else {
		bufther = 'C';
	}

	// Red thermistor
	if (REDTHERMWARM) {
    16ec:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16f0:	31 fd       	sbrc	r19, 1
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <handle_serial+0x138>
		redther = 'H';
	} else {
		redther = 'C';
    16f4:	33 e4       	ldi	r19, 0x43	; 67
    16f6:	01 c0       	rjmp	.+2      	; 0x16fa <handle_serial+0x13a>
		bufther = 'C';
	}

	// Red thermistor
	if (REDTHERMWARM) {
		redther = 'H';
    16f8:	38 e4       	ldi	r19, 0x48	; 72
	} else {
		redther = 'C';
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
    16fa:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7f4488>
    16fe:	40 fd       	sbrc	r20, 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <handle_serial+0x146>
		bluther = 'H';
	} else {
		bluther = 'C';
    1702:	43 e4       	ldi	r20, 0x43	; 67
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <handle_serial+0x148>
		redther = 'C';
	}

	// Blue thermistor
	if (BLUTHERMWARM) {
		bluther = 'H';
    1706:	48 e4       	ldi	r20, 0x48	; 72
	} else {
		bluther = 'C';
	}

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
    1708:	1f 92       	push	r1
    170a:	4f 93       	push	r20
    170c:	1f 92       	push	r1
    170e:	3f 93       	push	r19
    1710:	1f 92       	push	r1
    1712:	2f 93       	push	r18
    1714:	1f 92       	push	r1
    1716:	9f 93       	push	r25
    1718:	1f 92       	push	r1
    171a:	bf 92       	push	r11
    171c:	1f 92       	push	r1
    171e:	8f 93       	push	r24
    1720:	1f 92       	push	r1
    1722:	cf 92       	push	r12
    1724:	1f 92       	push	r1
    1726:	af 92       	push	r10
    1728:	1f 92       	push	r1
    172a:	df 92       	push	r13
    172c:	1f 92       	push	r1
    172e:	ef 92       	push	r14
    1730:	1f 92       	push	r1
    1732:	ff 92       	push	r15
    1734:	ce 01       	movw	r24, r28
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	9f 93       	push	r25
    173a:	8f 93       	push	r24
    173c:	cf 96       	adiw	r24, 0x3f	; 63
    173e:	9f 93       	push	r25
    1740:	8f 93       	push	r24
    1742:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <sprintf>
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
    1746:	84 e6       	ldi	r24, 0x64	; 100
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 df 09 	call	0x13be	; 0x13be <start_TCB0>
	while (!send0_buf.done) {
    174e:	80 91 2c 2a 	lds	r24, 0x2A2C	; 0x802a2c <send0_buf+0xff>
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	81 11       	cpse	r24, r1
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <handle_serial+0x1c0>
		if (ticks_TCB0 > 10) {	// See timers.h
    175a:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    175e:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1762:	0b 97       	sbiw	r24, 0x0b	; 11
    1764:	d0 f4       	brcc	.+52     	; 0x179a <handle_serial+0x1da>

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    1766:	ec e2       	ldi	r30, 0x2C	; 44
    1768:	fa e2       	ldi	r31, 0x2A	; 42
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <handle_serial+0x1b8>
		if (ticks_TCB0 > 10) {	// See timers.h
    176c:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <ticks_TCB0>
    1770:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <ticks_TCB0+0x1>
    1774:	0b 97       	sbiw	r24, 0x0b	; 11
    1776:	88 f4       	brcc	.+34     	; 0x179a <handle_serial+0x1da>
			return;
		}
		asm("nop");
    1778:	00 00       	nop

	sprintf(strbuf, fmt0, supvalve, bufvalve, redvalve, bluvalve, nextfill, maxopen,
		fillint, pressure, bufther, redther, bluther);

	start_TCB0(100);			// 100 ms ticks
	while (!send0_buf.done) {
    177a:	80 81       	ld	r24, Z
    177c:	88 23       	and	r24, r24
    177e:	b1 f3       	breq	.-20     	; 0x176c <handle_serial+0x1ac>
			return;
		}
		asm("nop");
	}

	send_USART((uint8_t*) strbuf, strlen(strbuf));
    1780:	ce 01       	movw	r24, r28
    1782:	80 5c       	subi	r24, 0xC0	; 192
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	fc 01       	movw	r30, r24
    1788:	01 90       	ld	r0, Z+
    178a:	00 20       	and	r0, r0
    178c:	e9 f7       	brne	.-6      	; 0x1788 <handle_serial+0x1c8>
    178e:	31 97       	sbiw	r30, 0x01	; 1
    1790:	bf 01       	movw	r22, r30
    1792:	68 1b       	sub	r22, r24
    1794:	79 0b       	sbc	r23, r25
    1796:	0e 94 c4 0a 	call	0x1588	; 0x1588 <send_USART>

}
    179a:	cd 55       	subi	r28, 0x5D	; 93
    179c:	df 4f       	sbci	r29, 0xFF	; 255
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	08 95       	ret

000017b8 <__vector_17>:

	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r' and the done flag is set.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
	uint8_t c;

	c = USART0.RXDATAL;
    17ce:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>

	if (recv0_buf.length < BUFSIZE) {
    17d2:	90 91 2c 29 	lds	r25, 0x292C	; 0x80292c <recv0_buf+0x101>
    17d6:	9f 3f       	cpi	r25, 0xFF	; 255
    17d8:	b1 f0       	breq	.+44     	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
		if ((char) c == '\r') {
    17da:	8d 30       	cpi	r24, 0x0D	; 13
    17dc:	51 f4       	brne	.+20     	; 0x17f2 <__vector_17+0x3a>
			recv0_buf.data[recv0_buf.length] = '\0';
    17de:	e0 91 2c 29 	lds	r30, 0x292C	; 0x80292c <recv0_buf+0x101>
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	e5 5d       	subi	r30, 0xD5	; 213
    17e6:	f7 4d       	sbci	r31, 0xD7	; 215
    17e8:	10 82       	st	Z, r1
			recv0_buf.done = TRUE;						// CR received
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 2a 29 	sts	0x292A, r24	; 0x80292a <recv0_buf+0xff>
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
		} else {
			recv0_buf.data[recv0_buf.length++] = c;		// Gather a character
    17f2:	ac e2       	ldi	r26, 0x2C	; 44
    17f4:	b9 e2       	ldi	r27, 0x29	; 41
    17f6:	ec 91       	ld	r30, X
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9e 0f       	add	r25, r30
    17fc:	9c 93       	st	X, r25
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	e5 5d       	subi	r30, 0xD5	; 213
    1802:	f7 4d       	sbci	r31, 0xD7	; 215
    1804:	80 83       	st	Z, r24
		}
	}
}
    1806:	ff 91       	pop	r31
    1808:	ef 91       	pop	r30
    180a:	bf 91       	pop	r27
    180c:	af 91       	pop	r26
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    181c:	1f 92       	push	r1
    181e:	0f 92       	push	r0
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	0f 92       	push	r0
    1824:	11 24       	eor	r1, r1
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    1836:	c0 e0       	ldi	r28, 0x00	; 0
    1838:	d8 e0       	ldi	r29, 0x08	; 8
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	8f 7d       	andi	r24, 0xDF	; 223
    183e:	8d 83       	std	Y+5, r24	; 0x05
	USART0.TXDATAL = send0_buf.data[send0_buf.nxfrd++];
    1840:	ad e2       	ldi	r26, 0x2D	; 45
    1842:	ba e2       	ldi	r27, 0x2A	; 42
    1844:	ec 91       	ld	r30, X
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8e 0f       	add	r24, r30
    184a:	8c 93       	st	X, r24
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	e3 5d       	subi	r30, 0xD3	; 211
    1850:	f6 4d       	sbci	r31, 0xD6	; 214
    1852:	80 81       	ld	r24, Z
    1854:	8a 83       	std	Y+2, r24	; 0x02
	if (send0_buf.length == send0_buf.nxfrd) {
    1856:	90 91 2e 2a 	lds	r25, 0x2A2E	; 0x802a2e <send0_buf+0x101>
    185a:	8c 91       	ld	r24, X
    185c:	98 13       	cpse	r25, r24
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <__vector_18+0x4c>
		send0_buf.done = TRUE;				// Last character sent
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 2c 2a 	sts	0x2A2C, r24	; 0x802a2c <send0_buf+0xff>
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <__vector_18+0x56>
	} else {
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    1868:	e0 e0       	ldi	r30, 0x00	; 0
    186a:	f8 e0       	ldi	r31, 0x08	; 8
    186c:	85 81       	ldd	r24, Z+5	; 0x05
    186e:	80 62       	ori	r24, 0x20	; 32
    1870:	85 83       	std	Z+5, r24	; 0x05
	}
}
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f 90       	pop	r0
    1888:	1f 90       	pop	r1
    188a:	18 95       	reti

0000188c <init_VALVES>:
	VALV4 is on pin PC4 (Supply input valve)
----------------------------------------------------------------------*/
void init_VALVES(void)
{

	PORTC.OUTCLR = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    188c:	e0 e4       	ldi	r30, 0x40	; 64
    188e:	f4 e0       	ldi	r31, 0x04	; 4
    1890:	80 ef       	ldi	r24, 0xF0	; 240
    1892:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN7_bm | PIN6_bm | PIN5_bm | PIN4_bm;
    1894:	81 83       	std	Z+1, r24	; 0x01
    1896:	08 95       	ret

00001898 <__subsf3>:
    1898:	50 58       	subi	r21, 0x80	; 128

0000189a <__addsf3>:
    189a:	bb 27       	eor	r27, r27
    189c:	aa 27       	eor	r26, r26
    189e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__addsf3x>
    18a2:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_round>
    18a6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscA>
    18aa:	38 f0       	brcs	.+14     	; 0x18ba <__addsf3+0x20>
    18ac:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_pscB>
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <__addsf3+0x20>
    18b2:	39 f4       	brne	.+14     	; 0x18c2 <__addsf3+0x28>
    18b4:	9f 3f       	cpi	r25, 0xFF	; 255
    18b6:	19 f4       	brne	.+6      	; 0x18be <__addsf3+0x24>
    18b8:	26 f4       	brtc	.+8      	; 0x18c2 <__addsf3+0x28>
    18ba:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>
    18be:	0e f4       	brtc	.+2      	; 0x18c2 <__addsf3+0x28>
    18c0:	e0 95       	com	r30
    18c2:	e7 fb       	bst	r30, 7
    18c4:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>

000018c8 <__addsf3x>:
    18c8:	e9 2f       	mov	r30, r25
    18ca:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__fp_split3>
    18ce:	58 f3       	brcs	.-42     	; 0x18a6 <__addsf3+0xc>
    18d0:	ba 17       	cp	r27, r26
    18d2:	62 07       	cpc	r22, r18
    18d4:	73 07       	cpc	r23, r19
    18d6:	84 07       	cpc	r24, r20
    18d8:	95 07       	cpc	r25, r21
    18da:	20 f0       	brcs	.+8      	; 0x18e4 <__addsf3x+0x1c>
    18dc:	79 f4       	brne	.+30     	; 0x18fc <__addsf3x+0x34>
    18de:	a6 f5       	brtc	.+104    	; 0x1948 <__addsf3x+0x80>
    18e0:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_zero>
    18e4:	0e f4       	brtc	.+2      	; 0x18e8 <__addsf3x+0x20>
    18e6:	e0 95       	com	r30
    18e8:	0b 2e       	mov	r0, r27
    18ea:	ba 2f       	mov	r27, r26
    18ec:	a0 2d       	mov	r26, r0
    18ee:	0b 01       	movw	r0, r22
    18f0:	b9 01       	movw	r22, r18
    18f2:	90 01       	movw	r18, r0
    18f4:	0c 01       	movw	r0, r24
    18f6:	ca 01       	movw	r24, r20
    18f8:	a0 01       	movw	r20, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	ff 27       	eor	r31, r31
    18fe:	59 1b       	sub	r21, r25
    1900:	99 f0       	breq	.+38     	; 0x1928 <__addsf3x+0x60>
    1902:	59 3f       	cpi	r21, 0xF9	; 249
    1904:	50 f4       	brcc	.+20     	; 0x191a <__addsf3x+0x52>
    1906:	50 3e       	cpi	r21, 0xE0	; 224
    1908:	68 f1       	brcs	.+90     	; 0x1964 <__addsf3x+0x9c>
    190a:	1a 16       	cp	r1, r26
    190c:	f0 40       	sbci	r31, 0x00	; 0
    190e:	a2 2f       	mov	r26, r18
    1910:	23 2f       	mov	r18, r19
    1912:	34 2f       	mov	r19, r20
    1914:	44 27       	eor	r20, r20
    1916:	58 5f       	subi	r21, 0xF8	; 248
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <__addsf3x+0x38>
    191a:	46 95       	lsr	r20
    191c:	37 95       	ror	r19
    191e:	27 95       	ror	r18
    1920:	a7 95       	ror	r26
    1922:	f0 40       	sbci	r31, 0x00	; 0
    1924:	53 95       	inc	r21
    1926:	c9 f7       	brne	.-14     	; 0x191a <__addsf3x+0x52>
    1928:	7e f4       	brtc	.+30     	; 0x1948 <__addsf3x+0x80>
    192a:	1f 16       	cp	r1, r31
    192c:	ba 0b       	sbc	r27, r26
    192e:	62 0b       	sbc	r22, r18
    1930:	73 0b       	sbc	r23, r19
    1932:	84 0b       	sbc	r24, r20
    1934:	ba f0       	brmi	.+46     	; 0x1964 <__addsf3x+0x9c>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	a1 f0       	breq	.+40     	; 0x1962 <__addsf3x+0x9a>
    193a:	ff 0f       	add	r31, r31
    193c:	bb 1f       	adc	r27, r27
    193e:	66 1f       	adc	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	88 1f       	adc	r24, r24
    1944:	c2 f7       	brpl	.-16     	; 0x1936 <__addsf3x+0x6e>
    1946:	0e c0       	rjmp	.+28     	; 0x1964 <__addsf3x+0x9c>
    1948:	ba 0f       	add	r27, r26
    194a:	62 1f       	adc	r22, r18
    194c:	73 1f       	adc	r23, r19
    194e:	84 1f       	adc	r24, r20
    1950:	48 f4       	brcc	.+18     	; 0x1964 <__addsf3x+0x9c>
    1952:	87 95       	ror	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	b7 95       	ror	r27
    195a:	f7 95       	ror	r31
    195c:	9e 3f       	cpi	r25, 0xFE	; 254
    195e:	08 f0       	brcs	.+2      	; 0x1962 <__addsf3x+0x9a>
    1960:	b0 cf       	rjmp	.-160    	; 0x18c2 <__addsf3+0x28>
    1962:	93 95       	inc	r25
    1964:	88 0f       	add	r24, r24
    1966:	08 f0       	brcs	.+2      	; 0x196a <__addsf3x+0xa2>
    1968:	99 27       	eor	r25, r25
    196a:	ee 0f       	add	r30, r30
    196c:	97 95       	ror	r25
    196e:	87 95       	ror	r24
    1970:	08 95       	ret

00001972 <__cmpsf2>:
    1972:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__fp_cmp>
    1976:	08 f4       	brcc	.+2      	; 0x197a <__cmpsf2+0x8>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	08 95       	ret

0000197c <__divsf3>:
    197c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__divsf3x>
    1980:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_round>
    1984:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_pscB>
    1988:	58 f0       	brcs	.+22     	; 0x19a0 <__divsf3+0x24>
    198a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscA>
    198e:	40 f0       	brcs	.+16     	; 0x19a0 <__divsf3+0x24>
    1990:	29 f4       	brne	.+10     	; 0x199c <__divsf3+0x20>
    1992:	5f 3f       	cpi	r21, 0xFF	; 255
    1994:	29 f0       	breq	.+10     	; 0x19a0 <__divsf3+0x24>
    1996:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    199a:	51 11       	cpse	r21, r1
    199c:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>
    19a0:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>

000019a4 <__divsf3x>:
    19a4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__fp_split3>
    19a8:	68 f3       	brcs	.-38     	; 0x1984 <__divsf3+0x8>

000019aa <__divsf3_pse>:
    19aa:	99 23       	and	r25, r25
    19ac:	b1 f3       	breq	.-20     	; 0x199a <__divsf3+0x1e>
    19ae:	55 23       	and	r21, r21
    19b0:	91 f3       	breq	.-28     	; 0x1996 <__divsf3+0x1a>
    19b2:	95 1b       	sub	r25, r21
    19b4:	55 0b       	sbc	r21, r21
    19b6:	bb 27       	eor	r27, r27
    19b8:	aa 27       	eor	r26, r26
    19ba:	62 17       	cp	r22, r18
    19bc:	73 07       	cpc	r23, r19
    19be:	84 07       	cpc	r24, r20
    19c0:	38 f0       	brcs	.+14     	; 0x19d0 <__divsf3_pse+0x26>
    19c2:	9f 5f       	subi	r25, 0xFF	; 255
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	44 1f       	adc	r20, r20
    19cc:	aa 1f       	adc	r26, r26
    19ce:	a9 f3       	breq	.-22     	; 0x19ba <__divsf3_pse+0x10>
    19d0:	35 d0       	rcall	.+106    	; 0x1a3c <__divsf3_pse+0x92>
    19d2:	0e 2e       	mov	r0, r30
    19d4:	3a f0       	brmi	.+14     	; 0x19e4 <__divsf3_pse+0x3a>
    19d6:	e0 e8       	ldi	r30, 0x80	; 128
    19d8:	32 d0       	rcall	.+100    	; 0x1a3e <__divsf3_pse+0x94>
    19da:	91 50       	subi	r25, 0x01	; 1
    19dc:	50 40       	sbci	r21, 0x00	; 0
    19de:	e6 95       	lsr	r30
    19e0:	00 1c       	adc	r0, r0
    19e2:	ca f7       	brpl	.-14     	; 0x19d6 <__divsf3_pse+0x2c>
    19e4:	2b d0       	rcall	.+86     	; 0x1a3c <__divsf3_pse+0x92>
    19e6:	fe 2f       	mov	r31, r30
    19e8:	29 d0       	rcall	.+82     	; 0x1a3c <__divsf3_pse+0x92>
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	bb 1f       	adc	r27, r27
    19f2:	26 17       	cp	r18, r22
    19f4:	37 07       	cpc	r19, r23
    19f6:	48 07       	cpc	r20, r24
    19f8:	ab 07       	cpc	r26, r27
    19fa:	b0 e8       	ldi	r27, 0x80	; 128
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <__divsf3_pse+0x56>
    19fe:	bb 0b       	sbc	r27, r27
    1a00:	80 2d       	mov	r24, r0
    1a02:	bf 01       	movw	r22, r30
    1a04:	ff 27       	eor	r31, r31
    1a06:	93 58       	subi	r25, 0x83	; 131
    1a08:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0a:	3a f0       	brmi	.+14     	; 0x1a1a <__divsf3_pse+0x70>
    1a0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0e:	51 05       	cpc	r21, r1
    1a10:	78 f0       	brcs	.+30     	; 0x1a30 <__divsf3_pse+0x86>
    1a12:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    1a16:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>
    1a1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a1c:	e4 f3       	brlt	.-8      	; 0x1a16 <__divsf3_pse+0x6c>
    1a1e:	98 3e       	cpi	r25, 0xE8	; 232
    1a20:	d4 f3       	brlt	.-12     	; 0x1a16 <__divsf3_pse+0x6c>
    1a22:	86 95       	lsr	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b7 95       	ror	r27
    1a2a:	f7 95       	ror	r31
    1a2c:	9f 5f       	subi	r25, 0xFF	; 255
    1a2e:	c9 f7       	brne	.-14     	; 0x1a22 <__divsf3_pse+0x78>
    1a30:	88 0f       	add	r24, r24
    1a32:	91 1d       	adc	r25, r1
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	97 f9       	bld	r25, 7
    1a3a:	08 95       	ret
    1a3c:	e1 e0       	ldi	r30, 0x01	; 1
    1a3e:	66 0f       	add	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	88 1f       	adc	r24, r24
    1a44:	bb 1f       	adc	r27, r27
    1a46:	62 17       	cp	r22, r18
    1a48:	73 07       	cpc	r23, r19
    1a4a:	84 07       	cpc	r24, r20
    1a4c:	ba 07       	cpc	r27, r26
    1a4e:	20 f0       	brcs	.+8      	; 0x1a58 <__divsf3_pse+0xae>
    1a50:	62 1b       	sub	r22, r18
    1a52:	73 0b       	sbc	r23, r19
    1a54:	84 0b       	sbc	r24, r20
    1a56:	ba 0b       	sbc	r27, r26
    1a58:	ee 1f       	adc	r30, r30
    1a5a:	88 f7       	brcc	.-30     	; 0x1a3e <__divsf3_pse+0x94>
    1a5c:	e0 95       	com	r30
    1a5e:	08 95       	ret

00001a60 <__fixunssfsi>:
    1a60:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_splitA>
    1a64:	88 f0       	brcs	.+34     	; 0x1a88 <__fixunssfsi+0x28>
    1a66:	9f 57       	subi	r25, 0x7F	; 127
    1a68:	98 f0       	brcs	.+38     	; 0x1a90 <__fixunssfsi+0x30>
    1a6a:	b9 2f       	mov	r27, r25
    1a6c:	99 27       	eor	r25, r25
    1a6e:	b7 51       	subi	r27, 0x17	; 23
    1a70:	b0 f0       	brcs	.+44     	; 0x1a9e <__fixunssfsi+0x3e>
    1a72:	e1 f0       	breq	.+56     	; 0x1aac <__fixunssfsi+0x4c>
    1a74:	66 0f       	add	r22, r22
    1a76:	77 1f       	adc	r23, r23
    1a78:	88 1f       	adc	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	1a f0       	brmi	.+6      	; 0x1a84 <__fixunssfsi+0x24>
    1a7e:	ba 95       	dec	r27
    1a80:	c9 f7       	brne	.-14     	; 0x1a74 <__fixunssfsi+0x14>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <__fixunssfsi+0x4c>
    1a84:	b1 30       	cpi	r27, 0x01	; 1
    1a86:	91 f0       	breq	.+36     	; 0x1aac <__fixunssfsi+0x4c>
    1a88:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_zero>
    1a8c:	b1 e0       	ldi	r27, 0x01	; 1
    1a8e:	08 95       	ret
    1a90:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_zero>
    1a94:	67 2f       	mov	r22, r23
    1a96:	78 2f       	mov	r23, r24
    1a98:	88 27       	eor	r24, r24
    1a9a:	b8 5f       	subi	r27, 0xF8	; 248
    1a9c:	39 f0       	breq	.+14     	; 0x1aac <__fixunssfsi+0x4c>
    1a9e:	b9 3f       	cpi	r27, 0xF9	; 249
    1aa0:	cc f3       	brlt	.-14     	; 0x1a94 <__fixunssfsi+0x34>
    1aa2:	86 95       	lsr	r24
    1aa4:	77 95       	ror	r23
    1aa6:	67 95       	ror	r22
    1aa8:	b3 95       	inc	r27
    1aaa:	d9 f7       	brne	.-10     	; 0x1aa2 <__fixunssfsi+0x42>
    1aac:	3e f4       	brtc	.+14     	; 0x1abc <__fixunssfsi+0x5c>
    1aae:	90 95       	com	r25
    1ab0:	80 95       	com	r24
    1ab2:	70 95       	com	r23
    1ab4:	61 95       	neg	r22
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	08 95       	ret

00001abe <__floatunsisf>:
    1abe:	e8 94       	clt
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <__floatsisf+0x12>

00001ac2 <__floatsisf>:
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	3e f4       	brtc	.+14     	; 0x1ad4 <__floatsisf+0x12>
    1ac6:	90 95       	com	r25
    1ac8:	80 95       	com	r24
    1aca:	70 95       	com	r23
    1acc:	61 95       	neg	r22
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	99 23       	and	r25, r25
    1ad6:	a9 f0       	breq	.+42     	; 0x1b02 <__floatsisf+0x40>
    1ad8:	f9 2f       	mov	r31, r25
    1ada:	96 e9       	ldi	r25, 0x96	; 150
    1adc:	bb 27       	eor	r27, r27
    1ade:	93 95       	inc	r25
    1ae0:	f6 95       	lsr	r31
    1ae2:	87 95       	ror	r24
    1ae4:	77 95       	ror	r23
    1ae6:	67 95       	ror	r22
    1ae8:	b7 95       	ror	r27
    1aea:	f1 11       	cpse	r31, r1
    1aec:	f8 cf       	rjmp	.-16     	; 0x1ade <__floatsisf+0x1c>
    1aee:	fa f4       	brpl	.+62     	; 0x1b2e <__floatsisf+0x6c>
    1af0:	bb 0f       	add	r27, r27
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <__floatsisf+0x36>
    1af4:	60 ff       	sbrs	r22, 0
    1af6:	1b c0       	rjmp	.+54     	; 0x1b2e <__floatsisf+0x6c>
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8f 4f       	sbci	r24, 0xFF	; 255
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <__floatsisf+0x6c>
    1b02:	88 23       	and	r24, r24
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <__floatsisf+0x48>
    1b06:	96 e9       	ldi	r25, 0x96	; 150
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <__floatsisf+0x6a>
    1b0a:	77 23       	and	r23, r23
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <__floatsisf+0x54>
    1b0e:	9e e8       	ldi	r25, 0x8E	; 142
    1b10:	87 2f       	mov	r24, r23
    1b12:	76 2f       	mov	r23, r22
    1b14:	05 c0       	rjmp	.+10     	; 0x1b20 <__floatsisf+0x5e>
    1b16:	66 23       	and	r22, r22
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <__floatsisf+0x74>
    1b1a:	96 e8       	ldi	r25, 0x86	; 134
    1b1c:	86 2f       	mov	r24, r22
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	2a f0       	brmi	.+10     	; 0x1b2e <__floatsisf+0x6c>
    1b24:	9a 95       	dec	r25
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	da f7       	brpl	.-10     	; 0x1b24 <__floatsisf+0x62>
    1b2e:	88 0f       	add	r24, r24
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__fp_cmp>:
    1b38:	99 0f       	add	r25, r25
    1b3a:	00 08       	sbc	r0, r0
    1b3c:	55 0f       	add	r21, r21
    1b3e:	aa 0b       	sbc	r26, r26
    1b40:	e0 e8       	ldi	r30, 0x80	; 128
    1b42:	fe ef       	ldi	r31, 0xFE	; 254
    1b44:	16 16       	cp	r1, r22
    1b46:	17 06       	cpc	r1, r23
    1b48:	e8 07       	cpc	r30, r24
    1b4a:	f9 07       	cpc	r31, r25
    1b4c:	c0 f0       	brcs	.+48     	; 0x1b7e <__fp_cmp+0x46>
    1b4e:	12 16       	cp	r1, r18
    1b50:	13 06       	cpc	r1, r19
    1b52:	e4 07       	cpc	r30, r20
    1b54:	f5 07       	cpc	r31, r21
    1b56:	98 f0       	brcs	.+38     	; 0x1b7e <__fp_cmp+0x46>
    1b58:	62 1b       	sub	r22, r18
    1b5a:	73 0b       	sbc	r23, r19
    1b5c:	84 0b       	sbc	r24, r20
    1b5e:	95 0b       	sbc	r25, r21
    1b60:	39 f4       	brne	.+14     	; 0x1b70 <__fp_cmp+0x38>
    1b62:	0a 26       	eor	r0, r26
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <__fp_cmp+0x46>
    1b66:	23 2b       	or	r18, r19
    1b68:	24 2b       	or	r18, r20
    1b6a:	25 2b       	or	r18, r21
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <__fp_cmp+0x3e>
    1b6e:	08 95       	ret
    1b70:	0a 26       	eor	r0, r26
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__fp_cmp+0x3e>
    1b74:	a1 40       	sbci	r26, 0x01	; 1
    1b76:	a6 95       	lsr	r26
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	81 1d       	adc	r24, r1
    1b7e:	08 95       	ret

00001b80 <__fp_inf>:
    1b80:	97 f9       	bld	r25, 7
    1b82:	9f 67       	ori	r25, 0x7F	; 127
    1b84:	80 e8       	ldi	r24, 0x80	; 128
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	08 95       	ret

00001b8c <__fp_nan>:
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	80 ec       	ldi	r24, 0xC0	; 192
    1b90:	08 95       	ret

00001b92 <__fp_pscA>:
    1b92:	00 24       	eor	r0, r0
    1b94:	0a 94       	dec	r0
    1b96:	16 16       	cp	r1, r22
    1b98:	17 06       	cpc	r1, r23
    1b9a:	18 06       	cpc	r1, r24
    1b9c:	09 06       	cpc	r0, r25
    1b9e:	08 95       	ret

00001ba0 <__fp_pscB>:
    1ba0:	00 24       	eor	r0, r0
    1ba2:	0a 94       	dec	r0
    1ba4:	12 16       	cp	r1, r18
    1ba6:	13 06       	cpc	r1, r19
    1ba8:	14 06       	cpc	r1, r20
    1baa:	05 06       	cpc	r0, r21
    1bac:	08 95       	ret

00001bae <__fp_round>:
    1bae:	09 2e       	mov	r0, r25
    1bb0:	03 94       	inc	r0
    1bb2:	00 0c       	add	r0, r0
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__fp_round+0xc>
    1bb6:	88 23       	and	r24, r24
    1bb8:	52 f0       	brmi	.+20     	; 0x1bce <__fp_round+0x20>
    1bba:	bb 0f       	add	r27, r27
    1bbc:	40 f4       	brcc	.+16     	; 0x1bce <__fp_round+0x20>
    1bbe:	bf 2b       	or	r27, r31
    1bc0:	11 f4       	brne	.+4      	; 0x1bc6 <__fp_round+0x18>
    1bc2:	60 ff       	sbrs	r22, 0
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <__fp_round+0x20>
    1bc6:	6f 5f       	subi	r22, 0xFF	; 255
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	08 95       	ret

00001bd0 <__fp_split3>:
    1bd0:	57 fd       	sbrc	r21, 7
    1bd2:	90 58       	subi	r25, 0x80	; 128
    1bd4:	44 0f       	add	r20, r20
    1bd6:	55 1f       	adc	r21, r21
    1bd8:	59 f0       	breq	.+22     	; 0x1bf0 <__fp_splitA+0x10>
    1bda:	5f 3f       	cpi	r21, 0xFF	; 255
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <__fp_splitA+0x1a>
    1bde:	47 95       	ror	r20

00001be0 <__fp_splitA>:
    1be0:	88 0f       	add	r24, r24
    1be2:	97 fb       	bst	r25, 7
    1be4:	99 1f       	adc	r25, r25
    1be6:	61 f0       	breq	.+24     	; 0x1c00 <__fp_splitA+0x20>
    1be8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bea:	79 f0       	breq	.+30     	; 0x1c0a <__fp_splitA+0x2a>
    1bec:	87 95       	ror	r24
    1bee:	08 95       	ret
    1bf0:	12 16       	cp	r1, r18
    1bf2:	13 06       	cpc	r1, r19
    1bf4:	14 06       	cpc	r1, r20
    1bf6:	55 1f       	adc	r21, r21
    1bf8:	f2 cf       	rjmp	.-28     	; 0x1bde <__fp_split3+0xe>
    1bfa:	46 95       	lsr	r20
    1bfc:	f1 df       	rcall	.-30     	; 0x1be0 <__fp_splitA>
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <__fp_splitA+0x30>
    1c00:	16 16       	cp	r1, r22
    1c02:	17 06       	cpc	r1, r23
    1c04:	18 06       	cpc	r1, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	f1 cf       	rjmp	.-30     	; 0x1bec <__fp_splitA+0xc>
    1c0a:	86 95       	lsr	r24
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	61 05       	cpc	r22, r1
    1c10:	08 94       	sec
    1c12:	08 95       	ret

00001c14 <__fp_zero>:
    1c14:	e8 94       	clt

00001c16 <__fp_szero>:
    1c16:	bb 27       	eor	r27, r27
    1c18:	66 27       	eor	r22, r22
    1c1a:	77 27       	eor	r23, r23
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	97 f9       	bld	r25, 7
    1c20:	08 95       	ret

00001c22 <__mulsf3>:
    1c22:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__mulsf3x>
    1c26:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_round>
    1c2a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscA>
    1c2e:	38 f0       	brcs	.+14     	; 0x1c3e <__mulsf3+0x1c>
    1c30:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__fp_pscB>
    1c34:	20 f0       	brcs	.+8      	; 0x1c3e <__mulsf3+0x1c>
    1c36:	95 23       	and	r25, r21
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <__mulsf3+0x1c>
    1c3a:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    1c3e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>
    1c42:	11 24       	eor	r1, r1
    1c44:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>

00001c48 <__mulsf3x>:
    1c48:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__fp_split3>
    1c4c:	70 f3       	brcs	.-36     	; 0x1c2a <__mulsf3+0x8>

00001c4e <__mulsf3_pse>:
    1c4e:	95 9f       	mul	r25, r21
    1c50:	c1 f3       	breq	.-16     	; 0x1c42 <__mulsf3+0x20>
    1c52:	95 0f       	add	r25, r21
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	55 1f       	adc	r21, r21
    1c58:	62 9f       	mul	r22, r18
    1c5a:	f0 01       	movw	r30, r0
    1c5c:	72 9f       	mul	r23, r18
    1c5e:	bb 27       	eor	r27, r27
    1c60:	f0 0d       	add	r31, r0
    1c62:	b1 1d       	adc	r27, r1
    1c64:	63 9f       	mul	r22, r19
    1c66:	aa 27       	eor	r26, r26
    1c68:	f0 0d       	add	r31, r0
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	aa 1f       	adc	r26, r26
    1c6e:	64 9f       	mul	r22, r20
    1c70:	66 27       	eor	r22, r22
    1c72:	b0 0d       	add	r27, r0
    1c74:	a1 1d       	adc	r26, r1
    1c76:	66 1f       	adc	r22, r22
    1c78:	82 9f       	mul	r24, r18
    1c7a:	22 27       	eor	r18, r18
    1c7c:	b0 0d       	add	r27, r0
    1c7e:	a1 1d       	adc	r26, r1
    1c80:	62 1f       	adc	r22, r18
    1c82:	73 9f       	mul	r23, r19
    1c84:	b0 0d       	add	r27, r0
    1c86:	a1 1d       	adc	r26, r1
    1c88:	62 1f       	adc	r22, r18
    1c8a:	83 9f       	mul	r24, r19
    1c8c:	a0 0d       	add	r26, r0
    1c8e:	61 1d       	adc	r22, r1
    1c90:	22 1f       	adc	r18, r18
    1c92:	74 9f       	mul	r23, r20
    1c94:	33 27       	eor	r19, r19
    1c96:	a0 0d       	add	r26, r0
    1c98:	61 1d       	adc	r22, r1
    1c9a:	23 1f       	adc	r18, r19
    1c9c:	84 9f       	mul	r24, r20
    1c9e:	60 0d       	add	r22, r0
    1ca0:	21 1d       	adc	r18, r1
    1ca2:	82 2f       	mov	r24, r18
    1ca4:	76 2f       	mov	r23, r22
    1ca6:	6a 2f       	mov	r22, r26
    1ca8:	11 24       	eor	r1, r1
    1caa:	9f 57       	subi	r25, 0x7F	; 127
    1cac:	50 40       	sbci	r21, 0x00	; 0
    1cae:	9a f0       	brmi	.+38     	; 0x1cd6 <__mulsf3_pse+0x88>
    1cb0:	f1 f0       	breq	.+60     	; 0x1cee <__mulsf3_pse+0xa0>
    1cb2:	88 23       	and	r24, r24
    1cb4:	4a f0       	brmi	.+18     	; 0x1cc8 <__mulsf3_pse+0x7a>
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	50 40       	sbci	r21, 0x00	; 0
    1cc6:	a9 f7       	brne	.-22     	; 0x1cb2 <__mulsf3_pse+0x64>
    1cc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cca:	51 05       	cpc	r21, r1
    1ccc:	80 f0       	brcs	.+32     	; 0x1cee <__mulsf3_pse+0xa0>
    1cce:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__fp_inf>
    1cd2:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_szero>
    1cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd8:	e4 f3       	brlt	.-8      	; 0x1cd2 <__mulsf3_pse+0x84>
    1cda:	98 3e       	cpi	r25, 0xE8	; 232
    1cdc:	d4 f3       	brlt	.-12     	; 0x1cd2 <__mulsf3_pse+0x84>
    1cde:	86 95       	lsr	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	b7 95       	ror	r27
    1ce6:	f7 95       	ror	r31
    1ce8:	e7 95       	ror	r30
    1cea:	9f 5f       	subi	r25, 0xFF	; 255
    1cec:	c1 f7       	brne	.-16     	; 0x1cde <__mulsf3_pse+0x90>
    1cee:	fe 2b       	or	r31, r30
    1cf0:	88 0f       	add	r24, r24
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	97 f9       	bld	r25, 7
    1cfa:	08 95       	ret

00001cfc <__tablejump2__>:
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	05 90       	lpm	r0, Z+
    1d02:	f4 91       	lpm	r31, Z
    1d04:	e0 2d       	mov	r30, r0
    1d06:	09 94       	ijmp

00001d08 <strcat>:
    1d08:	fb 01       	movw	r30, r22
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	0d 90       	ld	r0, X+
    1d0e:	00 20       	and	r0, r0
    1d10:	e9 f7       	brne	.-6      	; 0x1d0c <strcat+0x4>
    1d12:	11 97       	sbiw	r26, 0x01	; 1
    1d14:	01 90       	ld	r0, Z+
    1d16:	0d 92       	st	X+, r0
    1d18:	00 20       	and	r0, r0
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <strcat+0xc>
    1d1c:	08 95       	ret

00001d1e <strcpy>:
    1d1e:	fb 01       	movw	r30, r22
    1d20:	dc 01       	movw	r26, r24
    1d22:	01 90       	ld	r0, Z+
    1d24:	0d 92       	st	X+, r0
    1d26:	00 20       	and	r0, r0
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <strcpy+0x4>
    1d2a:	08 95       	ret

00001d2c <sprintf>:
    1d2c:	ae e0       	ldi	r26, 0x0E	; 14
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ec e9       	ldi	r30, 0x9C	; 156
    1d32:	fe e0       	ldi	r31, 0x0E	; 14
    1d34:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x1c>
    1d38:	0d 89       	ldd	r16, Y+21	; 0x15
    1d3a:	1e 89       	ldd	r17, Y+22	; 0x16
    1d3c:	86 e0       	ldi	r24, 0x06	; 6
    1d3e:	8c 83       	std	Y+4, r24	; 0x04
    1d40:	09 83       	std	Y+1, r16	; 0x01
    1d42:	1a 83       	std	Y+2, r17	; 0x02
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	9f e7       	ldi	r25, 0x7F	; 127
    1d48:	8d 83       	std	Y+5, r24	; 0x05
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	ae 01       	movw	r20, r28
    1d4e:	47 5e       	subi	r20, 0xE7	; 231
    1d50:	5f 4f       	sbci	r21, 0xFF	; 255
    1d52:	6f 89       	ldd	r22, Y+23	; 0x17
    1d54:	78 8d       	ldd	r23, Y+24	; 0x18
    1d56:	ce 01       	movw	r24, r28
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <vfprintf>
    1d5e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d60:	f8 85       	ldd	r31, Y+8	; 0x08
    1d62:	e0 0f       	add	r30, r16
    1d64:	f1 1f       	adc	r31, r17
    1d66:	10 82       	st	Z, r1
    1d68:	2e 96       	adiw	r28, 0x0e	; 14
    1d6a:	e4 e0       	ldi	r30, 0x04	; 4
    1d6c:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__epilogue_restores__+0x1c>

00001d70 <vfprintf>:
    1d70:	ab e0       	ldi	r26, 0x0B	; 11
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ee eb       	ldi	r30, 0xBE	; 190
    1d76:	fe e0       	ldi	r31, 0x0E	; 14
    1d78:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__>
    1d7c:	6c 01       	movw	r12, r24
    1d7e:	7b 01       	movw	r14, r22
    1d80:	8a 01       	movw	r16, r20
    1d82:	fc 01       	movw	r30, r24
    1d84:	16 82       	std	Z+6, r1	; 0x06
    1d86:	17 82       	std	Z+7, r1	; 0x07
    1d88:	83 81       	ldd	r24, Z+3	; 0x03
    1d8a:	81 ff       	sbrs	r24, 1
    1d8c:	cc c1       	rjmp	.+920    	; 0x2126 <vfprintf+0x3b6>
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	3c 01       	movw	r6, r24
    1d94:	f6 01       	movw	r30, r12
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	f7 01       	movw	r30, r14
    1d9a:	93 fd       	sbrc	r25, 3
    1d9c:	85 91       	lpm	r24, Z+
    1d9e:	93 ff       	sbrs	r25, 3
    1da0:	81 91       	ld	r24, Z+
    1da2:	7f 01       	movw	r14, r30
    1da4:	88 23       	and	r24, r24
    1da6:	09 f4       	brne	.+2      	; 0x1daa <vfprintf+0x3a>
    1da8:	ba c1       	rjmp	.+884    	; 0x211e <vfprintf+0x3ae>
    1daa:	85 32       	cpi	r24, 0x25	; 37
    1dac:	39 f4       	brne	.+14     	; 0x1dbc <vfprintf+0x4c>
    1dae:	93 fd       	sbrc	r25, 3
    1db0:	85 91       	lpm	r24, Z+
    1db2:	93 ff       	sbrs	r25, 3
    1db4:	81 91       	ld	r24, Z+
    1db6:	7f 01       	movw	r14, r30
    1db8:	85 32       	cpi	r24, 0x25	; 37
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <vfprintf+0x56>
    1dbc:	b6 01       	movw	r22, r12
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    1dc4:	e7 cf       	rjmp	.-50     	; 0x1d94 <vfprintf+0x24>
    1dc6:	91 2c       	mov	r9, r1
    1dc8:	21 2c       	mov	r2, r1
    1dca:	31 2c       	mov	r3, r1
    1dcc:	ff e1       	ldi	r31, 0x1F	; 31
    1dce:	f3 15       	cp	r31, r3
    1dd0:	d8 f0       	brcs	.+54     	; 0x1e08 <vfprintf+0x98>
    1dd2:	8b 32       	cpi	r24, 0x2B	; 43
    1dd4:	79 f0       	breq	.+30     	; 0x1df4 <vfprintf+0x84>
    1dd6:	38 f4       	brcc	.+14     	; 0x1de6 <vfprintf+0x76>
    1dd8:	80 32       	cpi	r24, 0x20	; 32
    1dda:	79 f0       	breq	.+30     	; 0x1dfa <vfprintf+0x8a>
    1ddc:	83 32       	cpi	r24, 0x23	; 35
    1dde:	a1 f4       	brne	.+40     	; 0x1e08 <vfprintf+0x98>
    1de0:	23 2d       	mov	r18, r3
    1de2:	20 61       	ori	r18, 0x10	; 16
    1de4:	1d c0       	rjmp	.+58     	; 0x1e20 <vfprintf+0xb0>
    1de6:	8d 32       	cpi	r24, 0x2D	; 45
    1de8:	61 f0       	breq	.+24     	; 0x1e02 <vfprintf+0x92>
    1dea:	80 33       	cpi	r24, 0x30	; 48
    1dec:	69 f4       	brne	.+26     	; 0x1e08 <vfprintf+0x98>
    1dee:	23 2d       	mov	r18, r3
    1df0:	21 60       	ori	r18, 0x01	; 1
    1df2:	16 c0       	rjmp	.+44     	; 0x1e20 <vfprintf+0xb0>
    1df4:	83 2d       	mov	r24, r3
    1df6:	82 60       	ori	r24, 0x02	; 2
    1df8:	38 2e       	mov	r3, r24
    1dfa:	e3 2d       	mov	r30, r3
    1dfc:	e4 60       	ori	r30, 0x04	; 4
    1dfe:	3e 2e       	mov	r3, r30
    1e00:	2a c0       	rjmp	.+84     	; 0x1e56 <vfprintf+0xe6>
    1e02:	f3 2d       	mov	r31, r3
    1e04:	f8 60       	ori	r31, 0x08	; 8
    1e06:	1d c0       	rjmp	.+58     	; 0x1e42 <vfprintf+0xd2>
    1e08:	37 fc       	sbrc	r3, 7
    1e0a:	2d c0       	rjmp	.+90     	; 0x1e66 <vfprintf+0xf6>
    1e0c:	20 ed       	ldi	r18, 0xD0	; 208
    1e0e:	28 0f       	add	r18, r24
    1e10:	2a 30       	cpi	r18, 0x0A	; 10
    1e12:	40 f0       	brcs	.+16     	; 0x1e24 <vfprintf+0xb4>
    1e14:	8e 32       	cpi	r24, 0x2E	; 46
    1e16:	b9 f4       	brne	.+46     	; 0x1e46 <vfprintf+0xd6>
    1e18:	36 fc       	sbrc	r3, 6
    1e1a:	81 c1       	rjmp	.+770    	; 0x211e <vfprintf+0x3ae>
    1e1c:	23 2d       	mov	r18, r3
    1e1e:	20 64       	ori	r18, 0x40	; 64
    1e20:	32 2e       	mov	r3, r18
    1e22:	19 c0       	rjmp	.+50     	; 0x1e56 <vfprintf+0xe6>
    1e24:	36 fe       	sbrs	r3, 6
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <vfprintf+0xc4>
    1e28:	8a e0       	ldi	r24, 0x0A	; 10
    1e2a:	98 9e       	mul	r9, r24
    1e2c:	20 0d       	add	r18, r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	92 2e       	mov	r9, r18
    1e32:	11 c0       	rjmp	.+34     	; 0x1e56 <vfprintf+0xe6>
    1e34:	ea e0       	ldi	r30, 0x0A	; 10
    1e36:	2e 9e       	mul	r2, r30
    1e38:	20 0d       	add	r18, r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	22 2e       	mov	r2, r18
    1e3e:	f3 2d       	mov	r31, r3
    1e40:	f0 62       	ori	r31, 0x20	; 32
    1e42:	3f 2e       	mov	r3, r31
    1e44:	08 c0       	rjmp	.+16     	; 0x1e56 <vfprintf+0xe6>
    1e46:	8c 36       	cpi	r24, 0x6C	; 108
    1e48:	21 f4       	brne	.+8      	; 0x1e52 <vfprintf+0xe2>
    1e4a:	83 2d       	mov	r24, r3
    1e4c:	80 68       	ori	r24, 0x80	; 128
    1e4e:	38 2e       	mov	r3, r24
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <vfprintf+0xe6>
    1e52:	88 36       	cpi	r24, 0x68	; 104
    1e54:	41 f4       	brne	.+16     	; 0x1e66 <vfprintf+0xf6>
    1e56:	f7 01       	movw	r30, r14
    1e58:	93 fd       	sbrc	r25, 3
    1e5a:	85 91       	lpm	r24, Z+
    1e5c:	93 ff       	sbrs	r25, 3
    1e5e:	81 91       	ld	r24, Z+
    1e60:	7f 01       	movw	r14, r30
    1e62:	81 11       	cpse	r24, r1
    1e64:	b3 cf       	rjmp	.-154    	; 0x1dcc <vfprintf+0x5c>
    1e66:	98 2f       	mov	r25, r24
    1e68:	9f 7d       	andi	r25, 0xDF	; 223
    1e6a:	95 54       	subi	r25, 0x45	; 69
    1e6c:	93 30       	cpi	r25, 0x03	; 3
    1e6e:	28 f4       	brcc	.+10     	; 0x1e7a <vfprintf+0x10a>
    1e70:	0c 5f       	subi	r16, 0xFC	; 252
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	9f e3       	ldi	r25, 0x3F	; 63
    1e76:	99 83       	std	Y+1, r25	; 0x01
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <vfprintf+0x124>
    1e7a:	83 36       	cpi	r24, 0x63	; 99
    1e7c:	31 f0       	breq	.+12     	; 0x1e8a <vfprintf+0x11a>
    1e7e:	83 37       	cpi	r24, 0x73	; 115
    1e80:	71 f0       	breq	.+28     	; 0x1e9e <vfprintf+0x12e>
    1e82:	83 35       	cpi	r24, 0x53	; 83
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <vfprintf+0x118>
    1e86:	59 c0       	rjmp	.+178    	; 0x1f3a <vfprintf+0x1ca>
    1e88:	21 c0       	rjmp	.+66     	; 0x1ecc <vfprintf+0x15c>
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	80 81       	ld	r24, Z
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	0e 5f       	subi	r16, 0xFE	; 254
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	88 24       	eor	r8, r8
    1e96:	83 94       	inc	r8
    1e98:	91 2c       	mov	r9, r1
    1e9a:	53 01       	movw	r10, r6
    1e9c:	13 c0       	rjmp	.+38     	; 0x1ec4 <vfprintf+0x154>
    1e9e:	28 01       	movw	r4, r16
    1ea0:	f2 e0       	ldi	r31, 0x02	; 2
    1ea2:	4f 0e       	add	r4, r31
    1ea4:	51 1c       	adc	r5, r1
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	a0 80       	ld	r10, Z
    1eaa:	b1 80       	ldd	r11, Z+1	; 0x01
    1eac:	36 fe       	sbrs	r3, 6
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <vfprintf+0x146>
    1eb0:	69 2d       	mov	r22, r9
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <vfprintf+0x14a>
    1eb6:	6f ef       	ldi	r22, 0xFF	; 255
    1eb8:	7f ef       	ldi	r23, 0xFF	; 255
    1eba:	c5 01       	movw	r24, r10
    1ebc:	0e 94 a4 10 	call	0x2148	; 0x2148 <strnlen>
    1ec0:	4c 01       	movw	r8, r24
    1ec2:	82 01       	movw	r16, r4
    1ec4:	f3 2d       	mov	r31, r3
    1ec6:	ff 77       	andi	r31, 0x7F	; 127
    1ec8:	3f 2e       	mov	r3, r31
    1eca:	16 c0       	rjmp	.+44     	; 0x1ef8 <vfprintf+0x188>
    1ecc:	28 01       	movw	r4, r16
    1ece:	22 e0       	ldi	r18, 0x02	; 2
    1ed0:	42 0e       	add	r4, r18
    1ed2:	51 1c       	adc	r5, r1
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	a0 80       	ld	r10, Z
    1ed8:	b1 80       	ldd	r11, Z+1	; 0x01
    1eda:	36 fe       	sbrs	r3, 6
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <vfprintf+0x174>
    1ede:	69 2d       	mov	r22, r9
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <vfprintf+0x178>
    1ee4:	6f ef       	ldi	r22, 0xFF	; 255
    1ee6:	7f ef       	ldi	r23, 0xFF	; 255
    1ee8:	c5 01       	movw	r24, r10
    1eea:	0e 94 99 10 	call	0x2132	; 0x2132 <strnlen_P>
    1eee:	4c 01       	movw	r8, r24
    1ef0:	f3 2d       	mov	r31, r3
    1ef2:	f0 68       	ori	r31, 0x80	; 128
    1ef4:	3f 2e       	mov	r3, r31
    1ef6:	82 01       	movw	r16, r4
    1ef8:	33 fc       	sbrc	r3, 3
    1efa:	1b c0       	rjmp	.+54     	; 0x1f32 <vfprintf+0x1c2>
    1efc:	82 2d       	mov	r24, r2
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	88 16       	cp	r8, r24
    1f02:	99 06       	cpc	r9, r25
    1f04:	b0 f4       	brcc	.+44     	; 0x1f32 <vfprintf+0x1c2>
    1f06:	b6 01       	movw	r22, r12
    1f08:	80 e2       	ldi	r24, 0x20	; 32
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    1f10:	2a 94       	dec	r2
    1f12:	f4 cf       	rjmp	.-24     	; 0x1efc <vfprintf+0x18c>
    1f14:	f5 01       	movw	r30, r10
    1f16:	37 fc       	sbrc	r3, 7
    1f18:	85 91       	lpm	r24, Z+
    1f1a:	37 fe       	sbrs	r3, 7
    1f1c:	81 91       	ld	r24, Z+
    1f1e:	5f 01       	movw	r10, r30
    1f20:	b6 01       	movw	r22, r12
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    1f28:	21 10       	cpse	r2, r1
    1f2a:	2a 94       	dec	r2
    1f2c:	21 e0       	ldi	r18, 0x01	; 1
    1f2e:	82 1a       	sub	r8, r18
    1f30:	91 08       	sbc	r9, r1
    1f32:	81 14       	cp	r8, r1
    1f34:	91 04       	cpc	r9, r1
    1f36:	71 f7       	brne	.-36     	; 0x1f14 <vfprintf+0x1a4>
    1f38:	e8 c0       	rjmp	.+464    	; 0x210a <vfprintf+0x39a>
    1f3a:	84 36       	cpi	r24, 0x64	; 100
    1f3c:	11 f0       	breq	.+4      	; 0x1f42 <vfprintf+0x1d2>
    1f3e:	89 36       	cpi	r24, 0x69	; 105
    1f40:	41 f5       	brne	.+80     	; 0x1f92 <vfprintf+0x222>
    1f42:	f8 01       	movw	r30, r16
    1f44:	37 fe       	sbrs	r3, 7
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <vfprintf+0x1e6>
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	0c 5f       	subi	r16, 0xFC	; 252
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <vfprintf+0x1f6>
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	07 2e       	mov	r0, r23
    1f5c:	00 0c       	add	r0, r0
    1f5e:	88 0b       	sbc	r24, r24
    1f60:	99 0b       	sbc	r25, r25
    1f62:	0e 5f       	subi	r16, 0xFE	; 254
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	f3 2d       	mov	r31, r3
    1f68:	ff 76       	andi	r31, 0x6F	; 111
    1f6a:	3f 2e       	mov	r3, r31
    1f6c:	97 ff       	sbrs	r25, 7
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <vfprintf+0x212>
    1f70:	90 95       	com	r25
    1f72:	80 95       	com	r24
    1f74:	70 95       	com	r23
    1f76:	61 95       	neg	r22
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	f0 68       	ori	r31, 0x80	; 128
    1f80:	3f 2e       	mov	r3, r31
    1f82:	2a e0       	ldi	r18, 0x0A	; 10
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	a3 01       	movw	r20, r6
    1f88:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__ultoa_invert>
    1f8c:	88 2e       	mov	r8, r24
    1f8e:	86 18       	sub	r8, r6
    1f90:	45 c0       	rjmp	.+138    	; 0x201c <vfprintf+0x2ac>
    1f92:	85 37       	cpi	r24, 0x75	; 117
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <vfprintf+0x232>
    1f96:	23 2d       	mov	r18, r3
    1f98:	2f 7e       	andi	r18, 0xEF	; 239
    1f9a:	b2 2e       	mov	r11, r18
    1f9c:	2a e0       	ldi	r18, 0x0A	; 10
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	25 c0       	rjmp	.+74     	; 0x1fec <vfprintf+0x27c>
    1fa2:	93 2d       	mov	r25, r3
    1fa4:	99 7f       	andi	r25, 0xF9	; 249
    1fa6:	b9 2e       	mov	r11, r25
    1fa8:	8f 36       	cpi	r24, 0x6F	; 111
    1faa:	c1 f0       	breq	.+48     	; 0x1fdc <vfprintf+0x26c>
    1fac:	18 f4       	brcc	.+6      	; 0x1fb4 <vfprintf+0x244>
    1fae:	88 35       	cpi	r24, 0x58	; 88
    1fb0:	79 f0       	breq	.+30     	; 0x1fd0 <vfprintf+0x260>
    1fb2:	b5 c0       	rjmp	.+362    	; 0x211e <vfprintf+0x3ae>
    1fb4:	80 37       	cpi	r24, 0x70	; 112
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <vfprintf+0x24e>
    1fb8:	88 37       	cpi	r24, 0x78	; 120
    1fba:	21 f0       	breq	.+8      	; 0x1fc4 <vfprintf+0x254>
    1fbc:	b0 c0       	rjmp	.+352    	; 0x211e <vfprintf+0x3ae>
    1fbe:	e9 2f       	mov	r30, r25
    1fc0:	e0 61       	ori	r30, 0x10	; 16
    1fc2:	be 2e       	mov	r11, r30
    1fc4:	b4 fe       	sbrs	r11, 4
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <vfprintf+0x272>
    1fc8:	fb 2d       	mov	r31, r11
    1fca:	f4 60       	ori	r31, 0x04	; 4
    1fcc:	bf 2e       	mov	r11, r31
    1fce:	09 c0       	rjmp	.+18     	; 0x1fe2 <vfprintf+0x272>
    1fd0:	34 fe       	sbrs	r3, 4
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <vfprintf+0x278>
    1fd4:	29 2f       	mov	r18, r25
    1fd6:	26 60       	ori	r18, 0x06	; 6
    1fd8:	b2 2e       	mov	r11, r18
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <vfprintf+0x278>
    1fdc:	28 e0       	ldi	r18, 0x08	; 8
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <vfprintf+0x27c>
    1fe2:	20 e1       	ldi	r18, 0x10	; 16
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <vfprintf+0x27c>
    1fe8:	20 e1       	ldi	r18, 0x10	; 16
    1fea:	32 e0       	ldi	r19, 0x02	; 2
    1fec:	f8 01       	movw	r30, r16
    1fee:	b7 fe       	sbrs	r11, 7
    1ff0:	07 c0       	rjmp	.+14     	; 0x2000 <vfprintf+0x290>
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	0c 5f       	subi	r16, 0xFC	; 252
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	06 c0       	rjmp	.+12     	; 0x200c <vfprintf+0x29c>
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 5f       	subi	r16, 0xFE	; 254
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	a3 01       	movw	r20, r6
    200e:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__ultoa_invert>
    2012:	88 2e       	mov	r8, r24
    2014:	86 18       	sub	r8, r6
    2016:	fb 2d       	mov	r31, r11
    2018:	ff 77       	andi	r31, 0x7F	; 127
    201a:	3f 2e       	mov	r3, r31
    201c:	36 fe       	sbrs	r3, 6
    201e:	0d c0       	rjmp	.+26     	; 0x203a <vfprintf+0x2ca>
    2020:	23 2d       	mov	r18, r3
    2022:	2e 7f       	andi	r18, 0xFE	; 254
    2024:	a2 2e       	mov	r10, r18
    2026:	89 14       	cp	r8, r9
    2028:	58 f4       	brcc	.+22     	; 0x2040 <vfprintf+0x2d0>
    202a:	34 fe       	sbrs	r3, 4
    202c:	0b c0       	rjmp	.+22     	; 0x2044 <vfprintf+0x2d4>
    202e:	32 fc       	sbrc	r3, 2
    2030:	09 c0       	rjmp	.+18     	; 0x2044 <vfprintf+0x2d4>
    2032:	83 2d       	mov	r24, r3
    2034:	8e 7e       	andi	r24, 0xEE	; 238
    2036:	a8 2e       	mov	r10, r24
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <vfprintf+0x2d4>
    203a:	b8 2c       	mov	r11, r8
    203c:	a3 2c       	mov	r10, r3
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <vfprintf+0x2d6>
    2040:	b8 2c       	mov	r11, r8
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <vfprintf+0x2d6>
    2044:	b9 2c       	mov	r11, r9
    2046:	a4 fe       	sbrs	r10, 4
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <vfprintf+0x2f8>
    204a:	fe 01       	movw	r30, r28
    204c:	e8 0d       	add	r30, r8
    204e:	f1 1d       	adc	r31, r1
    2050:	80 81       	ld	r24, Z
    2052:	80 33       	cpi	r24, 0x30	; 48
    2054:	21 f4       	brne	.+8      	; 0x205e <vfprintf+0x2ee>
    2056:	9a 2d       	mov	r25, r10
    2058:	99 7e       	andi	r25, 0xE9	; 233
    205a:	a9 2e       	mov	r10, r25
    205c:	09 c0       	rjmp	.+18     	; 0x2070 <vfprintf+0x300>
    205e:	a2 fe       	sbrs	r10, 2
    2060:	06 c0       	rjmp	.+12     	; 0x206e <vfprintf+0x2fe>
    2062:	b3 94       	inc	r11
    2064:	b3 94       	inc	r11
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <vfprintf+0x300>
    2068:	8a 2d       	mov	r24, r10
    206a:	86 78       	andi	r24, 0x86	; 134
    206c:	09 f0       	breq	.+2      	; 0x2070 <vfprintf+0x300>
    206e:	b3 94       	inc	r11
    2070:	a3 fc       	sbrc	r10, 3
    2072:	11 c0       	rjmp	.+34     	; 0x2096 <vfprintf+0x326>
    2074:	a0 fe       	sbrs	r10, 0
    2076:	06 c0       	rjmp	.+12     	; 0x2084 <vfprintf+0x314>
    2078:	b2 14       	cp	r11, r2
    207a:	88 f4       	brcc	.+34     	; 0x209e <vfprintf+0x32e>
    207c:	28 0c       	add	r2, r8
    207e:	92 2c       	mov	r9, r2
    2080:	9b 18       	sub	r9, r11
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <vfprintf+0x330>
    2084:	b2 14       	cp	r11, r2
    2086:	60 f4       	brcc	.+24     	; 0x20a0 <vfprintf+0x330>
    2088:	b6 01       	movw	r22, r12
    208a:	80 e2       	ldi	r24, 0x20	; 32
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    2092:	b3 94       	inc	r11
    2094:	f7 cf       	rjmp	.-18     	; 0x2084 <vfprintf+0x314>
    2096:	b2 14       	cp	r11, r2
    2098:	18 f4       	brcc	.+6      	; 0x20a0 <vfprintf+0x330>
    209a:	2b 18       	sub	r2, r11
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <vfprintf+0x332>
    209e:	98 2c       	mov	r9, r8
    20a0:	21 2c       	mov	r2, r1
    20a2:	a4 fe       	sbrs	r10, 4
    20a4:	10 c0       	rjmp	.+32     	; 0x20c6 <vfprintf+0x356>
    20a6:	b6 01       	movw	r22, r12
    20a8:	80 e3       	ldi	r24, 0x30	; 48
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    20b0:	a2 fe       	sbrs	r10, 2
    20b2:	17 c0       	rjmp	.+46     	; 0x20e2 <vfprintf+0x372>
    20b4:	a1 fc       	sbrc	r10, 1
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <vfprintf+0x34e>
    20b8:	88 e7       	ldi	r24, 0x78	; 120
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vfprintf+0x352>
    20be:	88 e5       	ldi	r24, 0x58	; 88
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	b6 01       	movw	r22, r12
    20c4:	0c c0       	rjmp	.+24     	; 0x20de <vfprintf+0x36e>
    20c6:	8a 2d       	mov	r24, r10
    20c8:	86 78       	andi	r24, 0x86	; 134
    20ca:	59 f0       	breq	.+22     	; 0x20e2 <vfprintf+0x372>
    20cc:	a1 fe       	sbrs	r10, 1
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <vfprintf+0x364>
    20d0:	8b e2       	ldi	r24, 0x2B	; 43
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <vfprintf+0x366>
    20d4:	80 e2       	ldi	r24, 0x20	; 32
    20d6:	a7 fc       	sbrc	r10, 7
    20d8:	8d e2       	ldi	r24, 0x2D	; 45
    20da:	b6 01       	movw	r22, r12
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    20e2:	89 14       	cp	r8, r9
    20e4:	38 f4       	brcc	.+14     	; 0x20f4 <vfprintf+0x384>
    20e6:	b6 01       	movw	r22, r12
    20e8:	80 e3       	ldi	r24, 0x30	; 48
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    20f0:	9a 94       	dec	r9
    20f2:	f7 cf       	rjmp	.-18     	; 0x20e2 <vfprintf+0x372>
    20f4:	8a 94       	dec	r8
    20f6:	f3 01       	movw	r30, r6
    20f8:	e8 0d       	add	r30, r8
    20fa:	f1 1d       	adc	r31, r1
    20fc:	80 81       	ld	r24, Z
    20fe:	b6 01       	movw	r22, r12
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    2106:	81 10       	cpse	r8, r1
    2108:	f5 cf       	rjmp	.-22     	; 0x20f4 <vfprintf+0x384>
    210a:	22 20       	and	r2, r2
    210c:	09 f4       	brne	.+2      	; 0x2110 <vfprintf+0x3a0>
    210e:	42 ce       	rjmp	.-892    	; 0x1d94 <vfprintf+0x24>
    2110:	b6 01       	movw	r22, r12
    2112:	80 e2       	ldi	r24, 0x20	; 32
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 af 10 	call	0x215e	; 0x215e <fputc>
    211a:	2a 94       	dec	r2
    211c:	f6 cf       	rjmp	.-20     	; 0x210a <vfprintf+0x39a>
    211e:	f6 01       	movw	r30, r12
    2120:	86 81       	ldd	r24, Z+6	; 0x06
    2122:	97 81       	ldd	r25, Z+7	; 0x07
    2124:	02 c0       	rjmp	.+4      	; 0x212a <vfprintf+0x3ba>
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	9f ef       	ldi	r25, 0xFF	; 255
    212a:	2b 96       	adiw	r28, 0x0b	; 11
    212c:	e2 e1       	ldi	r30, 0x12	; 18
    212e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__>

00002132 <strnlen_P>:
    2132:	fc 01       	movw	r30, r24
    2134:	05 90       	lpm	r0, Z+
    2136:	61 50       	subi	r22, 0x01	; 1
    2138:	70 40       	sbci	r23, 0x00	; 0
    213a:	01 10       	cpse	r0, r1
    213c:	d8 f7       	brcc	.-10     	; 0x2134 <strnlen_P+0x2>
    213e:	80 95       	com	r24
    2140:	90 95       	com	r25
    2142:	8e 0f       	add	r24, r30
    2144:	9f 1f       	adc	r25, r31
    2146:	08 95       	ret

00002148 <strnlen>:
    2148:	fc 01       	movw	r30, r24
    214a:	61 50       	subi	r22, 0x01	; 1
    214c:	70 40       	sbci	r23, 0x00	; 0
    214e:	01 90       	ld	r0, Z+
    2150:	01 10       	cpse	r0, r1
    2152:	d8 f7       	brcc	.-10     	; 0x214a <strnlen+0x2>
    2154:	80 95       	com	r24
    2156:	90 95       	com	r25
    2158:	8e 0f       	add	r24, r30
    215a:	9f 1f       	adc	r25, r31
    215c:	08 95       	ret

0000215e <fputc>:
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	fb 01       	movw	r30, r22
    2168:	23 81       	ldd	r18, Z+3	; 0x03
    216a:	21 fd       	sbrc	r18, 1
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <fputc+0x16>
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	9f ef       	ldi	r25, 0xFF	; 255
    2172:	2c c0       	rjmp	.+88     	; 0x21cc <fputc+0x6e>
    2174:	22 ff       	sbrs	r18, 2
    2176:	16 c0       	rjmp	.+44     	; 0x21a4 <fputc+0x46>
    2178:	46 81       	ldd	r20, Z+6	; 0x06
    217a:	57 81       	ldd	r21, Z+7	; 0x07
    217c:	24 81       	ldd	r18, Z+4	; 0x04
    217e:	35 81       	ldd	r19, Z+5	; 0x05
    2180:	42 17       	cp	r20, r18
    2182:	53 07       	cpc	r21, r19
    2184:	44 f4       	brge	.+16     	; 0x2196 <fputc+0x38>
    2186:	a0 81       	ld	r26, Z
    2188:	b1 81       	ldd	r27, Z+1	; 0x01
    218a:	9d 01       	movw	r18, r26
    218c:	2f 5f       	subi	r18, 0xFF	; 255
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	20 83       	st	Z, r18
    2192:	31 83       	std	Z+1, r19	; 0x01
    2194:	8c 93       	st	X, r24
    2196:	26 81       	ldd	r18, Z+6	; 0x06
    2198:	37 81       	ldd	r19, Z+7	; 0x07
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	26 83       	std	Z+6, r18	; 0x06
    21a0:	37 83       	std	Z+7, r19	; 0x07
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <fputc+0x6e>
    21a4:	8b 01       	movw	r16, r22
    21a6:	ec 01       	movw	r28, r24
    21a8:	fb 01       	movw	r30, r22
    21aa:	00 84       	ldd	r0, Z+8	; 0x08
    21ac:	f1 85       	ldd	r31, Z+9	; 0x09
    21ae:	e0 2d       	mov	r30, r0
    21b0:	09 95       	icall
    21b2:	89 2b       	or	r24, r25
    21b4:	e1 f6       	brne	.-72     	; 0x216e <fputc+0x10>
    21b6:	d8 01       	movw	r26, r16
    21b8:	16 96       	adiw	r26, 0x06	; 6
    21ba:	8d 91       	ld	r24, X+
    21bc:	9c 91       	ld	r25, X
    21be:	17 97       	sbiw	r26, 0x07	; 7
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	16 96       	adiw	r26, 0x06	; 6
    21c4:	8d 93       	st	X+, r24
    21c6:	9c 93       	st	X, r25
    21c8:	17 97       	sbiw	r26, 0x07	; 7
    21ca:	ce 01       	movw	r24, r28
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

000021d6 <__ultoa_invert>:
    21d6:	fa 01       	movw	r30, r20
    21d8:	aa 27       	eor	r26, r26
    21da:	28 30       	cpi	r18, 0x08	; 8
    21dc:	51 f1       	breq	.+84     	; 0x2232 <__ultoa_invert+0x5c>
    21de:	20 31       	cpi	r18, 0x10	; 16
    21e0:	81 f1       	breq	.+96     	; 0x2242 <__ultoa_invert+0x6c>
    21e2:	e8 94       	clt
    21e4:	6f 93       	push	r22
    21e6:	6e 7f       	andi	r22, 0xFE	; 254
    21e8:	6e 5f       	subi	r22, 0xFE	; 254
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	8f 4f       	sbci	r24, 0xFF	; 255
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	af 4f       	sbci	r26, 0xFF	; 255
    21f2:	b1 e0       	ldi	r27, 0x01	; 1
    21f4:	3e d0       	rcall	.+124    	; 0x2272 <__ultoa_invert+0x9c>
    21f6:	b4 e0       	ldi	r27, 0x04	; 4
    21f8:	3c d0       	rcall	.+120    	; 0x2272 <__ultoa_invert+0x9c>
    21fa:	67 0f       	add	r22, r23
    21fc:	78 1f       	adc	r23, r24
    21fe:	89 1f       	adc	r24, r25
    2200:	9a 1f       	adc	r25, r26
    2202:	a1 1d       	adc	r26, r1
    2204:	68 0f       	add	r22, r24
    2206:	79 1f       	adc	r23, r25
    2208:	8a 1f       	adc	r24, r26
    220a:	91 1d       	adc	r25, r1
    220c:	a1 1d       	adc	r26, r1
    220e:	6a 0f       	add	r22, r26
    2210:	71 1d       	adc	r23, r1
    2212:	81 1d       	adc	r24, r1
    2214:	91 1d       	adc	r25, r1
    2216:	a1 1d       	adc	r26, r1
    2218:	20 d0       	rcall	.+64     	; 0x225a <__ultoa_invert+0x84>
    221a:	09 f4       	brne	.+2      	; 0x221e <__ultoa_invert+0x48>
    221c:	68 94       	set
    221e:	3f 91       	pop	r19
    2220:	2a e0       	ldi	r18, 0x0A	; 10
    2222:	26 9f       	mul	r18, r22
    2224:	11 24       	eor	r1, r1
    2226:	30 19       	sub	r19, r0
    2228:	30 5d       	subi	r19, 0xD0	; 208
    222a:	31 93       	st	Z+, r19
    222c:	de f6       	brtc	.-74     	; 0x21e4 <__ultoa_invert+0xe>
    222e:	cf 01       	movw	r24, r30
    2230:	08 95       	ret
    2232:	46 2f       	mov	r20, r22
    2234:	47 70       	andi	r20, 0x07	; 7
    2236:	40 5d       	subi	r20, 0xD0	; 208
    2238:	41 93       	st	Z+, r20
    223a:	b3 e0       	ldi	r27, 0x03	; 3
    223c:	0f d0       	rcall	.+30     	; 0x225c <__ultoa_invert+0x86>
    223e:	c9 f7       	brne	.-14     	; 0x2232 <__ultoa_invert+0x5c>
    2240:	f6 cf       	rjmp	.-20     	; 0x222e <__ultoa_invert+0x58>
    2242:	46 2f       	mov	r20, r22
    2244:	4f 70       	andi	r20, 0x0F	; 15
    2246:	40 5d       	subi	r20, 0xD0	; 208
    2248:	4a 33       	cpi	r20, 0x3A	; 58
    224a:	18 f0       	brcs	.+6      	; 0x2252 <__ultoa_invert+0x7c>
    224c:	49 5d       	subi	r20, 0xD9	; 217
    224e:	31 fd       	sbrc	r19, 1
    2250:	40 52       	subi	r20, 0x20	; 32
    2252:	41 93       	st	Z+, r20
    2254:	02 d0       	rcall	.+4      	; 0x225a <__ultoa_invert+0x84>
    2256:	a9 f7       	brne	.-22     	; 0x2242 <__ultoa_invert+0x6c>
    2258:	ea cf       	rjmp	.-44     	; 0x222e <__ultoa_invert+0x58>
    225a:	b4 e0       	ldi	r27, 0x04	; 4
    225c:	a6 95       	lsr	r26
    225e:	97 95       	ror	r25
    2260:	87 95       	ror	r24
    2262:	77 95       	ror	r23
    2264:	67 95       	ror	r22
    2266:	ba 95       	dec	r27
    2268:	c9 f7       	brne	.-14     	; 0x225c <__ultoa_invert+0x86>
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	61 05       	cpc	r22, r1
    226e:	71 05       	cpc	r23, r1
    2270:	08 95       	ret
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	0a 2e       	mov	r0, r26
    2278:	06 94       	lsr	r0
    227a:	57 95       	ror	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	ba 95       	dec	r27
    2284:	c9 f7       	brne	.-14     	; 0x2278 <__ultoa_invert+0xa2>
    2286:	62 0f       	add	r22, r18
    2288:	73 1f       	adc	r23, r19
    228a:	84 1f       	adc	r24, r20
    228c:	95 1f       	adc	r25, r21
    228e:	a0 1d       	adc	r26, r0
    2290:	08 95       	ret

00002292 <eeprom_read_block>:
    2292:	60 50       	subi	r22, 0x00	; 0
    2294:	7c 4e       	sbci	r23, 0xEC	; 236
    2296:	0c 94 b5 11 	jmp	0x236a	; 0x236a <memcpy>

0000229a <eeprom_read_byte>:
    229a:	03 d0       	rcall	.+6      	; 0x22a2 <eeprom_mapen>
    229c:	80 81       	ld	r24, Z
    229e:	99 27       	eor	r25, r25
    22a0:	08 95       	ret

000022a2 <eeprom_mapen>:
    22a2:	fc 01       	movw	r30, r24
    22a4:	e0 50       	subi	r30, 0x00	; 0
    22a6:	fc 4e       	sbci	r31, 0xEC	; 236
    22a8:	08 95       	ret

000022aa <eeprom_update_block>:
    22aa:	dc 01       	movw	r26, r24
    22ac:	a4 0f       	add	r26, r20
    22ae:	b5 1f       	adc	r27, r21
    22b0:	41 50       	subi	r20, 0x01	; 1
    22b2:	50 40       	sbci	r21, 0x00	; 0
    22b4:	48 f0       	brcs	.+18     	; 0x22c8 <eeprom_update_block+0x1e>
    22b6:	cb 01       	movw	r24, r22
    22b8:	84 0f       	add	r24, r20
    22ba:	95 1f       	adc	r25, r21
    22bc:	2e 91       	ld	r18, -X
    22be:	0e 94 66 11 	call	0x22cc	; 0x22cc <eeprom_update_r18>
    22c2:	41 50       	subi	r20, 0x01	; 1
    22c4:	50 40       	sbci	r21, 0x00	; 0
    22c6:	d0 f7       	brcc	.-12     	; 0x22bc <eeprom_update_block+0x12>
    22c8:	08 95       	ret

000022ca <eeprom_update_byte>:
    22ca:	26 2f       	mov	r18, r22

000022cc <eeprom_update_r18>:
    22cc:	0e 94 51 11 	call	0x22a2	; 0x22a2 <eeprom_mapen>
    22d0:	00 80       	ld	r0, Z
    22d2:	02 16       	cp	r0, r18
    22d4:	19 f0       	breq	.+6      	; 0x22dc <eeprom_update_r18+0x10>
    22d6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <eeprom_write_r18>
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	08 95       	ret

000022e0 <eeprom_write_byte>:
    22e0:	26 2f       	mov	r18, r22

000022e2 <eeprom_write_r18>:
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	e0 e0       	ldi	r30, 0x00	; 0
    22e8:	f0 e1       	ldi	r31, 0x10	; 16
    22ea:	32 81       	ldd	r19, Z+2	; 0x02
    22ec:	31 fd       	sbrc	r19, 1
    22ee:	fd cf       	rjmp	.-6      	; 0x22ea <eeprom_write_r18+0x8>
    22f0:	dc 01       	movw	r26, r24
    22f2:	a0 50       	subi	r26, 0x00	; 0
    22f4:	bc 4e       	sbci	r27, 0xEC	; 236
    22f6:	2c 93       	st	X, r18
    22f8:	2d e9       	ldi	r18, 0x9D	; 157
    22fa:	24 bf       	out	0x34, r18	; 52
    22fc:	23 e0       	ldi	r18, 0x03	; 3
    22fe:	20 83       	st	Z, r18
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	bf 91       	pop	r27
    2304:	af 91       	pop	r26
    2306:	08 95       	ret

00002308 <__prologue_saves__>:
    2308:	2f 92       	push	r2
    230a:	3f 92       	push	r3
    230c:	4f 92       	push	r4
    230e:	5f 92       	push	r5
    2310:	6f 92       	push	r6
    2312:	7f 92       	push	r7
    2314:	8f 92       	push	r8
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	ca 1b       	sub	r28, r26
    2332:	db 0b       	sbc	r29, r27
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	09 94       	ijmp

0000233a <__epilogue_restores__>:
    233a:	2a 88       	ldd	r2, Y+18	; 0x12
    233c:	39 88       	ldd	r3, Y+17	; 0x11
    233e:	48 88       	ldd	r4, Y+16	; 0x10
    2340:	5f 84       	ldd	r5, Y+15	; 0x0f
    2342:	6e 84       	ldd	r6, Y+14	; 0x0e
    2344:	7d 84       	ldd	r7, Y+13	; 0x0d
    2346:	8c 84       	ldd	r8, Y+12	; 0x0c
    2348:	9b 84       	ldd	r9, Y+11	; 0x0b
    234a:	aa 84       	ldd	r10, Y+10	; 0x0a
    234c:	b9 84       	ldd	r11, Y+9	; 0x09
    234e:	c8 84       	ldd	r12, Y+8	; 0x08
    2350:	df 80       	ldd	r13, Y+7	; 0x07
    2352:	ee 80       	ldd	r14, Y+6	; 0x06
    2354:	fd 80       	ldd	r15, Y+5	; 0x05
    2356:	0c 81       	ldd	r16, Y+4	; 0x04
    2358:	1b 81       	ldd	r17, Y+3	; 0x03
    235a:	aa 81       	ldd	r26, Y+2	; 0x02
    235c:	b9 81       	ldd	r27, Y+1	; 0x01
    235e:	ce 0f       	add	r28, r30
    2360:	d1 1d       	adc	r29, r1
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	ed 01       	movw	r28, r26
    2368:	08 95       	ret

0000236a <memcpy>:
    236a:	fb 01       	movw	r30, r22
    236c:	dc 01       	movw	r26, r24
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <memcpy+0xa>
    2370:	01 90       	ld	r0, Z+
    2372:	0d 92       	st	X+, r0
    2374:	41 50       	subi	r20, 0x01	; 1
    2376:	50 40       	sbci	r21, 0x00	; 0
    2378:	d8 f7       	brcc	.-10     	; 0x2370 <memcpy+0x6>
    237a:	08 95       	ret

0000237c <_exit>:
    237c:	f8 94       	cli

0000237e <__stop_program>:
    237e:	ff cf       	rjmp	.-2      	; 0x237e <__stop_program>
